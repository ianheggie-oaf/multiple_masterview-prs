---
http_interactions:
- request:
    method: get
    uri: https://datracker.burwood.nsw.gov.au/Application/ApplicationDetails/010.2024.00000059.002
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - datracker.burwood.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 302
      message: Found
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Home/Disclaimer"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      Set-Cookie:
      - ASP.NET_SessionId=itj0d530uyq3g2cocwknldch; path=/; HttpOnly; SameSite=Lax
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 17:13:42 GMT
      Content-Length:
      - '133'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Home/Disclaimer\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 17:13:42 GMT
- request:
    method: get
    uri: https://datracker.burwood.nsw.gov.au/Home/Disclaimer
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=itj0d530uyq3g2cocwknldch
      Host:
      - datracker.burwood.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 17:13:44 GMT
      Content-Length:
      - '13592'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 17:13:44 GMT
- request:
    method: post
    uri: https://datracker.burwood.nsw.gov.au/Home/DisclaimerProcessing
    body:
      encoding: UTF-8
      string: agreed=true
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=itj0d530uyq3g2cocwknldch
      Host:
      - datracker.burwood.nsw.gov.au
      Referer:
      - https://datracker.burwood.nsw.gov.au/Home/Disclaimer
      Content-Type:
      - application/x-www-form-urlencoded
      Content-Length:
      - '11'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Application/ApplicationDetails/010.2024.00000059.002"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      Set-Cookie:
      - User=accessAllowed-MasterView=True; path=/
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 17:13:44 GMT
      Content-Length:
      - '170'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Application/ApplicationDetails/010.2024.00000059.002\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 17:13:44 GMT
- request:
    method: get
    uri: https://datracker.burwood.nsw.gov.au/Application/ApplicationDetails/010.2024.00000059.002
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=itj0d530uyq3g2cocwknldch; User=accessAllowed-MasterView=True
      Host:
      - datracker.burwood.nsw.gov.au
      Referer:
      - https://datracker.burwood.nsw.gov.au/Home/Disclaimer
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 17:13:56 GMT
      Content-Length:
      - '27483'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 17:13:56 GMT
- request:
    method: get
    uri: https://datracker.burwood.nsw.gov.au/Application/ApplicationDetails/010.2024.00000059.002
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=itj0d530uyq3g2cocwknldch; User=accessAllowed-MasterView=True
      Host:
      - datracker.burwood.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 17:13:56 GMT
      Content-Length:
      - '27483'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 17:13:56 GMT
- request:
    method: get
    uri: https://datracker.burwood.nsw.gov.au/Application/ApplicationDetails/010.2025.00000003.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - datracker.burwood.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 302
      message: Found
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Home/Disclaimer"
      Server:
      - Microsoft-IIS/10.0
      Set-Cookie:
      - ASP.NET_SessionId=0pfgbq1vvidrisofuz0bjqjh; path=/; HttpOnly; SameSite=Lax
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 17:13:56 GMT
      Content-Length:
      - '133'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Home/Disclaimer\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 17:13:57 GMT
- request:
    method: get
    uri: https://datracker.burwood.nsw.gov.au/Home/Disclaimer
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=0pfgbq1vvidrisofuz0bjqjh
      Host:
      - datracker.burwood.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 17:13:56 GMT
      Content-Length:
      - '13592'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 17:13:57 GMT
- request:
    method: post
    uri: https://datracker.burwood.nsw.gov.au/Home/DisclaimerProcessing
    body:
      encoding: UTF-8
      string: agreed=true
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=0pfgbq1vvidrisofuz0bjqjh
      Host:
      - datracker.burwood.nsw.gov.au
      Referer:
      - https://datracker.burwood.nsw.gov.au/Home/Disclaimer
      Content-Type:
      - application/x-www-form-urlencoded
      Content-Length:
      - '11'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Application/ApplicationDetails/010.2025.00000003.001"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      Set-Cookie:
      - User=accessAllowed-MasterView=True; path=/
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 17:13:56 GMT
      Content-Length:
      - '170'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Application/ApplicationDetails/010.2025.00000003.001\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 17:13:57 GMT
- request:
    method: get
    uri: https://datracker.burwood.nsw.gov.au/Application/ApplicationDetails/010.2025.00000003.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=0pfgbq1vvidrisofuz0bjqjh; User=accessAllowed-MasterView=True
      Host:
      - datracker.burwood.nsw.gov.au
      Referer:
      - https://datracker.burwood.nsw.gov.au/Home/Disclaimer
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 17:13:58 GMT
      Content-Length:
      - '35358'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQo8aHRtbCBsYW5nPSJlbiI+DQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+DQogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4NCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPg0KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIj4NCiAgICA8bWV0YSBuYW1lPSJrZXl3b3JkcyIgY29udGVudD0iQnVyd29vZCBDb3VuY2lsLERBIFRyYWNrZXIsRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24sRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24gVHJhY2tpbmcsIERBIEVucXVpcnksIERldmVsb3BtZW50IEFwcGxpY2F0aW9uIEVucXVpcnksIEFwcGxpY2F0aW9uIFRyYWNrZXIiPg0KICAgIDxtZXRhIG5hbWU9ImRlc2NyaXB0aW9uIiBjb250ZW50PSJUaGUgb2ZmaWNpYWwgQnVyd29vZCBSZWdpb25hbCBDb3VuY2lsIEFwcGxpY2F0aW9uIFRyYWNrZXIiPg0KDQogICAgPHRpdGxlPkJ1cndvb2QgQ291bmNpbCAtIEFwcGxpY2F0aW9uIFRyYWNrZXI8L3RpdGxlPg0KDQogICAgPCEtLWZhdmljb24tLT4NCiAgICA8bGluayBocmVmPSIvZmF2aWNvbi5pY28iIHJlbD0ic2hvcnRjdXQgaWNvbiIgdHlwZT0iaW1hZ2UveC1pY29uIj4NCg0KICAgIDwhLS0galF1ZXJ5IC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvU2NyaXB0cy9qcXVlcnktMS4xMS4xLmpzIj48L3NjcmlwdD4NCg0KICAgIDxzY3JpcHQgc3JjPSIvU2NyaXB0cy9qcXVlcnktdWktMS4xMS4yLmpzIj48L3NjcmlwdD4NCg0KICAgIDxsaW5rIGhyZWY9Ii9Db250ZW50L3RoZW1lcy9iYXNlL2NvcmUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9Db250ZW50L3RoZW1lcy9iYXNlL2FjY29yZGlvbi5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvdGhlbWUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPCEtLSBCb290c3RyYXAgLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2Jvb3RzdHJhcC5qcyI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9ib290c3RyYXAtdGhlbWUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9Db250ZW50L2Jvb3RzdHJhcC5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQogICAgPGxpbmsgaHJlZj0iL0NvbnRlbnQvZm9udC1hd2Vzb21lLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDwhLS0gRGF0YVRhYmxlcyAtLT4NCiAgICA8c2NyaXB0IHNyYz0iL1NjcmlwdHMvRGF0YVRhYmxlcy9qcXVlcnkuZGF0YVRhYmxlcy5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL1NjcmlwdHMvRGF0YVRhYmxlcy9kYXRhVGFibGVzLmJvb3RzdHJhcC5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL1NjcmlwdHMvRGF0YVRhYmxlcy9kYXRhVGFibGVzLnJlc3BvbnNpdmUuanMiPjwvc2NyaXB0Pg0KDQogICAgDQogICAgPGxpbmsgaHJlZj0iL0NvbnRlbnQvRGF0YVRhYmxlcy9jc3MvZGF0YVRhYmxlcy5ib290c3RyYXAuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9Db250ZW50L0RhdGFUYWJsZXMvY3NzL2RhdGFUYWJsZXMucmVzcG9uc2l2ZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvRGF0YVRhYmxlcy9jc3MvZGF0YVRhYmxlcy5yZXNwb25zaXZlLnNjc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQoNCiAgICA8IS0tIEJvb3RzdHJhcCBTQi1BZG1pbi0yIFBsdWdpbiBhbmQgb3RoZXIgY3NzIGFuZCBqcyBmaWxlcy0tPg0KICAgIDxzY3JpcHQgc3JjPSIvanMvYm9vdHN0cmFwLWNvbWJvYm94LmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvYm9vdHN0cmFwLWRhdGVwaWNrZXIuanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9qcy9ib290c3RyYXAtZGlhbG9nLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvanF1ZXJ5LmZvcm0uanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9qcy9qcXVlcnkudGFibGVzb3J0ZXIuanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9qcy9tYXN0ZXJ2aWV3LmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvbWV0aXNNZW51LmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvc2ItYWRtaW4tMi5qcyI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvY3NzL2Jvb3RzdHJhcC1jb21ib2JveC5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL2Nzcy9kYXRlcGlja2VyMy5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL2Nzcy9tYXN0ZXJ2aWV3LWN1c3RvbWlzYXRpb25zLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvY3NzL3NiLWFkbWluLTIuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPGxpbmsgaHJlZj0iL0NvdW5jaWxfVGhlbWUvQnVyd29vZC9idXJ3b29kLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICANCg0KICAgIDwhLS0gSFRNTDUgU2hpbSBhbmQgUmVzcG9uZC5qcyBJRTggc3VwcG9ydCBvZiBIVE1MNSBlbGVtZW50cyBhbmQgbWVkaWEgcXVlcmllcyAtLT4NCiAgICA8IS0tIFdBUk5JTkc6IFJlc3BvbmQuanMgZG9lc24ndCB3b3JrIGlmIHlvdSB2aWV3IHRoZSBwYWdlIHZpYSBmaWxlOi8vIC0tPg0KICAgIDwhLS1baWYgbHQgSUUgOV0+DQogICAgICAgIDxzY3JpcHQgc3JjPSJodHRwczovL29zcy5tYXhjZG4uY29tL2xpYnMvaHRtbDVzaGl2LzMuNy4wL2h0bWw1c2hpdi5qcyI+PC9zY3JpcHQ+DQogICAgICAgIDxzY3JpcHQgc3JjPSJodHRwczovL29zcy5tYXhjZG4uY29tL2xpYnMvcmVzcG9uZC5qcy8xLjQuMi9yZXNwb25kLm1pbi5qcyI+PC9zY3JpcHQ+DQogICAgPCFbZW5kaWZdLS0+DQo8L2hlYWQ+DQoNCg0KDQo8Ym9keT4NCiAgICA8ZGl2IGNsYXNzPSJwdXNobWVudSBjYnAtc3BtZW51LXB1c2giPg0KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPg0KICAgICAgICAgICAgPGhlYWRlciBpZD0iSGVhZGVyIj4NCiAgICAgICAgICAgICAgICA8bmF2IGNsYXNzPSJuYXZiYXIgbmF2YmFyLWRlZmF1bHQiIHJvbGU9Im5hdmlnYXRpb24iIGlkPSJOYXZCYXIiPg0KICAgICAgICAgICAgICAgICAgICA8IS0tIEJyYW5kIGFuZCB0b2dnbGUgZ2V0IGdyb3VwZWQgZm9yIGJldHRlciBtb2JpbGUgZGlzcGxheSAtLT4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibmF2YmFyLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ1dGlscyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSJodHRwOi8vd3d3LkJ1cndvb2QubnN3Lmdvdi5hdSI+SG9tZTwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cDovL3d3dy5CdXJ3b29kLm5zdy5nb3YuYXUvY29udGFjdF91cy5odG1sIj5Db250YWN0IFVzPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGgxIGlkPSJsb2dvIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3LkJ1cndvb2QubnN3Lmdvdi5hdSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvQ291bmNpbF9UaGVtZS9CdXJ3b29kL0J1cndvb2RDb3VuY2lsbG9nb1NNLnBuZyIgYWx0PSJCdXJ3b29kIFJlZ2lvbmFsIENvdW5jaWwiPjxzdHJvbmcgY2xhc3M9InZoIj5CdXJ3b29kIFJlZ2lvbmFsIENvdW5jaWw8L3N0cm9uZz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2gxPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L25hdj4NCiAgICAgICAgICAgIDwvaGVhZGVyPg0KDQogICAgICAgICAgICA8ZGl2IGlkPSJjb250ZW50Ij4NCiAgICAgICAgICAgICAgICA8IS0tIE5hdmlnYXRpb24gLS0+DQogICAgICAgICAgICAgICAgPG5hdiBjbGFzcz0ibmF2YmFyIG5hdmJhci1kZWZhdWx0IG5hdmJhci1zdGF0aWMtdG9wIiByb2xlPSJuYXZpZ2F0aW9uIiBzdHlsZT0ibWFyZ2luLWJvdHRvbTogMCI+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJuYXZiYXItdG9nZ2xlIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtdGFyZ2V0PSIubmF2YmFyLWNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3Itb25seSI+VG9nZ2xlIG5hdmlnYXRpb248L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tYmFyIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tYmFyIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tYmFyIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXZiYXItYnJhbmQiIGhyZWY9Ii9Ib21lL0luZGV4Ij48L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLWhlYWRlciAtLT4NCiAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2YmFyLXRvcC1saW5rcyBuYXZiYXItcmlnaHQgaGlkZGVuLXhzIGhpZGRlbi1zbSBoaWRkZW4tbWQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxzcGFuIGlkPSJwcmludEljb24iIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXByaW50IiBvbmNsaWNrPSJ3aW5kb3cucHJpbnQoKTsiPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICA8L3VsPg0KDQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1kZWZhdWx0IHNpZGViYXIiIHJvbGU9Im5hdmlnYXRpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2lkZWJhci1uYXYgbmF2YmFyLWNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiIgaWQ9InNpZGUtbWVudSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY3RpdmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48aSBjbGFzcz0iZmEgZmEtbGlzdC11bCBmYS1mdyI+PC9pPkFwcGxpY2F0aW9uIFRyYWNrZXI8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdi1zZWNvbmQtbGV2ZWwgY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9BYm91dCB0YXJnZXQ9X3NlbGY+V2hhdCBpcyBBcHBsaWNhdGlvbiBUcmFja2VyPzwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9EaXNjbGFpbWVyIHRhcmdldD1fc2VsZj5EaXNjbGFpbWVyPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gLy5uYXYtc2Vjb25kLWxldmVsIC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY3RpdmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48aSBjbGFzcz0iZmEgZmEtbGlzdC11bCBmYS1mdyI+PC9pPkFwcGxpY2F0aW9uczxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL0luZGV4IHRhcmdldD0+QXBwbGljYXRpb24gVHJhY2tlciBIb21lPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL1NlYXJjaCBpZD1zZWFyY2ggdGFyZ2V0PV9zZWxmPlNlYXJjaDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/UmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1UcnVlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSBpZD1vdXRzdGFuZGluZy1hcHBzIHRhcmdldD1fc2VsZj5VbmRldGVybWluZWQgQXBwbGljYXRpb25zPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9SZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9VHJ1ZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIGlkPWV4aGliaXRlZC1hcHBzIHRhcmdldD1fc2VsZj5BcHBsaWNhdGlvbnMgT24gRXhoaWJpdGlvbjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbnMgU3VibWl0dGVkPHNwYW4gY2xhc3M9ImZhIGFycm93Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXYtc2Vjb25kLWxldmVsIGNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTIxJTJmMDQlMmYyMDI1JkRhdGVUbz0yMiUyZjA0JTJmMjAyNSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPlRoaXMgV2VlazwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MTMlMmYwNCUyZjIwMjUmRGF0ZVRvPTE5JTJmMDQlMmYyMDI1JkRhdGVUeXBlPTEmUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBXZWVrPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDQlMmYyMDI1JkRhdGVUbz0yMiUyZjA0JTJmMjAyNSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPlRoaXMgTW9udGg8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTElMmYwMyUyZjIwMjUmRGF0ZVRvPTMxJTJmMDMlMmYyMDI1JkRhdGVUeXBlPTEmUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbnMgRGV0ZXJtaW5lZDxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0yMSUyZjA0JTJmMjAyNSZEYXRlVG89MjIlMmYwNCUyZjIwMjUmRGF0ZVR5cGU9MiZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9VHJ1ZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPlRoaXMgV2VlazwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MTMlMmYwNCUyZjIwMjUmRGF0ZVRvPTE5JTJmMDQlMmYyMDI1JkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5MYXN0IFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTElMmYwNCUyZjIwMjUmRGF0ZVRvPTIyJTJmMDQlMmYyMDI1JkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIE1vbnRoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDMlMmYyMDI1JkRhdGVUbz0zMSUyZjAzJTJmMjAyNSZEYXRlVHlwZT0yJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1UcnVlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLnNpZGViYXItY29sbGFwc2UgLS0+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLXN0YXRpYy1zaWRlIC0tPg0KICAgICAgICAgICAgICAgIDwvbmF2Pg0KICAgICAgICAgICAgICAgIDxkaXYgaWQ9InBhZ2Utd3JhcHBlciI+DQoNCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyLWZsdWlkIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgDQoNCg0KICAgIDxkaXYgY2xhc3M9InBhZ2UtaGVhZGVyIj4NCiAgICAgICAgPGgyPkFwcGxpY2F0aW9uOiBEZXZlbG9wbWVudCBBcHBsaWNhdGlvbiAoMTAuMjAyNS4zLjEpPC9oMj4NCiAgICA8L2Rpdj4NCiAgICA8aDQ+RGV0YWlsZWQgaW5mb3JtYXRpb24gcmVsYXRlZCB0byB0aGUgYXBwbGljYXRpb246PC9oND4NCiAgICA8YnIgLz4NCiAgICA8ZGl2Pg0KICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnNob3dBbGwoKTsiPlNob3cgQWxsPC9hPiAvDQogICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6aGlkZUFsbCgpOyI+SGlkZSBBbGw8L2E+DQogICAgPC9kaXY+DQogICAgPGRpdiBpZD0iYXBwbGljYXRpb24iPg0KDQogICAgICAgICAgICA8aDMgaWQ9ImRldGFpbHMiPjxhIGhyZWY9IiMiPkRldGFpbHM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRlc2NyaXB0aW9uOiA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBpZD0iZGVzY3JpcHRpb24iPkRlbW9saXRpb24gb2YgZXhpc3Rpbmcgc3RydWN0dXJlcyBhbmQgY29uc3RydWN0aW9uIG9mIGFuIDggc3RvcmV5IGNvIGxpdmluZyBkZXZlbG9wbWVudCB3aXRoIGJhc2VtZW50IGNhciBwYXJraW5nLjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5TdWJtaXR0ZWQgRGF0ZTogPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoxNi8wMS8yMDI1ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5BcHBsaWNhdGlvbiBUeXBlOiA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5EZXZlbG9wbWVudCBBcHBsaWNhdGlvbjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJwcm9wZXJ0aWVzIj48YSBocmVmPSIjIj5Qcm9wZXJ0aWVzPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBpZD0icHJvcGVydHktbGlzdCI+NjQgV2VudHdvcnRoIFJkLCBCdXJ3b29kIDIxMzQgTlNXICAoTG90OiBZIERQOiA0MDAwMTEpPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9InBlb3BsZSI+PGEgaHJlZj0iIyI+UGVvcGxlPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXBwbGljYW50OiAgDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUHJpbmNpcGFsIENlcnRpZnlpbmcgQXV0aG9yaXR5OiAgDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJvZmZpY2VyIj48YSBocmVmPSIjIj5PZmZpY2VyPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBpZD0ib2ZmaWNlck5hbWUiPkp1bGlhbiBTY2lhcnJvbmU8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0iZGVjaXNpb24iPjxhIGhyZWY9IiMiPkRlY2lzaW9uPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5BcHBsaWNhdGlvbiBTdGF0dXM6IEluIFByb2dyZXNzPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRldGVybWluYXRpb24gVHlwZTogUGVuZGluZzwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJlc3RpbWF0ZWRDb3N0Ij48YSBocmVmPSIjIj5Fc3RpbWF0ZWQgQ29zdDwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+JDQsMzc5LDUyNy4wMDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJ0cmFja2luZyI+PGEgaHJlZj0iIyI+VHJhY2tpbmc8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24td3JhcCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5zd2lwZSB0YWJsZSB0byB0aGUgbGVmdCB0byByZXZlYWwgbW9yZSBkYXRhPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tYXJyb3ctcmlnaHQiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtYm9yZGVyZWQgbm8tZm9vdGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5EZXNjcmlwdGlvbjwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Db21tZW5jZWQgRGF0ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Db21wbGV0ZWQgRGF0ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5SZWZlciB0byBUcmFmZmljIEVuZ2luZWVyPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI5LzAxLzIwMjUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyNi8wMi8yMDI1ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlJlZmVyIHRvIFRyZWUgTWFuYWdlbWVudDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyOS8wMS8yMDI1ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMzEvMDEvMjAyNSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5SZWZlciB0byBIZWFsdGggU2VjdGlvbjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyOS8wMS8yMDI1ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlJlZmVyIHRvIEVuZ2luZWVyaW5nIChHZW5lcmFsKTwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyOS8wMS8yMDI1ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KDQoNCg0KDQogICAgICAgICAgICA8aDMgaWQ9InJlbGF0ZWRBcHBsaWNhdGlvbnMiPjxhIGhyZWY9IiMiPlJlbGF0ZWQgQXBwbGljYXRpb25zPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8Yj5ObyBkYXRhLjwvYj4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQoNCg0KDQoNCg0KDQo8aDMgaWQ9ImRvY3VtZW50cyI+PGEgaHJlZj0iIyI+RG9jdW1lbnRzPC9hPjwvaDM+DQo8ZGl2Pg0KDQogICAgICAgIDxkaXYgY2xhc3M9Imljb24td3JhcCI+DQogICAgICAgICAgICA8c3Bhbj5zd2lwZSB0YWJsZSB0byB0aGUgbGVmdCB0byByZXZlYWwgbW9yZSBkYXRhPC9zcGFuPg0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tYXJyb3ctcmlnaHQiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L3NwYW4+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8ZGl2IGlkPSJkb2MtY291bnQiPlRvdGFsIG51bWJlciBvZiBkb2N1bWVudHM6IDEzPC9kaXY+DQogICAgICAgIDx0YWJsZSBpZD0iZG9jLXRhYmxlIiBjbGFzcz0idGFibGUgdGFibGUtc3RyaXBlZCB0YWJsZS1ib3JkZXJlZCBuby1mb290ZXIiPg0KICAgICAgICAgICAgPHRoZWFkPg0KICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgPHRoPlJlY29yZCBOdW1iZXI8L3RoPg0KICAgICAgICAgICAgICAgICAgICA8dGg+RGVzY3JpcHRpb248L3RoPg0KICAgICAgICAgICAgICAgICAgICA8dGg+RG9jdW1lbnQgVHlwZTwvdGg+DQogICAgICAgICAgICAgICAgICAgIDx0aD5TaXplPC90aD4NCiAgICAgICAgICAgICAgICAgICAgPHRoPlZpZXcgTGluazwvdGg+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgIDwvdGhlYWQ+DQogICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyNS8zNTUyICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+QWNjZXNzIFJldmlldyBSZXBvcnQgLSA2NCBXZW50d29ydGggUm9hZCBCdXJ3b29kIC0gREEuMjAyNS4zPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgUERGDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAyLjEzIE1CDQoNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHJvbGU9ImJ1dHRvbiIgaHJlZj0iaHR0cHM6Ly9kYXRyYWNrZXIuYnVyd29vZC5uc3cuZ292LmF1L0RvY3VtZW50L0Rvd25sb2FkP2tleT15VG1VcFhTcFp6Zz0mYW1wO2ZpbGVOYW1lPUFjY2VzcytSZXZpZXcrUmVwb3J0Ky0rNjQrV2VudHdvcnRoK1JvYWQrQnVyd29vZCstK0RBLjIwMjUuMy5QREYiIHRhcmdldD0iX2JsYW5rIj5WaWV3PC9hPjwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI1LzM1NTQgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD5DcmltZSBQcmV2ZW50aW9uIFRocm91Z2ggRW52aXJvbm1lbnRhbCBEZXNpZ24gUmVwb3J0IC0gNjQgV2VudHdvcnRoIFJvYWQgQnVyd29vZCAtIERBLjIwMjUuMzwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIFBERg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgMi45MyBNQg0KDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD48YSBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiByb2xlPSJidXR0b24iIGhyZWY9Imh0dHBzOi8vZGF0cmFja2VyLmJ1cndvb2QubnN3Lmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9S2tUM3M0RGFNYnc9JmFtcDtmaWxlTmFtZT1DcmltZStQcmV2ZW50aW9uK1Rocm91Z2grRW52aXJvbm1lbnRhbCtEZXNpZ24rUmVwb3J0Ky0rNjQrV2VudHdvcnRoK1JvYWQrQnVyd29vZCstK0RBLjIwMjUuMy5QREYiIHRhcmdldD0iX2JsYW5rIj5WaWV3PC9hPjwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI1LzM1NTggICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD5QcmVsaW1pbmFyeSBHZW90ZWNobmljYWwgUmVwb3J0IC0gNjQgV2VudHdvcnRoIFJvYWQgQnVyd29vZCAtIERBLjIwMjUuMzwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIFBERg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgNy4xMCBNQg0KDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD48YSBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiByb2xlPSJidXR0b24iIGhyZWY9Imh0dHBzOi8vZGF0cmFja2VyLmJ1cndvb2QubnN3Lmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9UmcwaDY4MmhpYVU9JmFtcDtmaWxlTmFtZT1QcmVsaW1pbmFyeStHZW90ZWNobmljYWwrUmVwb3J0Ky0rNjQrV2VudHdvcnRoK1JvYWQrQnVyd29vZCstK0RBLjIwMjUuMy5QREYiIHRhcmdldD0iX2JsYW5rIj5WaWV3PC9hPjwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI1LzM1NjggICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD5OQ0MgMjAyMiBTZWN0aW9uIEogUmVwb3J0IERUUyAtIDY0IFdlbnR3b3J0aCBSb2FkIEJ1cndvb2QgLSBEQS4yMDI1LjM8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICBQREYNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDMuNDQgTUINCg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+PGEgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgcm9sZT0iYnV0dG9uIiBocmVmPSJodHRwczovL2RhdHJhY2tlci5idXJ3b29kLm5zdy5nb3YuYXUvRG9jdW1lbnQvRG93bmxvYWQ/a2V5PU50QlNEYXlOcnVzPSZhbXA7ZmlsZU5hbWU9TkNDKzIwMjIrU2VjdGlvbitKK1JlcG9ydCtEVFMrLSs2NCtXZW50d29ydGgrUm9hZCtCdXJ3b29kKy0rREEuMjAyNS4zLlBERiIgdGFyZ2V0PSJfYmxhbmsiPlZpZXc8L2E+PC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjUvMzU3NiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPlBsYW4gb2YgTWFuYWdlbWVudCAtIDY0IFdlbnR3b3J0aCBSb2FkIEJ1cndvb2QgLSBEQS4yMDI1LjM8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICBQREYNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDMuMTUgTUINCg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+PGEgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgcm9sZT0iYnV0dG9uIiBocmVmPSJodHRwczovL2RhdHJhY2tlci5idXJ3b29kLm5zdy5nb3YuYXUvRG9jdW1lbnQvRG93bmxvYWQ/a2V5PUh4Q0hnUTVvbElzPSZhbXA7ZmlsZU5hbWU9UGxhbitvZitNYW5hZ2VtZW50Ky0rNjQrV2VudHdvcnRoK1JvYWQrQnVyd29vZCstK0RBLjIwMjUuMy5QREYiIHRhcmdldD0iX2JsYW5rIj5WaWV3PC9hPjwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI1LzM1NzggICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD5XYXN0ZSBNYW5hZ2VtZW50IFJlcG9ydCAtIDY0IFdlbnR3b3J0aCBSb2FkIEJ1cndvb2QgLSBEQS4yMDI1LjM8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICBQREYNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAuODMgTUINCg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+PGEgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgcm9sZT0iYnV0dG9uIiBocmVmPSJodHRwczovL2RhdHJhY2tlci5idXJ3b29kLm5zdy5nb3YuYXUvRG9jdW1lbnQvRG93bmxvYWQ/a2V5PWFOS3FzM05jd2ZvPSZhbXA7ZmlsZU5hbWU9V2FzdGUrTWFuYWdlbWVudCtSZXBvcnQrLSs2NCtXZW50d29ydGgrUm9hZCtCdXJ3b29kKy0rREEuMjAyNS4zLlBERiIgdGFyZ2V0PSJfYmxhbmsiPlZpZXc8L2E+PC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjUvMzU4MCAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPkNsYXVzZSA0LjYgV3JpdHRlbiBSZXF1ZXN0IC0gSGVpZ2h0IG9mIGJ1aWxkaW5ncyAtIDY0IFdlbnR3b3J0aCBSb2FkIEJ1cndvb2QgLSBEQS4yMDI1LjM8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICBQREYNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAuODMgTUINCg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+PGEgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgcm9sZT0iYnV0dG9uIiBocmVmPSJodHRwczovL2RhdHJhY2tlci5idXJ3b29kLm5zdy5nb3YuYXUvRG9jdW1lbnQvRG93bmxvYWQ/a2V5PWhxVnhRamM3cG00PSZhbXA7ZmlsZU5hbWU9Q2xhdXNlKzQuNitXcml0dGVuK1JlcXVlc3QrLStIZWlnaHQrb2YrYnVpbGRpbmdzKy0rNjQrV2VudHdvcnRoK1JvYWQrQnVyd29vZCstK0RBLjIwMjUuMy5QREYiIHRhcmdldD0iX2JsYW5rIj5WaWV3PC9hPjwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI1LzM1ODEgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD5DbGF1c2UgNC42IFdyaXR0ZW4gUmVxdWVzdCAtIE1pbmltdW0gTG90IFNpemUgLSA2NCBXZW50d29ydGggUm9hZCBCdXJ3b29kIC0gREEuMjAyNS4zPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgUERGDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLjg0IE1CDQoNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHJvbGU9ImJ1dHRvbiIgaHJlZj0iaHR0cHM6Ly9kYXRyYWNrZXIuYnVyd29vZC5uc3cuZ292LmF1L0RvY3VtZW50L0Rvd25sb2FkP2tleT1qQ0pPNjR2a09uUT0mYW1wO2ZpbGVOYW1lPUNsYXVzZSs0LjYrV3JpdHRlbitSZXF1ZXN0Ky0rTWluaW11bStMb3QrU2l6ZSstKzY0K1dlbnR3b3J0aCtSb2FkK0J1cndvb2QrLStEQS4yMDI1LjMuUERGIiB0YXJnZXQ9Il9ibGFuayI+VmlldzwvYT48L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyNS8zNTgyICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+Q2xhdXNlIDQuNiBXcml0dGVuIFJlcXVlc3QgLSBCdWlsZGluZyBTZXBhcmF0aW9uIC0gNjQgV2VudHdvcnRoIFJvYWQgQnVyd29vZCAtIERBLjIwMjUuMzwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIFBERg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgMC45NSBNQg0KDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD48YSBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiByb2xlPSJidXR0b24iIGhyZWY9Imh0dHBzOi8vZGF0cmFja2VyLmJ1cndvb2QubnN3Lmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9YU5lc3NFTksrZVU9JmFtcDtmaWxlTmFtZT1DbGF1c2UrNC42K1dyaXR0ZW4rUmVxdWVzdCstK0J1aWxkaW5nK1NlcGFyYXRpb24rLSs2NCtXZW50d29ydGgrUm9hZCtCdXJ3b29kKy0rREEuMjAyNS4zLlBERiIgdGFyZ2V0PSJfYmxhbmsiPlZpZXc8L2E+PC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjUvMzU4MyAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPlN0b3Jtd2F0ZXIgQ29uY2VwdCBEZXNpZ24gLSA2NCBXZW50d29ydGggUm9hZCBCdXJ3b29kIC0gREEuMjAyNS4zPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgUERGDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAyLjQ4IE1CDQoNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHJvbGU9ImJ1dHRvbiIgaHJlZj0iaHR0cHM6Ly9kYXRyYWNrZXIuYnVyd29vZC5uc3cuZ292LmF1L0RvY3VtZW50L0Rvd25sb2FkP2tleT1ReWw5cFpDWkFTaz0mYW1wO2ZpbGVOYW1lPVN0b3Jtd2F0ZXIrQ29uY2VwdCtEZXNpZ24rLSs2NCtXZW50d29ydGgrUm9hZCtCdXJ3b29kKy0rREEuMjAyNS4zLlBERiIgdGFyZ2V0PSJfYmxhbmsiPlZpZXc8L2E+PC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjUvMzU4NyAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPkxhbmRzY2FwZSBQbGFuIC0gNjQgV2VudHdvcnRoIFJvYWQgQnVyd29vZCAtIERBLjIwMjUuMzwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIFBERg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgMS4yMyBNQg0KDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD48YSBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiByb2xlPSJidXR0b24iIGhyZWY9Imh0dHBzOi8vZGF0cmFja2VyLmJ1cndvb2QubnN3Lmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9dHpYcW9JMXF3dEU9JmFtcDtmaWxlTmFtZT1MYW5kc2NhcGUrUGxhbistKzY0K1dlbnR3b3J0aCtSb2FkK0J1cndvb2QrLStEQS4yMDI1LjMuUERGIiB0YXJnZXQ9Il9ibGFuayI+VmlldzwvYT48L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyNS8zNTg5ICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+U2l0ZSBQbGFuIC0gNjQgV2VudHdvcnRoIFJvYWQgQnVyd29vZCAtIERBLjIwMjUuMzwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIFBERg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgMC4wMSBNQg0KDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD48YSBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiByb2xlPSJidXR0b24iIGhyZWY9Imh0dHBzOi8vZGF0cmFja2VyLmJ1cndvb2QubnN3Lmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9eGdBRElBSkIxQUk9JmFtcDtmaWxlTmFtZT1TaXRlK1BsYW4rLSs2NCtXZW50d29ydGgrUm9hZCtCdXJ3b29kKy0rREEuMjAyNS4zLlBERiIgdGFyZ2V0PSJfYmxhbmsiPlZpZXc8L2E+PC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjUvMzU5MCAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPkFyY2hpdGVjdHVyYWwgRHJhd2luZyBTZXQgLSA2NCBXZW50d29ydGggUm9hZCBCdXJ3b29kIC0gREEuMjAyNS4zPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgUERGDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA2LjU4IE1CDQoNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHJvbGU9ImJ1dHRvbiIgaHJlZj0iaHR0cHM6Ly9kYXRyYWNrZXIuYnVyd29vZC5uc3cuZ292LmF1L0RvY3VtZW50L0Rvd25sb2FkP2tleT1ZMzRWdFhVeFJVbz0mYW1wO2ZpbGVOYW1lPUFyY2hpdGVjdHVyYWwrRHJhd2luZytTZXQrLSs2NCtXZW50d29ydGgrUm9hZCtCdXJ3b29kKy0rREEuMjAyNS4zLlBERiIgdGFyZ2V0PSJfYmxhbmsiPlZpZXc8L2E+PC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KDQogICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICA8L3RhYmxlPg0KPC9kaXY+DQoNCg0KICAgICAgICAgICAgPGgzIGlkPSJjb250YWN0VXMiPjxhIGhyZWY9IiMiPkNvbnRhY3QgVXM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxwPlRvIG1ha2UgZW5xdWlyaWVzIHJlZ2FyZGluZyBhcHBsaWNhdGlvbnMgZGlzcGxheWVkIGhlcmUsIGNvbnRhY3QgdXMgYnkgb25lIG9mIHRoZSBmb2xsb3dpbmcgbWV0aG9kczo8L3A+DQo8dWw+DQo8bGk+YnkgZW1haWwmbmJzcDs8YSBocmVmPSJtYWlsdG86Y291bmNpbEBidXJ3b29kLm5zdy5nb3YuYXUiPmNvdW5jaWxAYnVyd29vZC5uc3cuZ292LmF1PC9hPjwvbGk+DQo8bGk+aW4gd3JpdGluZyB0byBQTyBCb3ggMjQwIEJ1cndvb2QgTlNXIDE4MDUuIEFsbCBjb3JyZXNwb25kZW5jZSBzaG91bGQgYmUgYWRkcmVzc2VkIHRvIHRoZSBHZW5lcmFsIE1hbmFnZXIgYW5kIHF1b3RlIHRoZSByZWxldmFudCBhcHBsaWNhdGlvbiByZWZlcmVuY2UgbnVtYmVyLjwvbGk+DQo8bGk+YnkgcGhvbmluZyBDdXN0b21lciBTZXJ2aWNlIENlbnRyZSBvbiAoMDIpIDk5MTEgOTkxMSBkdXJpbmcgbm9ybWFsIG9mZmljZSBob3VycyAoTW9uZGF5IHRvIEZyaWRheSwgOC4zMGFtIHRvIDQuNDVwbSk8L2xpPg0KPGxpPkF0dGVuZCB0aGUgQ291bmNpbCBDdXN0b21lciBTZXJ2aWNlIENlbnRyZSBkdXJpbmcgYnVzaW5lc3MgaG91cnM6PC9saT4NCjwvdWw+DQo8cD4mbmJzcDsgJm5ic3A7ICZuYnNwOzIgQ29uZGVyIFN0PGJyIC8+ICZuYnNwOyZuYnNwOyZuYnNwO0JVUldPT0QgTlNXIDIxMzQ8YnIgLz4gPC9wPjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJub3RpZmllZEFkZHJlc3NlcyI+PGEgaHJlZj0iIyI+Tm90aWZpZWQgQWRkcmVzc2VzPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8Yj5ObyBkYXRhLjwvYj4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQo8aDMgaWQ9Imdvb2dsZW1hcHMiPjxhIGhyZWY9IiMiPkdvb2dsZSBNYXBzPC9hPjwvaDM+DQo8ZGl2IGlkPSJtYXBfY29udGFpbmVyIj4NCiAgICA8ZGl2IGlkPSJtYXBfY2FudmFzIiBjbGFzcz0iaWZyYW1lLXJ3ZCI+DQogICAgPC9kaXY+DQo8L2Rpdj4NCg0KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KDQogICAgd2luZG93Lm9ubG9hZCA9IGxvYWRHb29nbGVNYXBzU2NyaXB0Ow0KDQogICAgdmFyIGdlb2NvZGVyOw0KICAgIHZhciBtYXA7DQogICAgdmFyIHRpbWVvdXQgPSAzMDA7DQogICAgdmFyIHByb3BlcnRpZXMgPSBbIjY0IFdlbnR3b3J0aCBSZCwgQnVyd29vZCAyMTM0IE5TVyAiXTsNCiAgICB2YXIgbGF0TG5nQXJyID0gW107DQoNCiAgICBmdW5jdGlvbiBsb2FkR29vZ2xlTWFwc1NjcmlwdCgpIHsNCiAgICAgICAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNjcmlwdCIpOw0KICAgICAgICBzY3JpcHQudHlwZSA9ICJ0ZXh0L2phdmFzY3JpcHQiOw0KICAgICAgICBzY3JpcHQuc3JjID0gIi8vbWFwcy5nb29nbGVhcGlzLmNvbS9tYXBzL2FwaS9qcz9rZXk9QUl6YVN5QVMxSnVZX0cxTUlBYmJNS3E0VWJRRWt0LVJJdFFUZnZ3JmNhbGxiYWNrPWxvYWRHb29nbGVNYXBzIjsNCiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHJlbmRlckdvb2dsZU1hcHMoKQ0KICAgIHsNCiAgICAgICAgdmFyIG1hcE9wdGlvbnMgPSB7DQogICAgICAgICAgICBjZW50ZXI6IGxhdExuZ0FyclswXSwNCiAgICAgICAgICAgIHpvb206IDE2LA0KICAgICAgICAgICAgbWFwVHlwZUlkOiBnb29nbGUubWFwcy5NYXBUeXBlSWQuUk9BRE1BUCwNCiAgICAgICAgICAgIG1hcFR5cGVDb250cm9sOiBmYWxzZQ0KICAgICAgICB9DQoNCiAgICAgICAgbWFwID0gbmV3IGdvb2dsZS5tYXBzLk1hcChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibWFwX2NhbnZhcyIpLCBtYXBPcHRpb25zKTsNCg0KICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGREb21MaXN0ZW5lcih3aW5kb3csICdyZXNpemUnLCBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgIHZhciBjZW50ZXIgPSBtYXAuZ2V0Q2VudGVyKCk7DQogICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC50cmlnZ2VyKG1hcCwgJ3Jlc2l6ZScpOw0KICAgICAgICAgICAgbWFwLnNldENlbnRlcihjZW50ZXIpOw0KICAgICAgICB9KTsNCg0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGxvYWRHb29nbGVNYXBzKCkgew0KICAgICAgICBnZW9jb2RlciA9IG5ldyBnb29nbGUubWFwcy5HZW9jb2RlcigpOw0KICAgICAgICB2YXIgbm9PZkZhaWxlZExvY2F0aW9uU2VhcmNoID0gMDsNCg0KICAgICAgICAkKHByb3BlcnRpZXMpLmVhY2goZnVuY3Rpb24gKGluZGV4LCBlbGVtZW50KSB7DQogICAgICAgICAgICB2YXIgcHJvcGVydHlBZGRyZXNzID0gZWxlbWVudDsNCg0KICAgICAgICAgICAgLy9HZXQgZ2VvY29kZQ0KICAgICAgICAgICAgZ2VvY29kZXIuZ2VvY29kZSh7ICdhZGRyZXNzJzogcHJvcGVydHlBZGRyZXNzIH0sIGZ1bmN0aW9uIChyZXN1bHRzLCBzdGF0dXMpIHsNCiAgICAgICAgICAgICAgICBpZiAoc3RhdHVzID09IGdvb2dsZS5tYXBzLkdlb2NvZGVyU3RhdHVzLk9LKSB7DQoNCiAgICAgICAgICAgICAgICAgICAgdmFyIGxvY2F0aW9uID0gcmVzdWx0c1swXS5nZW9tZXRyeS5sb2NhdGlvbjsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGxhdExuZyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmcobG9jYXRpb24ubGF0KCksIGxvY2F0aW9uLmxuZygpKTsNCg0KICAgICAgICAgICAgICAgICAgICBsYXRMbmdBcnIucHVzaChsYXRMbmcpOw0KDQogICAgICAgICAgICAgICAgICAgIGlmKGxhdExuZ0Fyci5sZW5ndGggPT0gMSkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyR29vZ2xlTWFwcygpOw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgLy9DcmVhdGUgbWFya2VyIGZvciBtYXAgYW5kIHBsYWNlIGl0IG9uIHRoZSBtYXANCiAgICAgICAgICAgICAgICAgICAgdmFyIG1hcmtlciA9IG5ldyBnb29nbGUubWFwcy5NYXJrZXIoew0KICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGxhdExuZywNCiAgICAgICAgICAgICAgICAgICAgICAgIG1hcDogbWFwDQogICAgICAgICAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICAgICAgICAgIHZhciBjb250ZW50U3RyaW5nID0gJzxkaXY+PHNwYW4+JyArIHByb3BlcnR5QWRkcmVzcyArICc8L3NwYW4+PC9kaXY+JzsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGluZm93aW5kb3cgPSBuZXcgZ29vZ2xlLm1hcHMuSW5mb1dpbmRvdyh7ICAgLy9DcmVhdGUgaW5mbyB3aW5kb3cNCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnRTdHJpbmcNCiAgICAgICAgICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIobWFya2VyLCAnY2xpY2snLCBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGluZm93aW5kb3cub3BlbihtYXAsIG1hcmtlcik7DQogICAgICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAvL2lmIG5vIGxvY2F0aW9uIGZvdW5kIGJ5IGdvb2dsZSBmb3IgYSBwcm9wZXJ0eQ0KICAgICAgICAgICAgICAgIGVsc2UgaWYgKHN0YXR1cyA9PSAiWkVST19SRVNVTFRTIikgew0KICAgICAgICAgICAgICAgICAgICBub09mRmFpbGVkTG9jYXRpb25TZWFyY2grKzsNCg0KICAgICAgICAgICAgICAgICAgICBpZihub09mRmFpbGVkTG9jYXRpb25TZWFyY2ggPT0gJChwcm9wZXJ0aWVzKS5sZW5ndGgpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlcGxhY2VHb29nbGVNYXBzQ29udGVudCgpOw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PSBnb29nbGUubWFwcy5HZW9jb2RlclN0YXR1cy5PVkVSX1FVRVJZX0xJTUlUKSB7DQogICAgICAgICAgICAgICAgICAgIC8vc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IGdldEdlb0NvZGVGb3JBZGRyZXNzKGlkLCBhZGRyZXNzKTsgfSwgKHRpbWVvdXQpKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KTsNCiAgICAgICAgfSk7DQogICAgfQ0KDQogICAgLy9SZXBsYWNlcyBnb29nbGUgbWFwcyBjb250ZW50IHdpdGggYSBuZXcgZGl2IGJsb2NrIHRoYXQgaGFzIGluZm8gbWVzc2FnZQ0KICAgIGZ1bmN0aW9uIHJlcGxhY2VHb29nbGVNYXBzQ29udGVudCgpIHsNCiAgICAgICAgdmFyIG5ld0NvbnRlbnQgPSAnPGRpdiBjbGFzcz0idWktYWNjb3JkaW9uLWNvbnRlbnQgdWktaGVscGVyLXJlc2V0IHVpLXdpZGdldC1jb250ZW50IHVpLWNvcm5lci1ib3R0b20iPicgKw0KICAgICAgICAgICAgJzxwPkNvdWxkblwndCBmaW5kIHRoZSBwcm9wZXJ0eSBhZGRyZXNzKGVzKSBvbiBHb29nbGUgTWFwcy4gPHA+JyArDQogICAgICAgICAgICAnPC9kaXY+JzsNCg0KICAgICAgICAkKCcjbWFwX2NvbnRhaW5lcicpLnJlcGxhY2VXaXRoKG5ld0NvbnRlbnQpOw0KICAgIH0NCg0KPC9zY3JpcHQ+DQoNCiAgICA8L2Rpdj4NCiAgICA8ZGl2IGNsYXNzPSJtb2RhbCBmYWRlIiBpZD0ic3VibWlzc2lvbi1tb2RhbCI+DQogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJzcGlubmVyIj48L2Rpdj4gPCEtLSBUaGlzIGRpdiBob3N0cyB0aGUgc3Bpbm5lciAtLT4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iY2xvc2UiIGRhdGEtZGlzbWlzcz0ibW9kYWwiIGFyaWEtbGFiZWw9IkNsb3NlIj48c3BhbiBhcmlhLWhpZGRlbj0idHJ1ZSI+JnRpbWVzOzwvc3Bhbj48L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJtb2RhbC10aXRsZSI+U3VibWlzc2lvbiBmb3IgMTAuMjAyNS4zLjE8L2gyPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCg0KICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHsNCg0KICAgICAgICAkKCcjYXBwbGljYXRpb24nKS50b2dnbGVwYW5lbHMoKTsNCg0KICAgICAgICAgICAgJCgnI3Byb3BlcnRpZXMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI2RldGFpbHMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI3RyYWNraW5nJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNkb2N1bWVudHMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI3JlbGF0ZWRBcHBsaWNhdGlvbnMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI2dvb2dsZW1hcHMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI2NvbnRhY3RVcycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjZXhoaWJpdGlvbkRldGFpbHMnKS5jbGljaygpOw0KDQogICAgICAgIA0KDQoNCiAgICAgICAgJCgnI3N1Ym1pc3Npb24tYnRuJykuY2xpY2soZnVuY3Rpb24gKCkgeyAgICAgICAgDQoNCg0KICAgICAgICAgICAgdmFyIHVybCA9ICJodHRwczovL2RhdHJhY2tlci5idXJ3b29kLm5zdy5nb3YuYXUvL0FwcGxpY2F0aW9uL1N1Ym1pc3Npb24vIiArIGVuY29kZVVSSSgiMTAuMjAyNS4zLjEiKTsNCg0KICAgICAgICAgICAgJCgnI3N1Ym1pc3Npb24tbW9kYWwnKS5tb2RhbCgnc2hvdycpLmZpbmQoJy5tb2RhbC1ib2R5JykubG9hZCh1cmwpOw0KICAgICAgICB9KTsNCiAgICB9KTsNCg0KDQogICAgLyogU2hvd3MgYWxsIHRoZSBwYW5lbHMgKi8NCiAgICBmdW5jdGlvbiBzaG93QWxsKCkgew0KICAgICAgICAkKCcjYXBwbGljYXRpb24nKS5jaGlsZHJlbigiaDMiKS5lYWNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKCJ1aS1zdGF0ZS1kZWZhdWx0IikpIHsNCiAgICAgICAgICAgICAgICAkKHRoaXMpLmNsaWNrKCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0pOw0KICAgIH0NCg0KDQogICAgLyogSGlkZSBhbGwgdGhlIHBhbmVscyAqLw0KICAgIGZ1bmN0aW9uIGhpZGVBbGwoKSB7DQogICAgICAgICQoJyNhcHBsaWNhdGlvbicpLmNoaWxkcmVuKCJoMyIpLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoInVpLXN0YXRlLWFjdGl2ZSIpKSB7DQogICAgICAgICAgICAgICAgJCh0aGlzKS5jbGljaygpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICA8L3NjcmlwdD4NCg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPCEtLSAvLmNvbnRhaW5lci1mbHVpZCAtLT4NCg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwhLS0gLyNwYWdlLXdyYXBwZXIgLS0+DQogICAgICAgICAgICA8L2Rpdj4NCg0KDQogICAgICAgICAgICA8ZGl2IGlkPSJHcmVlbkJhciI+DQogICAgICAgICAgICAgICAgPGEgc3R5bGU9ImN1cnNvcjpkZWZhdWx0Ij4gQ29weXJpZ2h0IMKpIDIwMTggQ2l2aWNhIHwgPC9hPg0KICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cuQnVyd29vZC5uc3cuZ292LmF1L2Rpc2NsYWltZXIiIHRhcmdldD0iX3BhcmVudCI+Q29weXJpZ2h0IGFuZCBEaXNjbGFpbWVyPC9hPg0KICAgICAgICAgICAgICAgIDxhIHN0eWxlPSJjdXJzb3I6ZGVmYXVsdCI+IHwgPC9hPg0KICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cuQnVyd29vZC5uc3cuZ292LmF1L3ByaXZhY3ktc3RhdGVtZW50IiB0YXJnZXQ9Il9wYXJlbnQiPlByaXZhY3kgU3RhdGVtZW50PC9hPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8ZGl2PiA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQoNCiAgICA8ZGl2IGlkPSJ0aXB0aXBfaG9sZGVyIiBzdHlsZT0ibWF4LXdpZHRoOjMwMHB4OyI+PGRpdiBpZD0idGlwdGlwX2Fycm93Ij48ZGl2IGlkPSJ0aXB0aXBfYXJyb3dfaW5uZXIiPjwvZGl2PjwvZGl2PjxkaXYgaWQ9InRpcHRpcF9jb250ZW50Ij48L2Rpdj48L2Rpdj4NCjwvYm9keT4NCg0KPC9odG1sPg0K
  recorded_at: Mon, 21 Apr 2025 17:13:58 GMT
- request:
    method: get
    uri: https://datracker.burwood.nsw.gov.au/Application/ApplicationDetails/010.2025.00000003.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=0pfgbq1vvidrisofuz0bjqjh; User=accessAllowed-MasterView=True
      Host:
      - datracker.burwood.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 17:13:58 GMT
      Content-Length:
      - '35358'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 17:13:59 GMT
- request:
    method: get
    uri: https://datracker.burwood.nsw.gov.au/Application/ApplicationDetails/010.2025.00000004.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - datracker.burwood.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 302
      message: Found
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Home/Disclaimer"
      Server:
      - Microsoft-IIS/10.0
      Set-Cookie:
      - ASP.NET_SessionId=uml2rexu3zmqexpiaw0mhycx; path=/; HttpOnly; SameSite=Lax
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 17:13:59 GMT
      Content-Length:
      - '133'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Home/Disclaimer\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 17:13:59 GMT
- request:
    method: get
    uri: https://datracker.burwood.nsw.gov.au/Home/Disclaimer
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=uml2rexu3zmqexpiaw0mhycx
      Host:
      - datracker.burwood.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 17:13:59 GMT
      Content-Length:
      - '13592'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 17:13:59 GMT
- request:
    method: post
    uri: https://datracker.burwood.nsw.gov.au/Home/DisclaimerProcessing
    body:
      encoding: UTF-8
      string: agreed=true
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=uml2rexu3zmqexpiaw0mhycx
      Host:
      - datracker.burwood.nsw.gov.au
      Referer:
      - https://datracker.burwood.nsw.gov.au/Home/Disclaimer
      Content-Type:
      - application/x-www-form-urlencoded
      Content-Length:
      - '11'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Application/ApplicationDetails/010.2025.00000004.001"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      Set-Cookie:
      - User=accessAllowed-MasterView=True; path=/
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 17:13:59 GMT
      Content-Length:
      - '170'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Application/ApplicationDetails/010.2025.00000004.001\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 17:13:59 GMT
- request:
    method: get
    uri: https://datracker.burwood.nsw.gov.au/Application/ApplicationDetails/010.2025.00000004.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=uml2rexu3zmqexpiaw0mhycx; User=accessAllowed-MasterView=True
      Host:
      - datracker.burwood.nsw.gov.au
      Referer:
      - https://datracker.burwood.nsw.gov.au/Home/Disclaimer
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 17:14:00 GMT
      Content-Length:
      - '36321'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQo8aHRtbCBsYW5nPSJlbiI+DQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+DQogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4NCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPg0KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIj4NCiAgICA8bWV0YSBuYW1lPSJrZXl3b3JkcyIgY29udGVudD0iQnVyd29vZCBDb3VuY2lsLERBIFRyYWNrZXIsRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24sRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24gVHJhY2tpbmcsIERBIEVucXVpcnksIERldmVsb3BtZW50IEFwcGxpY2F0aW9uIEVucXVpcnksIEFwcGxpY2F0aW9uIFRyYWNrZXIiPg0KICAgIDxtZXRhIG5hbWU9ImRlc2NyaXB0aW9uIiBjb250ZW50PSJUaGUgb2ZmaWNpYWwgQnVyd29vZCBSZWdpb25hbCBDb3VuY2lsIEFwcGxpY2F0aW9uIFRyYWNrZXIiPg0KDQogICAgPHRpdGxlPkJ1cndvb2QgQ291bmNpbCAtIEFwcGxpY2F0aW9uIFRyYWNrZXI8L3RpdGxlPg0KDQogICAgPCEtLWZhdmljb24tLT4NCiAgICA8bGluayBocmVmPSIvZmF2aWNvbi5pY28iIHJlbD0ic2hvcnRjdXQgaWNvbiIgdHlwZT0iaW1hZ2UveC1pY29uIj4NCg0KICAgIDwhLS0galF1ZXJ5IC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvU2NyaXB0cy9qcXVlcnktMS4xMS4xLmpzIj48L3NjcmlwdD4NCg0KICAgIDxzY3JpcHQgc3JjPSIvU2NyaXB0cy9qcXVlcnktdWktMS4xMS4yLmpzIj48L3NjcmlwdD4NCg0KICAgIDxsaW5rIGhyZWY9Ii9Db250ZW50L3RoZW1lcy9iYXNlL2NvcmUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9Db250ZW50L3RoZW1lcy9iYXNlL2FjY29yZGlvbi5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvdGhlbWUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPCEtLSBCb290c3RyYXAgLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2Jvb3RzdHJhcC5qcyI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9ib290c3RyYXAtdGhlbWUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9Db250ZW50L2Jvb3RzdHJhcC5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQogICAgPGxpbmsgaHJlZj0iL0NvbnRlbnQvZm9udC1hd2Vzb21lLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDwhLS0gRGF0YVRhYmxlcyAtLT4NCiAgICA8c2NyaXB0IHNyYz0iL1NjcmlwdHMvRGF0YVRhYmxlcy9qcXVlcnkuZGF0YVRhYmxlcy5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL1NjcmlwdHMvRGF0YVRhYmxlcy9kYXRhVGFibGVzLmJvb3RzdHJhcC5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL1NjcmlwdHMvRGF0YVRhYmxlcy9kYXRhVGFibGVzLnJlc3BvbnNpdmUuanMiPjwvc2NyaXB0Pg0KDQogICAgDQogICAgPGxpbmsgaHJlZj0iL0NvbnRlbnQvRGF0YVRhYmxlcy9jc3MvZGF0YVRhYmxlcy5ib290c3RyYXAuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9Db250ZW50L0RhdGFUYWJsZXMvY3NzL2RhdGFUYWJsZXMucmVzcG9uc2l2ZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvRGF0YVRhYmxlcy9jc3MvZGF0YVRhYmxlcy5yZXNwb25zaXZlLnNjc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQoNCiAgICA8IS0tIEJvb3RzdHJhcCBTQi1BZG1pbi0yIFBsdWdpbiBhbmQgb3RoZXIgY3NzIGFuZCBqcyBmaWxlcy0tPg0KICAgIDxzY3JpcHQgc3JjPSIvanMvYm9vdHN0cmFwLWNvbWJvYm94LmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvYm9vdHN0cmFwLWRhdGVwaWNrZXIuanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9qcy9ib290c3RyYXAtZGlhbG9nLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvanF1ZXJ5LmZvcm0uanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9qcy9qcXVlcnkudGFibGVzb3J0ZXIuanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9qcy9tYXN0ZXJ2aWV3LmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvbWV0aXNNZW51LmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvc2ItYWRtaW4tMi5qcyI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvY3NzL2Jvb3RzdHJhcC1jb21ib2JveC5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL2Nzcy9kYXRlcGlja2VyMy5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL2Nzcy9tYXN0ZXJ2aWV3LWN1c3RvbWlzYXRpb25zLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvY3NzL3NiLWFkbWluLTIuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPGxpbmsgaHJlZj0iL0NvdW5jaWxfVGhlbWUvQnVyd29vZC9idXJ3b29kLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICANCg0KICAgIDwhLS0gSFRNTDUgU2hpbSBhbmQgUmVzcG9uZC5qcyBJRTggc3VwcG9ydCBvZiBIVE1MNSBlbGVtZW50cyBhbmQgbWVkaWEgcXVlcmllcyAtLT4NCiAgICA8IS0tIFdBUk5JTkc6IFJlc3BvbmQuanMgZG9lc24ndCB3b3JrIGlmIHlvdSB2aWV3IHRoZSBwYWdlIHZpYSBmaWxlOi8vIC0tPg0KICAgIDwhLS1baWYgbHQgSUUgOV0+DQogICAgICAgIDxzY3JpcHQgc3JjPSJodHRwczovL29zcy5tYXhjZG4uY29tL2xpYnMvaHRtbDVzaGl2LzMuNy4wL2h0bWw1c2hpdi5qcyI+PC9zY3JpcHQ+DQogICAgICAgIDxzY3JpcHQgc3JjPSJodHRwczovL29zcy5tYXhjZG4uY29tL2xpYnMvcmVzcG9uZC5qcy8xLjQuMi9yZXNwb25kLm1pbi5qcyI+PC9zY3JpcHQ+DQogICAgPCFbZW5kaWZdLS0+DQo8L2hlYWQ+DQoNCg0KDQo8Ym9keT4NCiAgICA8ZGl2IGNsYXNzPSJwdXNobWVudSBjYnAtc3BtZW51LXB1c2giPg0KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPg0KICAgICAgICAgICAgPGhlYWRlciBpZD0iSGVhZGVyIj4NCiAgICAgICAgICAgICAgICA8bmF2IGNsYXNzPSJuYXZiYXIgbmF2YmFyLWRlZmF1bHQiIHJvbGU9Im5hdmlnYXRpb24iIGlkPSJOYXZCYXIiPg0KICAgICAgICAgICAgICAgICAgICA8IS0tIEJyYW5kIGFuZCB0b2dnbGUgZ2V0IGdyb3VwZWQgZm9yIGJldHRlciBtb2JpbGUgZGlzcGxheSAtLT4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibmF2YmFyLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ1dGlscyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSJodHRwOi8vd3d3LkJ1cndvb2QubnN3Lmdvdi5hdSI+SG9tZTwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cDovL3d3dy5CdXJ3b29kLm5zdy5nb3YuYXUvY29udGFjdF91cy5odG1sIj5Db250YWN0IFVzPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGgxIGlkPSJsb2dvIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3LkJ1cndvb2QubnN3Lmdvdi5hdSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvQ291bmNpbF9UaGVtZS9CdXJ3b29kL0J1cndvb2RDb3VuY2lsbG9nb1NNLnBuZyIgYWx0PSJCdXJ3b29kIFJlZ2lvbmFsIENvdW5jaWwiPjxzdHJvbmcgY2xhc3M9InZoIj5CdXJ3b29kIFJlZ2lvbmFsIENvdW5jaWw8L3N0cm9uZz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2gxPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L25hdj4NCiAgICAgICAgICAgIDwvaGVhZGVyPg0KDQogICAgICAgICAgICA8ZGl2IGlkPSJjb250ZW50Ij4NCiAgICAgICAgICAgICAgICA8IS0tIE5hdmlnYXRpb24gLS0+DQogICAgICAgICAgICAgICAgPG5hdiBjbGFzcz0ibmF2YmFyIG5hdmJhci1kZWZhdWx0IG5hdmJhci1zdGF0aWMtdG9wIiByb2xlPSJuYXZpZ2F0aW9uIiBzdHlsZT0ibWFyZ2luLWJvdHRvbTogMCI+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJuYXZiYXItdG9nZ2xlIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtdGFyZ2V0PSIubmF2YmFyLWNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3Itb25seSI+VG9nZ2xlIG5hdmlnYXRpb248L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tYmFyIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tYmFyIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tYmFyIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXZiYXItYnJhbmQiIGhyZWY9Ii9Ib21lL0luZGV4Ij48L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLWhlYWRlciAtLT4NCiAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2YmFyLXRvcC1saW5rcyBuYXZiYXItcmlnaHQgaGlkZGVuLXhzIGhpZGRlbi1zbSBoaWRkZW4tbWQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxzcGFuIGlkPSJwcmludEljb24iIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXByaW50IiBvbmNsaWNrPSJ3aW5kb3cucHJpbnQoKTsiPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICA8L3VsPg0KDQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1kZWZhdWx0IHNpZGViYXIiIHJvbGU9Im5hdmlnYXRpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2lkZWJhci1uYXYgbmF2YmFyLWNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiIgaWQ9InNpZGUtbWVudSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY3RpdmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48aSBjbGFzcz0iZmEgZmEtbGlzdC11bCBmYS1mdyI+PC9pPkFwcGxpY2F0aW9uIFRyYWNrZXI8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdi1zZWNvbmQtbGV2ZWwgY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9BYm91dCB0YXJnZXQ9X3NlbGY+V2hhdCBpcyBBcHBsaWNhdGlvbiBUcmFja2VyPzwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9EaXNjbGFpbWVyIHRhcmdldD1fc2VsZj5EaXNjbGFpbWVyPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gLy5uYXYtc2Vjb25kLWxldmVsIC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY3RpdmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48aSBjbGFzcz0iZmEgZmEtbGlzdC11bCBmYS1mdyI+PC9pPkFwcGxpY2F0aW9uczxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL0luZGV4IHRhcmdldD0+QXBwbGljYXRpb24gVHJhY2tlciBIb21lPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL1NlYXJjaCBpZD1zZWFyY2ggdGFyZ2V0PV9zZWxmPlNlYXJjaDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/UmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1UcnVlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSBpZD1vdXRzdGFuZGluZy1hcHBzIHRhcmdldD1fc2VsZj5VbmRldGVybWluZWQgQXBwbGljYXRpb25zPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9SZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9VHJ1ZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIGlkPWV4aGliaXRlZC1hcHBzIHRhcmdldD1fc2VsZj5BcHBsaWNhdGlvbnMgT24gRXhoaWJpdGlvbjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbnMgU3VibWl0dGVkPHNwYW4gY2xhc3M9ImZhIGFycm93Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXYtc2Vjb25kLWxldmVsIGNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTIxJTJmMDQlMmYyMDI1JkRhdGVUbz0yMiUyZjA0JTJmMjAyNSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPlRoaXMgV2VlazwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MTMlMmYwNCUyZjIwMjUmRGF0ZVRvPTE5JTJmMDQlMmYyMDI1JkRhdGVUeXBlPTEmUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBXZWVrPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDQlMmYyMDI1JkRhdGVUbz0yMiUyZjA0JTJmMjAyNSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPlRoaXMgTW9udGg8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTElMmYwMyUyZjIwMjUmRGF0ZVRvPTMxJTJmMDMlMmYyMDI1JkRhdGVUeXBlPTEmUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbnMgRGV0ZXJtaW5lZDxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0yMSUyZjA0JTJmMjAyNSZEYXRlVG89MjIlMmYwNCUyZjIwMjUmRGF0ZVR5cGU9MiZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9VHJ1ZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPlRoaXMgV2VlazwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MTMlMmYwNCUyZjIwMjUmRGF0ZVRvPTE5JTJmMDQlMmYyMDI1JkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5MYXN0IFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTElMmYwNCUyZjIwMjUmRGF0ZVRvPTIyJTJmMDQlMmYyMDI1JkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIE1vbnRoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDMlMmYyMDI1JkRhdGVUbz0zMSUyZjAzJTJmMjAyNSZEYXRlVHlwZT0yJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1UcnVlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLnNpZGViYXItY29sbGFwc2UgLS0+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLXN0YXRpYy1zaWRlIC0tPg0KICAgICAgICAgICAgICAgIDwvbmF2Pg0KICAgICAgICAgICAgICAgIDxkaXYgaWQ9InBhZ2Utd3JhcHBlciI+DQoNCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyLWZsdWlkIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgDQoNCg0KICAgIDxkaXYgY2xhc3M9InBhZ2UtaGVhZGVyIj4NCiAgICAgICAgPGgyPkFwcGxpY2F0aW9uOiBEZXZlbG9wbWVudCBBcHBsaWNhdGlvbiAoMTAuMjAyNS40LjEpPC9oMj4NCiAgICA8L2Rpdj4NCiAgICA8aDQ+RGV0YWlsZWQgaW5mb3JtYXRpb24gcmVsYXRlZCB0byB0aGUgYXBwbGljYXRpb246PC9oND4NCiAgICA8YnIgLz4NCiAgICA8ZGl2Pg0KICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnNob3dBbGwoKTsiPlNob3cgQWxsPC9hPiAvDQogICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6aGlkZUFsbCgpOyI+SGlkZSBBbGw8L2E+DQogICAgPC9kaXY+DQogICAgPGRpdiBpZD0iYXBwbGljYXRpb24iPg0KDQogICAgICAgICAgICA8aDMgaWQ9ImRldGFpbHMiPjxhIGhyZWY9IiMiPkRldGFpbHM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRlc2NyaXB0aW9uOiA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBpZD0iZGVzY3JpcHRpb24iPkFsdGVyYXRpb25zIGFuZCBhZGRpdGlvbnMgdG8gYW4gZXhpc3RpbmcgZHdlbGxpbmcgaW5jbHVkaW5nIGEgcmVhciBhZGQ8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+U3VibWl0dGVkIERhdGU6IDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjAvMDEvMjAyNSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+QXBwbGljYXRpb24gVHlwZTogPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+RGV2ZWxvcG1lbnQgQXBwbGljYXRpb248L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0icHJvcGVydGllcyI+PGEgaHJlZj0iIyI+UHJvcGVydGllczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9InByb3BlcnR5LWxpc3QiPjIgQnJvb2tseW4gU3QsIEJ1cndvb2QgMjEzNCBOU1cgIChMb3Q6IDE3IFNlYzogMyBEUDogMTQyOSk8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0icGVvcGxlIj48YSBocmVmPSIjIj5QZW9wbGU8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcHBsaWNhbnQ6IEVyaWMgQ2hhbg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFByaW5jaXBhbCBDZXJ0aWZ5aW5nIEF1dGhvcml0eTogIA0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0ib2ZmaWNlciI+PGEgaHJlZj0iIyI+T2ZmaWNlcjwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9Im9mZmljZXJOYW1lIj5BTEFTVEFJUiBTSU08L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0iZGVjaXNpb24iPjxhIGhyZWY9IiMiPkRlY2lzaW9uPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5BcHBsaWNhdGlvbiBTdGF0dXM6IERldGVybWluZWQ8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERldGVybWluYXRpb24gRGF0ZToNCjA1LzAzLzIwMjUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+RGV0ZXJtaW5hdGlvbiBUeXBlOiBBcHByb3ZlZCBieSBEZWxlZ2F0ZWQgQXV0aG9yaXR5PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9ImVzdGltYXRlZENvc3QiPjxhIGhyZWY9IiMiPkVzdGltYXRlZCBDb3N0PC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4kMzUwLDAwMC4wMDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJ0cmFja2luZyI+PGEgaHJlZj0iIyI+VHJhY2tpbmc8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24td3JhcCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5zd2lwZSB0YWJsZSB0byB0aGUgbGVmdCB0byByZXZlYWwgbW9yZSBkYXRhPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tYXJyb3ctcmlnaHQiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtYm9yZGVyZWQgbm8tZm9vdGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5EZXNjcmlwdGlvbjwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Db21tZW5jZWQgRGF0ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Db21wbGV0ZWQgRGF0ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5SZWZlciB0byBUcmVlIE1hbmFnZW1lbnQ8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjkvMDEvMjAyNSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjMxLzAxLzIwMjUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+UmVmZXIgdG8gSGVyaXRhZ2UgQWR2aXNvcjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyOS8wMS8yMDI1ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMDYvMDMvMjAyNSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5SZWZlciB0byBFbmdpbmVlcmluZyAoR2VuZXJhbCk8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjkvMDEvMjAyNSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjA2LzAzLzIwMjUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQoNCg0KDQoNCiAgICAgICAgICAgIDxoMyBpZD0icmVsYXRlZEFwcGxpY2F0aW9ucyI+PGEgaHJlZj0iIyI+UmVsYXRlZCBBcHBsaWNhdGlvbnM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgIDxiPk5vIGRhdGEuPC9iPg0KICAgICAgICAgICAgPC9kaXY+DQoNCg0KDQoNCg0KDQoNCjxoMyBpZD0iZG9jdW1lbnRzIj48YSBocmVmPSIjIj5Eb2N1bWVudHM8L2E+PC9oMz4NCjxkaXY+DQoNCiAgICAgICAgPGRpdiBjbGFzcz0iaWNvbi13cmFwIj4NCiAgICAgICAgICAgIDxzcGFuPnN3aXBlIHRhYmxlIHRvIHRoZSBsZWZ0IHRvIHJldmVhbCBtb3JlIGRhdGE8L3NwYW4+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1hcnJvdy1yaWdodCIgYXJpYS1oaWRkZW49InRydWUiPjwvc3Bhbj4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgaWQ9ImRvYy1jb3VudCI+VG90YWwgbnVtYmVyIG9mIGRvY3VtZW50czogMTU8L2Rpdj4NCiAgICAgICAgPHRhYmxlIGlkPSJkb2MtdGFibGUiIGNsYXNzPSJ0YWJsZSB0YWJsZS1zdHJpcGVkIHRhYmxlLWJvcmRlcmVkIG5vLWZvb3RlciI+DQogICAgICAgICAgICA8dGhlYWQ+DQogICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICA8dGg+UmVjb3JkIE51bWJlcjwvdGg+DQogICAgICAgICAgICAgICAgICAgIDx0aD5EZXNjcmlwdGlvbjwvdGg+DQogICAgICAgICAgICAgICAgICAgIDx0aD5Eb2N1bWVudCBUeXBlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgPHRoPlNpemU8L3RoPg0KICAgICAgICAgICAgICAgICAgICA8dGg+VmlldyBMaW5rPC90aD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgPC90aGVhZD4NCiAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI1LzExNDk2ICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+U3RhbXBlZCBBcHByb3ZlZCBQbGFucyBhbmQgRG9jdW1lbnRzIC0gMiBCcm9va2x5biBTdHJlZXQgQnVyd29vZCAtIERBLjIwMjUuNDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIFBERg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgNi4zNCBNQg0KDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD48YSBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiByb2xlPSJidXR0b24iIGhyZWY9Imh0dHBzOi8vZGF0cmFja2VyLmJ1cndvb2QubnN3Lmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9Nmxrb2tscnR5dFU9JmFtcDtmaWxlTmFtZT1TdGFtcGVkK0FwcHJvdmVkK1BsYW5zK2FuZCtEb2N1bWVudHMrLSsyK0Jyb29rbHluK1N0cmVldCtCdXJ3b29kKy0rREEuMjAyNS40LlBERiIgdGFyZ2V0PSJfYmxhbmsiPlZpZXc8L2E+PC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjUvMTE0OTcgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD5OT1RJQ0UgT0YgREVURVJNSU5BVElPTiAtIDIgQnJvb2tseW4gU3RyZWV0IEJVUldPT0QgLSBEQS4yMDI1LjQ8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICBQREYNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAuNDAgTUINCg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+PGEgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgcm9sZT0iYnV0dG9uIiBocmVmPSJodHRwczovL2RhdHJhY2tlci5idXJ3b29kLm5zdy5nb3YuYXUvRG9jdW1lbnQvRG93bmxvYWQ/a2V5PVEzYWQxR25FN1lNPSZhbXA7ZmlsZU5hbWU9Tk9USUNFK09GK0RFVEVSTUlOQVRJT04rLSsyK0Jyb29rbHluK1N0cmVldCtCVVJXT09EKy0rREEuMjAyNS40LlBERiIgdGFyZ2V0PSJfYmxhbmsiPlZpZXc8L2E+PC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjUvMzQ2MSAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPlByZS1EZXZlbG9wbWVudCBBcHBsaWNhdGlvbiAtIFBBTi01MDM0MTIgLSAyIEJyb29rbHluIFN0cmVldCBCdXJ3b29kIC0gREEuMjAyNS40PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgUERGDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLjIyIE1CDQoNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHJvbGU9ImJ1dHRvbiIgaHJlZj0iaHR0cHM6Ly9kYXRyYWNrZXIuYnVyd29vZC5uc3cuZ292LmF1L0RvY3VtZW50L0Rvd25sb2FkP2tleT1yUjZlcldJdWNHaz0mYW1wO2ZpbGVOYW1lPVByZS1EZXZlbG9wbWVudCtBcHBsaWNhdGlvbistK1BBTi01MDM0MTIrLSsyK0Jyb29rbHluK1N0cmVldCtCdXJ3b29kKy0rREEuMjAyNS40LlBERiIgdGFyZ2V0PSJfYmxhbmsiPlZpZXc8L2E+PC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjUvMzQ2MiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPkRldmVsb3BtZW50IEFwcGxpY2F0aW9uIC0gMiBCcm9va2x5biBTdHJlZXQgQnVyd29vZCAtIERBLjIwMjUuNDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIFBERg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgMC4yMyBNQg0KDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD48YSBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiByb2xlPSJidXR0b24iIGhyZWY9Imh0dHBzOi8vZGF0cmFja2VyLmJ1cndvb2QubnN3Lmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9MVNPajVFQmJGSnM9JmFtcDtmaWxlTmFtZT1EZXZlbG9wbWVudCtBcHBsaWNhdGlvbistKzIrQnJvb2tseW4rU3RyZWV0K0J1cndvb2QrLStEQS4yMDI1LjQuUERGIiB0YXJnZXQ9Il9ibGFuayI+VmlldzwvYT48L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyNS8zNDY0ICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+Q29zdCBFc3RpbWF0ZSAtIDIgQnJvb2tseW4gU3RyZWV0IEJ1cndvb2QgLSBEQS4yMDI1LjQ8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICBQREYNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAuMjEgTUINCg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+PGEgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgcm9sZT0iYnV0dG9uIiBocmVmPSJodHRwczovL2RhdHJhY2tlci5idXJ3b29kLm5zdy5nb3YuYXUvRG9jdW1lbnQvRG93bmxvYWQ/a2V5PWRnK1RlekNIVzJFPSZhbXA7ZmlsZU5hbWU9Q29zdCtFc3RpbWF0ZSstKzIrQnJvb2tseW4rU3RyZWV0K0J1cndvb2QrLStEQS4yMDI1LjQuUERGIiB0YXJnZXQ9Il9ibGFuayI+VmlldzwvYT48L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyNS8zNDcwICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+QmFzaXggQ2VydGlmaWNhdGUgLSAyIEJyb29rbHluIFN0cmVldCBCdXJ3b29kIC0gREEuMjAyNS40PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgUERGDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLjAxIE1CDQoNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHJvbGU9ImJ1dHRvbiIgaHJlZj0iaHR0cHM6Ly9kYXRyYWNrZXIuYnVyd29vZC5uc3cuZ292LmF1L0RvY3VtZW50L0Rvd25sb2FkP2tleT1ld1djWjNMTmlRTT0mYW1wO2ZpbGVOYW1lPUJhc2l4K0NlcnRpZmljYXRlKy0rMitCcm9va2x5bitTdHJlZXQrQnVyd29vZCstK0RBLjIwMjUuNC5QREYiIHRhcmdldD0iX2JsYW5rIj5WaWV3PC9hPjwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI1LzM0NzIgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD5IZXJpdGFnZSBJbXBhY3QgU3RhdGVtZW50IC0gMiBCcm9va2x5biBTdHJlZXQgQnVyd29vZCAtIERBLjIwMjUuNDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIFBERg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgNC4wMyBNQg0KDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD48YSBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiByb2xlPSJidXR0b24iIGhyZWY9Imh0dHBzOi8vZGF0cmFja2VyLmJ1cndvb2QubnN3Lmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9eDJJVUNJVEFRM009JmFtcDtmaWxlTmFtZT1IZXJpdGFnZStJbXBhY3QrU3RhdGVtZW50Ky0rMitCcm9va2x5bitTdHJlZXQrQnVyd29vZCstK0RBLjIwMjUuNC5QREYiIHRhcmdldD0iX2JsYW5rIj5WaWV3PC9hPjwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI1LzM0NzMgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD5TdGF0ZW1lbnQgb2YgRW52aXJvbm1lbnRhbCBFZmZlY3RzIC0gMiBCcm9va2x5biBTdHJlZXQgQnVyd29vZCAtIERBLjIwMjUuNDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIFBERg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgMC4yNyBNQg0KDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD48YSBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiByb2xlPSJidXR0b24iIGhyZWY9Imh0dHBzOi8vZGF0cmFja2VyLmJ1cndvb2QubnN3Lmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9ZGhwZzlDM0U2OWM9JmFtcDtmaWxlTmFtZT1TdGF0ZW1lbnQrb2YrRW52aXJvbm1lbnRhbCtFZmZlY3RzKy0rMitCcm9va2x5bitTdHJlZXQrQnVyd29vZCstK0RBLjIwMjUuNC5QREYiIHRhcmdldD0iX2JsYW5rIj5WaWV3PC9hPjwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI1LzM0NzQgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD5Pd25lcnMgQ29uc2VudCAtIDIgQnJvb2tseW4gU3RyZWV0IEJ1cndvb2QgLSBEQS4yMDI1LjQ8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICBQREYNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAuODUgTUINCg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+PGEgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgcm9sZT0iYnV0dG9uIiBocmVmPSJodHRwczovL2RhdHJhY2tlci5idXJ3b29kLm5zdy5nb3YuYXUvRG9jdW1lbnQvRG93bmxvYWQ/a2V5PTNva3VVZTdCcWpJPSZhbXA7ZmlsZU5hbWU9T3duZXJzK0NvbnNlbnQrLSsyK0Jyb29rbHluK1N0cmVldCtCdXJ3b29kKy0rREEuMjAyNS40LlBERiIgdGFyZ2V0PSJfYmxhbmsiPlZpZXc8L2E+PC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjUvMzQ3NiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPldhc3RlIE1hbmFnZW1lbnQgUGxhbiAtIDIgQnJvb2tseW4gU3RyZWV0IEJ1cndvb2QgLSBEQS4yMDI1LjQ8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICBQREYNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAuMDEgTUINCg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+PGEgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgcm9sZT0iYnV0dG9uIiBocmVmPSJodHRwczovL2RhdHJhY2tlci5idXJ3b29kLm5zdy5nb3YuYXUvRG9jdW1lbnQvRG93bmxvYWQ/a2V5PXhMaktvNGpPTnpZPSZhbXA7ZmlsZU5hbWU9V2FzdGUrTWFuYWdlbWVudCtQbGFuKy0rMitCcm9va2x5bitTdHJlZXQrQnVyd29vZCstK0RBLjIwMjUuNC5QREYiIHRhcmdldD0iX2JsYW5rIj5WaWV3PC9hPjwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI1LzM0NzcgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD5Ob3RpZmljYXRpb24gUGxhbiAtIDIgQnJvb2tseW4gU3RyZWV0IEJ1cndvb2QgLSBEQS4yMDI1LjQ8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICBQREYNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAuMjggTUINCg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+PGEgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgcm9sZT0iYnV0dG9uIiBocmVmPSJodHRwczovL2RhdHJhY2tlci5idXJ3b29kLm5zdy5nb3YuYXUvRG9jdW1lbnQvRG93bmxvYWQ/a2V5PWQvdWl4U25jd3BRPSZhbXA7ZmlsZU5hbWU9Tm90aWZpY2F0aW9uK1BsYW4rLSsyK0Jyb29rbHluK1N0cmVldCtCdXJ3b29kKy0rREEuMjAyNS40LlBERiIgdGFyZ2V0PSJfYmxhbmsiPlZpZXc8L2E+PC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjUvMzQ5MCAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPkJ1aWx0IEFyZWEgQ2FsY3VsYXRpb24gUGxhbiAtIDIgQnJvb2tseW4gU3RyZWV0IEJ1cndvb2QgLSBEQS4yMDI1LjQ8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICBQREYNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAuMTkgTUINCg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+PGEgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgcm9sZT0iYnV0dG9uIiBocmVmPSJodHRwczovL2RhdHJhY2tlci5idXJ3b29kLm5zdy5nb3YuYXUvRG9jdW1lbnQvRG93bmxvYWQ/a2V5PTNUa28xZXZQK1dzPSZhbXA7ZmlsZU5hbWU9QnVpbHQrQXJlYStDYWxjdWxhdGlvbitQbGFuKy0rMitCcm9va2x5bitTdHJlZXQrQnVyd29vZCstK0RBLjIwMjUuNC5QREYiIHRhcmdldD0iX2JsYW5rIj5WaWV3PC9hPjwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI1LzM0OTIgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD5TdXJ2ZXkgUGxhbiAtIDIgQnJvb2tseW4gU3RyZWV0IEJ1cndvb2QgLSBEQS4yMDI1LjQ8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICBQREYNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAuNDEgTUINCg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+PGEgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgcm9sZT0iYnV0dG9uIiBocmVmPSJodHRwczovL2RhdHJhY2tlci5idXJ3b29kLm5zdy5nb3YuYXUvRG9jdW1lbnQvRG93bmxvYWQ/a2V5PWY0VklmSnJVcHNFPSZhbXA7ZmlsZU5hbWU9U3VydmV5K1BsYW4rLSsyK0Jyb29rbHluK1N0cmVldCtCdXJ3b29kKy0rREEuMjAyNS40LlBERiIgdGFyZ2V0PSJfYmxhbmsiPlZpZXc8L2E+PC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjUvMzQ5NCAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPlN0b3Jtd2F0ZXIgTWFuYWdlbWVudCBQbGFuIC0gMiBCcm9va2x5biBTdHJlZXQgQnVyd29vZCAtIERBLjIwMjUuNDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIFBERg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgMi42NCBNQg0KDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD48YSBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiByb2xlPSJidXR0b24iIGhyZWY9Imh0dHBzOi8vZGF0cmFja2VyLmJ1cndvb2QubnN3Lmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9MSsrNFdIaGhIUVU9JmFtcDtmaWxlTmFtZT1TdG9ybXdhdGVyK01hbmFnZW1lbnQrUGxhbistKzIrQnJvb2tseW4rU3RyZWV0K0J1cndvb2QrLStEQS4yMDI1LjQuUERGIiB0YXJnZXQ9Il9ibGFuayI+VmlldzwvYT48L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyNS8zNDk1ICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+QXJjaGl0ZWN0dXJhbCBQbGFucyAtIDIgQnJvb2tseW4gU3RyZWV0IEJ1cndvb2QgLSBEQS4yMDI1LjQ8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICBQREYNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDUuMzAgTUINCg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+PGEgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgcm9sZT0iYnV0dG9uIiBocmVmPSJodHRwczovL2RhdHJhY2tlci5idXJ3b29kLm5zdy5nb3YuYXUvRG9jdW1lbnQvRG93bmxvYWQ/a2V5PXV1bDlkVS9hUEZFPSZhbXA7ZmlsZU5hbWU9QXJjaGl0ZWN0dXJhbCtQbGFucystKzIrQnJvb2tseW4rU3RyZWV0K0J1cndvb2QrLStEQS4yMDI1LjQuUERGIiB0YXJnZXQ9Il9ibGFuayI+VmlldzwvYT48L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQoNCiAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgIDwvdGFibGU+DQo8L2Rpdj4NCg0KDQogICAgICAgICAgICA8aDMgaWQ9ImNvbnRhY3RVcyI+PGEgaHJlZj0iIyI+Q29udGFjdCBVczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PHA+VG8gbWFrZSBlbnF1aXJpZXMgcmVnYXJkaW5nIGFwcGxpY2F0aW9ucyBkaXNwbGF5ZWQgaGVyZSwgY29udGFjdCB1cyBieSBvbmUgb2YgdGhlIGZvbGxvd2luZyBtZXRob2RzOjwvcD4NCjx1bD4NCjxsaT5ieSBlbWFpbCZuYnNwOzxhIGhyZWY9Im1haWx0bzpjb3VuY2lsQGJ1cndvb2QubnN3Lmdvdi5hdSI+Y291bmNpbEBidXJ3b29kLm5zdy5nb3YuYXU8L2E+PC9saT4NCjxsaT5pbiB3cml0aW5nIHRvIFBPIEJveCAyNDAgQnVyd29vZCBOU1cgMTgwNS4gQWxsIGNvcnJlc3BvbmRlbmNlIHNob3VsZCBiZSBhZGRyZXNzZWQgdG8gdGhlIEdlbmVyYWwgTWFuYWdlciBhbmQgcXVvdGUgdGhlIHJlbGV2YW50IGFwcGxpY2F0aW9uIHJlZmVyZW5jZSBudW1iZXIuPC9saT4NCjxsaT5ieSBwaG9uaW5nIEN1c3RvbWVyIFNlcnZpY2UgQ2VudHJlIG9uICgwMikgOTkxMSA5OTExIGR1cmluZyBub3JtYWwgb2ZmaWNlIGhvdXJzIChNb25kYXkgdG8gRnJpZGF5LCA4LjMwYW0gdG8gNC40NXBtKTwvbGk+DQo8bGk+QXR0ZW5kIHRoZSBDb3VuY2lsIEN1c3RvbWVyIFNlcnZpY2UgQ2VudHJlIGR1cmluZyBidXNpbmVzcyBob3Vyczo8L2xpPg0KPC91bD4NCjxwPiZuYnNwOyAmbmJzcDsgJm5ic3A7MiBDb25kZXIgU3Q8YnIgLz4gJm5ic3A7Jm5ic3A7Jm5ic3A7QlVSV09PRCBOU1cgMjEzNDxiciAvPiA8L3A+PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9Im5vdGlmaWVkQWRkcmVzc2VzIj48YSBocmVmPSIjIj5Ob3RpZmllZCBBZGRyZXNzZXM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgIDxiPk5vIGRhdGEuPC9iPg0KICAgICAgICAgICAgPC9kaXY+DQoNCjxoMyBpZD0iZ29vZ2xlbWFwcyI+PGEgaHJlZj0iIyI+R29vZ2xlIE1hcHM8L2E+PC9oMz4NCjxkaXYgaWQ9Im1hcF9jb250YWluZXIiPg0KICAgIDxkaXYgaWQ9Im1hcF9jYW52YXMiIGNsYXNzPSJpZnJhbWUtcndkIj4NCiAgICA8L2Rpdj4NCjwvZGl2Pg0KDQo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+DQoNCiAgICB3aW5kb3cub25sb2FkID0gbG9hZEdvb2dsZU1hcHNTY3JpcHQ7DQoNCiAgICB2YXIgZ2VvY29kZXI7DQogICAgdmFyIG1hcDsNCiAgICB2YXIgdGltZW91dCA9IDMwMDsNCiAgICB2YXIgcHJvcGVydGllcyA9IFsiMiBCcm9va2x5biBTdCwgQnVyd29vZCAyMTM0IE5TVyAiXTsNCiAgICB2YXIgbGF0TG5nQXJyID0gW107DQoNCiAgICBmdW5jdGlvbiBsb2FkR29vZ2xlTWFwc1NjcmlwdCgpIHsNCiAgICAgICAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNjcmlwdCIpOw0KICAgICAgICBzY3JpcHQudHlwZSA9ICJ0ZXh0L2phdmFzY3JpcHQiOw0KICAgICAgICBzY3JpcHQuc3JjID0gIi8vbWFwcy5nb29nbGVhcGlzLmNvbS9tYXBzL2FwaS9qcz9rZXk9QUl6YVN5QVMxSnVZX0cxTUlBYmJNS3E0VWJRRWt0LVJJdFFUZnZ3JmNhbGxiYWNrPWxvYWRHb29nbGVNYXBzIjsNCiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHJlbmRlckdvb2dsZU1hcHMoKQ0KICAgIHsNCiAgICAgICAgdmFyIG1hcE9wdGlvbnMgPSB7DQogICAgICAgICAgICBjZW50ZXI6IGxhdExuZ0FyclswXSwNCiAgICAgICAgICAgIHpvb206IDE2LA0KICAgICAgICAgICAgbWFwVHlwZUlkOiBnb29nbGUubWFwcy5NYXBUeXBlSWQuUk9BRE1BUCwNCiAgICAgICAgICAgIG1hcFR5cGVDb250cm9sOiBmYWxzZQ0KICAgICAgICB9DQoNCiAgICAgICAgbWFwID0gbmV3IGdvb2dsZS5tYXBzLk1hcChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibWFwX2NhbnZhcyIpLCBtYXBPcHRpb25zKTsNCg0KICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGREb21MaXN0ZW5lcih3aW5kb3csICdyZXNpemUnLCBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgIHZhciBjZW50ZXIgPSBtYXAuZ2V0Q2VudGVyKCk7DQogICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC50cmlnZ2VyKG1hcCwgJ3Jlc2l6ZScpOw0KICAgICAgICAgICAgbWFwLnNldENlbnRlcihjZW50ZXIpOw0KICAgICAgICB9KTsNCg0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGxvYWRHb29nbGVNYXBzKCkgew0KICAgICAgICBnZW9jb2RlciA9IG5ldyBnb29nbGUubWFwcy5HZW9jb2RlcigpOw0KICAgICAgICB2YXIgbm9PZkZhaWxlZExvY2F0aW9uU2VhcmNoID0gMDsNCg0KICAgICAgICAkKHByb3BlcnRpZXMpLmVhY2goZnVuY3Rpb24gKGluZGV4LCBlbGVtZW50KSB7DQogICAgICAgICAgICB2YXIgcHJvcGVydHlBZGRyZXNzID0gZWxlbWVudDsNCg0KICAgICAgICAgICAgLy9HZXQgZ2VvY29kZQ0KICAgICAgICAgICAgZ2VvY29kZXIuZ2VvY29kZSh7ICdhZGRyZXNzJzogcHJvcGVydHlBZGRyZXNzIH0sIGZ1bmN0aW9uIChyZXN1bHRzLCBzdGF0dXMpIHsNCiAgICAgICAgICAgICAgICBpZiAoc3RhdHVzID09IGdvb2dsZS5tYXBzLkdlb2NvZGVyU3RhdHVzLk9LKSB7DQoNCiAgICAgICAgICAgICAgICAgICAgdmFyIGxvY2F0aW9uID0gcmVzdWx0c1swXS5nZW9tZXRyeS5sb2NhdGlvbjsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGxhdExuZyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmcobG9jYXRpb24ubGF0KCksIGxvY2F0aW9uLmxuZygpKTsNCg0KICAgICAgICAgICAgICAgICAgICBsYXRMbmdBcnIucHVzaChsYXRMbmcpOw0KDQogICAgICAgICAgICAgICAgICAgIGlmKGxhdExuZ0Fyci5sZW5ndGggPT0gMSkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyR29vZ2xlTWFwcygpOw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgLy9DcmVhdGUgbWFya2VyIGZvciBtYXAgYW5kIHBsYWNlIGl0IG9uIHRoZSBtYXANCiAgICAgICAgICAgICAgICAgICAgdmFyIG1hcmtlciA9IG5ldyBnb29nbGUubWFwcy5NYXJrZXIoew0KICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGxhdExuZywNCiAgICAgICAgICAgICAgICAgICAgICAgIG1hcDogbWFwDQogICAgICAgICAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICAgICAgICAgIHZhciBjb250ZW50U3RyaW5nID0gJzxkaXY+PHNwYW4+JyArIHByb3BlcnR5QWRkcmVzcyArICc8L3NwYW4+PC9kaXY+JzsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGluZm93aW5kb3cgPSBuZXcgZ29vZ2xlLm1hcHMuSW5mb1dpbmRvdyh7ICAgLy9DcmVhdGUgaW5mbyB3aW5kb3cNCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnRTdHJpbmcNCiAgICAgICAgICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIobWFya2VyLCAnY2xpY2snLCBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGluZm93aW5kb3cub3BlbihtYXAsIG1hcmtlcik7DQogICAgICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAvL2lmIG5vIGxvY2F0aW9uIGZvdW5kIGJ5IGdvb2dsZSBmb3IgYSBwcm9wZXJ0eQ0KICAgICAgICAgICAgICAgIGVsc2UgaWYgKHN0YXR1cyA9PSAiWkVST19SRVNVTFRTIikgew0KICAgICAgICAgICAgICAgICAgICBub09mRmFpbGVkTG9jYXRpb25TZWFyY2grKzsNCg0KICAgICAgICAgICAgICAgICAgICBpZihub09mRmFpbGVkTG9jYXRpb25TZWFyY2ggPT0gJChwcm9wZXJ0aWVzKS5sZW5ndGgpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlcGxhY2VHb29nbGVNYXBzQ29udGVudCgpOw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PSBnb29nbGUubWFwcy5HZW9jb2RlclN0YXR1cy5PVkVSX1FVRVJZX0xJTUlUKSB7DQogICAgICAgICAgICAgICAgICAgIC8vc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IGdldEdlb0NvZGVGb3JBZGRyZXNzKGlkLCBhZGRyZXNzKTsgfSwgKHRpbWVvdXQpKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KTsNCiAgICAgICAgfSk7DQogICAgfQ0KDQogICAgLy9SZXBsYWNlcyBnb29nbGUgbWFwcyBjb250ZW50IHdpdGggYSBuZXcgZGl2IGJsb2NrIHRoYXQgaGFzIGluZm8gbWVzc2FnZQ0KICAgIGZ1bmN0aW9uIHJlcGxhY2VHb29nbGVNYXBzQ29udGVudCgpIHsNCiAgICAgICAgdmFyIG5ld0NvbnRlbnQgPSAnPGRpdiBjbGFzcz0idWktYWNjb3JkaW9uLWNvbnRlbnQgdWktaGVscGVyLXJlc2V0IHVpLXdpZGdldC1jb250ZW50IHVpLWNvcm5lci1ib3R0b20iPicgKw0KICAgICAgICAgICAgJzxwPkNvdWxkblwndCBmaW5kIHRoZSBwcm9wZXJ0eSBhZGRyZXNzKGVzKSBvbiBHb29nbGUgTWFwcy4gPHA+JyArDQogICAgICAgICAgICAnPC9kaXY+JzsNCg0KICAgICAgICAkKCcjbWFwX2NvbnRhaW5lcicpLnJlcGxhY2VXaXRoKG5ld0NvbnRlbnQpOw0KICAgIH0NCg0KPC9zY3JpcHQ+DQoNCiAgICA8L2Rpdj4NCiAgICA8ZGl2IGNsYXNzPSJtb2RhbCBmYWRlIiBpZD0ic3VibWlzc2lvbi1tb2RhbCI+DQogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJzcGlubmVyIj48L2Rpdj4gPCEtLSBUaGlzIGRpdiBob3N0cyB0aGUgc3Bpbm5lciAtLT4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iY2xvc2UiIGRhdGEtZGlzbWlzcz0ibW9kYWwiIGFyaWEtbGFiZWw9IkNsb3NlIj48c3BhbiBhcmlhLWhpZGRlbj0idHJ1ZSI+JnRpbWVzOzwvc3Bhbj48L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJtb2RhbC10aXRsZSI+U3VibWlzc2lvbiBmb3IgMTAuMjAyNS40LjE8L2gyPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCg0KICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHsNCg0KICAgICAgICAkKCcjYXBwbGljYXRpb24nKS50b2dnbGVwYW5lbHMoKTsNCg0KICAgICAgICAgICAgJCgnI3Byb3BlcnRpZXMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI2RldGFpbHMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI3RyYWNraW5nJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNkb2N1bWVudHMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI3JlbGF0ZWRBcHBsaWNhdGlvbnMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI2dvb2dsZW1hcHMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI2NvbnRhY3RVcycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjZXhoaWJpdGlvbkRldGFpbHMnKS5jbGljaygpOw0KDQogICAgICAgIA0KDQoNCiAgICAgICAgJCgnI3N1Ym1pc3Npb24tYnRuJykuY2xpY2soZnVuY3Rpb24gKCkgeyAgICAgICAgDQoNCg0KICAgICAgICAgICAgdmFyIHVybCA9ICJodHRwczovL2RhdHJhY2tlci5idXJ3b29kLm5zdy5nb3YuYXUvL0FwcGxpY2F0aW9uL1N1Ym1pc3Npb24vIiArIGVuY29kZVVSSSgiMTAuMjAyNS40LjEiKTsNCg0KICAgICAgICAgICAgJCgnI3N1Ym1pc3Npb24tbW9kYWwnKS5tb2RhbCgnc2hvdycpLmZpbmQoJy5tb2RhbC1ib2R5JykubG9hZCh1cmwpOw0KICAgICAgICB9KTsNCiAgICB9KTsNCg0KDQogICAgLyogU2hvd3MgYWxsIHRoZSBwYW5lbHMgKi8NCiAgICBmdW5jdGlvbiBzaG93QWxsKCkgew0KICAgICAgICAkKCcjYXBwbGljYXRpb24nKS5jaGlsZHJlbigiaDMiKS5lYWNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKCJ1aS1zdGF0ZS1kZWZhdWx0IikpIHsNCiAgICAgICAgICAgICAgICAkKHRoaXMpLmNsaWNrKCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0pOw0KICAgIH0NCg0KDQogICAgLyogSGlkZSBhbGwgdGhlIHBhbmVscyAqLw0KICAgIGZ1bmN0aW9uIGhpZGVBbGwoKSB7DQogICAgICAgICQoJyNhcHBsaWNhdGlvbicpLmNoaWxkcmVuKCJoMyIpLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoInVpLXN0YXRlLWFjdGl2ZSIpKSB7DQogICAgICAgICAgICAgICAgJCh0aGlzKS5jbGljaygpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICA8L3NjcmlwdD4NCg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPCEtLSAvLmNvbnRhaW5lci1mbHVpZCAtLT4NCg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwhLS0gLyNwYWdlLXdyYXBwZXIgLS0+DQogICAgICAgICAgICA8L2Rpdj4NCg0KDQogICAgICAgICAgICA8ZGl2IGlkPSJHcmVlbkJhciI+DQogICAgICAgICAgICAgICAgPGEgc3R5bGU9ImN1cnNvcjpkZWZhdWx0Ij4gQ29weXJpZ2h0IMKpIDIwMTggQ2l2aWNhIHwgPC9hPg0KICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cuQnVyd29vZC5uc3cuZ292LmF1L2Rpc2NsYWltZXIiIHRhcmdldD0iX3BhcmVudCI+Q29weXJpZ2h0IGFuZCBEaXNjbGFpbWVyPC9hPg0KICAgICAgICAgICAgICAgIDxhIHN0eWxlPSJjdXJzb3I6ZGVmYXVsdCI+IHwgPC9hPg0KICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cuQnVyd29vZC5uc3cuZ292LmF1L3ByaXZhY3ktc3RhdGVtZW50IiB0YXJnZXQ9Il9wYXJlbnQiPlByaXZhY3kgU3RhdGVtZW50PC9hPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8ZGl2PiA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQoNCiAgICA8ZGl2IGlkPSJ0aXB0aXBfaG9sZGVyIiBzdHlsZT0ibWF4LXdpZHRoOjMwMHB4OyI+PGRpdiBpZD0idGlwdGlwX2Fycm93Ij48ZGl2IGlkPSJ0aXB0aXBfYXJyb3dfaW5uZXIiPjwvZGl2PjwvZGl2PjxkaXYgaWQ9InRpcHRpcF9jb250ZW50Ij48L2Rpdj48L2Rpdj4NCjwvYm9keT4NCg0KPC9odG1sPg0K
  recorded_at: Mon, 21 Apr 2025 17:14:00 GMT
- request:
    method: get
    uri: https://datracker.burwood.nsw.gov.au/Application/ApplicationDetails/010.2025.00000004.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=uml2rexu3zmqexpiaw0mhycx; User=accessAllowed-MasterView=True
      Host:
      - datracker.burwood.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 17:14:00 GMT
      Content-Length:
      - '36321'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 17:14:01 GMT
- request:
    method: get
    uri: https://datracker.burwood.nsw.gov.au/Application/ApplicationDetails/010.2025.00000005.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - datracker.burwood.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 302
      message: Found
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Home/Disclaimer"
      Server:
      - Microsoft-IIS/10.0
      Set-Cookie:
      - ASP.NET_SessionId=42kn4ghidreeg5muoxd1bebz; path=/; HttpOnly; SameSite=Lax
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 17:14:00 GMT
      Content-Length:
      - '133'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Home/Disclaimer\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 17:14:01 GMT
- request:
    method: get
    uri: https://datracker.burwood.nsw.gov.au/Home/Disclaimer
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=42kn4ghidreeg5muoxd1bebz
      Host:
      - datracker.burwood.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 17:14:01 GMT
      Content-Length:
      - '13592'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 17:14:01 GMT
- request:
    method: post
    uri: https://datracker.burwood.nsw.gov.au/Home/DisclaimerProcessing
    body:
      encoding: UTF-8
      string: agreed=true
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=42kn4ghidreeg5muoxd1bebz
      Host:
      - datracker.burwood.nsw.gov.au
      Referer:
      - https://datracker.burwood.nsw.gov.au/Home/Disclaimer
      Content-Type:
      - application/x-www-form-urlencoded
      Content-Length:
      - '11'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Application/ApplicationDetails/010.2025.00000005.001"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      Set-Cookie:
      - User=accessAllowed-MasterView=True; path=/
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 17:14:01 GMT
      Content-Length:
      - '170'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Application/ApplicationDetails/010.2025.00000005.001\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 17:14:01 GMT
- request:
    method: get
    uri: https://datracker.burwood.nsw.gov.au/Application/ApplicationDetails/010.2025.00000005.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=42kn4ghidreeg5muoxd1bebz; User=accessAllowed-MasterView=True
      Host:
      - datracker.burwood.nsw.gov.au
      Referer:
      - https://datracker.burwood.nsw.gov.au/Home/Disclaimer
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 17:14:02 GMT
      Content-Length:
      - '39991'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 17:14:02 GMT
- request:
    method: get
    uri: https://datracker.burwood.nsw.gov.au/Application/ApplicationDetails/010.2025.00000005.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=42kn4ghidreeg5muoxd1bebz; User=accessAllowed-MasterView=True
      Host:
      - datracker.burwood.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 17:14:02 GMT
      Content-Length:
      - '39991'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 17:14:03 GMT
- request:
    method: get
    uri: https://datracker.burwood.nsw.gov.au/Application/ApplicationDetails/010.2025.00000007.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - datracker.burwood.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 302
      message: Found
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Home/Disclaimer"
      Server:
      - Microsoft-IIS/10.0
      Set-Cookie:
      - ASP.NET_SessionId=dalxarzidtj2ejssnt22nmw2; path=/; HttpOnly; SameSite=Lax
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 17:14:03 GMT
      Content-Length:
      - '133'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Home/Disclaimer\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 17:14:03 GMT
- request:
    method: get
    uri: https://datracker.burwood.nsw.gov.au/Home/Disclaimer
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=dalxarzidtj2ejssnt22nmw2
      Host:
      - datracker.burwood.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 17:14:03 GMT
      Content-Length:
      - '13592'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 17:14:03 GMT
- request:
    method: post
    uri: https://datracker.burwood.nsw.gov.au/Home/DisclaimerProcessing
    body:
      encoding: UTF-8
      string: agreed=true
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=dalxarzidtj2ejssnt22nmw2
      Host:
      - datracker.burwood.nsw.gov.au
      Referer:
      - https://datracker.burwood.nsw.gov.au/Home/Disclaimer
      Content-Type:
      - application/x-www-form-urlencoded
      Content-Length:
      - '11'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Application/ApplicationDetails/010.2025.00000007.001"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      Set-Cookie:
      - User=accessAllowed-MasterView=True; path=/
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 17:14:03 GMT
      Content-Length:
      - '170'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Application/ApplicationDetails/010.2025.00000007.001\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 17:14:04 GMT
- request:
    method: get
    uri: https://datracker.burwood.nsw.gov.au/Application/ApplicationDetails/010.2025.00000007.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=dalxarzidtj2ejssnt22nmw2; User=accessAllowed-MasterView=True
      Host:
      - datracker.burwood.nsw.gov.au
      Referer:
      - https://datracker.burwood.nsw.gov.au/Home/Disclaimer
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 17:14:04 GMT
      Content-Length:
      - '34037'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQo8aHRtbCBsYW5nPSJlbiI+DQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+DQogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4NCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPg0KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIj4NCiAgICA8bWV0YSBuYW1lPSJrZXl3b3JkcyIgY29udGVudD0iQnVyd29vZCBDb3VuY2lsLERBIFRyYWNrZXIsRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24sRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24gVHJhY2tpbmcsIERBIEVucXVpcnksIERldmVsb3BtZW50IEFwcGxpY2F0aW9uIEVucXVpcnksIEFwcGxpY2F0aW9uIFRyYWNrZXIiPg0KICAgIDxtZXRhIG5hbWU9ImRlc2NyaXB0aW9uIiBjb250ZW50PSJUaGUgb2ZmaWNpYWwgQnVyd29vZCBSZWdpb25hbCBDb3VuY2lsIEFwcGxpY2F0aW9uIFRyYWNrZXIiPg0KDQogICAgPHRpdGxlPkJ1cndvb2QgQ291bmNpbCAtIEFwcGxpY2F0aW9uIFRyYWNrZXI8L3RpdGxlPg0KDQogICAgPCEtLWZhdmljb24tLT4NCiAgICA8bGluayBocmVmPSIvZmF2aWNvbi5pY28iIHJlbD0ic2hvcnRjdXQgaWNvbiIgdHlwZT0iaW1hZ2UveC1pY29uIj4NCg0KICAgIDwhLS0galF1ZXJ5IC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvU2NyaXB0cy9qcXVlcnktMS4xMS4xLmpzIj48L3NjcmlwdD4NCg0KICAgIDxzY3JpcHQgc3JjPSIvU2NyaXB0cy9qcXVlcnktdWktMS4xMS4yLmpzIj48L3NjcmlwdD4NCg0KICAgIDxsaW5rIGhyZWY9Ii9Db250ZW50L3RoZW1lcy9iYXNlL2NvcmUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9Db250ZW50L3RoZW1lcy9iYXNlL2FjY29yZGlvbi5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvdGhlbWUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPCEtLSBCb290c3RyYXAgLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2Jvb3RzdHJhcC5qcyI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9ib290c3RyYXAtdGhlbWUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9Db250ZW50L2Jvb3RzdHJhcC5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQogICAgPGxpbmsgaHJlZj0iL0NvbnRlbnQvZm9udC1hd2Vzb21lLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDwhLS0gRGF0YVRhYmxlcyAtLT4NCiAgICA8c2NyaXB0IHNyYz0iL1NjcmlwdHMvRGF0YVRhYmxlcy9qcXVlcnkuZGF0YVRhYmxlcy5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL1NjcmlwdHMvRGF0YVRhYmxlcy9kYXRhVGFibGVzLmJvb3RzdHJhcC5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL1NjcmlwdHMvRGF0YVRhYmxlcy9kYXRhVGFibGVzLnJlc3BvbnNpdmUuanMiPjwvc2NyaXB0Pg0KDQogICAgDQogICAgPGxpbmsgaHJlZj0iL0NvbnRlbnQvRGF0YVRhYmxlcy9jc3MvZGF0YVRhYmxlcy5ib290c3RyYXAuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9Db250ZW50L0RhdGFUYWJsZXMvY3NzL2RhdGFUYWJsZXMucmVzcG9uc2l2ZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvRGF0YVRhYmxlcy9jc3MvZGF0YVRhYmxlcy5yZXNwb25zaXZlLnNjc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQoNCiAgICA8IS0tIEJvb3RzdHJhcCBTQi1BZG1pbi0yIFBsdWdpbiBhbmQgb3RoZXIgY3NzIGFuZCBqcyBmaWxlcy0tPg0KICAgIDxzY3JpcHQgc3JjPSIvanMvYm9vdHN0cmFwLWNvbWJvYm94LmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvYm9vdHN0cmFwLWRhdGVwaWNrZXIuanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9qcy9ib290c3RyYXAtZGlhbG9nLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvanF1ZXJ5LmZvcm0uanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9qcy9qcXVlcnkudGFibGVzb3J0ZXIuanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9qcy9tYXN0ZXJ2aWV3LmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvbWV0aXNNZW51LmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvc2ItYWRtaW4tMi5qcyI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvY3NzL2Jvb3RzdHJhcC1jb21ib2JveC5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL2Nzcy9kYXRlcGlja2VyMy5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL2Nzcy9tYXN0ZXJ2aWV3LWN1c3RvbWlzYXRpb25zLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvY3NzL3NiLWFkbWluLTIuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPGxpbmsgaHJlZj0iL0NvdW5jaWxfVGhlbWUvQnVyd29vZC9idXJ3b29kLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICANCg0KICAgIDwhLS0gSFRNTDUgU2hpbSBhbmQgUmVzcG9uZC5qcyBJRTggc3VwcG9ydCBvZiBIVE1MNSBlbGVtZW50cyBhbmQgbWVkaWEgcXVlcmllcyAtLT4NCiAgICA8IS0tIFdBUk5JTkc6IFJlc3BvbmQuanMgZG9lc24ndCB3b3JrIGlmIHlvdSB2aWV3IHRoZSBwYWdlIHZpYSBmaWxlOi8vIC0tPg0KICAgIDwhLS1baWYgbHQgSUUgOV0+DQogICAgICAgIDxzY3JpcHQgc3JjPSJodHRwczovL29zcy5tYXhjZG4uY29tL2xpYnMvaHRtbDVzaGl2LzMuNy4wL2h0bWw1c2hpdi5qcyI+PC9zY3JpcHQ+DQogICAgICAgIDxzY3JpcHQgc3JjPSJodHRwczovL29zcy5tYXhjZG4uY29tL2xpYnMvcmVzcG9uZC5qcy8xLjQuMi9yZXNwb25kLm1pbi5qcyI+PC9zY3JpcHQ+DQogICAgPCFbZW5kaWZdLS0+DQo8L2hlYWQ+DQoNCg0KDQo8Ym9keT4NCiAgICA8ZGl2IGNsYXNzPSJwdXNobWVudSBjYnAtc3BtZW51LXB1c2giPg0KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPg0KICAgICAgICAgICAgPGhlYWRlciBpZD0iSGVhZGVyIj4NCiAgICAgICAgICAgICAgICA8bmF2IGNsYXNzPSJuYXZiYXIgbmF2YmFyLWRlZmF1bHQiIHJvbGU9Im5hdmlnYXRpb24iIGlkPSJOYXZCYXIiPg0KICAgICAgICAgICAgICAgICAgICA8IS0tIEJyYW5kIGFuZCB0b2dnbGUgZ2V0IGdyb3VwZWQgZm9yIGJldHRlciBtb2JpbGUgZGlzcGxheSAtLT4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibmF2YmFyLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ1dGlscyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSJodHRwOi8vd3d3LkJ1cndvb2QubnN3Lmdvdi5hdSI+SG9tZTwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cDovL3d3dy5CdXJ3b29kLm5zdy5nb3YuYXUvY29udGFjdF91cy5odG1sIj5Db250YWN0IFVzPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGgxIGlkPSJsb2dvIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3LkJ1cndvb2QubnN3Lmdvdi5hdSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvQ291bmNpbF9UaGVtZS9CdXJ3b29kL0J1cndvb2RDb3VuY2lsbG9nb1NNLnBuZyIgYWx0PSJCdXJ3b29kIFJlZ2lvbmFsIENvdW5jaWwiPjxzdHJvbmcgY2xhc3M9InZoIj5CdXJ3b29kIFJlZ2lvbmFsIENvdW5jaWw8L3N0cm9uZz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2gxPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L25hdj4NCiAgICAgICAgICAgIDwvaGVhZGVyPg0KDQogICAgICAgICAgICA8ZGl2IGlkPSJjb250ZW50Ij4NCiAgICAgICAgICAgICAgICA8IS0tIE5hdmlnYXRpb24gLS0+DQogICAgICAgICAgICAgICAgPG5hdiBjbGFzcz0ibmF2YmFyIG5hdmJhci1kZWZhdWx0IG5hdmJhci1zdGF0aWMtdG9wIiByb2xlPSJuYXZpZ2F0aW9uIiBzdHlsZT0ibWFyZ2luLWJvdHRvbTogMCI+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJuYXZiYXItdG9nZ2xlIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtdGFyZ2V0PSIubmF2YmFyLWNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3Itb25seSI+VG9nZ2xlIG5hdmlnYXRpb248L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tYmFyIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tYmFyIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tYmFyIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXZiYXItYnJhbmQiIGhyZWY9Ii9Ib21lL0luZGV4Ij48L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLWhlYWRlciAtLT4NCiAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2YmFyLXRvcC1saW5rcyBuYXZiYXItcmlnaHQgaGlkZGVuLXhzIGhpZGRlbi1zbSBoaWRkZW4tbWQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxzcGFuIGlkPSJwcmludEljb24iIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXByaW50IiBvbmNsaWNrPSJ3aW5kb3cucHJpbnQoKTsiPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICA8L3VsPg0KDQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1kZWZhdWx0IHNpZGViYXIiIHJvbGU9Im5hdmlnYXRpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2lkZWJhci1uYXYgbmF2YmFyLWNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiIgaWQ9InNpZGUtbWVudSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY3RpdmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48aSBjbGFzcz0iZmEgZmEtbGlzdC11bCBmYS1mdyI+PC9pPkFwcGxpY2F0aW9uIFRyYWNrZXI8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdi1zZWNvbmQtbGV2ZWwgY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9BYm91dCB0YXJnZXQ9X3NlbGY+V2hhdCBpcyBBcHBsaWNhdGlvbiBUcmFja2VyPzwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9EaXNjbGFpbWVyIHRhcmdldD1fc2VsZj5EaXNjbGFpbWVyPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gLy5uYXYtc2Vjb25kLWxldmVsIC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY3RpdmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48aSBjbGFzcz0iZmEgZmEtbGlzdC11bCBmYS1mdyI+PC9pPkFwcGxpY2F0aW9uczxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL0luZGV4IHRhcmdldD0+QXBwbGljYXRpb24gVHJhY2tlciBIb21lPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL1NlYXJjaCBpZD1zZWFyY2ggdGFyZ2V0PV9zZWxmPlNlYXJjaDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/UmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1UcnVlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSBpZD1vdXRzdGFuZGluZy1hcHBzIHRhcmdldD1fc2VsZj5VbmRldGVybWluZWQgQXBwbGljYXRpb25zPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9SZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9VHJ1ZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIGlkPWV4aGliaXRlZC1hcHBzIHRhcmdldD1fc2VsZj5BcHBsaWNhdGlvbnMgT24gRXhoaWJpdGlvbjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbnMgU3VibWl0dGVkPHNwYW4gY2xhc3M9ImZhIGFycm93Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXYtc2Vjb25kLWxldmVsIGNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTIxJTJmMDQlMmYyMDI1JkRhdGVUbz0yMiUyZjA0JTJmMjAyNSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPlRoaXMgV2VlazwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MTMlMmYwNCUyZjIwMjUmRGF0ZVRvPTE5JTJmMDQlMmYyMDI1JkRhdGVUeXBlPTEmUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBXZWVrPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDQlMmYyMDI1JkRhdGVUbz0yMiUyZjA0JTJmMjAyNSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPlRoaXMgTW9udGg8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTElMmYwMyUyZjIwMjUmRGF0ZVRvPTMxJTJmMDMlMmYyMDI1JkRhdGVUeXBlPTEmUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbnMgRGV0ZXJtaW5lZDxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0yMSUyZjA0JTJmMjAyNSZEYXRlVG89MjIlMmYwNCUyZjIwMjUmRGF0ZVR5cGU9MiZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9VHJ1ZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPlRoaXMgV2VlazwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MTMlMmYwNCUyZjIwMjUmRGF0ZVRvPTE5JTJmMDQlMmYyMDI1JkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5MYXN0IFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTElMmYwNCUyZjIwMjUmRGF0ZVRvPTIyJTJmMDQlMmYyMDI1JkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIE1vbnRoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDMlMmYyMDI1JkRhdGVUbz0zMSUyZjAzJTJmMjAyNSZEYXRlVHlwZT0yJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1UcnVlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLnNpZGViYXItY29sbGFwc2UgLS0+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLXN0YXRpYy1zaWRlIC0tPg0KICAgICAgICAgICAgICAgIDwvbmF2Pg0KICAgICAgICAgICAgICAgIDxkaXYgaWQ9InBhZ2Utd3JhcHBlciI+DQoNCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyLWZsdWlkIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgDQoNCg0KICAgIDxkaXYgY2xhc3M9InBhZ2UtaGVhZGVyIj4NCiAgICAgICAgPGgyPkFwcGxpY2F0aW9uOiBEZXZlbG9wbWVudCBBcHBsaWNhdGlvbiAoMTAuMjAyNS43LjEpPC9oMj4NCiAgICA8L2Rpdj4NCiAgICA8aDQ+RGV0YWlsZWQgaW5mb3JtYXRpb24gcmVsYXRlZCB0byB0aGUgYXBwbGljYXRpb246PC9oND4NCiAgICA8YnIgLz4NCiAgICA8ZGl2Pg0KICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnNob3dBbGwoKTsiPlNob3cgQWxsPC9hPiAvDQogICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6aGlkZUFsbCgpOyI+SGlkZSBBbGw8L2E+DQogICAgPC9kaXY+DQogICAgPGRpdiBpZD0iYXBwbGljYXRpb24iPg0KDQogICAgICAgICAgICA8aDMgaWQ9ImRldGFpbHMiPjxhIGhyZWY9IiMiPkRldGFpbHM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRlc2NyaXB0aW9uOiA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBpZD0iZGVzY3JpcHRpb24iPkRlbW9saXRpb24gb2YgZXhpc3RpbmcgZ2FyYWdlLCBjb25zdHJ1Y3Rpb24gb2YgYSBuZXcgZ2FyYWdlPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlN1Ym1pdHRlZCBEYXRlOiA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjA1LzAyLzIwMjUgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFwcGxpY2F0aW9uIFR5cGU6IDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRldmVsb3BtZW50IEFwcGxpY2F0aW9uPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9InByb3BlcnRpZXMiPjxhIGhyZWY9IiMiPlByb3BlcnRpZXM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJwcm9wZXJ0eS1saXN0Ij45IEJveWxlIFN0LCBDcm95ZG9uIFBhcmsgMjEzMyBOU1cgIChMb3Q6IEEgRFA6IDMyNDgzNCk8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0icGVvcGxlIj48YSBocmVmPSIjIj5QZW9wbGU8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcHBsaWNhbnQ6IFJvc2FsaWUgU2FwaW8NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQcmluY2lwYWwgQ2VydGlmeWluZyBBdXRob3JpdHk6ICANCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9Im9mZmljZXIiPjxhIGhyZWY9IiMiPk9mZmljZXI8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJvZmZpY2VyTmFtZSI+SnVsaWFuIFNjaWFycm9uZTwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJkZWNpc2lvbiI+PGEgaHJlZj0iIyI+RGVjaXNpb248L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFwcGxpY2F0aW9uIFN0YXR1czogRGV0ZXJtaW5lZDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGV0ZXJtaW5hdGlvbiBEYXRlOg0KMTAvMDMvMjAyNSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5EZXRlcm1pbmF0aW9uIFR5cGU6IEFwcHJvdmVkIGJ5IERlbGVnYXRlZCBBdXRob3JpdHk8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0iZXN0aW1hdGVkQ29zdCI+PGEgaHJlZj0iIyI+RXN0aW1hdGVkIENvc3Q8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPiQ0OCwwMDAuMDA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0idHJhY2tpbmciPjxhIGhyZWY9IiMiPlRyYWNraW5nPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpY29uLXdyYXAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+c3dpcGUgdGFibGUgdG8gdGhlIGxlZnQgdG8gcmV2ZWFsIG1vcmUgZGF0YTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWFycm93LXJpZ2h0IiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSB0YWJsZS1zdHJpcGVkIHRhYmxlLWJvcmRlcmVkIG5vLWZvb3RlciI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+RGVzY3JpcHRpb248L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+Q29tbWVuY2VkIERhdGU8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+Q29tcGxldGVkIERhdGU8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+UmVmZXIgdG8gVHJlZSBNYW5hZ2VtZW50PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjEzLzAyLzIwMjUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQowMy8wMy8yMDI1ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlJlZmVyIHRvIEVuZ2luZWVyaW5nIChHZW5lcmFsKTwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoxMy8wMi8yMDI1ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjUvMDMvMjAyNSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCg0KDQoNCg0KICAgICAgICAgICAgPGgzIGlkPSJyZWxhdGVkQXBwbGljYXRpb25zIj48YSBocmVmPSIjIj5SZWxhdGVkIEFwcGxpY2F0aW9uczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgPGI+Tm8gZGF0YS48L2I+DQogICAgICAgICAgICA8L2Rpdj4NCg0KDQoNCg0KDQoNCg0KPGgzIGlkPSJkb2N1bWVudHMiPjxhIGhyZWY9IiMiPkRvY3VtZW50czwvYT48L2gzPg0KPGRpdj4NCg0KICAgICAgICA8ZGl2IGNsYXNzPSJpY29uLXdyYXAiPg0KICAgICAgICAgICAgPHNwYW4+c3dpcGUgdGFibGUgdG8gdGhlIGxlZnQgdG8gcmV2ZWFsIG1vcmUgZGF0YTwvc3Bhbj4NCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWFycm93LXJpZ2h0IiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9zcGFuPg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBpZD0iZG9jLWNvdW50Ij5Ub3RhbCBudW1iZXIgb2YgZG9jdW1lbnRzOiAxMjwvZGl2Pg0KICAgICAgICA8dGFibGUgaWQ9ImRvYy10YWJsZSIgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtYm9yZGVyZWQgbm8tZm9vdGVyIj4NCiAgICAgICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0aD5SZWNvcmQgTnVtYmVyPC90aD4NCiAgICAgICAgICAgICAgICAgICAgPHRoPkRlc2NyaXB0aW9uPC90aD4NCiAgICAgICAgICAgICAgICAgICAgPHRoPkRvY3VtZW50IFR5cGU8L3RoPg0KICAgICAgICAgICAgICAgICAgICA8dGg+U2l6ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgIDx0aD5WaWV3IExpbms8L3RoPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICA8L3RoZWFkPg0KICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjUvNzA5MSAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPlN0YXRlbWVudCBvZiBFbnZpcm9ubWVudGFsIEVmZmVjdHMgLSA5IEJveWxlIFN0cmVldCBDcm95ZG9uIFBhcmsgLSBEQS4yMDI1Ljc8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICBQREYNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEuMzggTUINCg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+PGEgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgcm9sZT0iYnV0dG9uIiBocmVmPSJodHRwczovL2RhdHJhY2tlci5idXJ3b29kLm5zdy5nb3YuYXUvRG9jdW1lbnQvRG93bmxvYWQ/a2V5PU4vdzRGcllzVEs0PSZhbXA7ZmlsZU5hbWU9U3RhdGVtZW50K29mK0Vudmlyb25tZW50YWwrRWZmZWN0cystKzkrQm95bGUrU3RyZWV0K0Nyb3lkb24rUGFyaystK0RBLjIwMjUuNy5QREYiIHRhcmdldD0iX2JsYW5rIj5WaWV3PC9hPjwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI1LzcxMDEgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD5XYXN0ZSBNYW5hZ2VtZW50IFBsYW4gLSA5IEJveWxlIFN0cmVldCBDcm95ZG9uIFBhcmsgLSBEQS4yMDI1Ljc8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICBQREYNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAuMjMgTUINCg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+PGEgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgcm9sZT0iYnV0dG9uIiBocmVmPSJodHRwczovL2RhdHJhY2tlci5idXJ3b29kLm5zdy5nb3YuYXUvRG9jdW1lbnQvRG93bmxvYWQ/a2V5PVFVbkJkRUVHS29VPSZhbXA7ZmlsZU5hbWU9V2FzdGUrTWFuYWdlbWVudCtQbGFuKy0rOStCb3lsZStTdHJlZXQrQ3JveWRvbitQYXJrKy0rREEuMjAyNS43LlBERiIgdGFyZ2V0PSJfYmxhbmsiPlZpZXc8L2E+PC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjUvNzEwNCAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPk5vdGlmaWNhdGlvbiBQbGFucyAtIDkgQm95bGUgU3RyZWV0IENyb3lkb24gUGFyayAtIERBLjIwMjUuNzwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIFBERg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgMC40OCBNQg0KDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD48YSBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiByb2xlPSJidXR0b24iIGhyZWY9Imh0dHBzOi8vZGF0cmFja2VyLmJ1cndvb2QubnN3Lmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9SkI3cW9MODluMkE9JmFtcDtmaWxlTmFtZT1Ob3RpZmljYXRpb24rUGxhbnMrLSs5K0JveWxlK1N0cmVldCtDcm95ZG9uK1BhcmsrLStEQS4yMDI1LjcuUERGIiB0YXJnZXQ9Il9ibGFuayI+VmlldzwvYT48L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyNS83MTA1ICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+V2FzdGUgTWFuYWdlbWVudCBQbGFuIGFuZCBEZW1vbGl0aW9uIFBsYW4gLSA5IEJveWxlIFN0cmVldCBDcm95ZG9uIFBhcmsgLSBEQS4yMDI1Ljc8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICBQREYNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAuMzcgTUINCg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+PGEgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgcm9sZT0iYnV0dG9uIiBocmVmPSJodHRwczovL2RhdHJhY2tlci5idXJ3b29kLm5zdy5nb3YuYXUvRG9jdW1lbnQvRG93bmxvYWQ/a2V5PUpXYno4NXVmQTVvPSZhbXA7ZmlsZU5hbWU9V2FzdGUrTWFuYWdlbWVudCtQbGFuK2FuZCtEZW1vbGl0aW9uK1BsYW4rLSs5K0JveWxlK1N0cmVldCtDcm95ZG9uK1BhcmsrLStEQS4yMDI1LjcuUERGIiB0YXJnZXQ9Il9ibGFuayI+VmlldzwvYT48L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyNS83MTA4ICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+TGFuZHNjYXBlIFBsYW4gLSA5IEJveWxlIFN0cmVldCBDcm95ZG9uIFBhcmsgLSBEQS4yMDI1Ljc8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICBQREYNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAuNzcgTUINCg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+PGEgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgcm9sZT0iYnV0dG9uIiBocmVmPSJodHRwczovL2RhdHJhY2tlci5idXJ3b29kLm5zdy5nb3YuYXUvRG9jdW1lbnQvRG93bmxvYWQ/a2V5PWMvVytNN2JzMmhrPSZhbXA7ZmlsZU5hbWU9TGFuZHNjYXBlK1BsYW4rLSs5K0JveWxlK1N0cmVldCtDcm95ZG9uK1BhcmsrLStEQS4yMDI1LjcuUERGIiB0YXJnZXQ9Il9ibGFuayI+VmlldzwvYT48L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyNS83MTA5ICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+U3VydmV5IC0gOSBCb3lsZSBTdHJlZXQgQ3JveWRvbiBQYXJrIC0gREEuMjAyNS43PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgUERGDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLjIzIE1CDQoNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHJvbGU9ImJ1dHRvbiIgaHJlZj0iaHR0cHM6Ly9kYXRyYWNrZXIuYnVyd29vZC5uc3cuZ292LmF1L0RvY3VtZW50L0Rvd25sb2FkP2tleT0xMEpxT1JSWlpibz0mYW1wO2ZpbGVOYW1lPVN1cnZleSstKzkrQm95bGUrU3RyZWV0K0Nyb3lkb24rUGFyaystK0RBLjIwMjUuNy5QREYiIHRhcmdldD0iX2JsYW5rIj5WaWV3PC9hPjwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI1LzcxMTQgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD5TdG9ybXdhdGVyIFBsYW5zIC0gOSBCb3lsZSBTdHJlZXQgQ3JveWRvbiBQYXJrIC0gREEuMjAyNS43PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgUERGDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAyLjc0IE1CDQoNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHJvbGU9ImJ1dHRvbiIgaHJlZj0iaHR0cHM6Ly9kYXRyYWNrZXIuYnVyd29vZC5uc3cuZ292LmF1L0RvY3VtZW50L0Rvd25sb2FkP2tleT1scWhDb1FQbGZuVT0mYW1wO2ZpbGVOYW1lPVN0b3Jtd2F0ZXIrUGxhbnMrLSs5K0JveWxlK1N0cmVldCtDcm95ZG9uK1BhcmsrLStEQS4yMDI1LjcuUERGIiB0YXJnZXQ9Il9ibGFuayI+VmlldzwvYT48L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyNS83MTE2ICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+U2l0ZSBQbGFuIC0gOSBCb3lsZSBTdHJlZXQgQ3JveWRvbiBQYXJrIC0gREEuMjAyNS43PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgUERGDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLjQwIE1CDQoNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHJvbGU9ImJ1dHRvbiIgaHJlZj0iaHR0cHM6Ly9kYXRyYWNrZXIuYnVyd29vZC5uc3cuZ292LmF1L0RvY3VtZW50L0Rvd25sb2FkP2tleT1ITVE5NDdQMXJQcz0mYW1wO2ZpbGVOYW1lPVNpdGUrUGxhbistKzkrQm95bGUrU3RyZWV0K0Nyb3lkb24rUGFyaystK0RBLjIwMjUuNy5QREYiIHRhcmdldD0iX2JsYW5rIj5WaWV3PC9hPjwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI1LzcxMTcgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD5GbG9vciBQbGFucyAtIDkgQm95bGUgU3RyZWV0IENyb3lkb24gUGFyayAtIERBLjIwMjUuNzwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIFBERg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgMS4wMiBNQg0KDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD48YSBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiByb2xlPSJidXR0b24iIGhyZWY9Imh0dHBzOi8vZGF0cmFja2VyLmJ1cndvb2QubnN3Lmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9cE1GZ0grUjVHTHM9JmFtcDtmaWxlTmFtZT1GbG9vcitQbGFucystKzkrQm95bGUrU3RyZWV0K0Nyb3lkb24rUGFyaystK0RBLjIwMjUuNy5QREYiIHRhcmdldD0iX2JsYW5rIj5WaWV3PC9hPjwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI1LzcxMTkgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD5FbGV2YXRpb25zIGFuZCBTZWN0aW9ucyAtIDkgQm95bGUgU3RyZWV0IENyb3lkb24gUGFyayAtIERBLjIwMjUuNzwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIFBERg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgMS4wMiBNQg0KDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD48YSBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiByb2xlPSJidXR0b24iIGhyZWY9Imh0dHBzOi8vZGF0cmFja2VyLmJ1cndvb2QubnN3Lmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9Wm5sQlFiUmZrcmM9JmFtcDtmaWxlTmFtZT1FbGV2YXRpb25zK2FuZCtTZWN0aW9ucystKzkrQm95bGUrU3RyZWV0K0Nyb3lkb24rUGFyaystK0RBLjIwMjUuNy5QREYiIHRhcmdldD0iX2JsYW5rIj5WaWV3PC9hPjwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI1LzcxMjAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD5BcmVhIENhbGN1bGF0aW9ucyAtIDkgQm95bGUgU3RyZWV0IENyb3lkb24gUGFyayAtIERBLjIwMjUuNzwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIFBERg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgMC4yOSBNQg0KDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD48YSBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiByb2xlPSJidXR0b24iIGhyZWY9Imh0dHBzOi8vZGF0cmFja2VyLmJ1cndvb2QubnN3Lmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9enh0Z0tiNG8yMm89JmFtcDtmaWxlTmFtZT1BcmVhK0NhbGN1bGF0aW9ucystKzkrQm95bGUrU3RyZWV0K0Nyb3lkb24rUGFyaystK0RBLjIwMjUuNy5QREYiIHRhcmdldD0iX2JsYW5rIj5WaWV3PC9hPjwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI1LzcxMjQgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD5BcmNoaXRlY3R1cmFsIFBsYW5zIC0gOSBCb3lsZSBTdHJlZXQgQ3JveWRvbiBQYXJrIC0gREEuMjAyNS43PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgUERGDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAzLjE1IE1CDQoNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHJvbGU9ImJ1dHRvbiIgaHJlZj0iaHR0cHM6Ly9kYXRyYWNrZXIuYnVyd29vZC5uc3cuZ292LmF1L0RvY3VtZW50L0Rvd25sb2FkP2tleT1tbitSTXNwdXNhdz0mYW1wO2ZpbGVOYW1lPUFyY2hpdGVjdHVyYWwrUGxhbnMrLSs5K0JveWxlK1N0cmVldCtDcm95ZG9uK1BhcmsrLStEQS4yMDI1LjcuUERGIiB0YXJnZXQ9Il9ibGFuayI+VmlldzwvYT48L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQoNCiAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgIDwvdGFibGU+DQo8L2Rpdj4NCg0KDQogICAgICAgICAgICA8aDMgaWQ9ImNvbnRhY3RVcyI+PGEgaHJlZj0iIyI+Q29udGFjdCBVczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PHA+VG8gbWFrZSBlbnF1aXJpZXMgcmVnYXJkaW5nIGFwcGxpY2F0aW9ucyBkaXNwbGF5ZWQgaGVyZSwgY29udGFjdCB1cyBieSBvbmUgb2YgdGhlIGZvbGxvd2luZyBtZXRob2RzOjwvcD4NCjx1bD4NCjxsaT5ieSBlbWFpbCZuYnNwOzxhIGhyZWY9Im1haWx0bzpjb3VuY2lsQGJ1cndvb2QubnN3Lmdvdi5hdSI+Y291bmNpbEBidXJ3b29kLm5zdy5nb3YuYXU8L2E+PC9saT4NCjxsaT5pbiB3cml0aW5nIHRvIFBPIEJveCAyNDAgQnVyd29vZCBOU1cgMTgwNS4gQWxsIGNvcnJlc3BvbmRlbmNlIHNob3VsZCBiZSBhZGRyZXNzZWQgdG8gdGhlIEdlbmVyYWwgTWFuYWdlciBhbmQgcXVvdGUgdGhlIHJlbGV2YW50IGFwcGxpY2F0aW9uIHJlZmVyZW5jZSBudW1iZXIuPC9saT4NCjxsaT5ieSBwaG9uaW5nIEN1c3RvbWVyIFNlcnZpY2UgQ2VudHJlIG9uICgwMikgOTkxMSA5OTExIGR1cmluZyBub3JtYWwgb2ZmaWNlIGhvdXJzIChNb25kYXkgdG8gRnJpZGF5LCA4LjMwYW0gdG8gNC40NXBtKTwvbGk+DQo8bGk+QXR0ZW5kIHRoZSBDb3VuY2lsIEN1c3RvbWVyIFNlcnZpY2UgQ2VudHJlIGR1cmluZyBidXNpbmVzcyBob3Vyczo8L2xpPg0KPC91bD4NCjxwPiZuYnNwOyAmbmJzcDsgJm5ic3A7MiBDb25kZXIgU3Q8YnIgLz4gJm5ic3A7Jm5ic3A7Jm5ic3A7QlVSV09PRCBOU1cgMjEzNDxiciAvPiA8L3A+PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9Im5vdGlmaWVkQWRkcmVzc2VzIj48YSBocmVmPSIjIj5Ob3RpZmllZCBBZGRyZXNzZXM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgIDxiPk5vIGRhdGEuPC9iPg0KICAgICAgICAgICAgPC9kaXY+DQoNCjxoMyBpZD0iZ29vZ2xlbWFwcyI+PGEgaHJlZj0iIyI+R29vZ2xlIE1hcHM8L2E+PC9oMz4NCjxkaXYgaWQ9Im1hcF9jb250YWluZXIiPg0KICAgIDxkaXYgaWQ9Im1hcF9jYW52YXMiIGNsYXNzPSJpZnJhbWUtcndkIj4NCiAgICA8L2Rpdj4NCjwvZGl2Pg0KDQo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+DQoNCiAgICB3aW5kb3cub25sb2FkID0gbG9hZEdvb2dsZU1hcHNTY3JpcHQ7DQoNCiAgICB2YXIgZ2VvY29kZXI7DQogICAgdmFyIG1hcDsNCiAgICB2YXIgdGltZW91dCA9IDMwMDsNCiAgICB2YXIgcHJvcGVydGllcyA9IFsiOSBCb3lsZSBTdCwgQ3JveWRvbiBQYXJrIDIxMzMgTlNXICJdOw0KICAgIHZhciBsYXRMbmdBcnIgPSBbXTsNCg0KICAgIGZ1bmN0aW9uIGxvYWRHb29nbGVNYXBzU2NyaXB0KCkgew0KICAgICAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7DQogICAgICAgIHNjcmlwdC50eXBlID0gInRleHQvamF2YXNjcmlwdCI7DQogICAgICAgIHNjcmlwdC5zcmMgPSAiLy9tYXBzLmdvb2dsZWFwaXMuY29tL21hcHMvYXBpL2pzP2tleT1BSXphU3lBUzFKdVlfRzFNSUFiYk1LcTRVYlFFa3QtUkl0UVRmdncmY2FsbGJhY2s9bG9hZEdvb2dsZU1hcHMiOw0KICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gcmVuZGVyR29vZ2xlTWFwcygpDQogICAgew0KICAgICAgICB2YXIgbWFwT3B0aW9ucyA9IHsNCiAgICAgICAgICAgIGNlbnRlcjogbGF0TG5nQXJyWzBdLA0KICAgICAgICAgICAgem9vbTogMTYsDQogICAgICAgICAgICBtYXBUeXBlSWQ6IGdvb2dsZS5tYXBzLk1hcFR5cGVJZC5ST0FETUFQLA0KICAgICAgICAgICAgbWFwVHlwZUNvbnRyb2w6IGZhbHNlDQogICAgICAgIH0NCg0KICAgICAgICBtYXAgPSBuZXcgZ29vZ2xlLm1hcHMuTWFwKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtYXBfY2FudmFzIiksIG1hcE9wdGlvbnMpOw0KDQogICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZERvbUxpc3RlbmVyKHdpbmRvdywgJ3Jlc2l6ZScsIGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgdmFyIGNlbnRlciA9IG1hcC5nZXRDZW50ZXIoKTsNCiAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LnRyaWdnZXIobWFwLCAncmVzaXplJyk7DQogICAgICAgICAgICBtYXAuc2V0Q2VudGVyKGNlbnRlcik7DQogICAgICAgIH0pOw0KDQogICAgfQ0KDQogICAgZnVuY3Rpb24gbG9hZEdvb2dsZU1hcHMoKSB7DQogICAgICAgIGdlb2NvZGVyID0gbmV3IGdvb2dsZS5tYXBzLkdlb2NvZGVyKCk7DQogICAgICAgIHZhciBub09mRmFpbGVkTG9jYXRpb25TZWFyY2ggPSAwOw0KDQogICAgICAgICQocHJvcGVydGllcykuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHsNCiAgICAgICAgICAgIHZhciBwcm9wZXJ0eUFkZHJlc3MgPSBlbGVtZW50Ow0KDQogICAgICAgICAgICAvL0dldCBnZW9jb2RlDQogICAgICAgICAgICBnZW9jb2Rlci5nZW9jb2RlKHsgJ2FkZHJlc3MnOiBwcm9wZXJ0eUFkZHJlc3MgfSwgZnVuY3Rpb24gKHJlc3VsdHMsIHN0YXR1cykgew0KICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgPT0gZ29vZ2xlLm1hcHMuR2VvY29kZXJTdGF0dXMuT0spIHsNCg0KICAgICAgICAgICAgICAgICAgICB2YXIgbG9jYXRpb24gPSByZXN1bHRzWzBdLmdlb21ldHJ5LmxvY2F0aW9uOw0KICAgICAgICAgICAgICAgICAgICB2YXIgbGF0TG5nID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhsb2NhdGlvbi5sYXQoKSwgbG9jYXRpb24ubG5nKCkpOw0KDQogICAgICAgICAgICAgICAgICAgIGxhdExuZ0Fyci5wdXNoKGxhdExuZyk7DQoNCiAgICAgICAgICAgICAgICAgICAgaWYobGF0TG5nQXJyLmxlbmd0aCA9PSAxKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJHb29nbGVNYXBzKCk7DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAvL0NyZWF0ZSBtYXJrZXIgZm9yIG1hcCBhbmQgcGxhY2UgaXQgb24gdGhlIG1hcA0KICAgICAgICAgICAgICAgICAgICB2YXIgbWFya2VyID0gbmV3IGdvb2dsZS5tYXBzLk1hcmtlcih7DQogICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogbGF0TG5nLA0KICAgICAgICAgICAgICAgICAgICAgICAgbWFwOiBtYXANCiAgICAgICAgICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRlbnRTdHJpbmcgPSAnPGRpdj48c3Bhbj4nICsgcHJvcGVydHlBZGRyZXNzICsgJzwvc3Bhbj48L2Rpdj4nOw0KICAgICAgICAgICAgICAgICAgICB2YXIgaW5mb3dpbmRvdyA9IG5ldyBnb29nbGUubWFwcy5JbmZvV2luZG93KHsgICAvL0NyZWF0ZSBpbmZvIHdpbmRvdw0KICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogY29udGVudFN0cmluZw0KICAgICAgICAgICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcihtYXJrZXIsICdjbGljaycsIGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgaW5mb3dpbmRvdy5vcGVuKG1hcCwgbWFya2VyKTsNCiAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIC8vaWYgbm8gbG9jYXRpb24gZm91bmQgYnkgZ29vZ2xlIGZvciBhIHByb3BlcnR5DQogICAgICAgICAgICAgICAgZWxzZSBpZiAoc3RhdHVzID09ICJaRVJPX1JFU1VMVFMiKSB7DQogICAgICAgICAgICAgICAgICAgIG5vT2ZGYWlsZWRMb2NhdGlvblNlYXJjaCsrOw0KDQogICAgICAgICAgICAgICAgICAgIGlmKG5vT2ZGYWlsZWRMb2NhdGlvblNlYXJjaCA9PSAkKHByb3BlcnRpZXMpLmxlbmd0aCkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZUdvb2dsZU1hcHNDb250ZW50KCk7DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdHVzID09IGdvb2dsZS5tYXBzLkdlb2NvZGVyU3RhdHVzLk9WRVJfUVVFUllfTElNSVQpIHsNCiAgICAgICAgICAgICAgICAgICAgLy9zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgZ2V0R2VvQ29kZUZvckFkZHJlc3MoaWQsIGFkZHJlc3MpOyB9LCAodGltZW91dCkpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICAvL1JlcGxhY2VzIGdvb2dsZSBtYXBzIGNvbnRlbnQgd2l0aCBhIG5ldyBkaXYgYmxvY2sgdGhhdCBoYXMgaW5mbyBtZXNzYWdlDQogICAgZnVuY3Rpb24gcmVwbGFjZUdvb2dsZU1hcHNDb250ZW50KCkgew0KICAgICAgICB2YXIgbmV3Q29udGVudCA9ICc8ZGl2IGNsYXNzPSJ1aS1hY2NvcmRpb24tY29udGVudCB1aS1oZWxwZXItcmVzZXQgdWktd2lkZ2V0LWNvbnRlbnQgdWktY29ybmVyLWJvdHRvbSI+JyArDQogICAgICAgICAgICAnPHA+Q291bGRuXCd0IGZpbmQgdGhlIHByb3BlcnR5IGFkZHJlc3MoZXMpIG9uIEdvb2dsZSBNYXBzLiA8cD4nICsNCiAgICAgICAgICAgICc8L2Rpdj4nOw0KDQogICAgICAgICQoJyNtYXBfY29udGFpbmVyJykucmVwbGFjZVdpdGgobmV3Q29udGVudCk7DQogICAgfQ0KDQo8L3NjcmlwdD4NCg0KICAgIDwvZGl2Pg0KICAgIDxkaXYgY2xhc3M9Im1vZGFsIGZhZGUiIGlkPSJzdWJtaXNzaW9uLW1vZGFsIj4NCiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InNwaW5uZXIiPjwvZGl2PiA8IS0tIFRoaXMgZGl2IGhvc3RzIHRoZSBzcGlubmVyIC0tPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgZGF0YS1kaXNtaXNzPSJtb2RhbCIgYXJpYS1sYWJlbD0iQ2xvc2UiPjxzcGFuIGFyaWEtaGlkZGVuPSJ0cnVlIj4mdGltZXM7PC9zcGFuPjwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9Im1vZGFsLXRpdGxlIj5TdWJtaXNzaW9uIGZvciAxMC4yMDI1LjcuMTwvaDI+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KDQogICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkgew0KDQogICAgICAgICQoJyNhcHBsaWNhdGlvbicpLnRvZ2dsZXBhbmVscygpOw0KDQogICAgICAgICAgICAkKCcjcHJvcGVydGllcycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjZGV0YWlscycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjdHJhY2tpbmcnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI2RvY3VtZW50cycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjcmVsYXRlZEFwcGxpY2F0aW9ucycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjZ29vZ2xlbWFwcycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjY29udGFjdFVzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNleGhpYml0aW9uRGV0YWlscycpLmNsaWNrKCk7DQoNCiAgICAgICAgDQoNCg0KICAgICAgICAkKCcjc3VibWlzc2lvbi1idG4nKS5jbGljayhmdW5jdGlvbiAoKSB7ICAgICAgICANCg0KDQogICAgICAgICAgICB2YXIgdXJsID0gImh0dHBzOi8vZGF0cmFja2VyLmJ1cndvb2QubnN3Lmdvdi5hdS8vQXBwbGljYXRpb24vU3VibWlzc2lvbi8iICsgZW5jb2RlVVJJKCIxMC4yMDI1LjcuMSIpOw0KDQogICAgICAgICAgICAkKCcjc3VibWlzc2lvbi1tb2RhbCcpLm1vZGFsKCdzaG93JykuZmluZCgnLm1vZGFsLWJvZHknKS5sb2FkKHVybCk7DQogICAgICAgIH0pOw0KICAgIH0pOw0KDQoNCiAgICAvKiBTaG93cyBhbGwgdGhlIHBhbmVscyAqLw0KICAgIGZ1bmN0aW9uIHNob3dBbGwoKSB7DQogICAgICAgICQoJyNhcHBsaWNhdGlvbicpLmNoaWxkcmVuKCJoMyIpLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoInVpLXN0YXRlLWRlZmF1bHQiKSkgew0KICAgICAgICAgICAgICAgICQodGhpcykuY2xpY2soKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSk7DQogICAgfQ0KDQoNCiAgICAvKiBIaWRlIGFsbCB0aGUgcGFuZWxzICovDQogICAgZnVuY3Rpb24gaGlkZUFsbCgpIHsNCiAgICAgICAgJCgnI2FwcGxpY2F0aW9uJykuY2hpbGRyZW4oImgzIikuZWFjaChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcygidWktc3RhdGUtYWN0aXZlIikpIHsNCiAgICAgICAgICAgICAgICAkKHRoaXMpLmNsaWNrKCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0pOw0KICAgIH0NCg0KICAgIDwvc2NyaXB0Pg0KDQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8IS0tIC8uY29udGFpbmVyLWZsdWlkIC0tPg0KDQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPCEtLSAvI3BhZ2Utd3JhcHBlciAtLT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQoNCiAgICAgICAgICAgIDxkaXYgaWQ9IkdyZWVuQmFyIj4NCiAgICAgICAgICAgICAgICA8YSBzdHlsZT0iY3Vyc29yOmRlZmF1bHQiPiBDb3B5cmlnaHQgwqkgMjAxOCBDaXZpY2EgfCA8L2E+DQogICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5CdXJ3b29kLm5zdy5nb3YuYXUvZGlzY2xhaW1lciIgdGFyZ2V0PSJfcGFyZW50Ij5Db3B5cmlnaHQgYW5kIERpc2NsYWltZXI8L2E+DQogICAgICAgICAgICAgICAgPGEgc3R5bGU9ImN1cnNvcjpkZWZhdWx0Ij4gfCA8L2E+DQogICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5CdXJ3b29kLm5zdy5nb3YuYXUvcHJpdmFjeS1zdGF0ZW1lbnQiIHRhcmdldD0iX3BhcmVudCI+UHJpdmFjeSBTdGF0ZW1lbnQ8L2E+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXY+IDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCg0KICAgIDxkaXYgaWQ9InRpcHRpcF9ob2xkZXIiIHN0eWxlPSJtYXgtd2lkdGg6MzAwcHg7Ij48ZGl2IGlkPSJ0aXB0aXBfYXJyb3ciPjxkaXYgaWQ9InRpcHRpcF9hcnJvd19pbm5lciI+PC9kaXY+PC9kaXY+PGRpdiBpZD0idGlwdGlwX2NvbnRlbnQiPjwvZGl2PjwvZGl2Pg0KPC9ib2R5Pg0KDQo8L2h0bWw+DQo=
  recorded_at: Mon, 21 Apr 2025 17:14:04 GMT
- request:
    method: get
    uri: https://datracker.burwood.nsw.gov.au/Application/ApplicationDetails/010.2025.00000007.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=dalxarzidtj2ejssnt22nmw2; User=accessAllowed-MasterView=True
      Host:
      - datracker.burwood.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 17:14:04 GMT
      Content-Length:
      - '34037'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQo8aHRtbCBsYW5nPSJlbiI+DQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+DQogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4NCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPg0KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIj4NCiAgICA8bWV0YSBuYW1lPSJrZXl3b3JkcyIgY29udGVudD0iQnVyd29vZCBDb3VuY2lsLERBIFRyYWNrZXIsRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24sRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24gVHJhY2tpbmcsIERBIEVucXVpcnksIERldmVsb3BtZW50IEFwcGxpY2F0aW9uIEVucXVpcnksIEFwcGxpY2F0aW9uIFRyYWNrZXIiPg0KICAgIDxtZXRhIG5hbWU9ImRlc2NyaXB0aW9uIiBjb250ZW50PSJUaGUgb2ZmaWNpYWwgQnVyd29vZCBSZWdpb25hbCBDb3VuY2lsIEFwcGxpY2F0aW9uIFRyYWNrZXIiPg0KDQogICAgPHRpdGxlPkJ1cndvb2QgQ291bmNpbCAtIEFwcGxpY2F0aW9uIFRyYWNrZXI8L3RpdGxlPg0KDQogICAgPCEtLWZhdmljb24tLT4NCiAgICA8bGluayBocmVmPSIvZmF2aWNvbi5pY28iIHJlbD0ic2hvcnRjdXQgaWNvbiIgdHlwZT0iaW1hZ2UveC1pY29uIj4NCg0KICAgIDwhLS0galF1ZXJ5IC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvU2NyaXB0cy9qcXVlcnktMS4xMS4xLmpzIj48L3NjcmlwdD4NCg0KICAgIDxzY3JpcHQgc3JjPSIvU2NyaXB0cy9qcXVlcnktdWktMS4xMS4yLmpzIj48L3NjcmlwdD4NCg0KICAgIDxsaW5rIGhyZWY9Ii9Db250ZW50L3RoZW1lcy9iYXNlL2NvcmUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9Db250ZW50L3RoZW1lcy9iYXNlL2FjY29yZGlvbi5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvdGhlbWUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPCEtLSBCb290c3RyYXAgLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2Jvb3RzdHJhcC5qcyI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9ib290c3RyYXAtdGhlbWUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9Db250ZW50L2Jvb3RzdHJhcC5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQogICAgPGxpbmsgaHJlZj0iL0NvbnRlbnQvZm9udC1hd2Vzb21lLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDwhLS0gRGF0YVRhYmxlcyAtLT4NCiAgICA8c2NyaXB0IHNyYz0iL1NjcmlwdHMvRGF0YVRhYmxlcy9qcXVlcnkuZGF0YVRhYmxlcy5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL1NjcmlwdHMvRGF0YVRhYmxlcy9kYXRhVGFibGVzLmJvb3RzdHJhcC5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL1NjcmlwdHMvRGF0YVRhYmxlcy9kYXRhVGFibGVzLnJlc3BvbnNpdmUuanMiPjwvc2NyaXB0Pg0KDQogICAgDQogICAgPGxpbmsgaHJlZj0iL0NvbnRlbnQvRGF0YVRhYmxlcy9jc3MvZGF0YVRhYmxlcy5ib290c3RyYXAuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9Db250ZW50L0RhdGFUYWJsZXMvY3NzL2RhdGFUYWJsZXMucmVzcG9uc2l2ZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvRGF0YVRhYmxlcy9jc3MvZGF0YVRhYmxlcy5yZXNwb25zaXZlLnNjc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQoNCiAgICA8IS0tIEJvb3RzdHJhcCBTQi1BZG1pbi0yIFBsdWdpbiBhbmQgb3RoZXIgY3NzIGFuZCBqcyBmaWxlcy0tPg0KICAgIDxzY3JpcHQgc3JjPSIvanMvYm9vdHN0cmFwLWNvbWJvYm94LmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvYm9vdHN0cmFwLWRhdGVwaWNrZXIuanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9qcy9ib290c3RyYXAtZGlhbG9nLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvanF1ZXJ5LmZvcm0uanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9qcy9qcXVlcnkudGFibGVzb3J0ZXIuanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9qcy9tYXN0ZXJ2aWV3LmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvbWV0aXNNZW51LmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvc2ItYWRtaW4tMi5qcyI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvY3NzL2Jvb3RzdHJhcC1jb21ib2JveC5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL2Nzcy9kYXRlcGlja2VyMy5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL2Nzcy9tYXN0ZXJ2aWV3LWN1c3RvbWlzYXRpb25zLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvY3NzL3NiLWFkbWluLTIuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPGxpbmsgaHJlZj0iL0NvdW5jaWxfVGhlbWUvQnVyd29vZC9idXJ3b29kLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICANCg0KICAgIDwhLS0gSFRNTDUgU2hpbSBhbmQgUmVzcG9uZC5qcyBJRTggc3VwcG9ydCBvZiBIVE1MNSBlbGVtZW50cyBhbmQgbWVkaWEgcXVlcmllcyAtLT4NCiAgICA8IS0tIFdBUk5JTkc6IFJlc3BvbmQuanMgZG9lc24ndCB3b3JrIGlmIHlvdSB2aWV3IHRoZSBwYWdlIHZpYSBmaWxlOi8vIC0tPg0KICAgIDwhLS1baWYgbHQgSUUgOV0+DQogICAgICAgIDxzY3JpcHQgc3JjPSJodHRwczovL29zcy5tYXhjZG4uY29tL2xpYnMvaHRtbDVzaGl2LzMuNy4wL2h0bWw1c2hpdi5qcyI+PC9zY3JpcHQ+DQogICAgICAgIDxzY3JpcHQgc3JjPSJodHRwczovL29zcy5tYXhjZG4uY29tL2xpYnMvcmVzcG9uZC5qcy8xLjQuMi9yZXNwb25kLm1pbi5qcyI+PC9zY3JpcHQ+DQogICAgPCFbZW5kaWZdLS0+DQo8L2hlYWQ+DQoNCg0KDQo8Ym9keT4NCiAgICA8ZGl2IGNsYXNzPSJwdXNobWVudSBjYnAtc3BtZW51LXB1c2giPg0KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPg0KICAgICAgICAgICAgPGhlYWRlciBpZD0iSGVhZGVyIj4NCiAgICAgICAgICAgICAgICA8bmF2IGNsYXNzPSJuYXZiYXIgbmF2YmFyLWRlZmF1bHQiIHJvbGU9Im5hdmlnYXRpb24iIGlkPSJOYXZCYXIiPg0KICAgICAgICAgICAgICAgICAgICA8IS0tIEJyYW5kIGFuZCB0b2dnbGUgZ2V0IGdyb3VwZWQgZm9yIGJldHRlciBtb2JpbGUgZGlzcGxheSAtLT4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibmF2YmFyLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ1dGlscyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSJodHRwOi8vd3d3LkJ1cndvb2QubnN3Lmdvdi5hdSI+SG9tZTwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cDovL3d3dy5CdXJ3b29kLm5zdy5nb3YuYXUvY29udGFjdF91cy5odG1sIj5Db250YWN0IFVzPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGgxIGlkPSJsb2dvIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3LkJ1cndvb2QubnN3Lmdvdi5hdSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvQ291bmNpbF9UaGVtZS9CdXJ3b29kL0J1cndvb2RDb3VuY2lsbG9nb1NNLnBuZyIgYWx0PSJCdXJ3b29kIFJlZ2lvbmFsIENvdW5jaWwiPjxzdHJvbmcgY2xhc3M9InZoIj5CdXJ3b29kIFJlZ2lvbmFsIENvdW5jaWw8L3N0cm9uZz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2gxPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L25hdj4NCiAgICAgICAgICAgIDwvaGVhZGVyPg0KDQogICAgICAgICAgICA8ZGl2IGlkPSJjb250ZW50Ij4NCiAgICAgICAgICAgICAgICA8IS0tIE5hdmlnYXRpb24gLS0+DQogICAgICAgICAgICAgICAgPG5hdiBjbGFzcz0ibmF2YmFyIG5hdmJhci1kZWZhdWx0IG5hdmJhci1zdGF0aWMtdG9wIiByb2xlPSJuYXZpZ2F0aW9uIiBzdHlsZT0ibWFyZ2luLWJvdHRvbTogMCI+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJuYXZiYXItdG9nZ2xlIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtdGFyZ2V0PSIubmF2YmFyLWNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3Itb25seSI+VG9nZ2xlIG5hdmlnYXRpb248L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tYmFyIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tYmFyIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tYmFyIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXZiYXItYnJhbmQiIGhyZWY9Ii9Ib21lL0luZGV4Ij48L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLWhlYWRlciAtLT4NCiAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2YmFyLXRvcC1saW5rcyBuYXZiYXItcmlnaHQgaGlkZGVuLXhzIGhpZGRlbi1zbSBoaWRkZW4tbWQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxzcGFuIGlkPSJwcmludEljb24iIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXByaW50IiBvbmNsaWNrPSJ3aW5kb3cucHJpbnQoKTsiPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICA8L3VsPg0KDQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1kZWZhdWx0IHNpZGViYXIiIHJvbGU9Im5hdmlnYXRpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2lkZWJhci1uYXYgbmF2YmFyLWNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiIgaWQ9InNpZGUtbWVudSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY3RpdmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48aSBjbGFzcz0iZmEgZmEtbGlzdC11bCBmYS1mdyI+PC9pPkFwcGxpY2F0aW9uIFRyYWNrZXI8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdi1zZWNvbmQtbGV2ZWwgY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9BYm91dCB0YXJnZXQ9X3NlbGY+V2hhdCBpcyBBcHBsaWNhdGlvbiBUcmFja2VyPzwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9EaXNjbGFpbWVyIHRhcmdldD1fc2VsZj5EaXNjbGFpbWVyPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gLy5uYXYtc2Vjb25kLWxldmVsIC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY3RpdmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48aSBjbGFzcz0iZmEgZmEtbGlzdC11bCBmYS1mdyI+PC9pPkFwcGxpY2F0aW9uczxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL0luZGV4IHRhcmdldD0+QXBwbGljYXRpb24gVHJhY2tlciBIb21lPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL1NlYXJjaCBpZD1zZWFyY2ggdGFyZ2V0PV9zZWxmPlNlYXJjaDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/UmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1UcnVlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSBpZD1vdXRzdGFuZGluZy1hcHBzIHRhcmdldD1fc2VsZj5VbmRldGVybWluZWQgQXBwbGljYXRpb25zPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9SZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9VHJ1ZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIGlkPWV4aGliaXRlZC1hcHBzIHRhcmdldD1fc2VsZj5BcHBsaWNhdGlvbnMgT24gRXhoaWJpdGlvbjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbnMgU3VibWl0dGVkPHNwYW4gY2xhc3M9ImZhIGFycm93Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXYtc2Vjb25kLWxldmVsIGNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTIxJTJmMDQlMmYyMDI1JkRhdGVUbz0yMiUyZjA0JTJmMjAyNSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPlRoaXMgV2VlazwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MTMlMmYwNCUyZjIwMjUmRGF0ZVRvPTE5JTJmMDQlMmYyMDI1JkRhdGVUeXBlPTEmUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBXZWVrPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDQlMmYyMDI1JkRhdGVUbz0yMiUyZjA0JTJmMjAyNSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPlRoaXMgTW9udGg8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTElMmYwMyUyZjIwMjUmRGF0ZVRvPTMxJTJmMDMlMmYyMDI1JkRhdGVUeXBlPTEmUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbnMgRGV0ZXJtaW5lZDxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0yMSUyZjA0JTJmMjAyNSZEYXRlVG89MjIlMmYwNCUyZjIwMjUmRGF0ZVR5cGU9MiZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9VHJ1ZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPlRoaXMgV2VlazwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MTMlMmYwNCUyZjIwMjUmRGF0ZVRvPTE5JTJmMDQlMmYyMDI1JkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5MYXN0IFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTElMmYwNCUyZjIwMjUmRGF0ZVRvPTIyJTJmMDQlMmYyMDI1JkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIE1vbnRoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDMlMmYyMDI1JkRhdGVUbz0zMSUyZjAzJTJmMjAyNSZEYXRlVHlwZT0yJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1UcnVlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLnNpZGViYXItY29sbGFwc2UgLS0+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLXN0YXRpYy1zaWRlIC0tPg0KICAgICAgICAgICAgICAgIDwvbmF2Pg0KICAgICAgICAgICAgICAgIDxkaXYgaWQ9InBhZ2Utd3JhcHBlciI+DQoNCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyLWZsdWlkIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgDQoNCg0KICAgIDxkaXYgY2xhc3M9InBhZ2UtaGVhZGVyIj4NCiAgICAgICAgPGgyPkFwcGxpY2F0aW9uOiBEZXZlbG9wbWVudCBBcHBsaWNhdGlvbiAoMTAuMjAyNS43LjEpPC9oMj4NCiAgICA8L2Rpdj4NCiAgICA8aDQ+RGV0YWlsZWQgaW5mb3JtYXRpb24gcmVsYXRlZCB0byB0aGUgYXBwbGljYXRpb246PC9oND4NCiAgICA8YnIgLz4NCiAgICA8ZGl2Pg0KICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnNob3dBbGwoKTsiPlNob3cgQWxsPC9hPiAvDQogICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6aGlkZUFsbCgpOyI+SGlkZSBBbGw8L2E+DQogICAgPC9kaXY+DQogICAgPGRpdiBpZD0iYXBwbGljYXRpb24iPg0KDQogICAgICAgICAgICA8aDMgaWQ9ImRldGFpbHMiPjxhIGhyZWY9IiMiPkRldGFpbHM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRlc2NyaXB0aW9uOiA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBpZD0iZGVzY3JpcHRpb24iPkRlbW9saXRpb24gb2YgZXhpc3RpbmcgZ2FyYWdlLCBjb25zdHJ1Y3Rpb24gb2YgYSBuZXcgZ2FyYWdlPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlN1Ym1pdHRlZCBEYXRlOiA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjA1LzAyLzIwMjUgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFwcGxpY2F0aW9uIFR5cGU6IDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRldmVsb3BtZW50IEFwcGxpY2F0aW9uPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9InByb3BlcnRpZXMiPjxhIGhyZWY9IiMiPlByb3BlcnRpZXM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJwcm9wZXJ0eS1saXN0Ij45IEJveWxlIFN0LCBDcm95ZG9uIFBhcmsgMjEzMyBOU1cgIChMb3Q6IEEgRFA6IDMyNDgzNCk8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0icGVvcGxlIj48YSBocmVmPSIjIj5QZW9wbGU8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcHBsaWNhbnQ6IFJvc2FsaWUgU2FwaW8NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQcmluY2lwYWwgQ2VydGlmeWluZyBBdXRob3JpdHk6ICANCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9Im9mZmljZXIiPjxhIGhyZWY9IiMiPk9mZmljZXI8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJvZmZpY2VyTmFtZSI+SnVsaWFuIFNjaWFycm9uZTwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJkZWNpc2lvbiI+PGEgaHJlZj0iIyI+RGVjaXNpb248L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFwcGxpY2F0aW9uIFN0YXR1czogRGV0ZXJtaW5lZDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGV0ZXJtaW5hdGlvbiBEYXRlOg0KMTAvMDMvMjAyNSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5EZXRlcm1pbmF0aW9uIFR5cGU6IEFwcHJvdmVkIGJ5IERlbGVnYXRlZCBBdXRob3JpdHk8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0iZXN0aW1hdGVkQ29zdCI+PGEgaHJlZj0iIyI+RXN0aW1hdGVkIENvc3Q8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPiQ0OCwwMDAuMDA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0idHJhY2tpbmciPjxhIGhyZWY9IiMiPlRyYWNraW5nPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpY29uLXdyYXAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+c3dpcGUgdGFibGUgdG8gdGhlIGxlZnQgdG8gcmV2ZWFsIG1vcmUgZGF0YTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWFycm93LXJpZ2h0IiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSB0YWJsZS1zdHJpcGVkIHRhYmxlLWJvcmRlcmVkIG5vLWZvb3RlciI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+RGVzY3JpcHRpb248L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+Q29tbWVuY2VkIERhdGU8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+Q29tcGxldGVkIERhdGU8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+UmVmZXIgdG8gVHJlZSBNYW5hZ2VtZW50PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjEzLzAyLzIwMjUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQowMy8wMy8yMDI1ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlJlZmVyIHRvIEVuZ2luZWVyaW5nIChHZW5lcmFsKTwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoxMy8wMi8yMDI1ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjUvMDMvMjAyNSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCg0KDQoNCg0KICAgICAgICAgICAgPGgzIGlkPSJyZWxhdGVkQXBwbGljYXRpb25zIj48YSBocmVmPSIjIj5SZWxhdGVkIEFwcGxpY2F0aW9uczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgPGI+Tm8gZGF0YS48L2I+DQogICAgICAgICAgICA8L2Rpdj4NCg0KDQoNCg0KDQoNCg0KPGgzIGlkPSJkb2N1bWVudHMiPjxhIGhyZWY9IiMiPkRvY3VtZW50czwvYT48L2gzPg0KPGRpdj4NCg0KICAgICAgICA8ZGl2IGNsYXNzPSJpY29uLXdyYXAiPg0KICAgICAgICAgICAgPHNwYW4+c3dpcGUgdGFibGUgdG8gdGhlIGxlZnQgdG8gcmV2ZWFsIG1vcmUgZGF0YTwvc3Bhbj4NCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWFycm93LXJpZ2h0IiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9zcGFuPg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBpZD0iZG9jLWNvdW50Ij5Ub3RhbCBudW1iZXIgb2YgZG9jdW1lbnRzOiAxMjwvZGl2Pg0KICAgICAgICA8dGFibGUgaWQ9ImRvYy10YWJsZSIgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtYm9yZGVyZWQgbm8tZm9vdGVyIj4NCiAgICAgICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0aD5SZWNvcmQgTnVtYmVyPC90aD4NCiAgICAgICAgICAgICAgICAgICAgPHRoPkRlc2NyaXB0aW9uPC90aD4NCiAgICAgICAgICAgICAgICAgICAgPHRoPkRvY3VtZW50IFR5cGU8L3RoPg0KICAgICAgICAgICAgICAgICAgICA8dGg+U2l6ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgIDx0aD5WaWV3IExpbms8L3RoPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICA8L3RoZWFkPg0KICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjUvNzA5MSAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPlN0YXRlbWVudCBvZiBFbnZpcm9ubWVudGFsIEVmZmVjdHMgLSA5IEJveWxlIFN0cmVldCBDcm95ZG9uIFBhcmsgLSBEQS4yMDI1Ljc8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICBQREYNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEuMzggTUINCg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+PGEgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgcm9sZT0iYnV0dG9uIiBocmVmPSJodHRwczovL2RhdHJhY2tlci5idXJ3b29kLm5zdy5nb3YuYXUvRG9jdW1lbnQvRG93bmxvYWQ/a2V5PU4vdzRGcllzVEs0PSZhbXA7ZmlsZU5hbWU9U3RhdGVtZW50K29mK0Vudmlyb25tZW50YWwrRWZmZWN0cystKzkrQm95bGUrU3RyZWV0K0Nyb3lkb24rUGFyaystK0RBLjIwMjUuNy5QREYiIHRhcmdldD0iX2JsYW5rIj5WaWV3PC9hPjwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI1LzcxMDEgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD5XYXN0ZSBNYW5hZ2VtZW50IFBsYW4gLSA5IEJveWxlIFN0cmVldCBDcm95ZG9uIFBhcmsgLSBEQS4yMDI1Ljc8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICBQREYNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAuMjMgTUINCg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+PGEgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgcm9sZT0iYnV0dG9uIiBocmVmPSJodHRwczovL2RhdHJhY2tlci5idXJ3b29kLm5zdy5nb3YuYXUvRG9jdW1lbnQvRG93bmxvYWQ/a2V5PVFVbkJkRUVHS29VPSZhbXA7ZmlsZU5hbWU9V2FzdGUrTWFuYWdlbWVudCtQbGFuKy0rOStCb3lsZStTdHJlZXQrQ3JveWRvbitQYXJrKy0rREEuMjAyNS43LlBERiIgdGFyZ2V0PSJfYmxhbmsiPlZpZXc8L2E+PC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjUvNzEwNCAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPk5vdGlmaWNhdGlvbiBQbGFucyAtIDkgQm95bGUgU3RyZWV0IENyb3lkb24gUGFyayAtIERBLjIwMjUuNzwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIFBERg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgMC40OCBNQg0KDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD48YSBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiByb2xlPSJidXR0b24iIGhyZWY9Imh0dHBzOi8vZGF0cmFja2VyLmJ1cndvb2QubnN3Lmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9SkI3cW9MODluMkE9JmFtcDtmaWxlTmFtZT1Ob3RpZmljYXRpb24rUGxhbnMrLSs5K0JveWxlK1N0cmVldCtDcm95ZG9uK1BhcmsrLStEQS4yMDI1LjcuUERGIiB0YXJnZXQ9Il9ibGFuayI+VmlldzwvYT48L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyNS83MTA1ICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+V2FzdGUgTWFuYWdlbWVudCBQbGFuIGFuZCBEZW1vbGl0aW9uIFBsYW4gLSA5IEJveWxlIFN0cmVldCBDcm95ZG9uIFBhcmsgLSBEQS4yMDI1Ljc8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICBQREYNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAuMzcgTUINCg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+PGEgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgcm9sZT0iYnV0dG9uIiBocmVmPSJodHRwczovL2RhdHJhY2tlci5idXJ3b29kLm5zdy5nb3YuYXUvRG9jdW1lbnQvRG93bmxvYWQ/a2V5PUpXYno4NXVmQTVvPSZhbXA7ZmlsZU5hbWU9V2FzdGUrTWFuYWdlbWVudCtQbGFuK2FuZCtEZW1vbGl0aW9uK1BsYW4rLSs5K0JveWxlK1N0cmVldCtDcm95ZG9uK1BhcmsrLStEQS4yMDI1LjcuUERGIiB0YXJnZXQ9Il9ibGFuayI+VmlldzwvYT48L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyNS83MTA4ICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+TGFuZHNjYXBlIFBsYW4gLSA5IEJveWxlIFN0cmVldCBDcm95ZG9uIFBhcmsgLSBEQS4yMDI1Ljc8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICBQREYNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAuNzcgTUINCg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+PGEgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgcm9sZT0iYnV0dG9uIiBocmVmPSJodHRwczovL2RhdHJhY2tlci5idXJ3b29kLm5zdy5nb3YuYXUvRG9jdW1lbnQvRG93bmxvYWQ/a2V5PWMvVytNN2JzMmhrPSZhbXA7ZmlsZU5hbWU9TGFuZHNjYXBlK1BsYW4rLSs5K0JveWxlK1N0cmVldCtDcm95ZG9uK1BhcmsrLStEQS4yMDI1LjcuUERGIiB0YXJnZXQ9Il9ibGFuayI+VmlldzwvYT48L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyNS83MTA5ICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+U3VydmV5IC0gOSBCb3lsZSBTdHJlZXQgQ3JveWRvbiBQYXJrIC0gREEuMjAyNS43PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgUERGDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLjIzIE1CDQoNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHJvbGU9ImJ1dHRvbiIgaHJlZj0iaHR0cHM6Ly9kYXRyYWNrZXIuYnVyd29vZC5uc3cuZ292LmF1L0RvY3VtZW50L0Rvd25sb2FkP2tleT0xMEpxT1JSWlpibz0mYW1wO2ZpbGVOYW1lPVN1cnZleSstKzkrQm95bGUrU3RyZWV0K0Nyb3lkb24rUGFyaystK0RBLjIwMjUuNy5QREYiIHRhcmdldD0iX2JsYW5rIj5WaWV3PC9hPjwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI1LzcxMTQgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD5TdG9ybXdhdGVyIFBsYW5zIC0gOSBCb3lsZSBTdHJlZXQgQ3JveWRvbiBQYXJrIC0gREEuMjAyNS43PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgUERGDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAyLjc0IE1CDQoNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHJvbGU9ImJ1dHRvbiIgaHJlZj0iaHR0cHM6Ly9kYXRyYWNrZXIuYnVyd29vZC5uc3cuZ292LmF1L0RvY3VtZW50L0Rvd25sb2FkP2tleT1scWhDb1FQbGZuVT0mYW1wO2ZpbGVOYW1lPVN0b3Jtd2F0ZXIrUGxhbnMrLSs5K0JveWxlK1N0cmVldCtDcm95ZG9uK1BhcmsrLStEQS4yMDI1LjcuUERGIiB0YXJnZXQ9Il9ibGFuayI+VmlldzwvYT48L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyNS83MTE2ICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+U2l0ZSBQbGFuIC0gOSBCb3lsZSBTdHJlZXQgQ3JveWRvbiBQYXJrIC0gREEuMjAyNS43PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgUERGDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLjQwIE1CDQoNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHJvbGU9ImJ1dHRvbiIgaHJlZj0iaHR0cHM6Ly9kYXRyYWNrZXIuYnVyd29vZC5uc3cuZ292LmF1L0RvY3VtZW50L0Rvd25sb2FkP2tleT1ITVE5NDdQMXJQcz0mYW1wO2ZpbGVOYW1lPVNpdGUrUGxhbistKzkrQm95bGUrU3RyZWV0K0Nyb3lkb24rUGFyaystK0RBLjIwMjUuNy5QREYiIHRhcmdldD0iX2JsYW5rIj5WaWV3PC9hPjwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI1LzcxMTcgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD5GbG9vciBQbGFucyAtIDkgQm95bGUgU3RyZWV0IENyb3lkb24gUGFyayAtIERBLjIwMjUuNzwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIFBERg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgMS4wMiBNQg0KDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD48YSBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiByb2xlPSJidXR0b24iIGhyZWY9Imh0dHBzOi8vZGF0cmFja2VyLmJ1cndvb2QubnN3Lmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9cE1GZ0grUjVHTHM9JmFtcDtmaWxlTmFtZT1GbG9vcitQbGFucystKzkrQm95bGUrU3RyZWV0K0Nyb3lkb24rUGFyaystK0RBLjIwMjUuNy5QREYiIHRhcmdldD0iX2JsYW5rIj5WaWV3PC9hPjwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI1LzcxMTkgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD5FbGV2YXRpb25zIGFuZCBTZWN0aW9ucyAtIDkgQm95bGUgU3RyZWV0IENyb3lkb24gUGFyayAtIERBLjIwMjUuNzwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIFBERg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgMS4wMiBNQg0KDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD48YSBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiByb2xlPSJidXR0b24iIGhyZWY9Imh0dHBzOi8vZGF0cmFja2VyLmJ1cndvb2QubnN3Lmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9Wm5sQlFiUmZrcmM9JmFtcDtmaWxlTmFtZT1FbGV2YXRpb25zK2FuZCtTZWN0aW9ucystKzkrQm95bGUrU3RyZWV0K0Nyb3lkb24rUGFyaystK0RBLjIwMjUuNy5QREYiIHRhcmdldD0iX2JsYW5rIj5WaWV3PC9hPjwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI1LzcxMjAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD5BcmVhIENhbGN1bGF0aW9ucyAtIDkgQm95bGUgU3RyZWV0IENyb3lkb24gUGFyayAtIERBLjIwMjUuNzwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIFBERg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgMC4yOSBNQg0KDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD48YSBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiByb2xlPSJidXR0b24iIGhyZWY9Imh0dHBzOi8vZGF0cmFja2VyLmJ1cndvb2QubnN3Lmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9enh0Z0tiNG8yMm89JmFtcDtmaWxlTmFtZT1BcmVhK0NhbGN1bGF0aW9ucystKzkrQm95bGUrU3RyZWV0K0Nyb3lkb24rUGFyaystK0RBLjIwMjUuNy5QREYiIHRhcmdldD0iX2JsYW5rIj5WaWV3PC9hPjwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI1LzcxMjQgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD5BcmNoaXRlY3R1cmFsIFBsYW5zIC0gOSBCb3lsZSBTdHJlZXQgQ3JveWRvbiBQYXJrIC0gREEuMjAyNS43PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgUERGDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAzLjE1IE1CDQoNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHJvbGU9ImJ1dHRvbiIgaHJlZj0iaHR0cHM6Ly9kYXRyYWNrZXIuYnVyd29vZC5uc3cuZ292LmF1L0RvY3VtZW50L0Rvd25sb2FkP2tleT1tbitSTXNwdXNhdz0mYW1wO2ZpbGVOYW1lPUFyY2hpdGVjdHVyYWwrUGxhbnMrLSs5K0JveWxlK1N0cmVldCtDcm95ZG9uK1BhcmsrLStEQS4yMDI1LjcuUERGIiB0YXJnZXQ9Il9ibGFuayI+VmlldzwvYT48L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQoNCiAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgIDwvdGFibGU+DQo8L2Rpdj4NCg0KDQogICAgICAgICAgICA8aDMgaWQ9ImNvbnRhY3RVcyI+PGEgaHJlZj0iIyI+Q29udGFjdCBVczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PHA+VG8gbWFrZSBlbnF1aXJpZXMgcmVnYXJkaW5nIGFwcGxpY2F0aW9ucyBkaXNwbGF5ZWQgaGVyZSwgY29udGFjdCB1cyBieSBvbmUgb2YgdGhlIGZvbGxvd2luZyBtZXRob2RzOjwvcD4NCjx1bD4NCjxsaT5ieSBlbWFpbCZuYnNwOzxhIGhyZWY9Im1haWx0bzpjb3VuY2lsQGJ1cndvb2QubnN3Lmdvdi5hdSI+Y291bmNpbEBidXJ3b29kLm5zdy5nb3YuYXU8L2E+PC9saT4NCjxsaT5pbiB3cml0aW5nIHRvIFBPIEJveCAyNDAgQnVyd29vZCBOU1cgMTgwNS4gQWxsIGNvcnJlc3BvbmRlbmNlIHNob3VsZCBiZSBhZGRyZXNzZWQgdG8gdGhlIEdlbmVyYWwgTWFuYWdlciBhbmQgcXVvdGUgdGhlIHJlbGV2YW50IGFwcGxpY2F0aW9uIHJlZmVyZW5jZSBudW1iZXIuPC9saT4NCjxsaT5ieSBwaG9uaW5nIEN1c3RvbWVyIFNlcnZpY2UgQ2VudHJlIG9uICgwMikgOTkxMSA5OTExIGR1cmluZyBub3JtYWwgb2ZmaWNlIGhvdXJzIChNb25kYXkgdG8gRnJpZGF5LCA4LjMwYW0gdG8gNC40NXBtKTwvbGk+DQo8bGk+QXR0ZW5kIHRoZSBDb3VuY2lsIEN1c3RvbWVyIFNlcnZpY2UgQ2VudHJlIGR1cmluZyBidXNpbmVzcyBob3Vyczo8L2xpPg0KPC91bD4NCjxwPiZuYnNwOyAmbmJzcDsgJm5ic3A7MiBDb25kZXIgU3Q8YnIgLz4gJm5ic3A7Jm5ic3A7Jm5ic3A7QlVSV09PRCBOU1cgMjEzNDxiciAvPiA8L3A+PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9Im5vdGlmaWVkQWRkcmVzc2VzIj48YSBocmVmPSIjIj5Ob3RpZmllZCBBZGRyZXNzZXM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgIDxiPk5vIGRhdGEuPC9iPg0KICAgICAgICAgICAgPC9kaXY+DQoNCjxoMyBpZD0iZ29vZ2xlbWFwcyI+PGEgaHJlZj0iIyI+R29vZ2xlIE1hcHM8L2E+PC9oMz4NCjxkaXYgaWQ9Im1hcF9jb250YWluZXIiPg0KICAgIDxkaXYgaWQ9Im1hcF9jYW52YXMiIGNsYXNzPSJpZnJhbWUtcndkIj4NCiAgICA8L2Rpdj4NCjwvZGl2Pg0KDQo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+DQoNCiAgICB3aW5kb3cub25sb2FkID0gbG9hZEdvb2dsZU1hcHNTY3JpcHQ7DQoNCiAgICB2YXIgZ2VvY29kZXI7DQogICAgdmFyIG1hcDsNCiAgICB2YXIgdGltZW91dCA9IDMwMDsNCiAgICB2YXIgcHJvcGVydGllcyA9IFsiOSBCb3lsZSBTdCwgQ3JveWRvbiBQYXJrIDIxMzMgTlNXICJdOw0KICAgIHZhciBsYXRMbmdBcnIgPSBbXTsNCg0KICAgIGZ1bmN0aW9uIGxvYWRHb29nbGVNYXBzU2NyaXB0KCkgew0KICAgICAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7DQogICAgICAgIHNjcmlwdC50eXBlID0gInRleHQvamF2YXNjcmlwdCI7DQogICAgICAgIHNjcmlwdC5zcmMgPSAiLy9tYXBzLmdvb2dsZWFwaXMuY29tL21hcHMvYXBpL2pzP2tleT1BSXphU3lBUzFKdVlfRzFNSUFiYk1LcTRVYlFFa3QtUkl0UVRmdncmY2FsbGJhY2s9bG9hZEdvb2dsZU1hcHMiOw0KICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gcmVuZGVyR29vZ2xlTWFwcygpDQogICAgew0KICAgICAgICB2YXIgbWFwT3B0aW9ucyA9IHsNCiAgICAgICAgICAgIGNlbnRlcjogbGF0TG5nQXJyWzBdLA0KICAgICAgICAgICAgem9vbTogMTYsDQogICAgICAgICAgICBtYXBUeXBlSWQ6IGdvb2dsZS5tYXBzLk1hcFR5cGVJZC5ST0FETUFQLA0KICAgICAgICAgICAgbWFwVHlwZUNvbnRyb2w6IGZhbHNlDQogICAgICAgIH0NCg0KICAgICAgICBtYXAgPSBuZXcgZ29vZ2xlLm1hcHMuTWFwKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtYXBfY2FudmFzIiksIG1hcE9wdGlvbnMpOw0KDQogICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZERvbUxpc3RlbmVyKHdpbmRvdywgJ3Jlc2l6ZScsIGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgdmFyIGNlbnRlciA9IG1hcC5nZXRDZW50ZXIoKTsNCiAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LnRyaWdnZXIobWFwLCAncmVzaXplJyk7DQogICAgICAgICAgICBtYXAuc2V0Q2VudGVyKGNlbnRlcik7DQogICAgICAgIH0pOw0KDQogICAgfQ0KDQogICAgZnVuY3Rpb24gbG9hZEdvb2dsZU1hcHMoKSB7DQogICAgICAgIGdlb2NvZGVyID0gbmV3IGdvb2dsZS5tYXBzLkdlb2NvZGVyKCk7DQogICAgICAgIHZhciBub09mRmFpbGVkTG9jYXRpb25TZWFyY2ggPSAwOw0KDQogICAgICAgICQocHJvcGVydGllcykuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHsNCiAgICAgICAgICAgIHZhciBwcm9wZXJ0eUFkZHJlc3MgPSBlbGVtZW50Ow0KDQogICAgICAgICAgICAvL0dldCBnZW9jb2RlDQogICAgICAgICAgICBnZW9jb2Rlci5nZW9jb2RlKHsgJ2FkZHJlc3MnOiBwcm9wZXJ0eUFkZHJlc3MgfSwgZnVuY3Rpb24gKHJlc3VsdHMsIHN0YXR1cykgew0KICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgPT0gZ29vZ2xlLm1hcHMuR2VvY29kZXJTdGF0dXMuT0spIHsNCg0KICAgICAgICAgICAgICAgICAgICB2YXIgbG9jYXRpb24gPSByZXN1bHRzWzBdLmdlb21ldHJ5LmxvY2F0aW9uOw0KICAgICAgICAgICAgICAgICAgICB2YXIgbGF0TG5nID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhsb2NhdGlvbi5sYXQoKSwgbG9jYXRpb24ubG5nKCkpOw0KDQogICAgICAgICAgICAgICAgICAgIGxhdExuZ0Fyci5wdXNoKGxhdExuZyk7DQoNCiAgICAgICAgICAgICAgICAgICAgaWYobGF0TG5nQXJyLmxlbmd0aCA9PSAxKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJHb29nbGVNYXBzKCk7DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAvL0NyZWF0ZSBtYXJrZXIgZm9yIG1hcCBhbmQgcGxhY2UgaXQgb24gdGhlIG1hcA0KICAgICAgICAgICAgICAgICAgICB2YXIgbWFya2VyID0gbmV3IGdvb2dsZS5tYXBzLk1hcmtlcih7DQogICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogbGF0TG5nLA0KICAgICAgICAgICAgICAgICAgICAgICAgbWFwOiBtYXANCiAgICAgICAgICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRlbnRTdHJpbmcgPSAnPGRpdj48c3Bhbj4nICsgcHJvcGVydHlBZGRyZXNzICsgJzwvc3Bhbj48L2Rpdj4nOw0KICAgICAgICAgICAgICAgICAgICB2YXIgaW5mb3dpbmRvdyA9IG5ldyBnb29nbGUubWFwcy5JbmZvV2luZG93KHsgICAvL0NyZWF0ZSBpbmZvIHdpbmRvdw0KICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogY29udGVudFN0cmluZw0KICAgICAgICAgICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcihtYXJrZXIsICdjbGljaycsIGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgaW5mb3dpbmRvdy5vcGVuKG1hcCwgbWFya2VyKTsNCiAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIC8vaWYgbm8gbG9jYXRpb24gZm91bmQgYnkgZ29vZ2xlIGZvciBhIHByb3BlcnR5DQogICAgICAgICAgICAgICAgZWxzZSBpZiAoc3RhdHVzID09ICJaRVJPX1JFU1VMVFMiKSB7DQogICAgICAgICAgICAgICAgICAgIG5vT2ZGYWlsZWRMb2NhdGlvblNlYXJjaCsrOw0KDQogICAgICAgICAgICAgICAgICAgIGlmKG5vT2ZGYWlsZWRMb2NhdGlvblNlYXJjaCA9PSAkKHByb3BlcnRpZXMpLmxlbmd0aCkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZUdvb2dsZU1hcHNDb250ZW50KCk7DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdHVzID09IGdvb2dsZS5tYXBzLkdlb2NvZGVyU3RhdHVzLk9WRVJfUVVFUllfTElNSVQpIHsNCiAgICAgICAgICAgICAgICAgICAgLy9zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgZ2V0R2VvQ29kZUZvckFkZHJlc3MoaWQsIGFkZHJlc3MpOyB9LCAodGltZW91dCkpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICAvL1JlcGxhY2VzIGdvb2dsZSBtYXBzIGNvbnRlbnQgd2l0aCBhIG5ldyBkaXYgYmxvY2sgdGhhdCBoYXMgaW5mbyBtZXNzYWdlDQogICAgZnVuY3Rpb24gcmVwbGFjZUdvb2dsZU1hcHNDb250ZW50KCkgew0KICAgICAgICB2YXIgbmV3Q29udGVudCA9ICc8ZGl2IGNsYXNzPSJ1aS1hY2NvcmRpb24tY29udGVudCB1aS1oZWxwZXItcmVzZXQgdWktd2lkZ2V0LWNvbnRlbnQgdWktY29ybmVyLWJvdHRvbSI+JyArDQogICAgICAgICAgICAnPHA+Q291bGRuXCd0IGZpbmQgdGhlIHByb3BlcnR5IGFkZHJlc3MoZXMpIG9uIEdvb2dsZSBNYXBzLiA8cD4nICsNCiAgICAgICAgICAgICc8L2Rpdj4nOw0KDQogICAgICAgICQoJyNtYXBfY29udGFpbmVyJykucmVwbGFjZVdpdGgobmV3Q29udGVudCk7DQogICAgfQ0KDQo8L3NjcmlwdD4NCg0KICAgIDwvZGl2Pg0KICAgIDxkaXYgY2xhc3M9Im1vZGFsIGZhZGUiIGlkPSJzdWJtaXNzaW9uLW1vZGFsIj4NCiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InNwaW5uZXIiPjwvZGl2PiA8IS0tIFRoaXMgZGl2IGhvc3RzIHRoZSBzcGlubmVyIC0tPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgZGF0YS1kaXNtaXNzPSJtb2RhbCIgYXJpYS1sYWJlbD0iQ2xvc2UiPjxzcGFuIGFyaWEtaGlkZGVuPSJ0cnVlIj4mdGltZXM7PC9zcGFuPjwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9Im1vZGFsLXRpdGxlIj5TdWJtaXNzaW9uIGZvciAxMC4yMDI1LjcuMTwvaDI+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KDQogICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkgew0KDQogICAgICAgICQoJyNhcHBsaWNhdGlvbicpLnRvZ2dsZXBhbmVscygpOw0KDQogICAgICAgICAgICAkKCcjcHJvcGVydGllcycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjZGV0YWlscycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjdHJhY2tpbmcnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI2RvY3VtZW50cycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjcmVsYXRlZEFwcGxpY2F0aW9ucycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjZ29vZ2xlbWFwcycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjY29udGFjdFVzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNleGhpYml0aW9uRGV0YWlscycpLmNsaWNrKCk7DQoNCiAgICAgICAgDQoNCg0KICAgICAgICAkKCcjc3VibWlzc2lvbi1idG4nKS5jbGljayhmdW5jdGlvbiAoKSB7ICAgICAgICANCg0KDQogICAgICAgICAgICB2YXIgdXJsID0gImh0dHBzOi8vZGF0cmFja2VyLmJ1cndvb2QubnN3Lmdvdi5hdS8vQXBwbGljYXRpb24vU3VibWlzc2lvbi8iICsgZW5jb2RlVVJJKCIxMC4yMDI1LjcuMSIpOw0KDQogICAgICAgICAgICAkKCcjc3VibWlzc2lvbi1tb2RhbCcpLm1vZGFsKCdzaG93JykuZmluZCgnLm1vZGFsLWJvZHknKS5sb2FkKHVybCk7DQogICAgICAgIH0pOw0KICAgIH0pOw0KDQoNCiAgICAvKiBTaG93cyBhbGwgdGhlIHBhbmVscyAqLw0KICAgIGZ1bmN0aW9uIHNob3dBbGwoKSB7DQogICAgICAgICQoJyNhcHBsaWNhdGlvbicpLmNoaWxkcmVuKCJoMyIpLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoInVpLXN0YXRlLWRlZmF1bHQiKSkgew0KICAgICAgICAgICAgICAgICQodGhpcykuY2xpY2soKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSk7DQogICAgfQ0KDQoNCiAgICAvKiBIaWRlIGFsbCB0aGUgcGFuZWxzICovDQogICAgZnVuY3Rpb24gaGlkZUFsbCgpIHsNCiAgICAgICAgJCgnI2FwcGxpY2F0aW9uJykuY2hpbGRyZW4oImgzIikuZWFjaChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcygidWktc3RhdGUtYWN0aXZlIikpIHsNCiAgICAgICAgICAgICAgICAkKHRoaXMpLmNsaWNrKCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0pOw0KICAgIH0NCg0KICAgIDwvc2NyaXB0Pg0KDQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8IS0tIC8uY29udGFpbmVyLWZsdWlkIC0tPg0KDQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPCEtLSAvI3BhZ2Utd3JhcHBlciAtLT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQoNCiAgICAgICAgICAgIDxkaXYgaWQ9IkdyZWVuQmFyIj4NCiAgICAgICAgICAgICAgICA8YSBzdHlsZT0iY3Vyc29yOmRlZmF1bHQiPiBDb3B5cmlnaHQgwqkgMjAxOCBDaXZpY2EgfCA8L2E+DQogICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5CdXJ3b29kLm5zdy5nb3YuYXUvZGlzY2xhaW1lciIgdGFyZ2V0PSJfcGFyZW50Ij5Db3B5cmlnaHQgYW5kIERpc2NsYWltZXI8L2E+DQogICAgICAgICAgICAgICAgPGEgc3R5bGU9ImN1cnNvcjpkZWZhdWx0Ij4gfCA8L2E+DQogICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5CdXJ3b29kLm5zdy5nb3YuYXUvcHJpdmFjeS1zdGF0ZW1lbnQiIHRhcmdldD0iX3BhcmVudCI+UHJpdmFjeSBTdGF0ZW1lbnQ8L2E+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXY+IDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCg0KICAgIDxkaXYgaWQ9InRpcHRpcF9ob2xkZXIiIHN0eWxlPSJtYXgtd2lkdGg6MzAwcHg7Ij48ZGl2IGlkPSJ0aXB0aXBfYXJyb3ciPjxkaXYgaWQ9InRpcHRpcF9hcnJvd19pbm5lciI+PC9kaXY+PC9kaXY+PGRpdiBpZD0idGlwdGlwX2NvbnRlbnQiPjwvZGl2PjwvZGl2Pg0KPC9ib2R5Pg0KDQo8L2h0bWw+DQo=
  recorded_at: Mon, 21 Apr 2025 17:14:05 GMT
- request:
    method: get
    uri: https://datracker.burwood.nsw.gov.au/Application/ApplicationDetails/011.2025.00000003.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - datracker.burwood.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 302
      message: Found
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Home/Disclaimer"
      Server:
      - Microsoft-IIS/10.0
      Set-Cookie:
      - ASP.NET_SessionId=bejlfllyhadtdaxeztcxuxtg; path=/; HttpOnly; SameSite=Lax
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 17:14:04 GMT
      Content-Length:
      - '133'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Home/Disclaimer\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 17:14:05 GMT
- request:
    method: get
    uri: https://datracker.burwood.nsw.gov.au/Home/Disclaimer
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=bejlfllyhadtdaxeztcxuxtg
      Host:
      - datracker.burwood.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 17:14:05 GMT
      Content-Length:
      - '13592'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 17:14:05 GMT
- request:
    method: post
    uri: https://datracker.burwood.nsw.gov.au/Home/DisclaimerProcessing
    body:
      encoding: UTF-8
      string: agreed=true
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=bejlfllyhadtdaxeztcxuxtg
      Host:
      - datracker.burwood.nsw.gov.au
      Referer:
      - https://datracker.burwood.nsw.gov.au/Home/Disclaimer
      Content-Type:
      - application/x-www-form-urlencoded
      Content-Length:
      - '11'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Application/ApplicationDetails/011.2025.00000003.001"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      Set-Cookie:
      - User=accessAllowed-MasterView=True; path=/
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 17:14:05 GMT
      Content-Length:
      - '170'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Application/ApplicationDetails/011.2025.00000003.001\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 17:14:06 GMT
- request:
    method: get
    uri: https://datracker.burwood.nsw.gov.au/Application/ApplicationDetails/011.2025.00000003.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=bejlfllyhadtdaxeztcxuxtg; User=accessAllowed-MasterView=True
      Host:
      - datracker.burwood.nsw.gov.au
      Referer:
      - https://datracker.burwood.nsw.gov.au/Home/Disclaimer
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 17:14:05 GMT
      Content-Length:
      - '25581'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 17:14:06 GMT
- request:
    method: get
    uri: https://datracker.burwood.nsw.gov.au/Application/ApplicationDetails/011.2025.00000003.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=bejlfllyhadtdaxeztcxuxtg; User=accessAllowed-MasterView=True
      Host:
      - datracker.burwood.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 17:14:07 GMT
      Content-Length:
      - '25581'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 17:14:07 GMT
- request:
    method: get
    uri: https://datracker.burwood.nsw.gov.au/Application/ApplicationDetails/011.2025.00000009.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - datracker.burwood.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 302
      message: Found
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Home/Disclaimer"
      Server:
      - Microsoft-IIS/10.0
      Set-Cookie:
      - ASP.NET_SessionId=cswg3efqjm4ljesh1sgl5qwh; path=/; HttpOnly; SameSite=Lax
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 17:14:07 GMT
      Content-Length:
      - '133'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Home/Disclaimer\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 17:14:07 GMT
- request:
    method: get
    uri: https://datracker.burwood.nsw.gov.au/Home/Disclaimer
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=cswg3efqjm4ljesh1sgl5qwh
      Host:
      - datracker.burwood.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 17:14:07 GMT
      Content-Length:
      - '13592'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 17:14:07 GMT
- request:
    method: post
    uri: https://datracker.burwood.nsw.gov.au/Home/DisclaimerProcessing
    body:
      encoding: UTF-8
      string: agreed=true
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=cswg3efqjm4ljesh1sgl5qwh
      Host:
      - datracker.burwood.nsw.gov.au
      Referer:
      - https://datracker.burwood.nsw.gov.au/Home/Disclaimer
      Content-Type:
      - application/x-www-form-urlencoded
      Content-Length:
      - '11'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Application/ApplicationDetails/011.2025.00000009.001"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      Set-Cookie:
      - User=accessAllowed-MasterView=True; path=/
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 17:14:07 GMT
      Content-Length:
      - '170'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Application/ApplicationDetails/011.2025.00000009.001\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 17:14:07 GMT
- request:
    method: get
    uri: https://datracker.burwood.nsw.gov.au/Application/ApplicationDetails/011.2025.00000009.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=cswg3efqjm4ljesh1sgl5qwh; User=accessAllowed-MasterView=True
      Host:
      - datracker.burwood.nsw.gov.au
      Referer:
      - https://datracker.burwood.nsw.gov.au/Home/Disclaimer
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 17:14:07 GMT
      Content-Length:
      - '24439'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 17:14:08 GMT
- request:
    method: get
    uri: https://datracker.burwood.nsw.gov.au/Application/ApplicationDetails/011.2025.00000009.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=cswg3efqjm4ljesh1sgl5qwh; User=accessAllowed-MasterView=True
      Host:
      - datracker.burwood.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 17:14:08 GMT
      Content-Length:
      - '24439'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 17:14:08 GMT
- request:
    method: get
    uri: https://datracker.burwood.nsw.gov.au/Application/ApplicationDetails/013.2023.00000012.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - datracker.burwood.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 302
      message: Found
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Home/Disclaimer"
      Server:
      - Microsoft-IIS/10.0
      Set-Cookie:
      - ASP.NET_SessionId=y2xrghgxt0eqjxplir1a4pms; path=/; HttpOnly; SameSite=Lax
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 17:14:08 GMT
      Content-Length:
      - '133'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Home/Disclaimer\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 17:14:08 GMT
- request:
    method: get
    uri: https://datracker.burwood.nsw.gov.au/Home/Disclaimer
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=y2xrghgxt0eqjxplir1a4pms
      Host:
      - datracker.burwood.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 17:14:08 GMT
      Content-Length:
      - '13592'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 17:14:08 GMT
- request:
    method: post
    uri: https://datracker.burwood.nsw.gov.au/Home/DisclaimerProcessing
    body:
      encoding: UTF-8
      string: agreed=true
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=y2xrghgxt0eqjxplir1a4pms
      Host:
      - datracker.burwood.nsw.gov.au
      Referer:
      - https://datracker.burwood.nsw.gov.au/Home/Disclaimer
      Content-Type:
      - application/x-www-form-urlencoded
      Content-Length:
      - '11'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Application/ApplicationDetails/013.2023.00000012.001"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      Set-Cookie:
      - User=accessAllowed-MasterView=True; path=/
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 17:14:08 GMT
      Content-Length:
      - '170'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Application/ApplicationDetails/013.2023.00000012.001\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 17:14:08 GMT
- request:
    method: get
    uri: https://datracker.burwood.nsw.gov.au/Application/ApplicationDetails/013.2023.00000012.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=y2xrghgxt0eqjxplir1a4pms; User=accessAllowed-MasterView=True
      Host:
      - datracker.burwood.nsw.gov.au
      Referer:
      - https://datracker.burwood.nsw.gov.au/Home/Disclaimer
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 17:14:08 GMT
      Content-Length:
      - '24622'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 17:14:09 GMT
- request:
    method: get
    uri: https://datracker.burwood.nsw.gov.au/Application/ApplicationDetails/013.2023.00000012.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=y2xrghgxt0eqjxplir1a4pms; User=accessAllowed-MasterView=True
      Host:
      - datracker.burwood.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 17:14:09 GMT
      Content-Length:
      - '24622'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 17:14:09 GMT
recorded_with: VCR 6.0.0
