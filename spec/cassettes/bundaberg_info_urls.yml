---
http_interactions:
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/521.2019.00000107.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 302
      message: Found
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '133'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Location:
      - "/Home/Disclaimer"
      Server:
      - Microsoft-IIS/10.0
      Set-Cookie:
      - ASP.NET_SessionId=zeuq0xml4sbdmyfkqykg35ai; path=/; HttpOnly; SameSite=Lax
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:15:20 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 16d41d81c0733a1153f7a82e04959230.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - MEL52-P2
      X-Amz-Cf-Id:
      - L8gSw6InnBcuptP9MjyHPCC-EOZELu8j7pgOgNxLP3A-pjVqDxFnZA==
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Home/Disclaimer\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:15:20 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Home/Disclaimer
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=zeuq0xml4sbdmyfkqykg35ai
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '14203'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:15:20 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 7c60fae2809ecc0b24a11c50aa5e6a66.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - MEL52-P2
      X-Amz-Cf-Id:
      - xuXvmQ5eKJly8rjKIFsY8Mr_5S6bo59RNJ_n871YokExRwTYswnGQA==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:15:20 GMT
- request:
    method: post
    uri: https://da.bundaberg.qld.gov.au/Home/DisclaimerProcessing
    body:
      encoding: UTF-8
      string: agreed=true
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=zeuq0xml4sbdmyfkqykg35ai
      Host:
      - da.bundaberg.qld.gov.au
      Referer:
      - https://da.bundaberg.qld.gov.au/Home/Disclaimer
      Content-Type:
      - application/x-www-form-urlencoded
      Content-Length:
      - '11'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '170'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Location:
      - "/Application/ApplicationDetails/521.2019.00000107.001"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      Set-Cookie:
      - User=accessAllowed-MasterView=True; path=/
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:15:20 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 16d41d81c0733a1153f7a82e04959230.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - MEL52-P2
      X-Amz-Cf-Id:
      - R9HIZS_X2EfUijFsVPhJKBKKd5LD6z7Gi8Nk1bv645VrwwUGAYAnKQ==
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Application/ApplicationDetails/521.2019.00000107.001\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:15:20 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/521.2019.00000107.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=zeuq0xml4sbdmyfkqykg35ai; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Referer:
      - https://da.bundaberg.qld.gov.au/Home/Disclaimer
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '30711'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:15:22 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 7c60fae2809ecc0b24a11c50aa5e6a66.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - MEL52-P2
      X-Amz-Cf-Id:
      - whrXKQL0P-9MGEVhrxm1FDhGLHzueJqnz8-jGFRZJex9VnnTVPbzGg==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:15:23 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/521.2019.00000107.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=zeuq0xml4sbdmyfkqykg35ai; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '30711'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:15:24 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 c5d23952ce4c2fcd7a440fd66219c5b2.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - MEL52-P2
      X-Amz-Cf-Id:
      - dH1sJUbeOM177pEXhLEMPPeb04SkWNhKI-xZ3A9-tIeiNQkNLuEgqg==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:15:25 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/521.2019.00000108.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 302
      message: Found
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '133'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Location:
      - "/Home/Disclaimer"
      Server:
      - Microsoft-IIS/10.0
      Set-Cookie:
      - ASP.NET_SessionId=uot1qbpdwsgsygpgyxicpuyw; path=/; HttpOnly; SameSite=Lax
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:15:24 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 16d41d81c0733a1153f7a82e04959230.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - MEL52-P2
      X-Amz-Cf-Id:
      - X-O9BZfncEDxcFjiCVCaQSnvdePXGrzyKeSTn1E9vOGZG8GxA2HguA==
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Home/Disclaimer\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:15:25 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Home/Disclaimer
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=uot1qbpdwsgsygpgyxicpuyw
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '14203'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:15:24 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 f0d0acd995ee295f01d21363e9f3baf2.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - MEL52-P2
      X-Amz-Cf-Id:
      - ulJji0p_xxw0b74oguIMy1D1LJ7WMBUj0CjWtMyBcDO1sdPP3Gpoig==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQo8aHRtbCBsYW5nPSJlbiI+DQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+DQogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4NCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPg0KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIj4NCiAgICA8bWV0YSBuYW1lPSJrZXl3b3JkcyIgY29udGVudD0iQnVuZGFiZXJnIFJlZ2lvbmFsIENvdW5jaWwsREEgVHJhY2tlcixEZXZlbG9wbWVudCBBcHBsaWNhdGlvbixEZXZlbG9wbWVudCBBcHBsaWNhdGlvbiBUcmFja2luZywgREEgRW5xdWlyeSwgRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24gRW5xdWlyeSwgQXBwbGljYXRpb24gVHJhY2tlciI+DQogICAgPG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iIGNvbnRlbnQ9IlRoZSBvZmZpY2lhbCBCdW5kYWJlcmcgUmVnaW9uYWwgQ291bmNpbCBBcHBsaWNhdGlvbiBUcmFja2VyIj4NCg0KICAgIDx0aXRsZT5CdW5kYWJlcmcgUmVnaW9uYWwgQ291bmNpbCAtIEFwcGxpY2F0aW9uIFRyYWNrZXI8L3RpdGxlPg0KDQogICAgPCEtLWZhdmljb24tLT4NCiAgICA8bGluayBocmVmPSIvZmF2aWNvbi5pY28iIHJlbD0ic2hvcnRjdXQgaWNvbiIgdHlwZT0iaW1hZ2UveC1pY29uIj4NCg0KICAgIDwhLS0galF1ZXJ5IC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvYnVuZGxlcy9qcXVlcnk/dj1OOVgzMW9qMjRsbGkxdVZGcFg2dWowTTJXZE43R2RnTWpudllFVW9JeDdzMSI+PC9zY3JpcHQ+DQoNCiAgICA8c2NyaXB0IHNyYz0iL2J1bmRsZXMvanF1ZXJ5dWk/dj1tbTN2MlBwR1VrRFVyaUU2YnpKdVRscWJfdFZqbVdFR2o0aTRnU0o3aXBVMSI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC90aGVtZXMvYmFzZS9qcXVlcnk/dj1yY0F2OENjR2tGcnZaWlpxTzZJaHBYb0hQa05FQ2k1SVBHLUhCRjFCYjEwMSIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDwhLS0gQm9vdHN0cmFwIC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvYnVuZGxlcy9ib290c3RyYXA/dj13TUZCSUlaNk9zVUNlMXFPU2xSTlNfNmhHQkpnZkNFMDVWaDFHekNwcFlvMSI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9ib290c3RyYXA/dj1tS3NvR3lsTHpnOFhBOW5RaDV2dkJtMHV2Vi1LOHBiNVhUcmFEQ3M0a2JNMSIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9mb250LWF3ZXNvbWU/dj1ERU5YTmNRV0NVcVhMV213NGo1VUxQUFRwd2dXZ1E4RGo5YlFCRHFDNmFnMSIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDwhLS0gRGF0YVRhYmxlcyAtLT4NCiAgICA8c2NyaXB0IHNyYz0iL2J1bmRsZXMvZGF0YVRhYmxlcz92PVVIWUR4TzhWVmgyUmdDbWlWVU0tM0NpdmJfUTJjR2NieE1TVXhnRnViWEExIj48L3NjcmlwdD4NCg0KICAgIA0KICAgIDxsaW5rIGhyZWY9Ii9Db250ZW50L0RhdGFUYWJsZXMvY3NzP3Y9ZWtvMElPbWhlN2Myd0E0WVlGNURMX0NuRzR3b2k2ZTRYa0gzSHl4M1luZzEiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQoNCiAgICA8IS0tIEJvb3RzdHJhcCBTQi1BZG1pbi0yIFBsdWdpbiBhbmQgb3RoZXIgY3NzIGFuZCBqcyBmaWxlcy0tPg0KICAgIDxzY3JpcHQgc3JjPSIvanMvanNGb2xkZXI/dj0xZmh3ajFpb2NHMjg5bW5GQVMtYU9Dd3hRdWVFQTJCYW5qb3pHb2JFMzNvMSI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvY3NzL2Nzc0ZvbGRlcj92PXl2aC1XNHl6ODg3QkF3NTJIZFoyWFlodkdmN3RWdmY1eG9jTkkteG1NYzQxIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPGxpbmsgaHJlZj0iL0NvdW5jaWxfVGhlbWUvY3NzP3Y9NzltRkVGY2lyalUyUlc1bXJOQUREU3NkaEl4bk9FYmJnOExGelVHUDRZczEiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQogICAgPHNjcmlwdCBzcmM9Ii9Db3VuY2lsX1RoZW1lL2pzP3Y9Ij48L3NjcmlwdD4NCg0KDQogICAgPCEtLSBIVE1MNSBTaGltIGFuZCBSZXNwb25kLmpzIElFOCBzdXBwb3J0IG9mIEhUTUw1IGVsZW1lbnRzIGFuZCBtZWRpYSBxdWVyaWVzIC0tPg0KICAgIDwhLS0gV0FSTklORzogUmVzcG9uZC5qcyBkb2Vzbid0IHdvcmsgaWYgeW91IHZpZXcgdGhlIHBhZ2UgdmlhIGZpbGU6Ly8gLS0+DQogICAgPCEtLVtpZiBsdCBJRSA5XT4NCiAgICAgICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vb3NzLm1heGNkbi5jb20vbGlicy9odG1sNXNoaXYvMy43LjAvaHRtbDVzaGl2LmpzIj48L3NjcmlwdD4NCiAgICAgICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vb3NzLm1heGNkbi5jb20vbGlicy9yZXNwb25kLmpzLzEuNC4yL3Jlc3BvbmQubWluLmpzIj48L3NjcmlwdD4NCiAgICA8IVtlbmRpZl0tLT4NCjwvaGVhZD4NCg0KDQoNCjxib2R5Pg0KICAgIDxkaXYgY2xhc3M9InB1c2htZW51IGNicC1zcG1lbnUtcHVzaCI+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+DQogICAgICAgICAgICA8aGVhZGVyIGlkPSJIZWFkZXIiPg0KICAgICAgICAgICAgICAgIDxuYXYgY2xhc3M9Im5hdmJhciBuYXZiYXItZGVmYXVsdCIgcm9sZT0ibmF2aWdhdGlvbiIgaWQ9Ik5hdkJhciI+DQogICAgICAgICAgICAgICAgICAgIDwhLS0gQnJhbmQgYW5kIHRvZ2dsZSBnZXQgZ3JvdXBlZCBmb3IgYmV0dGVyIG1vYmlsZSBkaXNwbGF5IC0tPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InV0aWxzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vd3d3LmJ1bmRhYmVyZy5xbGQuZ292LmF1IiB0YXJnZXQ9Il9ibGFuayI+SG9tZTwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly93d3cuYnVuZGFiZXJnLnFsZC5nb3YuYXUvY291bmNpbC9jdXN0b21lci1zZXJ2aWNlIiB0YXJnZXQ9Il9ibGFuayI+Q29udGFjdCBVczwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly93d3cuYnVuZGFiZXJnLnFsZC5nb3YuYXUvcHJpdmFjeSIgdGFyZ2V0PSJfYmxhbmsiPlByaXZhY3kgUG9saWN5PC9hPjwvbGk+DQo8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8aDEgaWQ9ImxvZ28iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmJ1bmRhYmVyZy5xbGQuZ292LmF1Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9Db3VuY2lsX1RoZW1lL0J1bmRhYmVyZy9icmMtbG9nby5wbmciIGFsdD0iQnVuZGFiZXJnIFJlZ2lvbmFsIENvdW5jaWwiPjxzdHJvbmcgY2xhc3M9InZoIj5CdW5kYWJlcmcgUmVnaW9uYWwgQ291bmNpbDwvc3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDE+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvbmF2Pg0KDQoNCiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJiYW5uZXIiPg0KICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL0NvdW5jaWxfVGhlbWUvQnVuZGFiZXJnL2Jhbm5lci5qcGciPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8L2hlYWRlcj4NCg0KICAgICAgICAgICAgPGRpdiBpZD0iY29udGVudCI+DQogICAgICAgICAgICAgICAgPCEtLSBOYXZpZ2F0aW9uIC0tPg0KICAgICAgICAgICAgICAgIDxuYXYgY2xhc3M9Im5hdmJhciBuYXZiYXItZGVmYXVsdCBuYXZiYXItc3RhdGljLXRvcCIgcm9sZT0ibmF2aWdhdGlvbiIgc3R5bGU9Im1hcmdpbi1ib3R0b206IDAiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0ibmF2YmFyLXRvZ2dsZSIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLXRhcmdldD0iLm5hdmJhci1jb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPlRvZ2dsZSBuYXZpZ2F0aW9uPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2YmFyLWJyYW5kIiBocmVmPSIvSG9tZS9JbmRleCI+PC9hPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdmJhci1oZWFkZXIgLS0+DQogICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdmJhci10b3AtbGlua3MgbmF2YmFyLXJpZ2h0IGhpZGRlbi14cyBoaWRkZW4tc20gaGlkZGVuLW1kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48c3BhbiBpZD0icHJpbnRJY29uIiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1wcmludCIgb25jbGljaz0id2luZG93LnByaW50KCk7Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgPC91bD4NCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItZGVmYXVsdCBzaWRlYmFyIiByb2xlPSJuYXZpZ2F0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNpZGViYXItbmF2IG5hdmJhci1jb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYiIGlkPSJzaWRlLW1lbnUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLnNpZGViYXItY29sbGFwc2UgLS0+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLXN0YXRpYy1zaWRlIC0tPg0KICAgICAgICAgICAgICAgIDwvbmF2Pg0KICAgICAgICAgICAgICAgIDxkaXYgaWQ9InBhZ2Utd3JhcHBlciI+DQoNCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyLWZsdWlkIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgDQoNCg0KPGRpdiBjbGFzcz0icGFnZS1oZWFkZXIiPg0KPGgyPkRpc2NsYWltZXI8L2gyPg0KPC9kaXY+ICAgIAogPGRpdiBpZD0ic2Nyb2xsYWJsZUNvbnRlbnQiPiAgICANCjxoMz48c3Ryb25nPlRlcm1zIGFuZCBDb25kaXRpb25zPC9zdHJvbmc+PC9oMz4NCjxoND48c3Ryb25nPkdlbmVyYWwgQ29uZGl0aW9ucyBvZiBVc2U8L3N0cm9uZz48L2g0Pg0KPHA+QWNjZXNzaW5nIHRoaXMgd2ViIHNpdGUgaW1wbGllcyB0aGF0IHlvdSBoYXZlIGFncmVlZCB0byB0aGUgZm9sbG93aW5nOjwvcD4NCjxwPlRoZSBjb250ZW50cyBvZiB0aGlzIHdlYnNpdGUgKHdoaWNoIGluY2x1ZGVzIGRvd25sb2FkYWJsZSBtYXRlcmlhbCkgYXJlIHN1YmplY3QgdG8gY29weXJpZ2h0IGFuZCBhcmUgcHJvdGVjdGVkIGJ5IGxhd3Mgb2YgQXVzdHJhbGlhIGFuZCBvdGhlciBjb3VudHJpZXMgdGhyb3VnaCBpbnRlcm5hdGlvbmFsIHRyZWF0aWVzLjwvcD4NCjxwPkJ1bmRhYmVyZyBSZWdpb25hbCBDb3VuY2lsIGdyYW50cyB5b3UgYSBub24tZXhjbHVzaXZlIGxpY2Vuc2UgdG8gcmVwcm9kdWNlIHRoZSBjb250ZW50cyBvZiB0aGlzIHdlYnNpdGUgaW4geW91ciB3ZWIgYnJvd3NlciAoYW5kIGluIGFueSBjYWNoZSBmaWxlIHByb2R1Y2VkIGJ5IHlvdXIgd2ViIGJyb3dzZXIpIGZvciB0aGUgc29sZSBwdXJwb3NlIG9mIHZpZXdpbmcgdGhlIGNvbnRlbnQuIEJ1bmRhYmVyZyBSZWdpb25hbCBDb3VuY2lsIHJlc2VydmVzIGFsbCBvdGhlciByaWdodHMuPC9wPg0KPHA+VGhpcyBXZWItc2l0ZSwgaW5jbHVkaW5nIHRoZSBQRCBPbmxpbmUgZmFjaWxpdHkgcHJvdmlkZWQgd2l0aGluIGl0LCBpcyBmb3IgaW5mb3JtYXRpb24gcHVycG9zZXMgb25seSwgYW5kIGlzIHByb3ZpZGVkIGluIGdvb2QgZmFpdGguPC9wPg0KPHA+QWx0aG91Z2ggZXZlcnkgZWZmb3J0IGlzIG1hZGUgdG8gZW5zdXJlIHRoZSByZWxldmFuY2UsIGFjY3VyYWN5LCBjdXJyZW5jeSBhbmQgdGltZWxpbmVzcyBvZiBjb250ZW50LCBCdW5kYWJlcmcgUmVnaW9uYWwgQ291bmNpbCBhY2NlcHRzIG5vIHJlc3BvbnNpYmlsaXR5IGFuZCBtYWtlcyBubyByZXByZXNlbnRhdGlvbnMgd2hhdHNvZXZlciBmb3IgdGhlIGFjY3VyYWN5LCBjb3JyZWN0bmVzcyBvciBvdGhlcndpc2Ugb2YgYW55IGluZm9ybWF0aW9uIG9uIHRoZSBwYWdlcyBwdWJsaXNoZWQgd2l0aGluIHRoaXMgc2l0ZSAoaW5jbHVkaW5nIHRoZSBQRCBPbmxpbmUgZmFjaWxpdHkgcHJvdmlkZWQpLiBCeSBhY2Nlc3NpbmcgdGhpcyBXZWJzaXRlIHlvdSBhY2NlcHQgdG8gdXNpbmcgdGhlIGluZm9ybWF0aW9uIG9uIHRoZSBwYWdlcyBhdCB5b3VyIG93biByaXNrLjwvcD4NCjxwPldpdGhvdXQgbGltaXRpbmcgdGhlIGdlbmVyYWxpdHkgb2YgdGhlIGZvcmVnb2luZywgYW5kIHN1YmplY3Qgb25seSB0byBzdGF0dXRlLCBCdW5kYWJlcmcgUmVnaW9uYWwgQ291bmNpbCBkb2VzIG5vdCB3YXJyYW50IHRoYXQgdGhlIGluZm9ybWF0aW9uIG9uIHRoZSBwYWdlcyBwdWJsaXNoZWQgd2l0aGluIHRoaXMgc2l0ZSAoaW5jbHVkaW5nIHRoZSBQRCBPbmxpbmUgZmFjaWxpdHkgcHJvdmlkZWQpIGNhbiBiZSByZWxpZWQgdXBvbiwgZXhwcmVzc2x5IGRpc2NsYWltcyBhbGwgd2FycmFudGllcywgZXhwcmVzcyBvciBpbXBsaWVkLCBpbmNsdWRpbmcgYnV0IG5vdCBsaW1pdGVkIHRvIHRoZSBpbXBsaWVkIHdhcnJhbnRpZXMgb2YgcXVhbGl0eSBvciBhY2N1cmFjeSBvciBtZXJjaGFudGFiaWxpdHkgYW5kIGZpdG5lc3MgZm9yIGEgcGFydGljdWxhciBwdXJwb3NlLCBhbmQgZG9lcyBub3Qgd2FycmFudCBvciBtYWtlIGFueSByZXByZXNlbnRhdGlvbnMgcmVnYXJkaW5nIHRoZSB1c2Ugb3IgdGhlIHJlc3VsdHMgb2YgdGhlIHVzZSBvZiBhbnkgaW5mb3JtYXRpb24gb24gdGhlIHBhZ2UgcHVibGlzaGVkIHdpdGhpbiB0aGlzIHNpdGUgKGluY2x1ZGluZyB0aGUgUEQgT25saW5lIGZhY2lsaXR5IHByb3ZpZGVkKS48L3A+DQo8cD5UaGlzIGZhY2lsaXR5IGlzIHVuZGVyIGNvbnN0YW50IGFtZW5kbWVudCB0byBwcm92aWRlIHRoZSBsYXRlc3QgYW5kIG1vc3QgYWNjdXJhdGUgaW5mb3JtYXRpb24gYXZhaWxhYmxlLiBTb21lIGluZm9ybWF0aW9uIG1heSwgaG93ZXZlciwgbm90IGJlIGN1cnJlbnQuIENoYW5nZXMgaW4gY2lyY3Vtc3RhbmNlcyBhZnRlciB0aW1lIG9mIHB1YmxpY2F0aW9uIG1heSBpbXBhY3Qgb24gdGhlIGFjY3VyYWN5IG9mIHRoZSBpbmZvcm1hdGlvbiBwcm92aWRlZCBieSB0aGlzIHdlYnNpdGUuIEluIGFkZGl0aW9uLCBpbmZvcm1hdGlvbiBwdWJsaXNoZWQgYW5kIHRyYW5zbWl0dGVkIGVsZWN0cm9uaWNhbGx5IG1heSBiZSBzdWJqZWN0IHRvIGNvcnJ1cHRpb24gYnkgdGhlIHByb2Nlc3MuIFZpZXdlcnMgbXVzdCB0YWtlIGFjY291bnQgb2YgYWxsIG9mIHRoZSBhYm92ZSB3aGVuIGFjY2Vzc2luZyBwdWJsaXNoZWQgaW5mb3JtYXRpb24uPC9wPg0KPHA+Tm8gcGVyc29uIHNob3VsZCBwbGFjZSByZWxpYW5jZSBvbiBpbmZvcm1hdGlvbiBmcm9tIHRoaXMgd2Vic2l0ZSAoaW5jbHVkaW5nIHRoZSBQRCBPbmxpbmUgZmFjaWxpdHkgcHJvdmlkZWQpIGluIGNpcmN1bXN0YW5jZXMgd2hlcmUgbG9zcywgZGFtYWdlIG9yIGluanVyeSBpcyBwb3NzaWJsZS4gVGhpcyBpcyBwYXJ0aWN1bGFybHkgaW1wb3J0YW50IHNob3VsZCB5b3Ugd2lzaCB0byB1c2UgYW55IGluZm9ybWF0aW9uIGZvciBhbnkgbGVnYWwgcHVycG9zZS48L3A+DQo8cD5TcGVjaWZpYyBlbnF1aXJpZXMgc2hvdWxkIGJlIG1hZGUgdG8gQ291bmNpbCBpbiBvcmRlciB0byBvYnRhaW4gdGhlIHJlcXVpcmVkIGluZm9ybWF0aW9uIG9yIGFkdmljZSBkaXJlY3RseSBmcm9tIENvdW5jaWwgT2ZmaWNlcnMgYW5kIHRvIG90aGVyd2lzZSBhc2NlcnRhaW4gdGhlIGFjY3VyYWN5IG9mIGFsbCBpbmZvcm1hdGlvbiBjb250YWluZWQgd2l0aGluIHRoZXNlIHBhZ2VzLiBJbiBzb21lIGNhc2VzLCB5b3UgbWF5IGJlIHJlcXVpcmVkIHRvIG1ha2UgYSB3cml0dGVuIGFwcGxpY2F0aW9uIHRvIENvdW5jaWwgdG8gb2J0YWluIHRoZSBkZXNpcmVkIGluZm9ybWF0aW9uIG9yIGFkdmljZS48L3A+DQo8cD5CdW5kYWJlcmcgUmVnaW9uYWwgQ291bmNpbCBpcyB1bmRlciBubyBsaWFiaWxpdHkgdG8gYW55IHBlcnNvbiBpbiByZXNwZWN0IG9mIGFueSBsb3NzIG9yIGRhbWFnZSBob3dldmVyIGFyaXNpbmcoaW5jbHVkaW5nIGNvbnNlcXVlbnRpYWwgbG9zcyBvciBkYW1hZ2UgYW5kIG5lZ2xpZ2VuY2UpIHRoYXQgbWF5IGJlIHN1ZmZlcmVkIG9yIGluY3VycmVkLCBvciB3aGljaCBtYXkgYXJpc2UgZGlyZWN0bHkgb3IgaW5kaXJlY3RseSwgaW4gcmVzcGVjdCBvZiBpbmZvcm1hdGlvbiBvbiB0aGUgcGFnZXMgcHVibGlzaGVkIHdpdGhpbiB0aGlzIHNpdGUgKGluY2x1ZGluZyB0aGUgUEQgT25saW5lIGZhY2lsaXR5IHByb3ZpZGVkKS48L3A+DQo8cD5JbiBhZGRpdGlvbiwgQnVuZGFiZXJnIFJlZ2lvbmFsIENvdW5jaWwgYWNjZXB0cyBubyByZXNwb25zaWJpbGl0eSBmb3IgZW1haWwgb3IgYW55IG90aGVyIGZvcm0gb2YgY29ycmVzcG9uZGVuY2Ugc2VudCB0byBvciBmcm9tIHRoaXMgc2l0ZSB2aWEgdGhlIGludGVybmV0LiBFeGNlcHQgYXMgb3RoZXJ3aXNlIHJlcXVpcmVkIGJ5IGxhdywgdGhlcmUgaXMgbm8gb2JsaWdhdGlvbiB1cG9uIENvdW5jaWwgdG8gcmVhZCwgcmVzcG9uZCBvciB0byBkZWFsIHdpdGggaW4gYW55IHdheSwgYW55IHN1Y2ggdHJhbnNtaXNzaW9ucy4gVXNlcnMgd2hvIGNvbnRhY3QgQ291bmNpbCB2aWEgdGhpcyBtZWRpdW0gZG8gc28gYXQgdGhlaXIgb3duIGxpYWJpbGl0eSBhbmQgd2l0aG91dCBvbnVzIHVwb24gQ291bmNpbC48L3A+DQo8cD5Db3VuY2lsIHJlY29nbmlzZXMgeW91ciBjb25jZXJuIGZvciBzZWN1cml0eSwgYW5kIHdpbGwgdXNlIGFsbCByZWFzb25hYmxlIGVmZm9ydHMgdG8gZXN0YWJsaXNoIHNlY3VyZSBjb25uZWN0aW9ucyB3aXRoIHlvdS48L3A+DQo8cD5Ob3R3aXRoc3RhbmRpbmcgdGhlIGFib3ZlLCBwbGVhc2UgYmUgYXNzdXJlZCB0aGF0IHRoZSBDb3VuY2lsIGhpZ2hseSB2YWx1ZXMgYWxsIGVsZWN0cm9uaWMgY29udGFjdHMgYW5kIHdpbGwgYXR0ZW1wdCB0byBvZmZlciB0aGUgaGlnaGVzdCBsZXZlbHMgb2YgY3VzdG9tZXIgc2VydmljZSBieSB0cmVhdGluZyB0aGVtIGluIGEgc2ltaWxhciBtYW5uZXIgdG8gYWxsIG90aGVyIGZvcm1zIG9mIGNvbnRhY3Qgd2l0aCB0aGUgQ291bmNpbC48L3A+DQo8cD48c3Ryb25nPkluZm9ybWF0aW9uIGFib3V0IERldmVsb3BtZW50IEFwcGxpY2F0aW9uczwvc3Ryb25nPjwvcD4NCjxwPlRoZSBpbmZvcm1hdGlvbiBvbiB0aGlzIHdlYnNpdGUgaXMgcHJvdmlkZWQgdG8gY3VzdG9tZXJzIGZvciB0aGUgcHVycG9zZXMgb2YgZW5xdWlyaW5nIG9uIHZhcmlvdXMgYXNwZWN0cyBvZiBkZXZlbG9wbWVudCBhcHBsaWNhdGlvbnMuIFRoZSBkb2N1bWVudHMgYW5kIGluZm9ybWF0aW9uIG1hZGUgYXZhaWxhYmxlIGZvciB0aGUgZGV2ZWxvcG1lbnQgYXBwbGljYXRpb25zIGlzIGRlZW1lZCB0byBiZSBvcGVuIGFjY2VzcyBpbmZvcm1hdGlvbiB1bmRlciB0aGUgcmVsZXZhbnQgc2VjdGlvbnMgb2YgdGhlIDxlbT5QbGFubmluZyBBY3QgMjAxNjwvZW0+IGhvd2V2ZXIgdGhleSBkbyBub3QgcmVwcmVzZW50IGEgZGV0YWlsZWQgaGlzdG9yeS4gUGVyc29ucyB3aXNoaW5nIHRvIGNvbmZpcm0gaW5mb3JtYXRpb24gaW4gZGV0YWlsIHNob3VsZCBjb250YWN0IENvdW5jaWwgaW4gd3JpdGluZyBpbiBvcmRlciB0byBvYnRhaW4gYSB3cml0dGVuIHJlc3BvbnNlLjwvcD4NCgo8L2Rpdj4KCjxwIGNsYXNzPSJzZWN0aW9uIj4NCjwvYnI+DQo8Yj5JIGhhdmUgcmVhZCBhbmQgdW5kZXJzdG9vZCB0aGUgcHJvdmlzaW9ucyBzZXQgb3V0IGFib3ZlLjwvYj4NCjwvcD4NCjwvYnI+DQoNCg0KPGZvcm0gYWN0aW9uPSIvSG9tZS9EaXNjbGFpbWVyUHJvY2Vzc2luZyIgaWQ9ImRpc2NsYWltZXItZm9ybSIgbWV0aG9kPSJwb3N0Ij48aW5wdXQgaWQ9ImFncmVlZCIgbmFtZT0iYWdyZWVkIiB0eXBlPSJoaWRkZW4iIHZhbHVlPSJGYWxzZSIgLz4gICAgPGRpdiBpZD0iYnRucyI+DQogICAgICAgIDxidXR0b24gaWQ9ImFncmVlIiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIGZvcm09ImRpc2NsYWltZXItZm9ybSI+QWdyZWU8L2J1dHRvbj4NCiAgICAgICAgPGJ1dHRvbiBpZD0iZGlzYWdyZWUiIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4td2FybmluZyIgZm9ybT0iZGlzY2xhaW1lci1mb3JtIj5EaXNhZ3JlZTwvYnV0dG9uPg0KICAgIDwvZGl2Pg0KPC9mb3JtPg0KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KDQogICAgdmFyIGxhc3RTY3JvbGxUb3A7DQogICAgdmFyIG1heFNjcm9sbGFibGVDb250ZW50SGVpZ2h0Ow0KDQogICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkgew0KDQogICAgICAgIHVwZGF0ZUxlZnRNYXJnaW4oKTsNCiAgICAgICAgYXR0YWNoQ2xpY2tIYW5kbGVycygpOw0KDQogICAgICAgIGlmIChpc1RleHRCbG9ja092ZXJmbG93aW5nKCkpIHsNCiAgICAgICAgICAgIGxhc3RTY3JvbGxUb3AgPSAwOzsNCiAgICAgICAgICAgIHZhciB3aW5kb3dIZWlnaHQgPSAkKHdpbmRvdykuaGVpZ2h0KCk7DQoNCiAgICAgICAgICAgIHZhciBoZWFkZXJIZWlnaHQgPSAkKCcjc2Nyb2xsYWJsZUNvbnRlbnQnKS5vZmZzZXQoKS50b3A7DQogICAgICAgICAgICB2YXIgbmV3SGVpZ2h0ID0gZ2V0TmV3SGVpZ2h0KCk7DQoNCiAgICAgICAgICAgIGFkanVzdERpc2NsYWltZXJDb250ZW50Rm9yRG93blNjcm9sbChuZXdIZWlnaHQpOw0KDQogICAgICAgICAgICAkKHdpbmRvdykuc2Nyb2xsKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICB2YXIgbkhlaWdodCA9ICQod2luZG93KS5oZWlnaHQoKSAtIChoZWFkZXJIZWlnaHQgLSAkKHdpbmRvdykuc2Nyb2xsVG9wKCkgKyAkKCdmb3JtJykuaGVpZ2h0KCkgKyAxMDApOw0KDQogICAgICAgICAgICAgICAgdmFyIGJJc0Rvd25TY3JvbGwgPSBpc1Njcm9sbERvd24oKTsNCg0KICAgICAgICAgICAgICAgIGlmIChiSXNEb3duU2Nyb2xsKQ0KICAgICAgICAgICAgICAgICAgICBhZGp1c3REaXNjbGFpbWVyQ29udGVudEZvckRvd25TY3JvbGwobkhlaWdodCk7DQogICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgICAgICBhZGp1c3REaXNjbGFpbWVyQ29udGVudEZvclVwU2Nyb2xsKG5IZWlnaHQpOw0KICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIGdldE5ld0hlaWdodCgpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gJCh3aW5kb3cpLmhlaWdodCgpIC0gKGhlYWRlckhlaWdodCArICQod2luZG93KS5zY3JvbGxUb3AoKSArICQoJ2Zvcm0nKS5oZWlnaHQoKSArIDEwMCk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIGlzU2Nyb2xsRG93bigpIHsNCiAgICAgICAgICAgICAgICB2YXIgc3QgPSAkKHdpbmRvdykuc2Nyb2xsVG9wKCk7DQogICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHN0ID49IGxhc3RTY3JvbGxUb3A7CQkgIC8vIGRvd25zY3JvbGwNCg0KICAgICAgICAgICAgICAgIGxhc3RTY3JvbGxUb3AgPSBzdDsNCiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0Ow0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBmdW5jdGlvbiBoYXNTY3JvbGxCYXIoaXRlbSkgew0KICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLmdldCgwKS5zY3JvbGxIZWlnaHQgPiBpdGVtLmdldCgwKS5jbGllbnRIZWlnaHQ7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIGFkanVzdERpc2NsYWltZXJDb250ZW50Rm9yRG93blNjcm9sbChuSGVpZ2h0KSB7DQogICAgICAgICAgICAgICAgdmFyIGlzU2Nyb2xsYWJsZSA9IGhhc1Njcm9sbEJhcigkKCcjc2Nyb2xsYWJsZUNvbnRlbnQnKSk7DQogICAgICAgICAgICAgICAgaWYgKGlzU2Nyb2xsYWJsZSkgew0KICAgICAgICAgICAgICAgICAgICAkKCcjc2Nyb2xsYWJsZUNvbnRlbnQnKS5oZWlnaHQobkhlaWdodCk7DQogICAgICAgICAgICAgICAgICAgIG1heFNjcm9sbGFibGVDb250ZW50SGVpZ2h0ID0gbkhlaWdodDsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIGFkanVzdERpc2NsYWltZXJDb250ZW50Rm9yVXBTY3JvbGwobkhlaWdodCkgew0KICAgICAgICAgICAgICAgIHZhciBpc1Njcm9sbGFibGUgPSBoYXNTY3JvbGxCYXIoJCgnI3Njcm9sbGFibGVDb250ZW50JykpOw0KDQogICAgICAgICAgICAgICAgaWYgKG1heFNjcm9sbGFibGVDb250ZW50SGVpZ2h0ID4gbkhlaWdodCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICQoJyNzY3JvbGxhYmxlQ29udGVudCcpLmhlaWdodChuSGVpZ2h0KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9KTsNCg0KDQogICAgZnVuY3Rpb24gdXBkYXRlTGVmdE1hcmdpbigpIHsNCiAgICAgICAgaWYgKCQoJyNzaWRlLW1lbnUnKS5odG1sKCkpIHsNCiAgICAgICAgICAgICQoJyNwYWdlLXdyYXBwZXInKS5jc3MoeyAnbWFyZ2luLWxlZnQnOiAnMCcgfSk7DQogICAgICAgICAgICAkKCcuc2lkZWJhcicpLmhpZGUoKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KDQogICAgZnVuY3Rpb24gYXR0YWNoQ2xpY2tIYW5kbGVycygpIHsNCiAgICAgICAgJCgnI2FncmVlJykuY2xpY2soZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgJCgnI2FncmVlZCcpLnZhbCgidHJ1ZSIpOw0KICAgICAgICAgICAgJCgnI2Rpc2NsYWltZXItZm9ybScpLnN1Ym1pdCgpOw0KICAgICAgICB9KTsNCg0KICAgICAgICAkKCcjZGlzYWdyZWUnKS5jbGljayhmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAkKCcjYWdyZWVkJykudmFsKCJmYWxzZSIpOw0KICAgICAgICAgICAgJCgnI2Rpc2NsYWltZXItZm9ybScpLnN1Ym1pdCgpOw0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBpc1RleHRCbG9ja092ZXJmbG93aW5nKCkgew0KICAgICAgICByZXR1cm4gJCgiI3Njcm9sbGFibGVDb250ZW50IikucHJvcCgnc2Nyb2xsSGVpZ2h0JykgPiAkKCIjc2Nyb2xsYWJsZUNvbnRlbnQiKS5oZWlnaHQoKTsNCiAgICB9DQo8L3NjcmlwdD4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwhLS0gLy5jb250YWluZXItZmx1aWQgLS0+DQoNCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8jcGFnZS13cmFwcGVyIC0tPg0KICAgICAgICAgICAgPC9kaXY+DQoNCg0KICAgICAgICAgICAgPGRpdiBpZD0iR3JlZW5CYXIiPg0KICAgICAgICAgICAgICAgIDxhPkNvcHlyaWdodCDCqSAyMDE3IEJ1bmRhYmVyZyBSZWdpb25hbCBDb3VuY2lsLiBBbGwgcmlnaHRzIHJlc2VydmVkPC9hPg0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KDQogICAgPGRpdiBpZD0idGlwdGlwX2hvbGRlciIgc3R5bGU9Im1heC13aWR0aDozMDBweDsiPjxkaXYgaWQ9InRpcHRpcF9hcnJvdyI+PGRpdiBpZD0idGlwdGlwX2Fycm93X2lubmVyIj48L2Rpdj48L2Rpdj48ZGl2IGlkPSJ0aXB0aXBfY29udGVudCI+PC9kaXY+PC9kaXY+DQo8L2JvZHk+DQoNCjwvaHRtbD4NCg==
  recorded_at: Mon, 21 Apr 2025 18:15:25 GMT
- request:
    method: post
    uri: https://da.bundaberg.qld.gov.au/Home/DisclaimerProcessing
    body:
      encoding: UTF-8
      string: agreed=true
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=uot1qbpdwsgsygpgyxicpuyw
      Host:
      - da.bundaberg.qld.gov.au
      Referer:
      - https://da.bundaberg.qld.gov.au/Home/Disclaimer
      Content-Type:
      - application/x-www-form-urlencoded
      Content-Length:
      - '11'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '170'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Location:
      - "/Application/ApplicationDetails/521.2019.00000108.001"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      Set-Cookie:
      - User=accessAllowed-MasterView=True; path=/
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:15:24 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 facf66c6f980528383aac71471ad6416.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - MEL52-P2
      X-Amz-Cf-Id:
      - cUNYFsvtF3E2xPEQI1x9xxVNz_a00K5gEoUCkKBPr1LXeJ7E6-Ah3Q==
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Application/ApplicationDetails/521.2019.00000108.001\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:15:25 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/521.2019.00000108.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=uot1qbpdwsgsygpgyxicpuyw; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Referer:
      - https://da.bundaberg.qld.gov.au/Home/Disclaimer
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '43895'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:15:28 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 31b307b14129b5e4bd91c91f05cddfae.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - MEL52-P2
      X-Amz-Cf-Id:
      - c3nTnkPJJDS-nECaNLmRdrhl91Fv74XVklmj5R8ZqaRi8Wr2ZRevqw==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:15:28 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/521.2019.00000108.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=uot1qbpdwsgsygpgyxicpuyw; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '43895'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:15:31 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 407e50db0546139d1fe86e2d6b433e88.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - MEL52-P2
      X-Amz-Cf-Id:
      - ATo76XF6qHlOt3iz7u4vVRCYOgCSziozwO4gp5W81lsmb-OWxtYJsg==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:15:31 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/521.2019.00000109.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 302
      message: Found
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '133'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Location:
      - "/Home/Disclaimer"
      Server:
      - Microsoft-IIS/10.0
      Set-Cookie:
      - ASP.NET_SessionId=2n205u1byit2wozyb1yoatcy; path=/; HttpOnly; SameSite=Lax
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:15:31 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 508f9512873cf2feb0537b9d9279fe36.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - MEL52-P2
      X-Amz-Cf-Id:
      - PqecpdJVDej9D_fDVg-tqnEtDvmncqnzN8EMV50Y3bSGT5dxWIx8ng==
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Home/Disclaimer\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:15:31 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Home/Disclaimer
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=2n205u1byit2wozyb1yoatcy
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '14203'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:15:31 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 31b307b14129b5e4bd91c91f05cddfae.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - MEL52-P2
      X-Amz-Cf-Id:
      - qs_M7GU8ANJzS8hZOGo294I_aSHiQ70gXAslR3LA-OMhVaO3z1XC3Q==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:15:31 GMT
- request:
    method: post
    uri: https://da.bundaberg.qld.gov.au/Home/DisclaimerProcessing
    body:
      encoding: UTF-8
      string: agreed=true
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=2n205u1byit2wozyb1yoatcy
      Host:
      - da.bundaberg.qld.gov.au
      Referer:
      - https://da.bundaberg.qld.gov.au/Home/Disclaimer
      Content-Type:
      - application/x-www-form-urlencoded
      Content-Length:
      - '11'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '170'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Location:
      - "/Application/ApplicationDetails/521.2019.00000109.001"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      Set-Cookie:
      - User=accessAllowed-MasterView=True; path=/
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:15:31 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 908668c6d1b4545174cb8ce7caf33846.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - MEL52-P2
      X-Amz-Cf-Id:
      - 1RhZkfu5jlO7tRExqbmPqJT-XLxjetHr6pO2sPCCDsR5mh_C0AYalw==
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Application/ApplicationDetails/521.2019.00000109.001\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:15:31 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/521.2019.00000109.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=2n205u1byit2wozyb1yoatcy; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Referer:
      - https://da.bundaberg.qld.gov.au/Home/Disclaimer
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '29738'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:15:33 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 c0248078e504ba544d1884664637d26e.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - MEL52-P2
      X-Amz-Cf-Id:
      - mPH5rnUpBTq_lG91GiAKUJUFC3bgf-DO7DV7G8fNweqL0px8_-qF3g==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:15:34 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/521.2019.00000109.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=2n205u1byit2wozyb1yoatcy; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '29738'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:15:36 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 5622c5474ec095907687c64c7fedf35a.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - MEL52-P2
      X-Amz-Cf-Id:
      - P4k5F0Kgb7Sf_y8vs4B2QBX31EQDX8tKUkk61SwipXsaDHwdflUTAw==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:15:37 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/521.2019.00000110.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 302
      message: Found
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '133'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Location:
      - "/Home/Disclaimer"
      Server:
      - Microsoft-IIS/10.0
      Set-Cookie:
      - ASP.NET_SessionId=f5euqg1rbdsfpiheitr3x11v; path=/; HttpOnly; SameSite=Lax
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:15:36 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 ab134d6b437e623d380f0a954e511040.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - MEL52-P2
      X-Amz-Cf-Id:
      - x9x0d23lKWpVMZU8Ci6_-WX5fsOjiKpS4DYpcDaG_skjqSWLIvBwPg==
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Home/Disclaimer\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:15:37 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Home/Disclaimer
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f5euqg1rbdsfpiheitr3x11v
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '14203'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:15:36 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 0a83c95cbfbb00ffb2a225cd0206d044.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - MEL52-P2
      X-Amz-Cf-Id:
      - roR1-hOSf5h8sRqCOpZE1KJa_U2bVQGDOypcGyxtcYp2iE1PI3O4Ew==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:15:37 GMT
- request:
    method: post
    uri: https://da.bundaberg.qld.gov.au/Home/DisclaimerProcessing
    body:
      encoding: UTF-8
      string: agreed=true
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f5euqg1rbdsfpiheitr3x11v
      Host:
      - da.bundaberg.qld.gov.au
      Referer:
      - https://da.bundaberg.qld.gov.au/Home/Disclaimer
      Content-Type:
      - application/x-www-form-urlencoded
      Content-Length:
      - '11'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '170'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Location:
      - "/Application/ApplicationDetails/521.2019.00000110.001"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      Set-Cookie:
      - User=accessAllowed-MasterView=True; path=/
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:15:37 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 508f9512873cf2feb0537b9d9279fe36.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - MEL52-P2
      X-Amz-Cf-Id:
      - Csoov_zN4Ap2ukqFOX316syHPCf6_9i8ETStXU3EJl9DflLPRLmo-g==
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Application/ApplicationDetails/521.2019.00000110.001\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:15:37 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/521.2019.00000110.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f5euqg1rbdsfpiheitr3x11v; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Referer:
      - https://da.bundaberg.qld.gov.au/Home/Disclaimer
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '36072'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:15:39 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 c5d23952ce4c2fcd7a440fd66219c5b2.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - MEL52-P2
      X-Amz-Cf-Id:
      - Vp5w2KKG8Z2uMnDrxq_WmoH8Y4JB5UoUz6AQWCefxqqdnoF08VDbHw==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:15:39 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/521.2019.00000110.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f5euqg1rbdsfpiheitr3x11v; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '36072'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:15:42 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 f30222455a8dac99e4c917b253d02c6a.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - MEL52-P2
      X-Amz-Cf-Id:
      - CMJGt4NFaLpiFDXEROq1pjzX3rFO3rRFbAIWELA64Bf07uzuGwgzSg==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:15:42 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/522.2019.00000143.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 302
      message: Found
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '133'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Location:
      - "/Home/Disclaimer"
      Server:
      - Microsoft-IIS/10.0
      Set-Cookie:
      - ASP.NET_SessionId=gqavgcgpyli2hjhbvncujhka; path=/; HttpOnly; SameSite=Lax
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:15:42 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 0e53c6b8d34d03ea3a772f278b3e4a48.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - MEL52-P2
      X-Amz-Cf-Id:
      - 2PF5Fyhop7Xh8_WURpPqDEbS90dkFOrBHu5CYbdFE-vIcPM6ZIw-ow==
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Home/Disclaimer\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:15:42 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Home/Disclaimer
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=gqavgcgpyli2hjhbvncujhka
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '14203'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:15:42 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 eb18a63f2e4a347b07daab2c4c69df1e.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - MEL52-P2
      X-Amz-Cf-Id:
      - 7A_bwMwXiuTRyCvzlcbb8anIt-Q3F-GTZTpTbViGzKqfqq3cQuULjA==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:15:42 GMT
- request:
    method: post
    uri: https://da.bundaberg.qld.gov.au/Home/DisclaimerProcessing
    body:
      encoding: UTF-8
      string: agreed=true
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=gqavgcgpyli2hjhbvncujhka
      Host:
      - da.bundaberg.qld.gov.au
      Referer:
      - https://da.bundaberg.qld.gov.au/Home/Disclaimer
      Content-Type:
      - application/x-www-form-urlencoded
      Content-Length:
      - '11'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '170'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Location:
      - "/Application/ApplicationDetails/522.2019.00000143.001"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      Set-Cookie:
      - User=accessAllowed-MasterView=True; path=/
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:15:42 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 1912a1868e2c614062913bea50b85bc4.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - MEL52-P2
      X-Amz-Cf-Id:
      - 93NozAiWiP7p2n5wiTe41AU46K_yhZIr1nT1rCgXU1kRYHspfvRmQA==
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Application/ApplicationDetails/522.2019.00000143.001\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:15:42 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/522.2019.00000143.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=gqavgcgpyli2hjhbvncujhka; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Referer:
      - https://da.bundaberg.qld.gov.au/Home/Disclaimer
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '33332'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:15:44 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 31b307b14129b5e4bd91c91f05cddfae.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - MEL52-P2
      X-Amz-Cf-Id:
      - eauJKKN05DdYPidnUt9tPt5PibdSieH3V1YTWT9LJV-0jUDwYlKiUQ==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:15:44 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/522.2019.00000143.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=gqavgcgpyli2hjhbvncujhka; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '33332'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:15:48 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 64568b4fc92f8b1ac0e8facf524f7f90.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - MEL52-P2
      X-Amz-Cf-Id:
      - 3vrwPOVvdr0H60J5iSptWBV4MbLYq9BqKY_yG39s1OwCPj6MjlHfTA==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:15:48 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/523.2019.00000110.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 302
      message: Found
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '133'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Location:
      - "/Home/Disclaimer"
      Server:
      - Microsoft-IIS/10.0
      Set-Cookie:
      - ASP.NET_SessionId=54kadplmj2tqu0qjhwuamxsu; path=/; HttpOnly; SameSite=Lax
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:15:48 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 80259d3643681fab8e9aae204c90dfc6.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - MEL52-P2
      X-Amz-Cf-Id:
      - 3g3Cgd33NBSj75zHJ8jAuYZ9BaD4Zb5OKcZ3Um_fX-ruYMLWTXFlDQ==
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Home/Disclaimer\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:15:48 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Home/Disclaimer
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=54kadplmj2tqu0qjhwuamxsu
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '14203'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:15:48 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 4c1d6b68ce47da49813119143ee7b8d8.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - MEL52-P2
      X-Amz-Cf-Id:
      - jCz2MefVnz_YB2swjV2mKaTt2o-BU7WSHYuKEYyQqW59CBNt2Br9cg==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQo8aHRtbCBsYW5nPSJlbiI+DQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+DQogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4NCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPg0KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIj4NCiAgICA8bWV0YSBuYW1lPSJrZXl3b3JkcyIgY29udGVudD0iQnVuZGFiZXJnIFJlZ2lvbmFsIENvdW5jaWwsREEgVHJhY2tlcixEZXZlbG9wbWVudCBBcHBsaWNhdGlvbixEZXZlbG9wbWVudCBBcHBsaWNhdGlvbiBUcmFja2luZywgREEgRW5xdWlyeSwgRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24gRW5xdWlyeSwgQXBwbGljYXRpb24gVHJhY2tlciI+DQogICAgPG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iIGNvbnRlbnQ9IlRoZSBvZmZpY2lhbCBCdW5kYWJlcmcgUmVnaW9uYWwgQ291bmNpbCBBcHBsaWNhdGlvbiBUcmFja2VyIj4NCg0KICAgIDx0aXRsZT5CdW5kYWJlcmcgUmVnaW9uYWwgQ291bmNpbCAtIEFwcGxpY2F0aW9uIFRyYWNrZXI8L3RpdGxlPg0KDQogICAgPCEtLWZhdmljb24tLT4NCiAgICA8bGluayBocmVmPSIvZmF2aWNvbi5pY28iIHJlbD0ic2hvcnRjdXQgaWNvbiIgdHlwZT0iaW1hZ2UveC1pY29uIj4NCg0KICAgIDwhLS0galF1ZXJ5IC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvYnVuZGxlcy9qcXVlcnk/dj1OOVgzMW9qMjRsbGkxdVZGcFg2dWowTTJXZE43R2RnTWpudllFVW9JeDdzMSI+PC9zY3JpcHQ+DQoNCiAgICA8c2NyaXB0IHNyYz0iL2J1bmRsZXMvanF1ZXJ5dWk/dj1tbTN2MlBwR1VrRFVyaUU2YnpKdVRscWJfdFZqbVdFR2o0aTRnU0o3aXBVMSI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC90aGVtZXMvYmFzZS9qcXVlcnk/dj1yY0F2OENjR2tGcnZaWlpxTzZJaHBYb0hQa05FQ2k1SVBHLUhCRjFCYjEwMSIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDwhLS0gQm9vdHN0cmFwIC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvYnVuZGxlcy9ib290c3RyYXA/dj13TUZCSUlaNk9zVUNlMXFPU2xSTlNfNmhHQkpnZkNFMDVWaDFHekNwcFlvMSI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9ib290c3RyYXA/dj1tS3NvR3lsTHpnOFhBOW5RaDV2dkJtMHV2Vi1LOHBiNVhUcmFEQ3M0a2JNMSIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9mb250LWF3ZXNvbWU/dj1ERU5YTmNRV0NVcVhMV213NGo1VUxQUFRwd2dXZ1E4RGo5YlFCRHFDNmFnMSIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDwhLS0gRGF0YVRhYmxlcyAtLT4NCiAgICA8c2NyaXB0IHNyYz0iL2J1bmRsZXMvZGF0YVRhYmxlcz92PVVIWUR4TzhWVmgyUmdDbWlWVU0tM0NpdmJfUTJjR2NieE1TVXhnRnViWEExIj48L3NjcmlwdD4NCg0KICAgIA0KICAgIDxsaW5rIGhyZWY9Ii9Db250ZW50L0RhdGFUYWJsZXMvY3NzP3Y9ZWtvMElPbWhlN2Myd0E0WVlGNURMX0NuRzR3b2k2ZTRYa0gzSHl4M1luZzEiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQoNCiAgICA8IS0tIEJvb3RzdHJhcCBTQi1BZG1pbi0yIFBsdWdpbiBhbmQgb3RoZXIgY3NzIGFuZCBqcyBmaWxlcy0tPg0KICAgIDxzY3JpcHQgc3JjPSIvanMvanNGb2xkZXI/dj0xZmh3ajFpb2NHMjg5bW5GQVMtYU9Dd3hRdWVFQTJCYW5qb3pHb2JFMzNvMSI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvY3NzL2Nzc0ZvbGRlcj92PXl2aC1XNHl6ODg3QkF3NTJIZFoyWFlodkdmN3RWdmY1eG9jTkkteG1NYzQxIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPGxpbmsgaHJlZj0iL0NvdW5jaWxfVGhlbWUvY3NzP3Y9NzltRkVGY2lyalUyUlc1bXJOQUREU3NkaEl4bk9FYmJnOExGelVHUDRZczEiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQogICAgPHNjcmlwdCBzcmM9Ii9Db3VuY2lsX1RoZW1lL2pzP3Y9Ij48L3NjcmlwdD4NCg0KDQogICAgPCEtLSBIVE1MNSBTaGltIGFuZCBSZXNwb25kLmpzIElFOCBzdXBwb3J0IG9mIEhUTUw1IGVsZW1lbnRzIGFuZCBtZWRpYSBxdWVyaWVzIC0tPg0KICAgIDwhLS0gV0FSTklORzogUmVzcG9uZC5qcyBkb2Vzbid0IHdvcmsgaWYgeW91IHZpZXcgdGhlIHBhZ2UgdmlhIGZpbGU6Ly8gLS0+DQogICAgPCEtLVtpZiBsdCBJRSA5XT4NCiAgICAgICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vb3NzLm1heGNkbi5jb20vbGlicy9odG1sNXNoaXYvMy43LjAvaHRtbDVzaGl2LmpzIj48L3NjcmlwdD4NCiAgICAgICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vb3NzLm1heGNkbi5jb20vbGlicy9yZXNwb25kLmpzLzEuNC4yL3Jlc3BvbmQubWluLmpzIj48L3NjcmlwdD4NCiAgICA8IVtlbmRpZl0tLT4NCjwvaGVhZD4NCg0KDQoNCjxib2R5Pg0KICAgIDxkaXYgY2xhc3M9InB1c2htZW51IGNicC1zcG1lbnUtcHVzaCI+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+DQogICAgICAgICAgICA8aGVhZGVyIGlkPSJIZWFkZXIiPg0KICAgICAgICAgICAgICAgIDxuYXYgY2xhc3M9Im5hdmJhciBuYXZiYXItZGVmYXVsdCIgcm9sZT0ibmF2aWdhdGlvbiIgaWQ9Ik5hdkJhciI+DQogICAgICAgICAgICAgICAgICAgIDwhLS0gQnJhbmQgYW5kIHRvZ2dsZSBnZXQgZ3JvdXBlZCBmb3IgYmV0dGVyIG1vYmlsZSBkaXNwbGF5IC0tPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InV0aWxzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vd3d3LmJ1bmRhYmVyZy5xbGQuZ292LmF1IiB0YXJnZXQ9Il9ibGFuayI+SG9tZTwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly93d3cuYnVuZGFiZXJnLnFsZC5nb3YuYXUvY291bmNpbC9jdXN0b21lci1zZXJ2aWNlIiB0YXJnZXQ9Il9ibGFuayI+Q29udGFjdCBVczwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly93d3cuYnVuZGFiZXJnLnFsZC5nb3YuYXUvcHJpdmFjeSIgdGFyZ2V0PSJfYmxhbmsiPlByaXZhY3kgUG9saWN5PC9hPjwvbGk+DQo8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8aDEgaWQ9ImxvZ28iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmJ1bmRhYmVyZy5xbGQuZ292LmF1Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9Db3VuY2lsX1RoZW1lL0J1bmRhYmVyZy9icmMtbG9nby5wbmciIGFsdD0iQnVuZGFiZXJnIFJlZ2lvbmFsIENvdW5jaWwiPjxzdHJvbmcgY2xhc3M9InZoIj5CdW5kYWJlcmcgUmVnaW9uYWwgQ291bmNpbDwvc3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDE+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvbmF2Pg0KDQoNCiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJiYW5uZXIiPg0KICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL0NvdW5jaWxfVGhlbWUvQnVuZGFiZXJnL2Jhbm5lci5qcGciPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8L2hlYWRlcj4NCg0KICAgICAgICAgICAgPGRpdiBpZD0iY29udGVudCI+DQogICAgICAgICAgICAgICAgPCEtLSBOYXZpZ2F0aW9uIC0tPg0KICAgICAgICAgICAgICAgIDxuYXYgY2xhc3M9Im5hdmJhciBuYXZiYXItZGVmYXVsdCBuYXZiYXItc3RhdGljLXRvcCIgcm9sZT0ibmF2aWdhdGlvbiIgc3R5bGU9Im1hcmdpbi1ib3R0b206IDAiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0ibmF2YmFyLXRvZ2dsZSIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLXRhcmdldD0iLm5hdmJhci1jb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPlRvZ2dsZSBuYXZpZ2F0aW9uPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2YmFyLWJyYW5kIiBocmVmPSIvSG9tZS9JbmRleCI+PC9hPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdmJhci1oZWFkZXIgLS0+DQogICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdmJhci10b3AtbGlua3MgbmF2YmFyLXJpZ2h0IGhpZGRlbi14cyBoaWRkZW4tc20gaGlkZGVuLW1kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48c3BhbiBpZD0icHJpbnRJY29uIiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1wcmludCIgb25jbGljaz0id2luZG93LnByaW50KCk7Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgPC91bD4NCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItZGVmYXVsdCBzaWRlYmFyIiByb2xlPSJuYXZpZ2F0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNpZGViYXItbmF2IG5hdmJhci1jb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYiIGlkPSJzaWRlLW1lbnUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLnNpZGViYXItY29sbGFwc2UgLS0+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLXN0YXRpYy1zaWRlIC0tPg0KICAgICAgICAgICAgICAgIDwvbmF2Pg0KICAgICAgICAgICAgICAgIDxkaXYgaWQ9InBhZ2Utd3JhcHBlciI+DQoNCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyLWZsdWlkIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgDQoNCg0KPGRpdiBjbGFzcz0icGFnZS1oZWFkZXIiPg0KPGgyPkRpc2NsYWltZXI8L2gyPg0KPC9kaXY+ICAgIAogPGRpdiBpZD0ic2Nyb2xsYWJsZUNvbnRlbnQiPiAgICANCjxoMz48c3Ryb25nPlRlcm1zIGFuZCBDb25kaXRpb25zPC9zdHJvbmc+PC9oMz4NCjxoND48c3Ryb25nPkdlbmVyYWwgQ29uZGl0aW9ucyBvZiBVc2U8L3N0cm9uZz48L2g0Pg0KPHA+QWNjZXNzaW5nIHRoaXMgd2ViIHNpdGUgaW1wbGllcyB0aGF0IHlvdSBoYXZlIGFncmVlZCB0byB0aGUgZm9sbG93aW5nOjwvcD4NCjxwPlRoZSBjb250ZW50cyBvZiB0aGlzIHdlYnNpdGUgKHdoaWNoIGluY2x1ZGVzIGRvd25sb2FkYWJsZSBtYXRlcmlhbCkgYXJlIHN1YmplY3QgdG8gY29weXJpZ2h0IGFuZCBhcmUgcHJvdGVjdGVkIGJ5IGxhd3Mgb2YgQXVzdHJhbGlhIGFuZCBvdGhlciBjb3VudHJpZXMgdGhyb3VnaCBpbnRlcm5hdGlvbmFsIHRyZWF0aWVzLjwvcD4NCjxwPkJ1bmRhYmVyZyBSZWdpb25hbCBDb3VuY2lsIGdyYW50cyB5b3UgYSBub24tZXhjbHVzaXZlIGxpY2Vuc2UgdG8gcmVwcm9kdWNlIHRoZSBjb250ZW50cyBvZiB0aGlzIHdlYnNpdGUgaW4geW91ciB3ZWIgYnJvd3NlciAoYW5kIGluIGFueSBjYWNoZSBmaWxlIHByb2R1Y2VkIGJ5IHlvdXIgd2ViIGJyb3dzZXIpIGZvciB0aGUgc29sZSBwdXJwb3NlIG9mIHZpZXdpbmcgdGhlIGNvbnRlbnQuIEJ1bmRhYmVyZyBSZWdpb25hbCBDb3VuY2lsIHJlc2VydmVzIGFsbCBvdGhlciByaWdodHMuPC9wPg0KPHA+VGhpcyBXZWItc2l0ZSwgaW5jbHVkaW5nIHRoZSBQRCBPbmxpbmUgZmFjaWxpdHkgcHJvdmlkZWQgd2l0aGluIGl0LCBpcyBmb3IgaW5mb3JtYXRpb24gcHVycG9zZXMgb25seSwgYW5kIGlzIHByb3ZpZGVkIGluIGdvb2QgZmFpdGguPC9wPg0KPHA+QWx0aG91Z2ggZXZlcnkgZWZmb3J0IGlzIG1hZGUgdG8gZW5zdXJlIHRoZSByZWxldmFuY2UsIGFjY3VyYWN5LCBjdXJyZW5jeSBhbmQgdGltZWxpbmVzcyBvZiBjb250ZW50LCBCdW5kYWJlcmcgUmVnaW9uYWwgQ291bmNpbCBhY2NlcHRzIG5vIHJlc3BvbnNpYmlsaXR5IGFuZCBtYWtlcyBubyByZXByZXNlbnRhdGlvbnMgd2hhdHNvZXZlciBmb3IgdGhlIGFjY3VyYWN5LCBjb3JyZWN0bmVzcyBvciBvdGhlcndpc2Ugb2YgYW55IGluZm9ybWF0aW9uIG9uIHRoZSBwYWdlcyBwdWJsaXNoZWQgd2l0aGluIHRoaXMgc2l0ZSAoaW5jbHVkaW5nIHRoZSBQRCBPbmxpbmUgZmFjaWxpdHkgcHJvdmlkZWQpLiBCeSBhY2Nlc3NpbmcgdGhpcyBXZWJzaXRlIHlvdSBhY2NlcHQgdG8gdXNpbmcgdGhlIGluZm9ybWF0aW9uIG9uIHRoZSBwYWdlcyBhdCB5b3VyIG93biByaXNrLjwvcD4NCjxwPldpdGhvdXQgbGltaXRpbmcgdGhlIGdlbmVyYWxpdHkgb2YgdGhlIGZvcmVnb2luZywgYW5kIHN1YmplY3Qgb25seSB0byBzdGF0dXRlLCBCdW5kYWJlcmcgUmVnaW9uYWwgQ291bmNpbCBkb2VzIG5vdCB3YXJyYW50IHRoYXQgdGhlIGluZm9ybWF0aW9uIG9uIHRoZSBwYWdlcyBwdWJsaXNoZWQgd2l0aGluIHRoaXMgc2l0ZSAoaW5jbHVkaW5nIHRoZSBQRCBPbmxpbmUgZmFjaWxpdHkgcHJvdmlkZWQpIGNhbiBiZSByZWxpZWQgdXBvbiwgZXhwcmVzc2x5IGRpc2NsYWltcyBhbGwgd2FycmFudGllcywgZXhwcmVzcyBvciBpbXBsaWVkLCBpbmNsdWRpbmcgYnV0IG5vdCBsaW1pdGVkIHRvIHRoZSBpbXBsaWVkIHdhcnJhbnRpZXMgb2YgcXVhbGl0eSBvciBhY2N1cmFjeSBvciBtZXJjaGFudGFiaWxpdHkgYW5kIGZpdG5lc3MgZm9yIGEgcGFydGljdWxhciBwdXJwb3NlLCBhbmQgZG9lcyBub3Qgd2FycmFudCBvciBtYWtlIGFueSByZXByZXNlbnRhdGlvbnMgcmVnYXJkaW5nIHRoZSB1c2Ugb3IgdGhlIHJlc3VsdHMgb2YgdGhlIHVzZSBvZiBhbnkgaW5mb3JtYXRpb24gb24gdGhlIHBhZ2UgcHVibGlzaGVkIHdpdGhpbiB0aGlzIHNpdGUgKGluY2x1ZGluZyB0aGUgUEQgT25saW5lIGZhY2lsaXR5IHByb3ZpZGVkKS48L3A+DQo8cD5UaGlzIGZhY2lsaXR5IGlzIHVuZGVyIGNvbnN0YW50IGFtZW5kbWVudCB0byBwcm92aWRlIHRoZSBsYXRlc3QgYW5kIG1vc3QgYWNjdXJhdGUgaW5mb3JtYXRpb24gYXZhaWxhYmxlLiBTb21lIGluZm9ybWF0aW9uIG1heSwgaG93ZXZlciwgbm90IGJlIGN1cnJlbnQuIENoYW5nZXMgaW4gY2lyY3Vtc3RhbmNlcyBhZnRlciB0aW1lIG9mIHB1YmxpY2F0aW9uIG1heSBpbXBhY3Qgb24gdGhlIGFjY3VyYWN5IG9mIHRoZSBpbmZvcm1hdGlvbiBwcm92aWRlZCBieSB0aGlzIHdlYnNpdGUuIEluIGFkZGl0aW9uLCBpbmZvcm1hdGlvbiBwdWJsaXNoZWQgYW5kIHRyYW5zbWl0dGVkIGVsZWN0cm9uaWNhbGx5IG1heSBiZSBzdWJqZWN0IHRvIGNvcnJ1cHRpb24gYnkgdGhlIHByb2Nlc3MuIFZpZXdlcnMgbXVzdCB0YWtlIGFjY291bnQgb2YgYWxsIG9mIHRoZSBhYm92ZSB3aGVuIGFjY2Vzc2luZyBwdWJsaXNoZWQgaW5mb3JtYXRpb24uPC9wPg0KPHA+Tm8gcGVyc29uIHNob3VsZCBwbGFjZSByZWxpYW5jZSBvbiBpbmZvcm1hdGlvbiBmcm9tIHRoaXMgd2Vic2l0ZSAoaW5jbHVkaW5nIHRoZSBQRCBPbmxpbmUgZmFjaWxpdHkgcHJvdmlkZWQpIGluIGNpcmN1bXN0YW5jZXMgd2hlcmUgbG9zcywgZGFtYWdlIG9yIGluanVyeSBpcyBwb3NzaWJsZS4gVGhpcyBpcyBwYXJ0aWN1bGFybHkgaW1wb3J0YW50IHNob3VsZCB5b3Ugd2lzaCB0byB1c2UgYW55IGluZm9ybWF0aW9uIGZvciBhbnkgbGVnYWwgcHVycG9zZS48L3A+DQo8cD5TcGVjaWZpYyBlbnF1aXJpZXMgc2hvdWxkIGJlIG1hZGUgdG8gQ291bmNpbCBpbiBvcmRlciB0byBvYnRhaW4gdGhlIHJlcXVpcmVkIGluZm9ybWF0aW9uIG9yIGFkdmljZSBkaXJlY3RseSBmcm9tIENvdW5jaWwgT2ZmaWNlcnMgYW5kIHRvIG90aGVyd2lzZSBhc2NlcnRhaW4gdGhlIGFjY3VyYWN5IG9mIGFsbCBpbmZvcm1hdGlvbiBjb250YWluZWQgd2l0aGluIHRoZXNlIHBhZ2VzLiBJbiBzb21lIGNhc2VzLCB5b3UgbWF5IGJlIHJlcXVpcmVkIHRvIG1ha2UgYSB3cml0dGVuIGFwcGxpY2F0aW9uIHRvIENvdW5jaWwgdG8gb2J0YWluIHRoZSBkZXNpcmVkIGluZm9ybWF0aW9uIG9yIGFkdmljZS48L3A+DQo8cD5CdW5kYWJlcmcgUmVnaW9uYWwgQ291bmNpbCBpcyB1bmRlciBubyBsaWFiaWxpdHkgdG8gYW55IHBlcnNvbiBpbiByZXNwZWN0IG9mIGFueSBsb3NzIG9yIGRhbWFnZSBob3dldmVyIGFyaXNpbmcoaW5jbHVkaW5nIGNvbnNlcXVlbnRpYWwgbG9zcyBvciBkYW1hZ2UgYW5kIG5lZ2xpZ2VuY2UpIHRoYXQgbWF5IGJlIHN1ZmZlcmVkIG9yIGluY3VycmVkLCBvciB3aGljaCBtYXkgYXJpc2UgZGlyZWN0bHkgb3IgaW5kaXJlY3RseSwgaW4gcmVzcGVjdCBvZiBpbmZvcm1hdGlvbiBvbiB0aGUgcGFnZXMgcHVibGlzaGVkIHdpdGhpbiB0aGlzIHNpdGUgKGluY2x1ZGluZyB0aGUgUEQgT25saW5lIGZhY2lsaXR5IHByb3ZpZGVkKS48L3A+DQo8cD5JbiBhZGRpdGlvbiwgQnVuZGFiZXJnIFJlZ2lvbmFsIENvdW5jaWwgYWNjZXB0cyBubyByZXNwb25zaWJpbGl0eSBmb3IgZW1haWwgb3IgYW55IG90aGVyIGZvcm0gb2YgY29ycmVzcG9uZGVuY2Ugc2VudCB0byBvciBmcm9tIHRoaXMgc2l0ZSB2aWEgdGhlIGludGVybmV0LiBFeGNlcHQgYXMgb3RoZXJ3aXNlIHJlcXVpcmVkIGJ5IGxhdywgdGhlcmUgaXMgbm8gb2JsaWdhdGlvbiB1cG9uIENvdW5jaWwgdG8gcmVhZCwgcmVzcG9uZCBvciB0byBkZWFsIHdpdGggaW4gYW55IHdheSwgYW55IHN1Y2ggdHJhbnNtaXNzaW9ucy4gVXNlcnMgd2hvIGNvbnRhY3QgQ291bmNpbCB2aWEgdGhpcyBtZWRpdW0gZG8gc28gYXQgdGhlaXIgb3duIGxpYWJpbGl0eSBhbmQgd2l0aG91dCBvbnVzIHVwb24gQ291bmNpbC48L3A+DQo8cD5Db3VuY2lsIHJlY29nbmlzZXMgeW91ciBjb25jZXJuIGZvciBzZWN1cml0eSwgYW5kIHdpbGwgdXNlIGFsbCByZWFzb25hYmxlIGVmZm9ydHMgdG8gZXN0YWJsaXNoIHNlY3VyZSBjb25uZWN0aW9ucyB3aXRoIHlvdS48L3A+DQo8cD5Ob3R3aXRoc3RhbmRpbmcgdGhlIGFib3ZlLCBwbGVhc2UgYmUgYXNzdXJlZCB0aGF0IHRoZSBDb3VuY2lsIGhpZ2hseSB2YWx1ZXMgYWxsIGVsZWN0cm9uaWMgY29udGFjdHMgYW5kIHdpbGwgYXR0ZW1wdCB0byBvZmZlciB0aGUgaGlnaGVzdCBsZXZlbHMgb2YgY3VzdG9tZXIgc2VydmljZSBieSB0cmVhdGluZyB0aGVtIGluIGEgc2ltaWxhciBtYW5uZXIgdG8gYWxsIG90aGVyIGZvcm1zIG9mIGNvbnRhY3Qgd2l0aCB0aGUgQ291bmNpbC48L3A+DQo8cD48c3Ryb25nPkluZm9ybWF0aW9uIGFib3V0IERldmVsb3BtZW50IEFwcGxpY2F0aW9uczwvc3Ryb25nPjwvcD4NCjxwPlRoZSBpbmZvcm1hdGlvbiBvbiB0aGlzIHdlYnNpdGUgaXMgcHJvdmlkZWQgdG8gY3VzdG9tZXJzIGZvciB0aGUgcHVycG9zZXMgb2YgZW5xdWlyaW5nIG9uIHZhcmlvdXMgYXNwZWN0cyBvZiBkZXZlbG9wbWVudCBhcHBsaWNhdGlvbnMuIFRoZSBkb2N1bWVudHMgYW5kIGluZm9ybWF0aW9uIG1hZGUgYXZhaWxhYmxlIGZvciB0aGUgZGV2ZWxvcG1lbnQgYXBwbGljYXRpb25zIGlzIGRlZW1lZCB0byBiZSBvcGVuIGFjY2VzcyBpbmZvcm1hdGlvbiB1bmRlciB0aGUgcmVsZXZhbnQgc2VjdGlvbnMgb2YgdGhlIDxlbT5QbGFubmluZyBBY3QgMjAxNjwvZW0+IGhvd2V2ZXIgdGhleSBkbyBub3QgcmVwcmVzZW50IGEgZGV0YWlsZWQgaGlzdG9yeS4gUGVyc29ucyB3aXNoaW5nIHRvIGNvbmZpcm0gaW5mb3JtYXRpb24gaW4gZGV0YWlsIHNob3VsZCBjb250YWN0IENvdW5jaWwgaW4gd3JpdGluZyBpbiBvcmRlciB0byBvYnRhaW4gYSB3cml0dGVuIHJlc3BvbnNlLjwvcD4NCgo8L2Rpdj4KCjxwIGNsYXNzPSJzZWN0aW9uIj4NCjwvYnI+DQo8Yj5JIGhhdmUgcmVhZCBhbmQgdW5kZXJzdG9vZCB0aGUgcHJvdmlzaW9ucyBzZXQgb3V0IGFib3ZlLjwvYj4NCjwvcD4NCjwvYnI+DQoNCg0KPGZvcm0gYWN0aW9uPSIvSG9tZS9EaXNjbGFpbWVyUHJvY2Vzc2luZyIgaWQ9ImRpc2NsYWltZXItZm9ybSIgbWV0aG9kPSJwb3N0Ij48aW5wdXQgaWQ9ImFncmVlZCIgbmFtZT0iYWdyZWVkIiB0eXBlPSJoaWRkZW4iIHZhbHVlPSJGYWxzZSIgLz4gICAgPGRpdiBpZD0iYnRucyI+DQogICAgICAgIDxidXR0b24gaWQ9ImFncmVlIiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIGZvcm09ImRpc2NsYWltZXItZm9ybSI+QWdyZWU8L2J1dHRvbj4NCiAgICAgICAgPGJ1dHRvbiBpZD0iZGlzYWdyZWUiIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4td2FybmluZyIgZm9ybT0iZGlzY2xhaW1lci1mb3JtIj5EaXNhZ3JlZTwvYnV0dG9uPg0KICAgIDwvZGl2Pg0KPC9mb3JtPg0KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KDQogICAgdmFyIGxhc3RTY3JvbGxUb3A7DQogICAgdmFyIG1heFNjcm9sbGFibGVDb250ZW50SGVpZ2h0Ow0KDQogICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkgew0KDQogICAgICAgIHVwZGF0ZUxlZnRNYXJnaW4oKTsNCiAgICAgICAgYXR0YWNoQ2xpY2tIYW5kbGVycygpOw0KDQogICAgICAgIGlmIChpc1RleHRCbG9ja092ZXJmbG93aW5nKCkpIHsNCiAgICAgICAgICAgIGxhc3RTY3JvbGxUb3AgPSAwOzsNCiAgICAgICAgICAgIHZhciB3aW5kb3dIZWlnaHQgPSAkKHdpbmRvdykuaGVpZ2h0KCk7DQoNCiAgICAgICAgICAgIHZhciBoZWFkZXJIZWlnaHQgPSAkKCcjc2Nyb2xsYWJsZUNvbnRlbnQnKS5vZmZzZXQoKS50b3A7DQogICAgICAgICAgICB2YXIgbmV3SGVpZ2h0ID0gZ2V0TmV3SGVpZ2h0KCk7DQoNCiAgICAgICAgICAgIGFkanVzdERpc2NsYWltZXJDb250ZW50Rm9yRG93blNjcm9sbChuZXdIZWlnaHQpOw0KDQogICAgICAgICAgICAkKHdpbmRvdykuc2Nyb2xsKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICB2YXIgbkhlaWdodCA9ICQod2luZG93KS5oZWlnaHQoKSAtIChoZWFkZXJIZWlnaHQgLSAkKHdpbmRvdykuc2Nyb2xsVG9wKCkgKyAkKCdmb3JtJykuaGVpZ2h0KCkgKyAxMDApOw0KDQogICAgICAgICAgICAgICAgdmFyIGJJc0Rvd25TY3JvbGwgPSBpc1Njcm9sbERvd24oKTsNCg0KICAgICAgICAgICAgICAgIGlmIChiSXNEb3duU2Nyb2xsKQ0KICAgICAgICAgICAgICAgICAgICBhZGp1c3REaXNjbGFpbWVyQ29udGVudEZvckRvd25TY3JvbGwobkhlaWdodCk7DQogICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgICAgICBhZGp1c3REaXNjbGFpbWVyQ29udGVudEZvclVwU2Nyb2xsKG5IZWlnaHQpOw0KICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIGdldE5ld0hlaWdodCgpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gJCh3aW5kb3cpLmhlaWdodCgpIC0gKGhlYWRlckhlaWdodCArICQod2luZG93KS5zY3JvbGxUb3AoKSArICQoJ2Zvcm0nKS5oZWlnaHQoKSArIDEwMCk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIGlzU2Nyb2xsRG93bigpIHsNCiAgICAgICAgICAgICAgICB2YXIgc3QgPSAkKHdpbmRvdykuc2Nyb2xsVG9wKCk7DQogICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHN0ID49IGxhc3RTY3JvbGxUb3A7CQkgIC8vIGRvd25zY3JvbGwNCg0KICAgICAgICAgICAgICAgIGxhc3RTY3JvbGxUb3AgPSBzdDsNCiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0Ow0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBmdW5jdGlvbiBoYXNTY3JvbGxCYXIoaXRlbSkgew0KICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLmdldCgwKS5zY3JvbGxIZWlnaHQgPiBpdGVtLmdldCgwKS5jbGllbnRIZWlnaHQ7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIGFkanVzdERpc2NsYWltZXJDb250ZW50Rm9yRG93blNjcm9sbChuSGVpZ2h0KSB7DQogICAgICAgICAgICAgICAgdmFyIGlzU2Nyb2xsYWJsZSA9IGhhc1Njcm9sbEJhcigkKCcjc2Nyb2xsYWJsZUNvbnRlbnQnKSk7DQogICAgICAgICAgICAgICAgaWYgKGlzU2Nyb2xsYWJsZSkgew0KICAgICAgICAgICAgICAgICAgICAkKCcjc2Nyb2xsYWJsZUNvbnRlbnQnKS5oZWlnaHQobkhlaWdodCk7DQogICAgICAgICAgICAgICAgICAgIG1heFNjcm9sbGFibGVDb250ZW50SGVpZ2h0ID0gbkhlaWdodDsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIGFkanVzdERpc2NsYWltZXJDb250ZW50Rm9yVXBTY3JvbGwobkhlaWdodCkgew0KICAgICAgICAgICAgICAgIHZhciBpc1Njcm9sbGFibGUgPSBoYXNTY3JvbGxCYXIoJCgnI3Njcm9sbGFibGVDb250ZW50JykpOw0KDQogICAgICAgICAgICAgICAgaWYgKG1heFNjcm9sbGFibGVDb250ZW50SGVpZ2h0ID4gbkhlaWdodCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICQoJyNzY3JvbGxhYmxlQ29udGVudCcpLmhlaWdodChuSGVpZ2h0KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9KTsNCg0KDQogICAgZnVuY3Rpb24gdXBkYXRlTGVmdE1hcmdpbigpIHsNCiAgICAgICAgaWYgKCQoJyNzaWRlLW1lbnUnKS5odG1sKCkpIHsNCiAgICAgICAgICAgICQoJyNwYWdlLXdyYXBwZXInKS5jc3MoeyAnbWFyZ2luLWxlZnQnOiAnMCcgfSk7DQogICAgICAgICAgICAkKCcuc2lkZWJhcicpLmhpZGUoKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KDQogICAgZnVuY3Rpb24gYXR0YWNoQ2xpY2tIYW5kbGVycygpIHsNCiAgICAgICAgJCgnI2FncmVlJykuY2xpY2soZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgJCgnI2FncmVlZCcpLnZhbCgidHJ1ZSIpOw0KICAgICAgICAgICAgJCgnI2Rpc2NsYWltZXItZm9ybScpLnN1Ym1pdCgpOw0KICAgICAgICB9KTsNCg0KICAgICAgICAkKCcjZGlzYWdyZWUnKS5jbGljayhmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAkKCcjYWdyZWVkJykudmFsKCJmYWxzZSIpOw0KICAgICAgICAgICAgJCgnI2Rpc2NsYWltZXItZm9ybScpLnN1Ym1pdCgpOw0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBpc1RleHRCbG9ja092ZXJmbG93aW5nKCkgew0KICAgICAgICByZXR1cm4gJCgiI3Njcm9sbGFibGVDb250ZW50IikucHJvcCgnc2Nyb2xsSGVpZ2h0JykgPiAkKCIjc2Nyb2xsYWJsZUNvbnRlbnQiKS5oZWlnaHQoKTsNCiAgICB9DQo8L3NjcmlwdD4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwhLS0gLy5jb250YWluZXItZmx1aWQgLS0+DQoNCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8jcGFnZS13cmFwcGVyIC0tPg0KICAgICAgICAgICAgPC9kaXY+DQoNCg0KICAgICAgICAgICAgPGRpdiBpZD0iR3JlZW5CYXIiPg0KICAgICAgICAgICAgICAgIDxhPkNvcHlyaWdodCDCqSAyMDE3IEJ1bmRhYmVyZyBSZWdpb25hbCBDb3VuY2lsLiBBbGwgcmlnaHRzIHJlc2VydmVkPC9hPg0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KDQogICAgPGRpdiBpZD0idGlwdGlwX2hvbGRlciIgc3R5bGU9Im1heC13aWR0aDozMDBweDsiPjxkaXYgaWQ9InRpcHRpcF9hcnJvdyI+PGRpdiBpZD0idGlwdGlwX2Fycm93X2lubmVyIj48L2Rpdj48L2Rpdj48ZGl2IGlkPSJ0aXB0aXBfY29udGVudCI+PC9kaXY+PC9kaXY+DQo8L2JvZHk+DQoNCjwvaHRtbD4NCg==
  recorded_at: Mon, 21 Apr 2025 18:15:48 GMT
- request:
    method: post
    uri: https://da.bundaberg.qld.gov.au/Home/DisclaimerProcessing
    body:
      encoding: UTF-8
      string: agreed=true
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=54kadplmj2tqu0qjhwuamxsu
      Host:
      - da.bundaberg.qld.gov.au
      Referer:
      - https://da.bundaberg.qld.gov.au/Home/Disclaimer
      Content-Type:
      - application/x-www-form-urlencoded
      Content-Length:
      - '11'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '170'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Location:
      - "/Application/ApplicationDetails/523.2019.00000110.001"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      Set-Cookie:
      - User=accessAllowed-MasterView=True; path=/
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:15:48 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 ab134d6b437e623d380f0a954e511040.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - MEL52-P2
      X-Amz-Cf-Id:
      - B-We-LlNRzeioGD8v2pVHlb9GU21D2452EL6Z0jJflWKhuRoguGX_A==
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Application/ApplicationDetails/523.2019.00000110.001\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:15:48 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/523.2019.00000110.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=54kadplmj2tqu0qjhwuamxsu; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Referer:
      - https://da.bundaberg.qld.gov.au/Home/Disclaimer
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '31830'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:15:50 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 c0248078e504ba544d1884664637d26e.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - MEL52-P2
      X-Amz-Cf-Id:
      - OMefKvPFRbqsZBaYFMpHOlr_FJAlmFbXqaT7VaH2fHd_95dK3_Gzrw==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQo8aHRtbCBsYW5nPSJlbiI+DQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+DQogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4NCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPg0KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIj4NCiAgICA8bWV0YSBuYW1lPSJrZXl3b3JkcyIgY29udGVudD0iQnVuZGFiZXJnIFJlZ2lvbmFsIENvdW5jaWwsREEgVHJhY2tlcixEZXZlbG9wbWVudCBBcHBsaWNhdGlvbixEZXZlbG9wbWVudCBBcHBsaWNhdGlvbiBUcmFja2luZywgREEgRW5xdWlyeSwgRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24gRW5xdWlyeSwgQXBwbGljYXRpb24gVHJhY2tlciI+DQogICAgPG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iIGNvbnRlbnQ9IlRoZSBvZmZpY2lhbCBCdW5kYWJlcmcgUmVnaW9uYWwgQ291bmNpbCBBcHBsaWNhdGlvbiBUcmFja2VyIj4NCg0KICAgIDx0aXRsZT5CdW5kYWJlcmcgUmVnaW9uYWwgQ291bmNpbCAtIEFwcGxpY2F0aW9uIFRyYWNrZXI8L3RpdGxlPg0KDQogICAgPCEtLWZhdmljb24tLT4NCiAgICA8bGluayBocmVmPSIvZmF2aWNvbi5pY28iIHJlbD0ic2hvcnRjdXQgaWNvbiIgdHlwZT0iaW1hZ2UveC1pY29uIj4NCg0KICAgIDwhLS0galF1ZXJ5IC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvYnVuZGxlcy9qcXVlcnk/dj1OOVgzMW9qMjRsbGkxdVZGcFg2dWowTTJXZE43R2RnTWpudllFVW9JeDdzMSI+PC9zY3JpcHQ+DQoNCiAgICA8c2NyaXB0IHNyYz0iL2J1bmRsZXMvanF1ZXJ5dWk/dj1tbTN2MlBwR1VrRFVyaUU2YnpKdVRscWJfdFZqbVdFR2o0aTRnU0o3aXBVMSI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC90aGVtZXMvYmFzZS9qcXVlcnk/dj1yY0F2OENjR2tGcnZaWlpxTzZJaHBYb0hQa05FQ2k1SVBHLUhCRjFCYjEwMSIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDwhLS0gQm9vdHN0cmFwIC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvYnVuZGxlcy9ib290c3RyYXA/dj13TUZCSUlaNk9zVUNlMXFPU2xSTlNfNmhHQkpnZkNFMDVWaDFHekNwcFlvMSI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9ib290c3RyYXA/dj1tS3NvR3lsTHpnOFhBOW5RaDV2dkJtMHV2Vi1LOHBiNVhUcmFEQ3M0a2JNMSIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9mb250LWF3ZXNvbWU/dj1ERU5YTmNRV0NVcVhMV213NGo1VUxQUFRwd2dXZ1E4RGo5YlFCRHFDNmFnMSIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDwhLS0gRGF0YVRhYmxlcyAtLT4NCiAgICA8c2NyaXB0IHNyYz0iL2J1bmRsZXMvZGF0YVRhYmxlcz92PVVIWUR4TzhWVmgyUmdDbWlWVU0tM0NpdmJfUTJjR2NieE1TVXhnRnViWEExIj48L3NjcmlwdD4NCg0KICAgIA0KICAgIDxsaW5rIGhyZWY9Ii9Db250ZW50L0RhdGFUYWJsZXMvY3NzP3Y9ZWtvMElPbWhlN2Myd0E0WVlGNURMX0NuRzR3b2k2ZTRYa0gzSHl4M1luZzEiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQoNCiAgICA8IS0tIEJvb3RzdHJhcCBTQi1BZG1pbi0yIFBsdWdpbiBhbmQgb3RoZXIgY3NzIGFuZCBqcyBmaWxlcy0tPg0KICAgIDxzY3JpcHQgc3JjPSIvanMvanNGb2xkZXI/dj0xZmh3ajFpb2NHMjg5bW5GQVMtYU9Dd3hRdWVFQTJCYW5qb3pHb2JFMzNvMSI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvY3NzL2Nzc0ZvbGRlcj92PXl2aC1XNHl6ODg3QkF3NTJIZFoyWFlodkdmN3RWdmY1eG9jTkkteG1NYzQxIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPGxpbmsgaHJlZj0iL0NvdW5jaWxfVGhlbWUvY3NzP3Y9NzltRkVGY2lyalUyUlc1bXJOQUREU3NkaEl4bk9FYmJnOExGelVHUDRZczEiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQogICAgPHNjcmlwdCBzcmM9Ii9Db3VuY2lsX1RoZW1lL2pzP3Y9Ij48L3NjcmlwdD4NCg0KDQogICAgPCEtLSBIVE1MNSBTaGltIGFuZCBSZXNwb25kLmpzIElFOCBzdXBwb3J0IG9mIEhUTUw1IGVsZW1lbnRzIGFuZCBtZWRpYSBxdWVyaWVzIC0tPg0KICAgIDwhLS0gV0FSTklORzogUmVzcG9uZC5qcyBkb2Vzbid0IHdvcmsgaWYgeW91IHZpZXcgdGhlIHBhZ2UgdmlhIGZpbGU6Ly8gLS0+DQogICAgPCEtLVtpZiBsdCBJRSA5XT4NCiAgICAgICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vb3NzLm1heGNkbi5jb20vbGlicy9odG1sNXNoaXYvMy43LjAvaHRtbDVzaGl2LmpzIj48L3NjcmlwdD4NCiAgICAgICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vb3NzLm1heGNkbi5jb20vbGlicy9yZXNwb25kLmpzLzEuNC4yL3Jlc3BvbmQubWluLmpzIj48L3NjcmlwdD4NCiAgICA8IVtlbmRpZl0tLT4NCjwvaGVhZD4NCg0KDQoNCjxib2R5Pg0KICAgIDxkaXYgY2xhc3M9InB1c2htZW51IGNicC1zcG1lbnUtcHVzaCI+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+DQogICAgICAgICAgICA8aGVhZGVyIGlkPSJIZWFkZXIiPg0KICAgICAgICAgICAgICAgIDxuYXYgY2xhc3M9Im5hdmJhciBuYXZiYXItZGVmYXVsdCIgcm9sZT0ibmF2aWdhdGlvbiIgaWQ9Ik5hdkJhciI+DQogICAgICAgICAgICAgICAgICAgIDwhLS0gQnJhbmQgYW5kIHRvZ2dsZSBnZXQgZ3JvdXBlZCBmb3IgYmV0dGVyIG1vYmlsZSBkaXNwbGF5IC0tPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InV0aWxzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vd3d3LmJ1bmRhYmVyZy5xbGQuZ292LmF1IiB0YXJnZXQ9Il9ibGFuayI+SG9tZTwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly93d3cuYnVuZGFiZXJnLnFsZC5nb3YuYXUvY291bmNpbC9jdXN0b21lci1zZXJ2aWNlIiB0YXJnZXQ9Il9ibGFuayI+Q29udGFjdCBVczwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly93d3cuYnVuZGFiZXJnLnFsZC5nb3YuYXUvcHJpdmFjeSIgdGFyZ2V0PSJfYmxhbmsiPlByaXZhY3kgUG9saWN5PC9hPjwvbGk+DQo8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8aDEgaWQ9ImxvZ28iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmJ1bmRhYmVyZy5xbGQuZ292LmF1Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9Db3VuY2lsX1RoZW1lL0J1bmRhYmVyZy9icmMtbG9nby5wbmciIGFsdD0iQnVuZGFiZXJnIFJlZ2lvbmFsIENvdW5jaWwiPjxzdHJvbmcgY2xhc3M9InZoIj5CdW5kYWJlcmcgUmVnaW9uYWwgQ291bmNpbDwvc3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDE+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvbmF2Pg0KDQoNCiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJiYW5uZXIiPg0KICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL0NvdW5jaWxfVGhlbWUvQnVuZGFiZXJnL2Jhbm5lci5qcGciPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8L2hlYWRlcj4NCg0KICAgICAgICAgICAgPGRpdiBpZD0iY29udGVudCI+DQogICAgICAgICAgICAgICAgPCEtLSBOYXZpZ2F0aW9uIC0tPg0KICAgICAgICAgICAgICAgIDxuYXYgY2xhc3M9Im5hdmJhciBuYXZiYXItZGVmYXVsdCBuYXZiYXItc3RhdGljLXRvcCIgcm9sZT0ibmF2aWdhdGlvbiIgc3R5bGU9Im1hcmdpbi1ib3R0b206IDAiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0ibmF2YmFyLXRvZ2dsZSIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLXRhcmdldD0iLm5hdmJhci1jb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPlRvZ2dsZSBuYXZpZ2F0aW9uPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2YmFyLWJyYW5kIiBocmVmPSIvSG9tZS9JbmRleCI+PC9hPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdmJhci1oZWFkZXIgLS0+DQogICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdmJhci10b3AtbGlua3MgbmF2YmFyLXJpZ2h0IGhpZGRlbi14cyBoaWRkZW4tc20gaGlkZGVuLW1kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48c3BhbiBpZD0icHJpbnRJY29uIiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1wcmludCIgb25jbGljaz0id2luZG93LnByaW50KCk7Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgPC91bD4NCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItZGVmYXVsdCBzaWRlYmFyIiByb2xlPSJuYXZpZ2F0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNpZGViYXItbmF2IG5hdmJhci1jb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYiIGlkPSJzaWRlLW1lbnUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbiBUcmFja2VyPHNwYW4gY2xhc3M9ImZhIGFycm93Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXYtc2Vjb25kLWxldmVsIGNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0hvbWUvQWJvdXQgdGFyZ2V0PV9zZWxmPldoYXQgaXMgQXBwbGljYXRpb24gVHJhY2tlcj88L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0hvbWUvRGlzY2xhaW1lciB0YXJnZXQ9X3NlbGY+RGlzY2xhaW1lcjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbnM8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdi1zZWNvbmQtbGV2ZWwgY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9JbmRleCB0YXJnZXQ9PkFwcGxpY2F0aW9uIFRyYWNrZXIgSG9tZTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9TZWFyY2ggaWQ9c2VhcmNoIHRhcmdldD1fc2VsZj5TZWFyY2g8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P1JlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9VHJ1ZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgaWQ9b3V0c3RhbmRpbmctYXBwcyB0YXJnZXQ9X3NlbGY+VW5kZXRlcm1pbmVkIEFwcGxpY2F0aW9uczwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/UmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPVRydWUmSW5jbHVkZURvY3VtZW50cz1GYWxzZSBpZD1leGhpYml0ZWQtYXBwcyB0YXJnZXQ9X3NlbGY+QXBwbGljYXRpb25zIE9uIEV4aGliaXRpb248L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdi1zZWNvbmQtbGV2ZWwgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjdGl2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJmYSBmYS1saXN0LXVsIGZhLWZ3Ij48L2k+QXBwbGljYXRpb25zIFN1Ym1pdHRlZDxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0yMSUyZjA0JTJmMjAyNSZEYXRlVG89MjIlMmYwNCUyZjIwMjUmRGF0ZVR5cGU9MSZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTEzJTJmMDQlMmYyMDI1JkRhdGVUbz0xOSUyZjA0JTJmMjAyNSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgV2VlazwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MSUyZjA0JTJmMjAyNSZEYXRlVG89MjIlMmYwNCUyZjIwMjUmRGF0ZVR5cGU9MSZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIE1vbnRoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDMlMmYyMDI1JkRhdGVUbz0zMSUyZjAzJTJmMjAyNSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgTW9udGg8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdi1zZWNvbmQtbGV2ZWwgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjdGl2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJmYSBmYS1saXN0LXVsIGZhLWZ3Ij48L2k+QXBwbGljYXRpb25zIERldGVybWluZWQ8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdi1zZWNvbmQtbGV2ZWwgY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MjElMmYwNCUyZjIwMjUmRGF0ZVRvPTIyJTJmMDQlMmYyMDI1JkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTEzJTJmMDQlMmYyMDI1JkRhdGVUbz0xOSUyZjA0JTJmMjAyNSZEYXRlVHlwZT0yJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1UcnVlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBXZWVrPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDQlMmYyMDI1JkRhdGVUbz0yMiUyZjA0JTJmMjAyNSZEYXRlVHlwZT0yJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1UcnVlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+VGhpcyBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MSUyZjAzJTJmMjAyNSZEYXRlVG89MzElMmYwMyUyZjIwMjUmRGF0ZVR5cGU9MiZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9VHJ1ZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgTW9udGg8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdi1zZWNvbmQtbGV2ZWwgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gLy5zaWRlYmFyLWNvbGxhcHNlIC0tPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdmJhci1zdGF0aWMtc2lkZSAtLT4NCiAgICAgICAgICAgICAgICA8L25hdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJwYWdlLXdyYXBwZXIiPg0KDQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIA0KDQoNCiAgICA8ZGl2IGNsYXNzPSJwYWdlLWhlYWRlciI+DQogICAgICAgIDxoMj5BcHBsaWNhdGlvbjogT3BlcmF0aW9uYWwgV29ya3MgKDUyMy4yMDE5LjExMC4xKTwvaDI+DQogICAgPC9kaXY+DQogICAgPGg0PkRldGFpbGVkIGluZm9ybWF0aW9uIHJlbGF0ZWQgdG8gdGhlIGFwcGxpY2F0aW9uOjwvaDQ+DQogICAgPGJyIC8+DQogICAgPGRpdj4NCiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDpzaG93QWxsKCk7Ij5TaG93IEFsbDwvYT4gLw0KICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OmhpZGVBbGwoKTsiPkhpZGUgQWxsPC9hPg0KICAgIDwvZGl2Pg0KICAgIDxkaXYgaWQ9ImFwcGxpY2F0aW9uIj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJkZXRhaWxzIj48YSBocmVmPSIjIj5EZXRhaWxzPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5EZXNjcmlwdGlvbjogPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9ImRlc2NyaXB0aW9uIj5CdWxrIEVhcnRod29ya3MgKFJGRFMpPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlN1Ym1pdHRlZCBEYXRlOiA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjE2LzA0LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFwcGxpY2F0aW9uIFR5cGU6IDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPk9wZXJhdGlvbmFsIFdvcmtzPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9InByb3BlcnRpZXMiPjxhIGhyZWY9IiMiPlByb3BlcnRpZXM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJwcm9wZXJ0eS1saXN0Ij4xMCBBaXJwb3J0IERyLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICAoTG90OiAzIFNQOiAzMzIwNjIpPGJyLz4xMCBBdmlhdGlvbiBDcmVzLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICAoTG90OiAyMCBTUDogMzMyMDYyKTxici8+MTEgQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAgKExvdDogMTEgU1A6IDMzMjA2Mik8YnIvPjEyIEFpcnBvcnQgRHIsIEtlbnNpbmd0b24gNDY3MCBRTEQgIChMb3Q6IDQgU1A6IDMzMjA2Mik8YnIvPjEyIEF2aWF0aW9uIENyZXMsIEtlbnNpbmd0b24gNDY3MCBRTEQgIChMb3Q6IDIxIFNQOiAzMzIwNjIpPGJyLz4xMyBBdmlhdGlvbiBDcmVzLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICAoTG90OiAxMCBTUDogMzMyMDYyKTxici8+MTQgQWlycG9ydCBEciwgS2Vuc2luZ3RvbiA0NjcwIFFMRCAgKExvdDogNSBTUDogMzMyMDYyKTxici8+MTQgQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAgKExvdDogMjIgU1A6IDMzMjA2Mik8YnIvPjE1IEF2aWF0aW9uIENyZXMsIEtlbnNpbmd0b24gNDY3MCBRTEQgIChMb3Q6IDkgU1A6IDMxMTYwOCk8YnIvPjE2IEFpcnBvcnQgRHIsIEtlbnNpbmd0b24gNDY3MCBRTEQgIChMb3Q6IDYgU1A6IDMzMjA2Mik8YnIvPjE2IEF2aWF0aW9uIENyZXMsIEtlbnNpbmd0b24gNDY3MCBRTEQgIChMb3Q6IDIzIFNQOiAzMzIwNjIpPGJyLz4xNyBBdmlhdGlvbiBDcmVzLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICAoTG90OiA4IFNQOiAzMTE2MDgpPGJyLz4xOCBBaXJwb3J0IERyLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICAoTG90OiA3IFNQOiAzMzIwNjIpPGJyLz4xOCBBdmlhdGlvbiBDcmVzLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICAoTG90OiAyNSBTUDogMzMyMDYyKTxici8+MjAgQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAgKExvdDogMjYgU1A6IDMxMTYwOCk8YnIvPjIyIEFpcnBvcnQgRHIsIEtlbnNpbmd0b24gNDY3MCBRTEQgIChMb3Q6IDggU1A6IDMxMTYwOCk8YnIvPjI0IEF2aWF0aW9uIENyZXMsIEtlbnNpbmd0b24gNDY3MCBRTEQgIChMb3Q6IDI4IFNQOiAzMTE2MDgpPGJyLz4yNiBBdmlhdGlvbiBDcmVzLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICAoTG90OiAyOSBTUDogMzExNjA4KTxici8+MjggQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAgKExvdDogMzAgU1A6IDMxMTYwOCk8YnIvPjMgQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAgKExvdDogMTUgU1A6IDMzMjA2Mik8YnIvPjUgQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAgKExvdDogMTQgU1A6IDMzMjA2Mik8YnIvPjYgQWlycG9ydCBEciwgS2Vuc2luZ3RvbiA0NjcwIFFMRCAgKExvdDogMSBTUDogMzMyMDYyKTxici8+NiBBdmlhdGlvbiBDcmVzLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICAoTG90OiAxOCBTUDogMzMyMDYyKTxici8+NyBBdmlhdGlvbiBDcmVzLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICAoTG90OiAxMyBTUDogMzMyMDYyKTxici8+OCBBaXJwb3J0IERyLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICAoTG90OiAyIFNQOiAzMzIwNjIpPGJyLz44IEFpcnBvcnQgRHIsIEtlbnNpbmd0b24gNDY3MCBRTEQgIChMb3Q6IDIgU1A6IDM1Mjg2Nyk8YnIvPjggQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAgKExvdDogMTkgU1A6IDMzMjA2Mik8YnIvPjkgQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAgKExvdDogMTIgU1A6IDMzMjA2Mik8YnIvPkFpcnBvcnQgRHIsIEtlbnNpbmd0b24gNDY3MCBRTEQgIChMb3Q6IDM2IFNQOiAyODM5NzgpPGJyLz5BaXJwb3J0IERyLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICAoTG90OiA0MCBTUDogMzExNjA4KTxici8+QXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAgKExvdDogNDEgU1A6IDMxMTYwOCk8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0icGVvcGxlIj48YSBocmVmPSIjIj5QZW9wbGU8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcHBsaWNhbnQ6IA0KTWFsY29sbSBEb3VnbGFzIENvbnN1bHRhbnRzIFB0eSBMdGQmbmJzcDsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJvZmZpY2VyIj48YSBocmVmPSIjIj5PZmZpY2VyPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBpZD0ib2ZmaWNlck5hbWUiPk5ldmlsbGUgRHJld3M8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0iZGVjaXNpb24iPjxhIGhyZWY9IiMiPkRlY2lzaW9uPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5BcHBsaWNhdGlvbiBTdGF0dXM6IERldGVybWluZWQ8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERldGVybWluYXRpb24gRGF0ZToNCjE3LzA2LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+RGV0ZXJtaW5hdGlvbiBUeXBlOiBBcHByb3ZlZDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KDQogICAgICAgICAgICA8aDMgaWQ9InRyYWNraW5nIj48YSBocmVmPSIjIj5UcmFja2luZzwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaWNvbi13cmFwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPnN3aXBlIHRhYmxlIHRvIHRoZSBsZWZ0IHRvIHJldmVhbCBtb3JlIGRhdGE8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1hcnJvdy1yaWdodCIgYXJpYS1oaWRkZW49InRydWUiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtc3RyaXBlZCB0YWJsZS1ib3JkZXJlZCBuby1mb290ZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkRlc2NyaXB0aW9uPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkNvbW1lbmNlZCBEYXRlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkNvbXBsZXRlZCBEYXRlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkxvZGdlbWVudDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoxNi8wNC8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMTYvMDQvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5BY3Rpb24gTm90aWNlIFJlcXVpcmVkPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjE2LzA0LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoxNy8wNC8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFjdGlvbiBOb3RpY2UgUmVzcG9uc2U8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMTcvMDQvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjE3LzA0LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+Q29uZmlybWF0aW9uIE5vdGljZTwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoxNy8wNC8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMzAvMDQvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5EZWNpc2lvbiBTdGFnZTwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyNi8wNC8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMTcvMDYvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5EZWNpc2lvbiBOb3RpY2U8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMTcvMDYvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjIwLzA2LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQoNCg0KDQoNCiAgICAgICAgICAgIDxoMyBpZD0icmVsYXRlZEFwcGxpY2F0aW9ucyI+PGEgaHJlZj0iIyI+UmVsYXRlZCBBcHBsaWNhdGlvbnM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgIDxiPk5vIGRhdGEuPC9iPg0KICAgICAgICAgICAgPC9kaXY+DQoNCg0KDQoNCg0KDQoNCjxoMyBpZD0iZG9jdW1lbnRzIj48YSBocmVmPSIjIj5Eb2N1bWVudHM8L2E+PC9oMz4NCjxkaXY+DQoNCiAgICAgICAgPGRpdiBjbGFzcz0iaWNvbi13cmFwIj4NCiAgICAgICAgICAgIDxzcGFuPnN3aXBlIHRhYmxlIHRvIHRoZSBsZWZ0IHRvIHJldmVhbCBtb3JlIGRhdGE8L3NwYW4+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1hcnJvdy1yaWdodCIgYXJpYS1oaWRkZW49InRydWUiPjwvc3Bhbj4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgaWQ9ImRvYy1jb3VudCI+VG90YWwgbnVtYmVyIG9mIGRvY3VtZW50czogMzwvZGl2Pg0KICAgICAgICA8dGFibGUgaWQ9ImRvYy10YWJsZSIgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtYm9yZGVyZWQgbm8tZm9vdGVyIj4NCiAgICAgICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0aD5SZWNvcmQgTnVtYmVyPC90aD4NCiAgICAgICAgICAgICAgICAgICAgPHRoPkRlc2NyaXB0aW9uPC90aD4NCiAgICAgICAgICAgICAgICAgICAgPHRoPkRvY3VtZW50IFR5cGU8L3RoPg0KICAgICAgICAgICAgICAgICAgICA8dGggc3R5bGU9ImRpc3BsYXk6bm9uZSI+U2l6ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgIDx0aD5WaWV3IExpbms8L3RoPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICA8L3RoZWFkPg0KICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KMSAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjExMCAtIFByb3Bvc2FsIC0gTWFsY29sbSBEb3VnbGFzIENvbnN1bHRhbnRzIFB0eSBMdGQgLSBBaXJwb3J0IERyIEtlbnNpbmd0b24gLSAxNjA0MjAxOS5wZGY8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICBQREYNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkIHN0eWxlPSJkaXNwbGF5Om5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAuMDAgTUINCg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+PGEgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgcm9sZT0iYnV0dG9uIiBocmVmPSJodHRwczovL2RhLmJ1bmRhYmVyZy5xbGQuZ292LmF1L0RvY3VtZW50L0Rvd25sb2FkP2tleT05N2RBS2pzSTBPRlpUZkZMNXpscHFQLzJHRzhGQXpFcWkrd2gxSkNpZlhNaStiWFdvWXZUOTdNdmJmbzdsMUxNdS81N0ZSdUhIRzlmRUVCSkt3MlJqNFo0YXlXVVNFNEh2KzRsenB5aTZZTEVIMjJSZXQyMXdGTk81YytsWEZVRjdSdlNnK3huNUFZPSZhbXA7ZmlsZU5hbWU9MTEwKy0rUHJvcG9zYWwrLStNYWxjb2xtK0RvdWdsYXMrQ29uc3VsdGFudHMrUHR5K0x0ZCstK0FpcnBvcnQrRHIrS2Vuc2luZ3RvbistKzE2MDQyMDE5LnBkZi5wZGYiIHRhcmdldD0iX2JsYW5rIj5WaWV3PC9hPjwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCjIgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4xMTAgLSBTaWduZWQgQWN0aW9uIE5vdGljZSAtIE1hbGNvbG0gRG91Z2xhcyBDb25zdWx0YW50cyBQdHkgTHRkIC0gQWlycG9ydCBEciBLZW5zaW5ndG9uIC0gMTYwNDIwMTkucGRmPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgUERGDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZCBzdHlsZT0iZGlzcGxheTpub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLjAwIE1CDQoNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHJvbGU9ImJ1dHRvbiIgaHJlZj0iaHR0cHM6Ly9kYS5idW5kYWJlcmcucWxkLmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9Y1IrcFZSNmVwK1dSMmpQMzVhUVpRaitxdXlvWlBQZi9lYjNSbmlBQnFHdk5xbjRjdWIzWTQ0bTlrS0cweDVwb01XZHR1U1VTWG1aMGFvNThpdFBDZXZWMFVZNUZId3hNN0h0ZHJJQzNLVE4zZmJYYlc4a0poNmh0aGQ3djBIZkxRNENibElEQ1dDdDlianNzdzhYTzlVeUhVdmZ0T1FHciZhbXA7ZmlsZU5hbWU9MTEwKy0rU2lnbmVkK0FjdGlvbitOb3RpY2UrLStNYWxjb2xtK0RvdWdsYXMrQ29uc3VsdGFudHMrUHR5K0x0ZCstK0FpcnBvcnQrRHIrS2Vuc2luZ3RvbistKzE2MDQyMDE5LnBkZi5wZGYiIHRhcmdldD0iX2JsYW5rIj5WaWV3PC9hPjwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCjMgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4xMTAgLSBBdXRob3Jpc2VkIERlc2Npc2lvbiBOb3RpY2UgLSBBaXJwb3J0IERyaXZlIEtlbnNpbmd0b24gLSAxNzA2MjAxOS5wZGY8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICBQREYNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkIHN0eWxlPSJkaXNwbGF5Om5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAuMDAgTUINCg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+PGEgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgcm9sZT0iYnV0dG9uIiBocmVmPSJodHRwczovL2RhLmJ1bmRhYmVyZy5xbGQuZ292LmF1L0RvY3VtZW50L0Rvd25sb2FkP2tleT11Ri9xKy9QUURSVFJibGJ6ZUF2cUU1Q0dvb2tEcktudDNEUTBsZjZ0eEc3Q1JleFl6cytGVWczblZlaEhTYndJMTNrSEE4eEdZVXBGb1VoY0lhcUdlc1FmYlpGNjNiWEFVcVlyVmU3VWg3SHRHOUtEN0dma0JnPT0mYW1wO2ZpbGVOYW1lPTExMCstK0F1dGhvcmlzZWQrRGVzY2lzaW9uK05vdGljZSstK0FpcnBvcnQrRHJpdmUrS2Vuc2luZ3RvbistKzE3MDYyMDE5LnBkZi5wZGYiIHRhcmdldD0iX2JsYW5rIj5WaWV3PC9hPjwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCg0KICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgPC90YWJsZT4NCjwvZGl2Pg0KDQoNCiAgICAgICAgICAgIDxoMyBpZD0iY29udGFjdFVzIj48YSBocmVmPSIjIj5Db250YWN0IFVzPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5TaG91bGQgeW91IHdpc2ggdG8gY29udGFjdCBjb3VuY2lsIHRvIG1ha2UgZW5xdWlyaWVzIHJlZ2FyZGluZyBhcHBsaWNhdGlvbnMgZGlzcGxheWVkIG9uIHRoZSB3ZWJzaXRlLCBwbGVhc2UgY29udGFjdCBjb3VuY2lsIGVpdGhlciBieSBlbWFpbCA8YSBocmVmPSJtYWlsdG86Q0VPQGJ1bmRhYmVyZy5xbGQuZ292LmF1P3N1YmplY3Q9U3VibWlzc2lvbiBmb3IgYXBwbGljYXRpb24gKDUyMy4yMDE5LjExMC4xKSI+Q0VPQGJ1bmRhYmVyZy5xbGQuZ292LmF1PC9hPiwgcGhvbmUgMTMwMCA4ODMgNjk5IGR1cmluZyBub3JtYWwgb2ZmaWNlIGhvdXJzIG9yIGluIHdyaXRpbmcgdG8gUE8gQm94IDMxMzAsQlVOREFCRVJHIFFMRCA0NjcwDQogICAgICAgIC4gQWxsIGNvcnJlc3BvbmRlbmNlIHNob3VsZCBiZSBhZGRyZXNzZWQgdG8gdGhlIEdlbmVyYWwgTWFuYWdlciBhbmQgcXVvdGUgdGhlIHJlbGV2YW50IGFwcGxpY2F0aW9uIHJlZmVyZW5jZSBudW1iZXIuDQo8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCg0KPGgzIGlkPSJnb29nbGVtYXBzIj48YSBocmVmPSIjIj5Hb29nbGUgTWFwczwvYT48L2gzPg0KPGRpdiBpZD0ibWFwX2NvbnRhaW5lciI+DQogICAgPGRpdiBpZD0ibWFwX2NhbnZhcyIgY2xhc3M9ImlmcmFtZS1yd2QiPg0KICAgIDwvZGl2Pg0KPC9kaXY+DQoNCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCg0KICAgIHdpbmRvdy5vbmxvYWQgPSBsb2FkR29vZ2xlTWFwc1NjcmlwdDsNCg0KICAgIHZhciBnZW9jb2RlcjsNCiAgICB2YXIgbWFwOw0KICAgIHZhciB0aW1lb3V0ID0gMzAwOw0KICAgIHZhciBwcm9wZXJ0aWVzID0gWyIxMCBBaXJwb3J0IERyLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICIsIjEwIEF2aWF0aW9uIENyZXMsIEtlbnNpbmd0b24gNDY3MCBRTEQgIiwiMTEgQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAiLCIxMiBBaXJwb3J0IERyLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICIsIjEyIEF2aWF0aW9uIENyZXMsIEtlbnNpbmd0b24gNDY3MCBRTEQgIiwiMTMgQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAiLCIxNCBBaXJwb3J0IERyLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICIsIjE0IEF2aWF0aW9uIENyZXMsIEtlbnNpbmd0b24gNDY3MCBRTEQgIiwiMTUgQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAiLCIxNiBBaXJwb3J0IERyLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICIsIjE2IEF2aWF0aW9uIENyZXMsIEtlbnNpbmd0b24gNDY3MCBRTEQgIiwiMTcgQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAiLCIxOCBBaXJwb3J0IERyLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICIsIjE4IEF2aWF0aW9uIENyZXMsIEtlbnNpbmd0b24gNDY3MCBRTEQgIiwiMjAgQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAiLCIyMiBBaXJwb3J0IERyLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICIsIjI0IEF2aWF0aW9uIENyZXMsIEtlbnNpbmd0b24gNDY3MCBRTEQgIiwiMjYgQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAiLCIyOCBBdmlhdGlvbiBDcmVzLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICIsIjMgQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAiLCI1IEF2aWF0aW9uIENyZXMsIEtlbnNpbmd0b24gNDY3MCBRTEQgIiwiNiBBaXJwb3J0IERyLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICIsIjYgQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAiLCI3IEF2aWF0aW9uIENyZXMsIEtlbnNpbmd0b24gNDY3MCBRTEQgIiwiOCBBaXJwb3J0IERyLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICIsIjggQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAiLCI5IEF2aWF0aW9uIENyZXMsIEtlbnNpbmd0b24gNDY3MCBRTEQgIiwiQWlycG9ydCBEciwgS2Vuc2luZ3RvbiA0NjcwIFFMRCAiLCJBdmlhdGlvbiBDcmVzLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICJdOw0KICAgIHZhciBsYXRMbmdBcnIgPSBbXTsNCg0KICAgIGZ1bmN0aW9uIGxvYWRHb29nbGVNYXBzU2NyaXB0KCkgew0KICAgICAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7DQogICAgICAgIHNjcmlwdC50eXBlID0gInRleHQvamF2YXNjcmlwdCI7DQogICAgICAgIHNjcmlwdC5zcmMgPSAiLy9tYXBzLmdvb2dsZWFwaXMuY29tL21hcHMvYXBpL2pzP2tleT1BSXphU3lBNUhZZ2FYQmNtYVFlMjBIV3Z2cWRXZ2tkUDlHLXJmSGMmY2FsbGJhY2s9bG9hZEdvb2dsZU1hcHMiOw0KICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gcmVuZGVyR29vZ2xlTWFwcygpDQogICAgew0KICAgICAgICB2YXIgbWFwT3B0aW9ucyA9IHsNCiAgICAgICAgICAgIGNlbnRlcjogbGF0TG5nQXJyWzBdLA0KICAgICAgICAgICAgem9vbTogMTYsDQogICAgICAgICAgICBtYXBUeXBlSWQ6IGdvb2dsZS5tYXBzLk1hcFR5cGVJZC5ST0FETUFQLA0KICAgICAgICAgICAgbWFwVHlwZUNvbnRyb2w6IGZhbHNlDQogICAgICAgIH0NCg0KICAgICAgICBtYXAgPSBuZXcgZ29vZ2xlLm1hcHMuTWFwKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtYXBfY2FudmFzIiksIG1hcE9wdGlvbnMpOw0KDQogICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZERvbUxpc3RlbmVyKHdpbmRvdywgJ3Jlc2l6ZScsIGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgdmFyIGNlbnRlciA9IG1hcC5nZXRDZW50ZXIoKTsNCiAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LnRyaWdnZXIobWFwLCAncmVzaXplJyk7DQogICAgICAgICAgICBtYXAuc2V0Q2VudGVyKGNlbnRlcik7DQogICAgICAgIH0pOw0KDQogICAgfQ0KDQogICAgZnVuY3Rpb24gbG9hZEdvb2dsZU1hcHMoKSB7DQogICAgICAgIGdlb2NvZGVyID0gbmV3IGdvb2dsZS5tYXBzLkdlb2NvZGVyKCk7DQogICAgICAgIHZhciBub09mRmFpbGVkTG9jYXRpb25TZWFyY2ggPSAwOw0KDQogICAgICAgICQocHJvcGVydGllcykuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHsNCiAgICAgICAgICAgIHZhciBwcm9wZXJ0eUFkZHJlc3MgPSBlbGVtZW50Ow0KDQogICAgICAgICAgICAvL0dldCBnZW9jb2RlDQogICAgICAgICAgICBnZW9jb2Rlci5nZW9jb2RlKHsgJ2FkZHJlc3MnOiBwcm9wZXJ0eUFkZHJlc3MgfSwgZnVuY3Rpb24gKHJlc3VsdHMsIHN0YXR1cykgew0KICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgPT0gZ29vZ2xlLm1hcHMuR2VvY29kZXJTdGF0dXMuT0spIHsNCg0KICAgICAgICAgICAgICAgICAgICB2YXIgbG9jYXRpb24gPSByZXN1bHRzWzBdLmdlb21ldHJ5LmxvY2F0aW9uOw0KICAgICAgICAgICAgICAgICAgICB2YXIgbGF0TG5nID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhsb2NhdGlvbi5sYXQoKSwgbG9jYXRpb24ubG5nKCkpOw0KDQogICAgICAgICAgICAgICAgICAgIGxhdExuZ0Fyci5wdXNoKGxhdExuZyk7DQoNCiAgICAgICAgICAgICAgICAgICAgaWYobGF0TG5nQXJyLmxlbmd0aCA9PSAxKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJHb29nbGVNYXBzKCk7DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAvL0NyZWF0ZSBtYXJrZXIgZm9yIG1hcCBhbmQgcGxhY2UgaXQgb24gdGhlIG1hcA0KICAgICAgICAgICAgICAgICAgICB2YXIgbWFya2VyID0gbmV3IGdvb2dsZS5tYXBzLk1hcmtlcih7DQogICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogbGF0TG5nLA0KICAgICAgICAgICAgICAgICAgICAgICAgbWFwOiBtYXANCiAgICAgICAgICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRlbnRTdHJpbmcgPSAnPGRpdj48c3Bhbj4nICsgcHJvcGVydHlBZGRyZXNzICsgJzwvc3Bhbj48L2Rpdj4nOw0KICAgICAgICAgICAgICAgICAgICB2YXIgaW5mb3dpbmRvdyA9IG5ldyBnb29nbGUubWFwcy5JbmZvV2luZG93KHsgICAvL0NyZWF0ZSBpbmZvIHdpbmRvdw0KICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogY29udGVudFN0cmluZw0KICAgICAgICAgICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcihtYXJrZXIsICdjbGljaycsIGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgaW5mb3dpbmRvdy5vcGVuKG1hcCwgbWFya2VyKTsNCiAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIC8vaWYgbm8gbG9jYXRpb24gZm91bmQgYnkgZ29vZ2xlIGZvciBhIHByb3BlcnR5DQogICAgICAgICAgICAgICAgZWxzZSBpZiAoc3RhdHVzID09ICJaRVJPX1JFU1VMVFMiKSB7DQogICAgICAgICAgICAgICAgICAgIG5vT2ZGYWlsZWRMb2NhdGlvblNlYXJjaCsrOw0KDQogICAgICAgICAgICAgICAgICAgIGlmKG5vT2ZGYWlsZWRMb2NhdGlvblNlYXJjaCA9PSAkKHByb3BlcnRpZXMpLmxlbmd0aCkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZUdvb2dsZU1hcHNDb250ZW50KCk7DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdHVzID09IGdvb2dsZS5tYXBzLkdlb2NvZGVyU3RhdHVzLk9WRVJfUVVFUllfTElNSVQpIHsNCiAgICAgICAgICAgICAgICAgICAgLy9zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgZ2V0R2VvQ29kZUZvckFkZHJlc3MoaWQsIGFkZHJlc3MpOyB9LCAodGltZW91dCkpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICAvL1JlcGxhY2VzIGdvb2dsZSBtYXBzIGNvbnRlbnQgd2l0aCBhIG5ldyBkaXYgYmxvY2sgdGhhdCBoYXMgaW5mbyBtZXNzYWdlDQogICAgZnVuY3Rpb24gcmVwbGFjZUdvb2dsZU1hcHNDb250ZW50KCkgew0KICAgICAgICB2YXIgbmV3Q29udGVudCA9ICc8ZGl2IGNsYXNzPSJ1aS1hY2NvcmRpb24tY29udGVudCB1aS1oZWxwZXItcmVzZXQgdWktd2lkZ2V0LWNvbnRlbnQgdWktY29ybmVyLWJvdHRvbSI+JyArDQogICAgICAgICAgICAnPHA+Q291bGRuXCd0IGZpbmQgdGhlIHByb3BlcnR5IGFkZHJlc3MoZXMpIG9uIEdvb2dsZSBNYXBzLiA8cD4nICsNCiAgICAgICAgICAgICc8L2Rpdj4nOw0KDQogICAgICAgICQoJyNtYXBfY29udGFpbmVyJykucmVwbGFjZVdpdGgobmV3Q29udGVudCk7DQogICAgfQ0KDQo8L3NjcmlwdD4NCg0KICAgIDwvZGl2Pg0KICAgIDxkaXYgY2xhc3M9Im1vZGFsIGZhZGUiIGlkPSJzdWJtaXNzaW9uLW1vZGFsIj4NCiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InNwaW5uZXIiPjwvZGl2PiA8IS0tIFRoaXMgZGl2IGhvc3RzIHRoZSBzcGlubmVyIC0tPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgZGF0YS1kaXNtaXNzPSJtb2RhbCIgYXJpYS1sYWJlbD0iQ2xvc2UiPjxzcGFuIGFyaWEtaGlkZGVuPSJ0cnVlIj4mdGltZXM7PC9zcGFuPjwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9Im1vZGFsLXRpdGxlIj5TdWJtaXNzaW9uIGZvciA1MjMuMjAxOS4xMTAuMTwvaDI+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KDQogICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkgew0KDQogICAgICAgICQoJyNhcHBsaWNhdGlvbicpLnRvZ2dsZXBhbmVscygpOw0KDQogICAgICAgICAgICAkKCcjcHJvcGVydGllcycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjZGV0YWlscycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjdHJhY2tpbmcnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI2RvY3VtZW50cycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjcmVsYXRlZEFwcGxpY2F0aW9ucycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjZ29vZ2xlbWFwcycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjY29udGFjdFVzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNleGhpYml0aW9uRGV0YWlscycpLmNsaWNrKCk7DQoNCiAgICAgICAgDQoNCg0KICAgICAgICAkKCcjc3VibWlzc2lvbi1idG4nKS5jbGljayhmdW5jdGlvbiAoKSB7ICAgICAgICANCg0KDQogICAgICAgICAgICB2YXIgdXJsID0gImh0dHBzOi8vZGEuYnVuZGFiZXJnLnFsZC5nb3YuYXUvL0FwcGxpY2F0aW9uL1N1Ym1pc3Npb24vIiArIGVuY29kZVVSSSgiNTIzLjIwMTkuMTEwLjEiKTsNCg0KICAgICAgICAgICAgJCgnI3N1Ym1pc3Npb24tbW9kYWwnKS5tb2RhbCgnc2hvdycpLmZpbmQoJy5tb2RhbC1ib2R5JykubG9hZCh1cmwpOw0KICAgICAgICB9KTsNCiAgICB9KTsNCg0KDQogICAgLyogU2hvd3MgYWxsIHRoZSBwYW5lbHMgKi8NCiAgICBmdW5jdGlvbiBzaG93QWxsKCkgew0KICAgICAgICAkKCcjYXBwbGljYXRpb24nKS5jaGlsZHJlbigiaDMiKS5lYWNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKCJ1aS1zdGF0ZS1kZWZhdWx0IikpIHsNCiAgICAgICAgICAgICAgICAkKHRoaXMpLmNsaWNrKCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0pOw0KICAgIH0NCg0KDQogICAgLyogSGlkZSBhbGwgdGhlIHBhbmVscyAqLw0KICAgIGZ1bmN0aW9uIGhpZGVBbGwoKSB7DQogICAgICAgICQoJyNhcHBsaWNhdGlvbicpLmNoaWxkcmVuKCJoMyIpLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoInVpLXN0YXRlLWFjdGl2ZSIpKSB7DQogICAgICAgICAgICAgICAgJCh0aGlzKS5jbGljaygpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICA8L3NjcmlwdD4NCg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPCEtLSAvLmNvbnRhaW5lci1mbHVpZCAtLT4NCg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwhLS0gLyNwYWdlLXdyYXBwZXIgLS0+DQogICAgICAgICAgICA8L2Rpdj4NCg0KDQogICAgICAgICAgICA8ZGl2IGlkPSJHcmVlbkJhciI+DQogICAgICAgICAgICAgICAgPGE+Q29weXJpZ2h0IMKpIDIwMTcgQnVuZGFiZXJnIFJlZ2lvbmFsIENvdW5jaWwuIEFsbCByaWdodHMgcmVzZXJ2ZWQ8L2E+DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQoNCiAgICA8ZGl2IGlkPSJ0aXB0aXBfaG9sZGVyIiBzdHlsZT0ibWF4LXdpZHRoOjMwMHB4OyI+PGRpdiBpZD0idGlwdGlwX2Fycm93Ij48ZGl2IGlkPSJ0aXB0aXBfYXJyb3dfaW5uZXIiPjwvZGl2PjwvZGl2PjxkaXYgaWQ9InRpcHRpcF9jb250ZW50Ij48L2Rpdj48L2Rpdj4NCjwvYm9keT4NCg0KPC9odG1sPg0K
  recorded_at: Mon, 21 Apr 2025 18:15:50 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/523.2019.00000110.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=54kadplmj2tqu0qjhwuamxsu; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '31830'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:15:52 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 1cdb4c3696044834c00f70dc99b79876.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - MEL52-P2
      X-Amz-Cf-Id:
      - q9ENSVnjDnjoIHinCkH6SsAAZQYj7YWqJ6vGYKx1AtGzOKI0lGhn_w==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQo8aHRtbCBsYW5nPSJlbiI+DQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+DQogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4NCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPg0KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIj4NCiAgICA8bWV0YSBuYW1lPSJrZXl3b3JkcyIgY29udGVudD0iQnVuZGFiZXJnIFJlZ2lvbmFsIENvdW5jaWwsREEgVHJhY2tlcixEZXZlbG9wbWVudCBBcHBsaWNhdGlvbixEZXZlbG9wbWVudCBBcHBsaWNhdGlvbiBUcmFja2luZywgREEgRW5xdWlyeSwgRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24gRW5xdWlyeSwgQXBwbGljYXRpb24gVHJhY2tlciI+DQogICAgPG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iIGNvbnRlbnQ9IlRoZSBvZmZpY2lhbCBCdW5kYWJlcmcgUmVnaW9uYWwgQ291bmNpbCBBcHBsaWNhdGlvbiBUcmFja2VyIj4NCg0KICAgIDx0aXRsZT5CdW5kYWJlcmcgUmVnaW9uYWwgQ291bmNpbCAtIEFwcGxpY2F0aW9uIFRyYWNrZXI8L3RpdGxlPg0KDQogICAgPCEtLWZhdmljb24tLT4NCiAgICA8bGluayBocmVmPSIvZmF2aWNvbi5pY28iIHJlbD0ic2hvcnRjdXQgaWNvbiIgdHlwZT0iaW1hZ2UveC1pY29uIj4NCg0KICAgIDwhLS0galF1ZXJ5IC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvYnVuZGxlcy9qcXVlcnk/dj1OOVgzMW9qMjRsbGkxdVZGcFg2dWowTTJXZE43R2RnTWpudllFVW9JeDdzMSI+PC9zY3JpcHQ+DQoNCiAgICA8c2NyaXB0IHNyYz0iL2J1bmRsZXMvanF1ZXJ5dWk/dj1tbTN2MlBwR1VrRFVyaUU2YnpKdVRscWJfdFZqbVdFR2o0aTRnU0o3aXBVMSI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC90aGVtZXMvYmFzZS9qcXVlcnk/dj1yY0F2OENjR2tGcnZaWlpxTzZJaHBYb0hQa05FQ2k1SVBHLUhCRjFCYjEwMSIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDwhLS0gQm9vdHN0cmFwIC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvYnVuZGxlcy9ib290c3RyYXA/dj13TUZCSUlaNk9zVUNlMXFPU2xSTlNfNmhHQkpnZkNFMDVWaDFHekNwcFlvMSI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9ib290c3RyYXA/dj1tS3NvR3lsTHpnOFhBOW5RaDV2dkJtMHV2Vi1LOHBiNVhUcmFEQ3M0a2JNMSIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9mb250LWF3ZXNvbWU/dj1ERU5YTmNRV0NVcVhMV213NGo1VUxQUFRwd2dXZ1E4RGo5YlFCRHFDNmFnMSIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDwhLS0gRGF0YVRhYmxlcyAtLT4NCiAgICA8c2NyaXB0IHNyYz0iL2J1bmRsZXMvZGF0YVRhYmxlcz92PVVIWUR4TzhWVmgyUmdDbWlWVU0tM0NpdmJfUTJjR2NieE1TVXhnRnViWEExIj48L3NjcmlwdD4NCg0KICAgIA0KICAgIDxsaW5rIGhyZWY9Ii9Db250ZW50L0RhdGFUYWJsZXMvY3NzP3Y9ZWtvMElPbWhlN2Myd0E0WVlGNURMX0NuRzR3b2k2ZTRYa0gzSHl4M1luZzEiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQoNCiAgICA8IS0tIEJvb3RzdHJhcCBTQi1BZG1pbi0yIFBsdWdpbiBhbmQgb3RoZXIgY3NzIGFuZCBqcyBmaWxlcy0tPg0KICAgIDxzY3JpcHQgc3JjPSIvanMvanNGb2xkZXI/dj0xZmh3ajFpb2NHMjg5bW5GQVMtYU9Dd3hRdWVFQTJCYW5qb3pHb2JFMzNvMSI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvY3NzL2Nzc0ZvbGRlcj92PXl2aC1XNHl6ODg3QkF3NTJIZFoyWFlodkdmN3RWdmY1eG9jTkkteG1NYzQxIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPGxpbmsgaHJlZj0iL0NvdW5jaWxfVGhlbWUvY3NzP3Y9NzltRkVGY2lyalUyUlc1bXJOQUREU3NkaEl4bk9FYmJnOExGelVHUDRZczEiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQogICAgPHNjcmlwdCBzcmM9Ii9Db3VuY2lsX1RoZW1lL2pzP3Y9Ij48L3NjcmlwdD4NCg0KDQogICAgPCEtLSBIVE1MNSBTaGltIGFuZCBSZXNwb25kLmpzIElFOCBzdXBwb3J0IG9mIEhUTUw1IGVsZW1lbnRzIGFuZCBtZWRpYSBxdWVyaWVzIC0tPg0KICAgIDwhLS0gV0FSTklORzogUmVzcG9uZC5qcyBkb2Vzbid0IHdvcmsgaWYgeW91IHZpZXcgdGhlIHBhZ2UgdmlhIGZpbGU6Ly8gLS0+DQogICAgPCEtLVtpZiBsdCBJRSA5XT4NCiAgICAgICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vb3NzLm1heGNkbi5jb20vbGlicy9odG1sNXNoaXYvMy43LjAvaHRtbDVzaGl2LmpzIj48L3NjcmlwdD4NCiAgICAgICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vb3NzLm1heGNkbi5jb20vbGlicy9yZXNwb25kLmpzLzEuNC4yL3Jlc3BvbmQubWluLmpzIj48L3NjcmlwdD4NCiAgICA8IVtlbmRpZl0tLT4NCjwvaGVhZD4NCg0KDQoNCjxib2R5Pg0KICAgIDxkaXYgY2xhc3M9InB1c2htZW51IGNicC1zcG1lbnUtcHVzaCI+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+DQogICAgICAgICAgICA8aGVhZGVyIGlkPSJIZWFkZXIiPg0KICAgICAgICAgICAgICAgIDxuYXYgY2xhc3M9Im5hdmJhciBuYXZiYXItZGVmYXVsdCIgcm9sZT0ibmF2aWdhdGlvbiIgaWQ9Ik5hdkJhciI+DQogICAgICAgICAgICAgICAgICAgIDwhLS0gQnJhbmQgYW5kIHRvZ2dsZSBnZXQgZ3JvdXBlZCBmb3IgYmV0dGVyIG1vYmlsZSBkaXNwbGF5IC0tPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InV0aWxzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vd3d3LmJ1bmRhYmVyZy5xbGQuZ292LmF1IiB0YXJnZXQ9Il9ibGFuayI+SG9tZTwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly93d3cuYnVuZGFiZXJnLnFsZC5nb3YuYXUvY291bmNpbC9jdXN0b21lci1zZXJ2aWNlIiB0YXJnZXQ9Il9ibGFuayI+Q29udGFjdCBVczwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly93d3cuYnVuZGFiZXJnLnFsZC5nb3YuYXUvcHJpdmFjeSIgdGFyZ2V0PSJfYmxhbmsiPlByaXZhY3kgUG9saWN5PC9hPjwvbGk+DQo8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8aDEgaWQ9ImxvZ28iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmJ1bmRhYmVyZy5xbGQuZ292LmF1Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9Db3VuY2lsX1RoZW1lL0J1bmRhYmVyZy9icmMtbG9nby5wbmciIGFsdD0iQnVuZGFiZXJnIFJlZ2lvbmFsIENvdW5jaWwiPjxzdHJvbmcgY2xhc3M9InZoIj5CdW5kYWJlcmcgUmVnaW9uYWwgQ291bmNpbDwvc3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDE+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvbmF2Pg0KDQoNCiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJiYW5uZXIiPg0KICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL0NvdW5jaWxfVGhlbWUvQnVuZGFiZXJnL2Jhbm5lci5qcGciPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8L2hlYWRlcj4NCg0KICAgICAgICAgICAgPGRpdiBpZD0iY29udGVudCI+DQogICAgICAgICAgICAgICAgPCEtLSBOYXZpZ2F0aW9uIC0tPg0KICAgICAgICAgICAgICAgIDxuYXYgY2xhc3M9Im5hdmJhciBuYXZiYXItZGVmYXVsdCBuYXZiYXItc3RhdGljLXRvcCIgcm9sZT0ibmF2aWdhdGlvbiIgc3R5bGU9Im1hcmdpbi1ib3R0b206IDAiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0ibmF2YmFyLXRvZ2dsZSIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLXRhcmdldD0iLm5hdmJhci1jb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPlRvZ2dsZSBuYXZpZ2F0aW9uPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2YmFyLWJyYW5kIiBocmVmPSIvSG9tZS9JbmRleCI+PC9hPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdmJhci1oZWFkZXIgLS0+DQogICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdmJhci10b3AtbGlua3MgbmF2YmFyLXJpZ2h0IGhpZGRlbi14cyBoaWRkZW4tc20gaGlkZGVuLW1kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48c3BhbiBpZD0icHJpbnRJY29uIiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1wcmludCIgb25jbGljaz0id2luZG93LnByaW50KCk7Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgPC91bD4NCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItZGVmYXVsdCBzaWRlYmFyIiByb2xlPSJuYXZpZ2F0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNpZGViYXItbmF2IG5hdmJhci1jb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYiIGlkPSJzaWRlLW1lbnUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbiBUcmFja2VyPHNwYW4gY2xhc3M9ImZhIGFycm93Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXYtc2Vjb25kLWxldmVsIGNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0hvbWUvQWJvdXQgdGFyZ2V0PV9zZWxmPldoYXQgaXMgQXBwbGljYXRpb24gVHJhY2tlcj88L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0hvbWUvRGlzY2xhaW1lciB0YXJnZXQ9X3NlbGY+RGlzY2xhaW1lcjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbnM8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdi1zZWNvbmQtbGV2ZWwgY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9JbmRleCB0YXJnZXQ9PkFwcGxpY2F0aW9uIFRyYWNrZXIgSG9tZTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9TZWFyY2ggaWQ9c2VhcmNoIHRhcmdldD1fc2VsZj5TZWFyY2g8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P1JlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9VHJ1ZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgaWQ9b3V0c3RhbmRpbmctYXBwcyB0YXJnZXQ9X3NlbGY+VW5kZXRlcm1pbmVkIEFwcGxpY2F0aW9uczwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/UmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPVRydWUmSW5jbHVkZURvY3VtZW50cz1GYWxzZSBpZD1leGhpYml0ZWQtYXBwcyB0YXJnZXQ9X3NlbGY+QXBwbGljYXRpb25zIE9uIEV4aGliaXRpb248L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdi1zZWNvbmQtbGV2ZWwgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjdGl2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJmYSBmYS1saXN0LXVsIGZhLWZ3Ij48L2k+QXBwbGljYXRpb25zIFN1Ym1pdHRlZDxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0yMSUyZjA0JTJmMjAyNSZEYXRlVG89MjIlMmYwNCUyZjIwMjUmRGF0ZVR5cGU9MSZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTEzJTJmMDQlMmYyMDI1JkRhdGVUbz0xOSUyZjA0JTJmMjAyNSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgV2VlazwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MSUyZjA0JTJmMjAyNSZEYXRlVG89MjIlMmYwNCUyZjIwMjUmRGF0ZVR5cGU9MSZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIE1vbnRoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDMlMmYyMDI1JkRhdGVUbz0zMSUyZjAzJTJmMjAyNSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgTW9udGg8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdi1zZWNvbmQtbGV2ZWwgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjdGl2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJmYSBmYS1saXN0LXVsIGZhLWZ3Ij48L2k+QXBwbGljYXRpb25zIERldGVybWluZWQ8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdi1zZWNvbmQtbGV2ZWwgY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MjElMmYwNCUyZjIwMjUmRGF0ZVRvPTIyJTJmMDQlMmYyMDI1JkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTEzJTJmMDQlMmYyMDI1JkRhdGVUbz0xOSUyZjA0JTJmMjAyNSZEYXRlVHlwZT0yJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1UcnVlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBXZWVrPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDQlMmYyMDI1JkRhdGVUbz0yMiUyZjA0JTJmMjAyNSZEYXRlVHlwZT0yJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1UcnVlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+VGhpcyBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MSUyZjAzJTJmMjAyNSZEYXRlVG89MzElMmYwMyUyZjIwMjUmRGF0ZVR5cGU9MiZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9VHJ1ZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgTW9udGg8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdi1zZWNvbmQtbGV2ZWwgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gLy5zaWRlYmFyLWNvbGxhcHNlIC0tPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdmJhci1zdGF0aWMtc2lkZSAtLT4NCiAgICAgICAgICAgICAgICA8L25hdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJwYWdlLXdyYXBwZXIiPg0KDQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIA0KDQoNCiAgICA8ZGl2IGNsYXNzPSJwYWdlLWhlYWRlciI+DQogICAgICAgIDxoMj5BcHBsaWNhdGlvbjogT3BlcmF0aW9uYWwgV29ya3MgKDUyMy4yMDE5LjExMC4xKTwvaDI+DQogICAgPC9kaXY+DQogICAgPGg0PkRldGFpbGVkIGluZm9ybWF0aW9uIHJlbGF0ZWQgdG8gdGhlIGFwcGxpY2F0aW9uOjwvaDQ+DQogICAgPGJyIC8+DQogICAgPGRpdj4NCiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDpzaG93QWxsKCk7Ij5TaG93IEFsbDwvYT4gLw0KICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OmhpZGVBbGwoKTsiPkhpZGUgQWxsPC9hPg0KICAgIDwvZGl2Pg0KICAgIDxkaXYgaWQ9ImFwcGxpY2F0aW9uIj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJkZXRhaWxzIj48YSBocmVmPSIjIj5EZXRhaWxzPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5EZXNjcmlwdGlvbjogPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9ImRlc2NyaXB0aW9uIj5CdWxrIEVhcnRod29ya3MgKFJGRFMpPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlN1Ym1pdHRlZCBEYXRlOiA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjE2LzA0LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFwcGxpY2F0aW9uIFR5cGU6IDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPk9wZXJhdGlvbmFsIFdvcmtzPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9InByb3BlcnRpZXMiPjxhIGhyZWY9IiMiPlByb3BlcnRpZXM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJwcm9wZXJ0eS1saXN0Ij4xMCBBaXJwb3J0IERyLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICAoTG90OiAzIFNQOiAzMzIwNjIpPGJyLz4xMCBBdmlhdGlvbiBDcmVzLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICAoTG90OiAyMCBTUDogMzMyMDYyKTxici8+MTEgQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAgKExvdDogMTEgU1A6IDMzMjA2Mik8YnIvPjEyIEFpcnBvcnQgRHIsIEtlbnNpbmd0b24gNDY3MCBRTEQgIChMb3Q6IDQgU1A6IDMzMjA2Mik8YnIvPjEyIEF2aWF0aW9uIENyZXMsIEtlbnNpbmd0b24gNDY3MCBRTEQgIChMb3Q6IDIxIFNQOiAzMzIwNjIpPGJyLz4xMyBBdmlhdGlvbiBDcmVzLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICAoTG90OiAxMCBTUDogMzMyMDYyKTxici8+MTQgQWlycG9ydCBEciwgS2Vuc2luZ3RvbiA0NjcwIFFMRCAgKExvdDogNSBTUDogMzMyMDYyKTxici8+MTQgQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAgKExvdDogMjIgU1A6IDMzMjA2Mik8YnIvPjE1IEF2aWF0aW9uIENyZXMsIEtlbnNpbmd0b24gNDY3MCBRTEQgIChMb3Q6IDkgU1A6IDMxMTYwOCk8YnIvPjE2IEFpcnBvcnQgRHIsIEtlbnNpbmd0b24gNDY3MCBRTEQgIChMb3Q6IDYgU1A6IDMzMjA2Mik8YnIvPjE2IEF2aWF0aW9uIENyZXMsIEtlbnNpbmd0b24gNDY3MCBRTEQgIChMb3Q6IDIzIFNQOiAzMzIwNjIpPGJyLz4xNyBBdmlhdGlvbiBDcmVzLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICAoTG90OiA4IFNQOiAzMTE2MDgpPGJyLz4xOCBBaXJwb3J0IERyLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICAoTG90OiA3IFNQOiAzMzIwNjIpPGJyLz4xOCBBdmlhdGlvbiBDcmVzLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICAoTG90OiAyNSBTUDogMzMyMDYyKTxici8+MjAgQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAgKExvdDogMjYgU1A6IDMxMTYwOCk8YnIvPjIyIEFpcnBvcnQgRHIsIEtlbnNpbmd0b24gNDY3MCBRTEQgIChMb3Q6IDggU1A6IDMxMTYwOCk8YnIvPjI0IEF2aWF0aW9uIENyZXMsIEtlbnNpbmd0b24gNDY3MCBRTEQgIChMb3Q6IDI4IFNQOiAzMTE2MDgpPGJyLz4yNiBBdmlhdGlvbiBDcmVzLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICAoTG90OiAyOSBTUDogMzExNjA4KTxici8+MjggQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAgKExvdDogMzAgU1A6IDMxMTYwOCk8YnIvPjMgQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAgKExvdDogMTUgU1A6IDMzMjA2Mik8YnIvPjUgQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAgKExvdDogMTQgU1A6IDMzMjA2Mik8YnIvPjYgQWlycG9ydCBEciwgS2Vuc2luZ3RvbiA0NjcwIFFMRCAgKExvdDogMSBTUDogMzMyMDYyKTxici8+NiBBdmlhdGlvbiBDcmVzLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICAoTG90OiAxOCBTUDogMzMyMDYyKTxici8+NyBBdmlhdGlvbiBDcmVzLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICAoTG90OiAxMyBTUDogMzMyMDYyKTxici8+OCBBaXJwb3J0IERyLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICAoTG90OiAyIFNQOiAzMzIwNjIpPGJyLz44IEFpcnBvcnQgRHIsIEtlbnNpbmd0b24gNDY3MCBRTEQgIChMb3Q6IDIgU1A6IDM1Mjg2Nyk8YnIvPjggQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAgKExvdDogMTkgU1A6IDMzMjA2Mik8YnIvPjkgQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAgKExvdDogMTIgU1A6IDMzMjA2Mik8YnIvPkFpcnBvcnQgRHIsIEtlbnNpbmd0b24gNDY3MCBRTEQgIChMb3Q6IDM2IFNQOiAyODM5NzgpPGJyLz5BaXJwb3J0IERyLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICAoTG90OiA0MCBTUDogMzExNjA4KTxici8+QXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAgKExvdDogNDEgU1A6IDMxMTYwOCk8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0icGVvcGxlIj48YSBocmVmPSIjIj5QZW9wbGU8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcHBsaWNhbnQ6IA0KTWFsY29sbSBEb3VnbGFzIENvbnN1bHRhbnRzIFB0eSBMdGQmbmJzcDsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJvZmZpY2VyIj48YSBocmVmPSIjIj5PZmZpY2VyPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBpZD0ib2ZmaWNlck5hbWUiPk5ldmlsbGUgRHJld3M8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0iZGVjaXNpb24iPjxhIGhyZWY9IiMiPkRlY2lzaW9uPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5BcHBsaWNhdGlvbiBTdGF0dXM6IERldGVybWluZWQ8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERldGVybWluYXRpb24gRGF0ZToNCjE3LzA2LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+RGV0ZXJtaW5hdGlvbiBUeXBlOiBBcHByb3ZlZDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KDQogICAgICAgICAgICA8aDMgaWQ9InRyYWNraW5nIj48YSBocmVmPSIjIj5UcmFja2luZzwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaWNvbi13cmFwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPnN3aXBlIHRhYmxlIHRvIHRoZSBsZWZ0IHRvIHJldmVhbCBtb3JlIGRhdGE8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1hcnJvdy1yaWdodCIgYXJpYS1oaWRkZW49InRydWUiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtc3RyaXBlZCB0YWJsZS1ib3JkZXJlZCBuby1mb290ZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkRlc2NyaXB0aW9uPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkNvbW1lbmNlZCBEYXRlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkNvbXBsZXRlZCBEYXRlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkxvZGdlbWVudDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoxNi8wNC8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMTYvMDQvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5BY3Rpb24gTm90aWNlIFJlcXVpcmVkPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjE2LzA0LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoxNy8wNC8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFjdGlvbiBOb3RpY2UgUmVzcG9uc2U8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMTcvMDQvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjE3LzA0LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+Q29uZmlybWF0aW9uIE5vdGljZTwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoxNy8wNC8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMzAvMDQvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5EZWNpc2lvbiBTdGFnZTwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyNi8wNC8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMTcvMDYvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5EZWNpc2lvbiBOb3RpY2U8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMTcvMDYvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjIwLzA2LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQoNCg0KDQoNCiAgICAgICAgICAgIDxoMyBpZD0icmVsYXRlZEFwcGxpY2F0aW9ucyI+PGEgaHJlZj0iIyI+UmVsYXRlZCBBcHBsaWNhdGlvbnM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgIDxiPk5vIGRhdGEuPC9iPg0KICAgICAgICAgICAgPC9kaXY+DQoNCg0KDQoNCg0KDQoNCjxoMyBpZD0iZG9jdW1lbnRzIj48YSBocmVmPSIjIj5Eb2N1bWVudHM8L2E+PC9oMz4NCjxkaXY+DQoNCiAgICAgICAgPGRpdiBjbGFzcz0iaWNvbi13cmFwIj4NCiAgICAgICAgICAgIDxzcGFuPnN3aXBlIHRhYmxlIHRvIHRoZSBsZWZ0IHRvIHJldmVhbCBtb3JlIGRhdGE8L3NwYW4+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1hcnJvdy1yaWdodCIgYXJpYS1oaWRkZW49InRydWUiPjwvc3Bhbj4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgaWQ9ImRvYy1jb3VudCI+VG90YWwgbnVtYmVyIG9mIGRvY3VtZW50czogMzwvZGl2Pg0KICAgICAgICA8dGFibGUgaWQ9ImRvYy10YWJsZSIgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtYm9yZGVyZWQgbm8tZm9vdGVyIj4NCiAgICAgICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0aD5SZWNvcmQgTnVtYmVyPC90aD4NCiAgICAgICAgICAgICAgICAgICAgPHRoPkRlc2NyaXB0aW9uPC90aD4NCiAgICAgICAgICAgICAgICAgICAgPHRoPkRvY3VtZW50IFR5cGU8L3RoPg0KICAgICAgICAgICAgICAgICAgICA8dGggc3R5bGU9ImRpc3BsYXk6bm9uZSI+U2l6ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgIDx0aD5WaWV3IExpbms8L3RoPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICA8L3RoZWFkPg0KICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KMSAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjExMCAtIFByb3Bvc2FsIC0gTWFsY29sbSBEb3VnbGFzIENvbnN1bHRhbnRzIFB0eSBMdGQgLSBBaXJwb3J0IERyIEtlbnNpbmd0b24gLSAxNjA0MjAxOS5wZGY8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICBQREYNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkIHN0eWxlPSJkaXNwbGF5Om5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAuMDAgTUINCg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+PGEgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgcm9sZT0iYnV0dG9uIiBocmVmPSJodHRwczovL2RhLmJ1bmRhYmVyZy5xbGQuZ292LmF1L0RvY3VtZW50L0Rvd25sb2FkP2tleT05N2RBS2pzSTBPRlpUZkZMNXpscHFQLzJHRzhGQXpFcWkrd2gxSkNpZlhNaStiWFdvWXZUOTdNdmJmbzdsMUxNdS81N0ZSdUhIRzlmRUVCSkt3MlJqNFo0YXlXVVNFNEh2KzRsenB5aTZZTEVIMjJSZXQyMXdGTk81YytsWEZVRjdSdlNnK3huNUFZPSZhbXA7ZmlsZU5hbWU9MTEwKy0rUHJvcG9zYWwrLStNYWxjb2xtK0RvdWdsYXMrQ29uc3VsdGFudHMrUHR5K0x0ZCstK0FpcnBvcnQrRHIrS2Vuc2luZ3RvbistKzE2MDQyMDE5LnBkZi5wZGYiIHRhcmdldD0iX2JsYW5rIj5WaWV3PC9hPjwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCjIgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4xMTAgLSBTaWduZWQgQWN0aW9uIE5vdGljZSAtIE1hbGNvbG0gRG91Z2xhcyBDb25zdWx0YW50cyBQdHkgTHRkIC0gQWlycG9ydCBEciBLZW5zaW5ndG9uIC0gMTYwNDIwMTkucGRmPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgUERGDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZCBzdHlsZT0iZGlzcGxheTpub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLjAwIE1CDQoNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHJvbGU9ImJ1dHRvbiIgaHJlZj0iaHR0cHM6Ly9kYS5idW5kYWJlcmcucWxkLmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9Y1IrcFZSNmVwK1dSMmpQMzVhUVpRaitxdXlvWlBQZi9lYjNSbmlBQnFHdk5xbjRjdWIzWTQ0bTlrS0cweDVwb01XZHR1U1VTWG1aMGFvNThpdFBDZXZWMFVZNUZId3hNN0h0ZHJJQzNLVE4zZmJYYlc4a0poNmh0aGQ3djBIZkxRNENibElEQ1dDdDlianNzdzhYTzlVeUhVdmZ0T1FHciZhbXA7ZmlsZU5hbWU9MTEwKy0rU2lnbmVkK0FjdGlvbitOb3RpY2UrLStNYWxjb2xtK0RvdWdsYXMrQ29uc3VsdGFudHMrUHR5K0x0ZCstK0FpcnBvcnQrRHIrS2Vuc2luZ3RvbistKzE2MDQyMDE5LnBkZi5wZGYiIHRhcmdldD0iX2JsYW5rIj5WaWV3PC9hPjwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCjMgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4xMTAgLSBBdXRob3Jpc2VkIERlc2Npc2lvbiBOb3RpY2UgLSBBaXJwb3J0IERyaXZlIEtlbnNpbmd0b24gLSAxNzA2MjAxOS5wZGY8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICBQREYNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkIHN0eWxlPSJkaXNwbGF5Om5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAuMDAgTUINCg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+PGEgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgcm9sZT0iYnV0dG9uIiBocmVmPSJodHRwczovL2RhLmJ1bmRhYmVyZy5xbGQuZ292LmF1L0RvY3VtZW50L0Rvd25sb2FkP2tleT11Ri9xKy9QUURSVFJibGJ6ZUF2cUU1Q0dvb2tEcktudDNEUTBsZjZ0eEc3Q1JleFl6cytGVWczblZlaEhTYndJMTNrSEE4eEdZVXBGb1VoY0lhcUdlc1FmYlpGNjNiWEFVcVlyVmU3VWg3SHRHOUtEN0dma0JnPT0mYW1wO2ZpbGVOYW1lPTExMCstK0F1dGhvcmlzZWQrRGVzY2lzaW9uK05vdGljZSstK0FpcnBvcnQrRHJpdmUrS2Vuc2luZ3RvbistKzE3MDYyMDE5LnBkZi5wZGYiIHRhcmdldD0iX2JsYW5rIj5WaWV3PC9hPjwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCg0KICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgPC90YWJsZT4NCjwvZGl2Pg0KDQoNCiAgICAgICAgICAgIDxoMyBpZD0iY29udGFjdFVzIj48YSBocmVmPSIjIj5Db250YWN0IFVzPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5TaG91bGQgeW91IHdpc2ggdG8gY29udGFjdCBjb3VuY2lsIHRvIG1ha2UgZW5xdWlyaWVzIHJlZ2FyZGluZyBhcHBsaWNhdGlvbnMgZGlzcGxheWVkIG9uIHRoZSB3ZWJzaXRlLCBwbGVhc2UgY29udGFjdCBjb3VuY2lsIGVpdGhlciBieSBlbWFpbCA8YSBocmVmPSJtYWlsdG86Q0VPQGJ1bmRhYmVyZy5xbGQuZ292LmF1P3N1YmplY3Q9U3VibWlzc2lvbiBmb3IgYXBwbGljYXRpb24gKDUyMy4yMDE5LjExMC4xKSI+Q0VPQGJ1bmRhYmVyZy5xbGQuZ292LmF1PC9hPiwgcGhvbmUgMTMwMCA4ODMgNjk5IGR1cmluZyBub3JtYWwgb2ZmaWNlIGhvdXJzIG9yIGluIHdyaXRpbmcgdG8gUE8gQm94IDMxMzAsQlVOREFCRVJHIFFMRCA0NjcwDQogICAgICAgIC4gQWxsIGNvcnJlc3BvbmRlbmNlIHNob3VsZCBiZSBhZGRyZXNzZWQgdG8gdGhlIEdlbmVyYWwgTWFuYWdlciBhbmQgcXVvdGUgdGhlIHJlbGV2YW50IGFwcGxpY2F0aW9uIHJlZmVyZW5jZSBudW1iZXIuDQo8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCg0KPGgzIGlkPSJnb29nbGVtYXBzIj48YSBocmVmPSIjIj5Hb29nbGUgTWFwczwvYT48L2gzPg0KPGRpdiBpZD0ibWFwX2NvbnRhaW5lciI+DQogICAgPGRpdiBpZD0ibWFwX2NhbnZhcyIgY2xhc3M9ImlmcmFtZS1yd2QiPg0KICAgIDwvZGl2Pg0KPC9kaXY+DQoNCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCg0KICAgIHdpbmRvdy5vbmxvYWQgPSBsb2FkR29vZ2xlTWFwc1NjcmlwdDsNCg0KICAgIHZhciBnZW9jb2RlcjsNCiAgICB2YXIgbWFwOw0KICAgIHZhciB0aW1lb3V0ID0gMzAwOw0KICAgIHZhciBwcm9wZXJ0aWVzID0gWyIxMCBBaXJwb3J0IERyLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICIsIjEwIEF2aWF0aW9uIENyZXMsIEtlbnNpbmd0b24gNDY3MCBRTEQgIiwiMTEgQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAiLCIxMiBBaXJwb3J0IERyLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICIsIjEyIEF2aWF0aW9uIENyZXMsIEtlbnNpbmd0b24gNDY3MCBRTEQgIiwiMTMgQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAiLCIxNCBBaXJwb3J0IERyLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICIsIjE0IEF2aWF0aW9uIENyZXMsIEtlbnNpbmd0b24gNDY3MCBRTEQgIiwiMTUgQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAiLCIxNiBBaXJwb3J0IERyLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICIsIjE2IEF2aWF0aW9uIENyZXMsIEtlbnNpbmd0b24gNDY3MCBRTEQgIiwiMTcgQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAiLCIxOCBBaXJwb3J0IERyLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICIsIjE4IEF2aWF0aW9uIENyZXMsIEtlbnNpbmd0b24gNDY3MCBRTEQgIiwiMjAgQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAiLCIyMiBBaXJwb3J0IERyLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICIsIjI0IEF2aWF0aW9uIENyZXMsIEtlbnNpbmd0b24gNDY3MCBRTEQgIiwiMjYgQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAiLCIyOCBBdmlhdGlvbiBDcmVzLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICIsIjMgQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAiLCI1IEF2aWF0aW9uIENyZXMsIEtlbnNpbmd0b24gNDY3MCBRTEQgIiwiNiBBaXJwb3J0IERyLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICIsIjYgQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAiLCI3IEF2aWF0aW9uIENyZXMsIEtlbnNpbmd0b24gNDY3MCBRTEQgIiwiOCBBaXJwb3J0IERyLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICIsIjggQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAiLCI5IEF2aWF0aW9uIENyZXMsIEtlbnNpbmd0b24gNDY3MCBRTEQgIiwiQWlycG9ydCBEciwgS2Vuc2luZ3RvbiA0NjcwIFFMRCAiLCJBdmlhdGlvbiBDcmVzLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICJdOw0KICAgIHZhciBsYXRMbmdBcnIgPSBbXTsNCg0KICAgIGZ1bmN0aW9uIGxvYWRHb29nbGVNYXBzU2NyaXB0KCkgew0KICAgICAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7DQogICAgICAgIHNjcmlwdC50eXBlID0gInRleHQvamF2YXNjcmlwdCI7DQogICAgICAgIHNjcmlwdC5zcmMgPSAiLy9tYXBzLmdvb2dsZWFwaXMuY29tL21hcHMvYXBpL2pzP2tleT1BSXphU3lBNUhZZ2FYQmNtYVFlMjBIV3Z2cWRXZ2tkUDlHLXJmSGMmY2FsbGJhY2s9bG9hZEdvb2dsZU1hcHMiOw0KICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gcmVuZGVyR29vZ2xlTWFwcygpDQogICAgew0KICAgICAgICB2YXIgbWFwT3B0aW9ucyA9IHsNCiAgICAgICAgICAgIGNlbnRlcjogbGF0TG5nQXJyWzBdLA0KICAgICAgICAgICAgem9vbTogMTYsDQogICAgICAgICAgICBtYXBUeXBlSWQ6IGdvb2dsZS5tYXBzLk1hcFR5cGVJZC5ST0FETUFQLA0KICAgICAgICAgICAgbWFwVHlwZUNvbnRyb2w6IGZhbHNlDQogICAgICAgIH0NCg0KICAgICAgICBtYXAgPSBuZXcgZ29vZ2xlLm1hcHMuTWFwKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtYXBfY2FudmFzIiksIG1hcE9wdGlvbnMpOw0KDQogICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZERvbUxpc3RlbmVyKHdpbmRvdywgJ3Jlc2l6ZScsIGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgdmFyIGNlbnRlciA9IG1hcC5nZXRDZW50ZXIoKTsNCiAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LnRyaWdnZXIobWFwLCAncmVzaXplJyk7DQogICAgICAgICAgICBtYXAuc2V0Q2VudGVyKGNlbnRlcik7DQogICAgICAgIH0pOw0KDQogICAgfQ0KDQogICAgZnVuY3Rpb24gbG9hZEdvb2dsZU1hcHMoKSB7DQogICAgICAgIGdlb2NvZGVyID0gbmV3IGdvb2dsZS5tYXBzLkdlb2NvZGVyKCk7DQogICAgICAgIHZhciBub09mRmFpbGVkTG9jYXRpb25TZWFyY2ggPSAwOw0KDQogICAgICAgICQocHJvcGVydGllcykuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHsNCiAgICAgICAgICAgIHZhciBwcm9wZXJ0eUFkZHJlc3MgPSBlbGVtZW50Ow0KDQogICAgICAgICAgICAvL0dldCBnZW9jb2RlDQogICAgICAgICAgICBnZW9jb2Rlci5nZW9jb2RlKHsgJ2FkZHJlc3MnOiBwcm9wZXJ0eUFkZHJlc3MgfSwgZnVuY3Rpb24gKHJlc3VsdHMsIHN0YXR1cykgew0KICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgPT0gZ29vZ2xlLm1hcHMuR2VvY29kZXJTdGF0dXMuT0spIHsNCg0KICAgICAgICAgICAgICAgICAgICB2YXIgbG9jYXRpb24gPSByZXN1bHRzWzBdLmdlb21ldHJ5LmxvY2F0aW9uOw0KICAgICAgICAgICAgICAgICAgICB2YXIgbGF0TG5nID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhsb2NhdGlvbi5sYXQoKSwgbG9jYXRpb24ubG5nKCkpOw0KDQogICAgICAgICAgICAgICAgICAgIGxhdExuZ0Fyci5wdXNoKGxhdExuZyk7DQoNCiAgICAgICAgICAgICAgICAgICAgaWYobGF0TG5nQXJyLmxlbmd0aCA9PSAxKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJHb29nbGVNYXBzKCk7DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAvL0NyZWF0ZSBtYXJrZXIgZm9yIG1hcCBhbmQgcGxhY2UgaXQgb24gdGhlIG1hcA0KICAgICAgICAgICAgICAgICAgICB2YXIgbWFya2VyID0gbmV3IGdvb2dsZS5tYXBzLk1hcmtlcih7DQogICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogbGF0TG5nLA0KICAgICAgICAgICAgICAgICAgICAgICAgbWFwOiBtYXANCiAgICAgICAgICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRlbnRTdHJpbmcgPSAnPGRpdj48c3Bhbj4nICsgcHJvcGVydHlBZGRyZXNzICsgJzwvc3Bhbj48L2Rpdj4nOw0KICAgICAgICAgICAgICAgICAgICB2YXIgaW5mb3dpbmRvdyA9IG5ldyBnb29nbGUubWFwcy5JbmZvV2luZG93KHsgICAvL0NyZWF0ZSBpbmZvIHdpbmRvdw0KICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogY29udGVudFN0cmluZw0KICAgICAgICAgICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcihtYXJrZXIsICdjbGljaycsIGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgaW5mb3dpbmRvdy5vcGVuKG1hcCwgbWFya2VyKTsNCiAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIC8vaWYgbm8gbG9jYXRpb24gZm91bmQgYnkgZ29vZ2xlIGZvciBhIHByb3BlcnR5DQogICAgICAgICAgICAgICAgZWxzZSBpZiAoc3RhdHVzID09ICJaRVJPX1JFU1VMVFMiKSB7DQogICAgICAgICAgICAgICAgICAgIG5vT2ZGYWlsZWRMb2NhdGlvblNlYXJjaCsrOw0KDQogICAgICAgICAgICAgICAgICAgIGlmKG5vT2ZGYWlsZWRMb2NhdGlvblNlYXJjaCA9PSAkKHByb3BlcnRpZXMpLmxlbmd0aCkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZUdvb2dsZU1hcHNDb250ZW50KCk7DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdHVzID09IGdvb2dsZS5tYXBzLkdlb2NvZGVyU3RhdHVzLk9WRVJfUVVFUllfTElNSVQpIHsNCiAgICAgICAgICAgICAgICAgICAgLy9zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgZ2V0R2VvQ29kZUZvckFkZHJlc3MoaWQsIGFkZHJlc3MpOyB9LCAodGltZW91dCkpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICAvL1JlcGxhY2VzIGdvb2dsZSBtYXBzIGNvbnRlbnQgd2l0aCBhIG5ldyBkaXYgYmxvY2sgdGhhdCBoYXMgaW5mbyBtZXNzYWdlDQogICAgZnVuY3Rpb24gcmVwbGFjZUdvb2dsZU1hcHNDb250ZW50KCkgew0KICAgICAgICB2YXIgbmV3Q29udGVudCA9ICc8ZGl2IGNsYXNzPSJ1aS1hY2NvcmRpb24tY29udGVudCB1aS1oZWxwZXItcmVzZXQgdWktd2lkZ2V0LWNvbnRlbnQgdWktY29ybmVyLWJvdHRvbSI+JyArDQogICAgICAgICAgICAnPHA+Q291bGRuXCd0IGZpbmQgdGhlIHByb3BlcnR5IGFkZHJlc3MoZXMpIG9uIEdvb2dsZSBNYXBzLiA8cD4nICsNCiAgICAgICAgICAgICc8L2Rpdj4nOw0KDQogICAgICAgICQoJyNtYXBfY29udGFpbmVyJykucmVwbGFjZVdpdGgobmV3Q29udGVudCk7DQogICAgfQ0KDQo8L3NjcmlwdD4NCg0KICAgIDwvZGl2Pg0KICAgIDxkaXYgY2xhc3M9Im1vZGFsIGZhZGUiIGlkPSJzdWJtaXNzaW9uLW1vZGFsIj4NCiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InNwaW5uZXIiPjwvZGl2PiA8IS0tIFRoaXMgZGl2IGhvc3RzIHRoZSBzcGlubmVyIC0tPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgZGF0YS1kaXNtaXNzPSJtb2RhbCIgYXJpYS1sYWJlbD0iQ2xvc2UiPjxzcGFuIGFyaWEtaGlkZGVuPSJ0cnVlIj4mdGltZXM7PC9zcGFuPjwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9Im1vZGFsLXRpdGxlIj5TdWJtaXNzaW9uIGZvciA1MjMuMjAxOS4xMTAuMTwvaDI+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KDQogICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkgew0KDQogICAgICAgICQoJyNhcHBsaWNhdGlvbicpLnRvZ2dsZXBhbmVscygpOw0KDQogICAgICAgICAgICAkKCcjcHJvcGVydGllcycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjZGV0YWlscycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjdHJhY2tpbmcnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI2RvY3VtZW50cycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjcmVsYXRlZEFwcGxpY2F0aW9ucycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjZ29vZ2xlbWFwcycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjY29udGFjdFVzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNleGhpYml0aW9uRGV0YWlscycpLmNsaWNrKCk7DQoNCiAgICAgICAgDQoNCg0KICAgICAgICAkKCcjc3VibWlzc2lvbi1idG4nKS5jbGljayhmdW5jdGlvbiAoKSB7ICAgICAgICANCg0KDQogICAgICAgICAgICB2YXIgdXJsID0gImh0dHBzOi8vZGEuYnVuZGFiZXJnLnFsZC5nb3YuYXUvL0FwcGxpY2F0aW9uL1N1Ym1pc3Npb24vIiArIGVuY29kZVVSSSgiNTIzLjIwMTkuMTEwLjEiKTsNCg0KICAgICAgICAgICAgJCgnI3N1Ym1pc3Npb24tbW9kYWwnKS5tb2RhbCgnc2hvdycpLmZpbmQoJy5tb2RhbC1ib2R5JykubG9hZCh1cmwpOw0KICAgICAgICB9KTsNCiAgICB9KTsNCg0KDQogICAgLyogU2hvd3MgYWxsIHRoZSBwYW5lbHMgKi8NCiAgICBmdW5jdGlvbiBzaG93QWxsKCkgew0KICAgICAgICAkKCcjYXBwbGljYXRpb24nKS5jaGlsZHJlbigiaDMiKS5lYWNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKCJ1aS1zdGF0ZS1kZWZhdWx0IikpIHsNCiAgICAgICAgICAgICAgICAkKHRoaXMpLmNsaWNrKCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0pOw0KICAgIH0NCg0KDQogICAgLyogSGlkZSBhbGwgdGhlIHBhbmVscyAqLw0KICAgIGZ1bmN0aW9uIGhpZGVBbGwoKSB7DQogICAgICAgICQoJyNhcHBsaWNhdGlvbicpLmNoaWxkcmVuKCJoMyIpLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoInVpLXN0YXRlLWFjdGl2ZSIpKSB7DQogICAgICAgICAgICAgICAgJCh0aGlzKS5jbGljaygpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICA8L3NjcmlwdD4NCg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPCEtLSAvLmNvbnRhaW5lci1mbHVpZCAtLT4NCg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwhLS0gLyNwYWdlLXdyYXBwZXIgLS0+DQogICAgICAgICAgICA8L2Rpdj4NCg0KDQogICAgICAgICAgICA8ZGl2IGlkPSJHcmVlbkJhciI+DQogICAgICAgICAgICAgICAgPGE+Q29weXJpZ2h0IMKpIDIwMTcgQnVuZGFiZXJnIFJlZ2lvbmFsIENvdW5jaWwuIEFsbCByaWdodHMgcmVzZXJ2ZWQ8L2E+DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQoNCiAgICA8ZGl2IGlkPSJ0aXB0aXBfaG9sZGVyIiBzdHlsZT0ibWF4LXdpZHRoOjMwMHB4OyI+PGRpdiBpZD0idGlwdGlwX2Fycm93Ij48ZGl2IGlkPSJ0aXB0aXBfYXJyb3dfaW5uZXIiPjwvZGl2PjwvZGl2PjxkaXYgaWQ9InRpcHRpcF9jb250ZW50Ij48L2Rpdj48L2Rpdj4NCjwvYm9keT4NCg0KPC9odG1sPg0K
  recorded_at: Mon, 21 Apr 2025 18:15:52 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/526.2019.00000120.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 302
      message: Found
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '133'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Location:
      - "/Home/Disclaimer"
      Server:
      - Microsoft-IIS/10.0
      Set-Cookie:
      - ASP.NET_SessionId=okxmedroodbxmiq2535ybhzy; path=/; HttpOnly; SameSite=Lax
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:15:52 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 de78bd21952119995ead4ef929b150ce.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - MEL52-P2
      X-Amz-Cf-Id:
      - D3jQS9RhETFs6RIf9-voz0A9jW1DeavsDW6FsSywDuv2nl3k6OE0Vg==
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Home/Disclaimer\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:15:52 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Home/Disclaimer
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=okxmedroodbxmiq2535ybhzy
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '14203'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:15:52 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 c0248078e504ba544d1884664637d26e.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - MEL52-P2
      X-Amz-Cf-Id:
      - R3Ks1L0Y1iKb-HI6I3hm8peaxbYqZxYu6bhEtBrPmA9QT-WNNFu3Mw==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQo8aHRtbCBsYW5nPSJlbiI+DQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+DQogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4NCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPg0KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIj4NCiAgICA8bWV0YSBuYW1lPSJrZXl3b3JkcyIgY29udGVudD0iQnVuZGFiZXJnIFJlZ2lvbmFsIENvdW5jaWwsREEgVHJhY2tlcixEZXZlbG9wbWVudCBBcHBsaWNhdGlvbixEZXZlbG9wbWVudCBBcHBsaWNhdGlvbiBUcmFja2luZywgREEgRW5xdWlyeSwgRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24gRW5xdWlyeSwgQXBwbGljYXRpb24gVHJhY2tlciI+DQogICAgPG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iIGNvbnRlbnQ9IlRoZSBvZmZpY2lhbCBCdW5kYWJlcmcgUmVnaW9uYWwgQ291bmNpbCBBcHBsaWNhdGlvbiBUcmFja2VyIj4NCg0KICAgIDx0aXRsZT5CdW5kYWJlcmcgUmVnaW9uYWwgQ291bmNpbCAtIEFwcGxpY2F0aW9uIFRyYWNrZXI8L3RpdGxlPg0KDQogICAgPCEtLWZhdmljb24tLT4NCiAgICA8bGluayBocmVmPSIvZmF2aWNvbi5pY28iIHJlbD0ic2hvcnRjdXQgaWNvbiIgdHlwZT0iaW1hZ2UveC1pY29uIj4NCg0KICAgIDwhLS0galF1ZXJ5IC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvYnVuZGxlcy9qcXVlcnk/dj1OOVgzMW9qMjRsbGkxdVZGcFg2dWowTTJXZE43R2RnTWpudllFVW9JeDdzMSI+PC9zY3JpcHQ+DQoNCiAgICA8c2NyaXB0IHNyYz0iL2J1bmRsZXMvanF1ZXJ5dWk/dj1tbTN2MlBwR1VrRFVyaUU2YnpKdVRscWJfdFZqbVdFR2o0aTRnU0o3aXBVMSI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC90aGVtZXMvYmFzZS9qcXVlcnk/dj1yY0F2OENjR2tGcnZaWlpxTzZJaHBYb0hQa05FQ2k1SVBHLUhCRjFCYjEwMSIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDwhLS0gQm9vdHN0cmFwIC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvYnVuZGxlcy9ib290c3RyYXA/dj13TUZCSUlaNk9zVUNlMXFPU2xSTlNfNmhHQkpnZkNFMDVWaDFHekNwcFlvMSI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9ib290c3RyYXA/dj1tS3NvR3lsTHpnOFhBOW5RaDV2dkJtMHV2Vi1LOHBiNVhUcmFEQ3M0a2JNMSIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9mb250LWF3ZXNvbWU/dj1ERU5YTmNRV0NVcVhMV213NGo1VUxQUFRwd2dXZ1E4RGo5YlFCRHFDNmFnMSIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDwhLS0gRGF0YVRhYmxlcyAtLT4NCiAgICA8c2NyaXB0IHNyYz0iL2J1bmRsZXMvZGF0YVRhYmxlcz92PVVIWUR4TzhWVmgyUmdDbWlWVU0tM0NpdmJfUTJjR2NieE1TVXhnRnViWEExIj48L3NjcmlwdD4NCg0KICAgIA0KICAgIDxsaW5rIGhyZWY9Ii9Db250ZW50L0RhdGFUYWJsZXMvY3NzP3Y9ZWtvMElPbWhlN2Myd0E0WVlGNURMX0NuRzR3b2k2ZTRYa0gzSHl4M1luZzEiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQoNCiAgICA8IS0tIEJvb3RzdHJhcCBTQi1BZG1pbi0yIFBsdWdpbiBhbmQgb3RoZXIgY3NzIGFuZCBqcyBmaWxlcy0tPg0KICAgIDxzY3JpcHQgc3JjPSIvanMvanNGb2xkZXI/dj0xZmh3ajFpb2NHMjg5bW5GQVMtYU9Dd3hRdWVFQTJCYW5qb3pHb2JFMzNvMSI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvY3NzL2Nzc0ZvbGRlcj92PXl2aC1XNHl6ODg3QkF3NTJIZFoyWFlodkdmN3RWdmY1eG9jTkkteG1NYzQxIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPGxpbmsgaHJlZj0iL0NvdW5jaWxfVGhlbWUvY3NzP3Y9NzltRkVGY2lyalUyUlc1bXJOQUREU3NkaEl4bk9FYmJnOExGelVHUDRZczEiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQogICAgPHNjcmlwdCBzcmM9Ii9Db3VuY2lsX1RoZW1lL2pzP3Y9Ij48L3NjcmlwdD4NCg0KDQogICAgPCEtLSBIVE1MNSBTaGltIGFuZCBSZXNwb25kLmpzIElFOCBzdXBwb3J0IG9mIEhUTUw1IGVsZW1lbnRzIGFuZCBtZWRpYSBxdWVyaWVzIC0tPg0KICAgIDwhLS0gV0FSTklORzogUmVzcG9uZC5qcyBkb2Vzbid0IHdvcmsgaWYgeW91IHZpZXcgdGhlIHBhZ2UgdmlhIGZpbGU6Ly8gLS0+DQogICAgPCEtLVtpZiBsdCBJRSA5XT4NCiAgICAgICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vb3NzLm1heGNkbi5jb20vbGlicy9odG1sNXNoaXYvMy43LjAvaHRtbDVzaGl2LmpzIj48L3NjcmlwdD4NCiAgICAgICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vb3NzLm1heGNkbi5jb20vbGlicy9yZXNwb25kLmpzLzEuNC4yL3Jlc3BvbmQubWluLmpzIj48L3NjcmlwdD4NCiAgICA8IVtlbmRpZl0tLT4NCjwvaGVhZD4NCg0KDQoNCjxib2R5Pg0KICAgIDxkaXYgY2xhc3M9InB1c2htZW51IGNicC1zcG1lbnUtcHVzaCI+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+DQogICAgICAgICAgICA8aGVhZGVyIGlkPSJIZWFkZXIiPg0KICAgICAgICAgICAgICAgIDxuYXYgY2xhc3M9Im5hdmJhciBuYXZiYXItZGVmYXVsdCIgcm9sZT0ibmF2aWdhdGlvbiIgaWQ9Ik5hdkJhciI+DQogICAgICAgICAgICAgICAgICAgIDwhLS0gQnJhbmQgYW5kIHRvZ2dsZSBnZXQgZ3JvdXBlZCBmb3IgYmV0dGVyIG1vYmlsZSBkaXNwbGF5IC0tPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InV0aWxzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vd3d3LmJ1bmRhYmVyZy5xbGQuZ292LmF1IiB0YXJnZXQ9Il9ibGFuayI+SG9tZTwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly93d3cuYnVuZGFiZXJnLnFsZC5nb3YuYXUvY291bmNpbC9jdXN0b21lci1zZXJ2aWNlIiB0YXJnZXQ9Il9ibGFuayI+Q29udGFjdCBVczwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly93d3cuYnVuZGFiZXJnLnFsZC5nb3YuYXUvcHJpdmFjeSIgdGFyZ2V0PSJfYmxhbmsiPlByaXZhY3kgUG9saWN5PC9hPjwvbGk+DQo8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8aDEgaWQ9ImxvZ28iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmJ1bmRhYmVyZy5xbGQuZ292LmF1Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9Db3VuY2lsX1RoZW1lL0J1bmRhYmVyZy9icmMtbG9nby5wbmciIGFsdD0iQnVuZGFiZXJnIFJlZ2lvbmFsIENvdW5jaWwiPjxzdHJvbmcgY2xhc3M9InZoIj5CdW5kYWJlcmcgUmVnaW9uYWwgQ291bmNpbDwvc3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDE+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvbmF2Pg0KDQoNCiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJiYW5uZXIiPg0KICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL0NvdW5jaWxfVGhlbWUvQnVuZGFiZXJnL2Jhbm5lci5qcGciPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8L2hlYWRlcj4NCg0KICAgICAgICAgICAgPGRpdiBpZD0iY29udGVudCI+DQogICAgICAgICAgICAgICAgPCEtLSBOYXZpZ2F0aW9uIC0tPg0KICAgICAgICAgICAgICAgIDxuYXYgY2xhc3M9Im5hdmJhciBuYXZiYXItZGVmYXVsdCBuYXZiYXItc3RhdGljLXRvcCIgcm9sZT0ibmF2aWdhdGlvbiIgc3R5bGU9Im1hcmdpbi1ib3R0b206IDAiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0ibmF2YmFyLXRvZ2dsZSIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLXRhcmdldD0iLm5hdmJhci1jb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPlRvZ2dsZSBuYXZpZ2F0aW9uPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2YmFyLWJyYW5kIiBocmVmPSIvSG9tZS9JbmRleCI+PC9hPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdmJhci1oZWFkZXIgLS0+DQogICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdmJhci10b3AtbGlua3MgbmF2YmFyLXJpZ2h0IGhpZGRlbi14cyBoaWRkZW4tc20gaGlkZGVuLW1kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48c3BhbiBpZD0icHJpbnRJY29uIiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1wcmludCIgb25jbGljaz0id2luZG93LnByaW50KCk7Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgPC91bD4NCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItZGVmYXVsdCBzaWRlYmFyIiByb2xlPSJuYXZpZ2F0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNpZGViYXItbmF2IG5hdmJhci1jb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYiIGlkPSJzaWRlLW1lbnUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLnNpZGViYXItY29sbGFwc2UgLS0+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLXN0YXRpYy1zaWRlIC0tPg0KICAgICAgICAgICAgICAgIDwvbmF2Pg0KICAgICAgICAgICAgICAgIDxkaXYgaWQ9InBhZ2Utd3JhcHBlciI+DQoNCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyLWZsdWlkIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgDQoNCg0KPGRpdiBjbGFzcz0icGFnZS1oZWFkZXIiPg0KPGgyPkRpc2NsYWltZXI8L2gyPg0KPC9kaXY+ICAgIAogPGRpdiBpZD0ic2Nyb2xsYWJsZUNvbnRlbnQiPiAgICANCjxoMz48c3Ryb25nPlRlcm1zIGFuZCBDb25kaXRpb25zPC9zdHJvbmc+PC9oMz4NCjxoND48c3Ryb25nPkdlbmVyYWwgQ29uZGl0aW9ucyBvZiBVc2U8L3N0cm9uZz48L2g0Pg0KPHA+QWNjZXNzaW5nIHRoaXMgd2ViIHNpdGUgaW1wbGllcyB0aGF0IHlvdSBoYXZlIGFncmVlZCB0byB0aGUgZm9sbG93aW5nOjwvcD4NCjxwPlRoZSBjb250ZW50cyBvZiB0aGlzIHdlYnNpdGUgKHdoaWNoIGluY2x1ZGVzIGRvd25sb2FkYWJsZSBtYXRlcmlhbCkgYXJlIHN1YmplY3QgdG8gY29weXJpZ2h0IGFuZCBhcmUgcHJvdGVjdGVkIGJ5IGxhd3Mgb2YgQXVzdHJhbGlhIGFuZCBvdGhlciBjb3VudHJpZXMgdGhyb3VnaCBpbnRlcm5hdGlvbmFsIHRyZWF0aWVzLjwvcD4NCjxwPkJ1bmRhYmVyZyBSZWdpb25hbCBDb3VuY2lsIGdyYW50cyB5b3UgYSBub24tZXhjbHVzaXZlIGxpY2Vuc2UgdG8gcmVwcm9kdWNlIHRoZSBjb250ZW50cyBvZiB0aGlzIHdlYnNpdGUgaW4geW91ciB3ZWIgYnJvd3NlciAoYW5kIGluIGFueSBjYWNoZSBmaWxlIHByb2R1Y2VkIGJ5IHlvdXIgd2ViIGJyb3dzZXIpIGZvciB0aGUgc29sZSBwdXJwb3NlIG9mIHZpZXdpbmcgdGhlIGNvbnRlbnQuIEJ1bmRhYmVyZyBSZWdpb25hbCBDb3VuY2lsIHJlc2VydmVzIGFsbCBvdGhlciByaWdodHMuPC9wPg0KPHA+VGhpcyBXZWItc2l0ZSwgaW5jbHVkaW5nIHRoZSBQRCBPbmxpbmUgZmFjaWxpdHkgcHJvdmlkZWQgd2l0aGluIGl0LCBpcyBmb3IgaW5mb3JtYXRpb24gcHVycG9zZXMgb25seSwgYW5kIGlzIHByb3ZpZGVkIGluIGdvb2QgZmFpdGguPC9wPg0KPHA+QWx0aG91Z2ggZXZlcnkgZWZmb3J0IGlzIG1hZGUgdG8gZW5zdXJlIHRoZSByZWxldmFuY2UsIGFjY3VyYWN5LCBjdXJyZW5jeSBhbmQgdGltZWxpbmVzcyBvZiBjb250ZW50LCBCdW5kYWJlcmcgUmVnaW9uYWwgQ291bmNpbCBhY2NlcHRzIG5vIHJlc3BvbnNpYmlsaXR5IGFuZCBtYWtlcyBubyByZXByZXNlbnRhdGlvbnMgd2hhdHNvZXZlciBmb3IgdGhlIGFjY3VyYWN5LCBjb3JyZWN0bmVzcyBvciBvdGhlcndpc2Ugb2YgYW55IGluZm9ybWF0aW9uIG9uIHRoZSBwYWdlcyBwdWJsaXNoZWQgd2l0aGluIHRoaXMgc2l0ZSAoaW5jbHVkaW5nIHRoZSBQRCBPbmxpbmUgZmFjaWxpdHkgcHJvdmlkZWQpLiBCeSBhY2Nlc3NpbmcgdGhpcyBXZWJzaXRlIHlvdSBhY2NlcHQgdG8gdXNpbmcgdGhlIGluZm9ybWF0aW9uIG9uIHRoZSBwYWdlcyBhdCB5b3VyIG93biByaXNrLjwvcD4NCjxwPldpdGhvdXQgbGltaXRpbmcgdGhlIGdlbmVyYWxpdHkgb2YgdGhlIGZvcmVnb2luZywgYW5kIHN1YmplY3Qgb25seSB0byBzdGF0dXRlLCBCdW5kYWJlcmcgUmVnaW9uYWwgQ291bmNpbCBkb2VzIG5vdCB3YXJyYW50IHRoYXQgdGhlIGluZm9ybWF0aW9uIG9uIHRoZSBwYWdlcyBwdWJsaXNoZWQgd2l0aGluIHRoaXMgc2l0ZSAoaW5jbHVkaW5nIHRoZSBQRCBPbmxpbmUgZmFjaWxpdHkgcHJvdmlkZWQpIGNhbiBiZSByZWxpZWQgdXBvbiwgZXhwcmVzc2x5IGRpc2NsYWltcyBhbGwgd2FycmFudGllcywgZXhwcmVzcyBvciBpbXBsaWVkLCBpbmNsdWRpbmcgYnV0IG5vdCBsaW1pdGVkIHRvIHRoZSBpbXBsaWVkIHdhcnJhbnRpZXMgb2YgcXVhbGl0eSBvciBhY2N1cmFjeSBvciBtZXJjaGFudGFiaWxpdHkgYW5kIGZpdG5lc3MgZm9yIGEgcGFydGljdWxhciBwdXJwb3NlLCBhbmQgZG9lcyBub3Qgd2FycmFudCBvciBtYWtlIGFueSByZXByZXNlbnRhdGlvbnMgcmVnYXJkaW5nIHRoZSB1c2Ugb3IgdGhlIHJlc3VsdHMgb2YgdGhlIHVzZSBvZiBhbnkgaW5mb3JtYXRpb24gb24gdGhlIHBhZ2UgcHVibGlzaGVkIHdpdGhpbiB0aGlzIHNpdGUgKGluY2x1ZGluZyB0aGUgUEQgT25saW5lIGZhY2lsaXR5IHByb3ZpZGVkKS48L3A+DQo8cD5UaGlzIGZhY2lsaXR5IGlzIHVuZGVyIGNvbnN0YW50IGFtZW5kbWVudCB0byBwcm92aWRlIHRoZSBsYXRlc3QgYW5kIG1vc3QgYWNjdXJhdGUgaW5mb3JtYXRpb24gYXZhaWxhYmxlLiBTb21lIGluZm9ybWF0aW9uIG1heSwgaG93ZXZlciwgbm90IGJlIGN1cnJlbnQuIENoYW5nZXMgaW4gY2lyY3Vtc3RhbmNlcyBhZnRlciB0aW1lIG9mIHB1YmxpY2F0aW9uIG1heSBpbXBhY3Qgb24gdGhlIGFjY3VyYWN5IG9mIHRoZSBpbmZvcm1hdGlvbiBwcm92aWRlZCBieSB0aGlzIHdlYnNpdGUuIEluIGFkZGl0aW9uLCBpbmZvcm1hdGlvbiBwdWJsaXNoZWQgYW5kIHRyYW5zbWl0dGVkIGVsZWN0cm9uaWNhbGx5IG1heSBiZSBzdWJqZWN0IHRvIGNvcnJ1cHRpb24gYnkgdGhlIHByb2Nlc3MuIFZpZXdlcnMgbXVzdCB0YWtlIGFjY291bnQgb2YgYWxsIG9mIHRoZSBhYm92ZSB3aGVuIGFjY2Vzc2luZyBwdWJsaXNoZWQgaW5mb3JtYXRpb24uPC9wPg0KPHA+Tm8gcGVyc29uIHNob3VsZCBwbGFjZSByZWxpYW5jZSBvbiBpbmZvcm1hdGlvbiBmcm9tIHRoaXMgd2Vic2l0ZSAoaW5jbHVkaW5nIHRoZSBQRCBPbmxpbmUgZmFjaWxpdHkgcHJvdmlkZWQpIGluIGNpcmN1bXN0YW5jZXMgd2hlcmUgbG9zcywgZGFtYWdlIG9yIGluanVyeSBpcyBwb3NzaWJsZS4gVGhpcyBpcyBwYXJ0aWN1bGFybHkgaW1wb3J0YW50IHNob3VsZCB5b3Ugd2lzaCB0byB1c2UgYW55IGluZm9ybWF0aW9uIGZvciBhbnkgbGVnYWwgcHVycG9zZS48L3A+DQo8cD5TcGVjaWZpYyBlbnF1aXJpZXMgc2hvdWxkIGJlIG1hZGUgdG8gQ291bmNpbCBpbiBvcmRlciB0byBvYnRhaW4gdGhlIHJlcXVpcmVkIGluZm9ybWF0aW9uIG9yIGFkdmljZSBkaXJlY3RseSBmcm9tIENvdW5jaWwgT2ZmaWNlcnMgYW5kIHRvIG90aGVyd2lzZSBhc2NlcnRhaW4gdGhlIGFjY3VyYWN5IG9mIGFsbCBpbmZvcm1hdGlvbiBjb250YWluZWQgd2l0aGluIHRoZXNlIHBhZ2VzLiBJbiBzb21lIGNhc2VzLCB5b3UgbWF5IGJlIHJlcXVpcmVkIHRvIG1ha2UgYSB3cml0dGVuIGFwcGxpY2F0aW9uIHRvIENvdW5jaWwgdG8gb2J0YWluIHRoZSBkZXNpcmVkIGluZm9ybWF0aW9uIG9yIGFkdmljZS48L3A+DQo8cD5CdW5kYWJlcmcgUmVnaW9uYWwgQ291bmNpbCBpcyB1bmRlciBubyBsaWFiaWxpdHkgdG8gYW55IHBlcnNvbiBpbiByZXNwZWN0IG9mIGFueSBsb3NzIG9yIGRhbWFnZSBob3dldmVyIGFyaXNpbmcoaW5jbHVkaW5nIGNvbnNlcXVlbnRpYWwgbG9zcyBvciBkYW1hZ2UgYW5kIG5lZ2xpZ2VuY2UpIHRoYXQgbWF5IGJlIHN1ZmZlcmVkIG9yIGluY3VycmVkLCBvciB3aGljaCBtYXkgYXJpc2UgZGlyZWN0bHkgb3IgaW5kaXJlY3RseSwgaW4gcmVzcGVjdCBvZiBpbmZvcm1hdGlvbiBvbiB0aGUgcGFnZXMgcHVibGlzaGVkIHdpdGhpbiB0aGlzIHNpdGUgKGluY2x1ZGluZyB0aGUgUEQgT25saW5lIGZhY2lsaXR5IHByb3ZpZGVkKS48L3A+DQo8cD5JbiBhZGRpdGlvbiwgQnVuZGFiZXJnIFJlZ2lvbmFsIENvdW5jaWwgYWNjZXB0cyBubyByZXNwb25zaWJpbGl0eSBmb3IgZW1haWwgb3IgYW55IG90aGVyIGZvcm0gb2YgY29ycmVzcG9uZGVuY2Ugc2VudCB0byBvciBmcm9tIHRoaXMgc2l0ZSB2aWEgdGhlIGludGVybmV0LiBFeGNlcHQgYXMgb3RoZXJ3aXNlIHJlcXVpcmVkIGJ5IGxhdywgdGhlcmUgaXMgbm8gb2JsaWdhdGlvbiB1cG9uIENvdW5jaWwgdG8gcmVhZCwgcmVzcG9uZCBvciB0byBkZWFsIHdpdGggaW4gYW55IHdheSwgYW55IHN1Y2ggdHJhbnNtaXNzaW9ucy4gVXNlcnMgd2hvIGNvbnRhY3QgQ291bmNpbCB2aWEgdGhpcyBtZWRpdW0gZG8gc28gYXQgdGhlaXIgb3duIGxpYWJpbGl0eSBhbmQgd2l0aG91dCBvbnVzIHVwb24gQ291bmNpbC48L3A+DQo8cD5Db3VuY2lsIHJlY29nbmlzZXMgeW91ciBjb25jZXJuIGZvciBzZWN1cml0eSwgYW5kIHdpbGwgdXNlIGFsbCByZWFzb25hYmxlIGVmZm9ydHMgdG8gZXN0YWJsaXNoIHNlY3VyZSBjb25uZWN0aW9ucyB3aXRoIHlvdS48L3A+DQo8cD5Ob3R3aXRoc3RhbmRpbmcgdGhlIGFib3ZlLCBwbGVhc2UgYmUgYXNzdXJlZCB0aGF0IHRoZSBDb3VuY2lsIGhpZ2hseSB2YWx1ZXMgYWxsIGVsZWN0cm9uaWMgY29udGFjdHMgYW5kIHdpbGwgYXR0ZW1wdCB0byBvZmZlciB0aGUgaGlnaGVzdCBsZXZlbHMgb2YgY3VzdG9tZXIgc2VydmljZSBieSB0cmVhdGluZyB0aGVtIGluIGEgc2ltaWxhciBtYW5uZXIgdG8gYWxsIG90aGVyIGZvcm1zIG9mIGNvbnRhY3Qgd2l0aCB0aGUgQ291bmNpbC48L3A+DQo8cD48c3Ryb25nPkluZm9ybWF0aW9uIGFib3V0IERldmVsb3BtZW50IEFwcGxpY2F0aW9uczwvc3Ryb25nPjwvcD4NCjxwPlRoZSBpbmZvcm1hdGlvbiBvbiB0aGlzIHdlYnNpdGUgaXMgcHJvdmlkZWQgdG8gY3VzdG9tZXJzIGZvciB0aGUgcHVycG9zZXMgb2YgZW5xdWlyaW5nIG9uIHZhcmlvdXMgYXNwZWN0cyBvZiBkZXZlbG9wbWVudCBhcHBsaWNhdGlvbnMuIFRoZSBkb2N1bWVudHMgYW5kIGluZm9ybWF0aW9uIG1hZGUgYXZhaWxhYmxlIGZvciB0aGUgZGV2ZWxvcG1lbnQgYXBwbGljYXRpb25zIGlzIGRlZW1lZCB0byBiZSBvcGVuIGFjY2VzcyBpbmZvcm1hdGlvbiB1bmRlciB0aGUgcmVsZXZhbnQgc2VjdGlvbnMgb2YgdGhlIDxlbT5QbGFubmluZyBBY3QgMjAxNjwvZW0+IGhvd2V2ZXIgdGhleSBkbyBub3QgcmVwcmVzZW50IGEgZGV0YWlsZWQgaGlzdG9yeS4gUGVyc29ucyB3aXNoaW5nIHRvIGNvbmZpcm0gaW5mb3JtYXRpb24gaW4gZGV0YWlsIHNob3VsZCBjb250YWN0IENvdW5jaWwgaW4gd3JpdGluZyBpbiBvcmRlciB0byBvYnRhaW4gYSB3cml0dGVuIHJlc3BvbnNlLjwvcD4NCgo8L2Rpdj4KCjxwIGNsYXNzPSJzZWN0aW9uIj4NCjwvYnI+DQo8Yj5JIGhhdmUgcmVhZCBhbmQgdW5kZXJzdG9vZCB0aGUgcHJvdmlzaW9ucyBzZXQgb3V0IGFib3ZlLjwvYj4NCjwvcD4NCjwvYnI+DQoNCg0KPGZvcm0gYWN0aW9uPSIvSG9tZS9EaXNjbGFpbWVyUHJvY2Vzc2luZyIgaWQ9ImRpc2NsYWltZXItZm9ybSIgbWV0aG9kPSJwb3N0Ij48aW5wdXQgaWQ9ImFncmVlZCIgbmFtZT0iYWdyZWVkIiB0eXBlPSJoaWRkZW4iIHZhbHVlPSJGYWxzZSIgLz4gICAgPGRpdiBpZD0iYnRucyI+DQogICAgICAgIDxidXR0b24gaWQ9ImFncmVlIiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIGZvcm09ImRpc2NsYWltZXItZm9ybSI+QWdyZWU8L2J1dHRvbj4NCiAgICAgICAgPGJ1dHRvbiBpZD0iZGlzYWdyZWUiIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4td2FybmluZyIgZm9ybT0iZGlzY2xhaW1lci1mb3JtIj5EaXNhZ3JlZTwvYnV0dG9uPg0KICAgIDwvZGl2Pg0KPC9mb3JtPg0KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KDQogICAgdmFyIGxhc3RTY3JvbGxUb3A7DQogICAgdmFyIG1heFNjcm9sbGFibGVDb250ZW50SGVpZ2h0Ow0KDQogICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkgew0KDQogICAgICAgIHVwZGF0ZUxlZnRNYXJnaW4oKTsNCiAgICAgICAgYXR0YWNoQ2xpY2tIYW5kbGVycygpOw0KDQogICAgICAgIGlmIChpc1RleHRCbG9ja092ZXJmbG93aW5nKCkpIHsNCiAgICAgICAgICAgIGxhc3RTY3JvbGxUb3AgPSAwOzsNCiAgICAgICAgICAgIHZhciB3aW5kb3dIZWlnaHQgPSAkKHdpbmRvdykuaGVpZ2h0KCk7DQoNCiAgICAgICAgICAgIHZhciBoZWFkZXJIZWlnaHQgPSAkKCcjc2Nyb2xsYWJsZUNvbnRlbnQnKS5vZmZzZXQoKS50b3A7DQogICAgICAgICAgICB2YXIgbmV3SGVpZ2h0ID0gZ2V0TmV3SGVpZ2h0KCk7DQoNCiAgICAgICAgICAgIGFkanVzdERpc2NsYWltZXJDb250ZW50Rm9yRG93blNjcm9sbChuZXdIZWlnaHQpOw0KDQogICAgICAgICAgICAkKHdpbmRvdykuc2Nyb2xsKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICB2YXIgbkhlaWdodCA9ICQod2luZG93KS5oZWlnaHQoKSAtIChoZWFkZXJIZWlnaHQgLSAkKHdpbmRvdykuc2Nyb2xsVG9wKCkgKyAkKCdmb3JtJykuaGVpZ2h0KCkgKyAxMDApOw0KDQogICAgICAgICAgICAgICAgdmFyIGJJc0Rvd25TY3JvbGwgPSBpc1Njcm9sbERvd24oKTsNCg0KICAgICAgICAgICAgICAgIGlmIChiSXNEb3duU2Nyb2xsKQ0KICAgICAgICAgICAgICAgICAgICBhZGp1c3REaXNjbGFpbWVyQ29udGVudEZvckRvd25TY3JvbGwobkhlaWdodCk7DQogICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgICAgICBhZGp1c3REaXNjbGFpbWVyQ29udGVudEZvclVwU2Nyb2xsKG5IZWlnaHQpOw0KICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIGdldE5ld0hlaWdodCgpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gJCh3aW5kb3cpLmhlaWdodCgpIC0gKGhlYWRlckhlaWdodCArICQod2luZG93KS5zY3JvbGxUb3AoKSArICQoJ2Zvcm0nKS5oZWlnaHQoKSArIDEwMCk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIGlzU2Nyb2xsRG93bigpIHsNCiAgICAgICAgICAgICAgICB2YXIgc3QgPSAkKHdpbmRvdykuc2Nyb2xsVG9wKCk7DQogICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHN0ID49IGxhc3RTY3JvbGxUb3A7CQkgIC8vIGRvd25zY3JvbGwNCg0KICAgICAgICAgICAgICAgIGxhc3RTY3JvbGxUb3AgPSBzdDsNCiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0Ow0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBmdW5jdGlvbiBoYXNTY3JvbGxCYXIoaXRlbSkgew0KICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLmdldCgwKS5zY3JvbGxIZWlnaHQgPiBpdGVtLmdldCgwKS5jbGllbnRIZWlnaHQ7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIGFkanVzdERpc2NsYWltZXJDb250ZW50Rm9yRG93blNjcm9sbChuSGVpZ2h0KSB7DQogICAgICAgICAgICAgICAgdmFyIGlzU2Nyb2xsYWJsZSA9IGhhc1Njcm9sbEJhcigkKCcjc2Nyb2xsYWJsZUNvbnRlbnQnKSk7DQogICAgICAgICAgICAgICAgaWYgKGlzU2Nyb2xsYWJsZSkgew0KICAgICAgICAgICAgICAgICAgICAkKCcjc2Nyb2xsYWJsZUNvbnRlbnQnKS5oZWlnaHQobkhlaWdodCk7DQogICAgICAgICAgICAgICAgICAgIG1heFNjcm9sbGFibGVDb250ZW50SGVpZ2h0ID0gbkhlaWdodDsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIGFkanVzdERpc2NsYWltZXJDb250ZW50Rm9yVXBTY3JvbGwobkhlaWdodCkgew0KICAgICAgICAgICAgICAgIHZhciBpc1Njcm9sbGFibGUgPSBoYXNTY3JvbGxCYXIoJCgnI3Njcm9sbGFibGVDb250ZW50JykpOw0KDQogICAgICAgICAgICAgICAgaWYgKG1heFNjcm9sbGFibGVDb250ZW50SGVpZ2h0ID4gbkhlaWdodCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICQoJyNzY3JvbGxhYmxlQ29udGVudCcpLmhlaWdodChuSGVpZ2h0KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9KTsNCg0KDQogICAgZnVuY3Rpb24gdXBkYXRlTGVmdE1hcmdpbigpIHsNCiAgICAgICAgaWYgKCQoJyNzaWRlLW1lbnUnKS5odG1sKCkpIHsNCiAgICAgICAgICAgICQoJyNwYWdlLXdyYXBwZXInKS5jc3MoeyAnbWFyZ2luLWxlZnQnOiAnMCcgfSk7DQogICAgICAgICAgICAkKCcuc2lkZWJhcicpLmhpZGUoKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KDQogICAgZnVuY3Rpb24gYXR0YWNoQ2xpY2tIYW5kbGVycygpIHsNCiAgICAgICAgJCgnI2FncmVlJykuY2xpY2soZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgJCgnI2FncmVlZCcpLnZhbCgidHJ1ZSIpOw0KICAgICAgICAgICAgJCgnI2Rpc2NsYWltZXItZm9ybScpLnN1Ym1pdCgpOw0KICAgICAgICB9KTsNCg0KICAgICAgICAkKCcjZGlzYWdyZWUnKS5jbGljayhmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAkKCcjYWdyZWVkJykudmFsKCJmYWxzZSIpOw0KICAgICAgICAgICAgJCgnI2Rpc2NsYWltZXItZm9ybScpLnN1Ym1pdCgpOw0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBpc1RleHRCbG9ja092ZXJmbG93aW5nKCkgew0KICAgICAgICByZXR1cm4gJCgiI3Njcm9sbGFibGVDb250ZW50IikucHJvcCgnc2Nyb2xsSGVpZ2h0JykgPiAkKCIjc2Nyb2xsYWJsZUNvbnRlbnQiKS5oZWlnaHQoKTsNCiAgICB9DQo8L3NjcmlwdD4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwhLS0gLy5jb250YWluZXItZmx1aWQgLS0+DQoNCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8jcGFnZS13cmFwcGVyIC0tPg0KICAgICAgICAgICAgPC9kaXY+DQoNCg0KICAgICAgICAgICAgPGRpdiBpZD0iR3JlZW5CYXIiPg0KICAgICAgICAgICAgICAgIDxhPkNvcHlyaWdodCDCqSAyMDE3IEJ1bmRhYmVyZyBSZWdpb25hbCBDb3VuY2lsLiBBbGwgcmlnaHRzIHJlc2VydmVkPC9hPg0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KDQogICAgPGRpdiBpZD0idGlwdGlwX2hvbGRlciIgc3R5bGU9Im1heC13aWR0aDozMDBweDsiPjxkaXYgaWQ9InRpcHRpcF9hcnJvdyI+PGRpdiBpZD0idGlwdGlwX2Fycm93X2lubmVyIj48L2Rpdj48L2Rpdj48ZGl2IGlkPSJ0aXB0aXBfY29udGVudCI+PC9kaXY+PC9kaXY+DQo8L2JvZHk+DQoNCjwvaHRtbD4NCg==
  recorded_at: Mon, 21 Apr 2025 18:15:52 GMT
- request:
    method: post
    uri: https://da.bundaberg.qld.gov.au/Home/DisclaimerProcessing
    body:
      encoding: UTF-8
      string: agreed=true
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=okxmedroodbxmiq2535ybhzy
      Host:
      - da.bundaberg.qld.gov.au
      Referer:
      - https://da.bundaberg.qld.gov.au/Home/Disclaimer
      Content-Type:
      - application/x-www-form-urlencoded
      Content-Length:
      - '11'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '170'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Location:
      - "/Application/ApplicationDetails/526.2019.00000120.001"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      Set-Cookie:
      - User=accessAllowed-MasterView=True; path=/
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:15:52 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 d08aced3ea9ffc42c07c5c254e926758.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - MEL52-P2
      X-Amz-Cf-Id:
      - I5KrNDjOQlJRH_bmfdL9X9fXjSCnaOpljCLQbp6F12ol4Y9xwVCg4g==
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Application/ApplicationDetails/526.2019.00000120.001\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:15:52 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/526.2019.00000120.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=okxmedroodbxmiq2535ybhzy; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Referer:
      - https://da.bundaberg.qld.gov.au/Home/Disclaimer
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '29955'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:15:54 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 53901e6729641ea30978097c90bc28fa.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - MEL52-P2
      X-Amz-Cf-Id:
      - _K0sbIVIy37n5T6orWDdiPlNelIjdxGyG-MmQQOkeQtezxi1SDgJAg==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQo8aHRtbCBsYW5nPSJlbiI+DQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+DQogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4NCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPg0KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIj4NCiAgICA8bWV0YSBuYW1lPSJrZXl3b3JkcyIgY29udGVudD0iQnVuZGFiZXJnIFJlZ2lvbmFsIENvdW5jaWwsREEgVHJhY2tlcixEZXZlbG9wbWVudCBBcHBsaWNhdGlvbixEZXZlbG9wbWVudCBBcHBsaWNhdGlvbiBUcmFja2luZywgREEgRW5xdWlyeSwgRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24gRW5xdWlyeSwgQXBwbGljYXRpb24gVHJhY2tlciI+DQogICAgPG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iIGNvbnRlbnQ9IlRoZSBvZmZpY2lhbCBCdW5kYWJlcmcgUmVnaW9uYWwgQ291bmNpbCBBcHBsaWNhdGlvbiBUcmFja2VyIj4NCg0KICAgIDx0aXRsZT5CdW5kYWJlcmcgUmVnaW9uYWwgQ291bmNpbCAtIEFwcGxpY2F0aW9uIFRyYWNrZXI8L3RpdGxlPg0KDQogICAgPCEtLWZhdmljb24tLT4NCiAgICA8bGluayBocmVmPSIvZmF2aWNvbi5pY28iIHJlbD0ic2hvcnRjdXQgaWNvbiIgdHlwZT0iaW1hZ2UveC1pY29uIj4NCg0KICAgIDwhLS0galF1ZXJ5IC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvYnVuZGxlcy9qcXVlcnk/dj1OOVgzMW9qMjRsbGkxdVZGcFg2dWowTTJXZE43R2RnTWpudllFVW9JeDdzMSI+PC9zY3JpcHQ+DQoNCiAgICA8c2NyaXB0IHNyYz0iL2J1bmRsZXMvanF1ZXJ5dWk/dj1tbTN2MlBwR1VrRFVyaUU2YnpKdVRscWJfdFZqbVdFR2o0aTRnU0o3aXBVMSI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC90aGVtZXMvYmFzZS9qcXVlcnk/dj1yY0F2OENjR2tGcnZaWlpxTzZJaHBYb0hQa05FQ2k1SVBHLUhCRjFCYjEwMSIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDwhLS0gQm9vdHN0cmFwIC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvYnVuZGxlcy9ib290c3RyYXA/dj13TUZCSUlaNk9zVUNlMXFPU2xSTlNfNmhHQkpnZkNFMDVWaDFHekNwcFlvMSI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9ib290c3RyYXA/dj1tS3NvR3lsTHpnOFhBOW5RaDV2dkJtMHV2Vi1LOHBiNVhUcmFEQ3M0a2JNMSIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9mb250LWF3ZXNvbWU/dj1ERU5YTmNRV0NVcVhMV213NGo1VUxQUFRwd2dXZ1E4RGo5YlFCRHFDNmFnMSIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDwhLS0gRGF0YVRhYmxlcyAtLT4NCiAgICA8c2NyaXB0IHNyYz0iL2J1bmRsZXMvZGF0YVRhYmxlcz92PVVIWUR4TzhWVmgyUmdDbWlWVU0tM0NpdmJfUTJjR2NieE1TVXhnRnViWEExIj48L3NjcmlwdD4NCg0KICAgIA0KICAgIDxsaW5rIGhyZWY9Ii9Db250ZW50L0RhdGFUYWJsZXMvY3NzP3Y9ZWtvMElPbWhlN2Myd0E0WVlGNURMX0NuRzR3b2k2ZTRYa0gzSHl4M1luZzEiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQoNCiAgICA8IS0tIEJvb3RzdHJhcCBTQi1BZG1pbi0yIFBsdWdpbiBhbmQgb3RoZXIgY3NzIGFuZCBqcyBmaWxlcy0tPg0KICAgIDxzY3JpcHQgc3JjPSIvanMvanNGb2xkZXI/dj0xZmh3ajFpb2NHMjg5bW5GQVMtYU9Dd3hRdWVFQTJCYW5qb3pHb2JFMzNvMSI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvY3NzL2Nzc0ZvbGRlcj92PXl2aC1XNHl6ODg3QkF3NTJIZFoyWFlodkdmN3RWdmY1eG9jTkkteG1NYzQxIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPGxpbmsgaHJlZj0iL0NvdW5jaWxfVGhlbWUvY3NzP3Y9NzltRkVGY2lyalUyUlc1bXJOQUREU3NkaEl4bk9FYmJnOExGelVHUDRZczEiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQogICAgPHNjcmlwdCBzcmM9Ii9Db3VuY2lsX1RoZW1lL2pzP3Y9Ij48L3NjcmlwdD4NCg0KDQogICAgPCEtLSBIVE1MNSBTaGltIGFuZCBSZXNwb25kLmpzIElFOCBzdXBwb3J0IG9mIEhUTUw1IGVsZW1lbnRzIGFuZCBtZWRpYSBxdWVyaWVzIC0tPg0KICAgIDwhLS0gV0FSTklORzogUmVzcG9uZC5qcyBkb2Vzbid0IHdvcmsgaWYgeW91IHZpZXcgdGhlIHBhZ2UgdmlhIGZpbGU6Ly8gLS0+DQogICAgPCEtLVtpZiBsdCBJRSA5XT4NCiAgICAgICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vb3NzLm1heGNkbi5jb20vbGlicy9odG1sNXNoaXYvMy43LjAvaHRtbDVzaGl2LmpzIj48L3NjcmlwdD4NCiAgICAgICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vb3NzLm1heGNkbi5jb20vbGlicy9yZXNwb25kLmpzLzEuNC4yL3Jlc3BvbmQubWluLmpzIj48L3NjcmlwdD4NCiAgICA8IVtlbmRpZl0tLT4NCjwvaGVhZD4NCg0KDQoNCjxib2R5Pg0KICAgIDxkaXYgY2xhc3M9InB1c2htZW51IGNicC1zcG1lbnUtcHVzaCI+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+DQogICAgICAgICAgICA8aGVhZGVyIGlkPSJIZWFkZXIiPg0KICAgICAgICAgICAgICAgIDxuYXYgY2xhc3M9Im5hdmJhciBuYXZiYXItZGVmYXVsdCIgcm9sZT0ibmF2aWdhdGlvbiIgaWQ9Ik5hdkJhciI+DQogICAgICAgICAgICAgICAgICAgIDwhLS0gQnJhbmQgYW5kIHRvZ2dsZSBnZXQgZ3JvdXBlZCBmb3IgYmV0dGVyIG1vYmlsZSBkaXNwbGF5IC0tPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InV0aWxzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vd3d3LmJ1bmRhYmVyZy5xbGQuZ292LmF1IiB0YXJnZXQ9Il9ibGFuayI+SG9tZTwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly93d3cuYnVuZGFiZXJnLnFsZC5nb3YuYXUvY291bmNpbC9jdXN0b21lci1zZXJ2aWNlIiB0YXJnZXQ9Il9ibGFuayI+Q29udGFjdCBVczwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly93d3cuYnVuZGFiZXJnLnFsZC5nb3YuYXUvcHJpdmFjeSIgdGFyZ2V0PSJfYmxhbmsiPlByaXZhY3kgUG9saWN5PC9hPjwvbGk+DQo8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8aDEgaWQ9ImxvZ28iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmJ1bmRhYmVyZy5xbGQuZ292LmF1Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9Db3VuY2lsX1RoZW1lL0J1bmRhYmVyZy9icmMtbG9nby5wbmciIGFsdD0iQnVuZGFiZXJnIFJlZ2lvbmFsIENvdW5jaWwiPjxzdHJvbmcgY2xhc3M9InZoIj5CdW5kYWJlcmcgUmVnaW9uYWwgQ291bmNpbDwvc3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDE+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvbmF2Pg0KDQoNCiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJiYW5uZXIiPg0KICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL0NvdW5jaWxfVGhlbWUvQnVuZGFiZXJnL2Jhbm5lci5qcGciPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8L2hlYWRlcj4NCg0KICAgICAgICAgICAgPGRpdiBpZD0iY29udGVudCI+DQogICAgICAgICAgICAgICAgPCEtLSBOYXZpZ2F0aW9uIC0tPg0KICAgICAgICAgICAgICAgIDxuYXYgY2xhc3M9Im5hdmJhciBuYXZiYXItZGVmYXVsdCBuYXZiYXItc3RhdGljLXRvcCIgcm9sZT0ibmF2aWdhdGlvbiIgc3R5bGU9Im1hcmdpbi1ib3R0b206IDAiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0ibmF2YmFyLXRvZ2dsZSIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLXRhcmdldD0iLm5hdmJhci1jb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPlRvZ2dsZSBuYXZpZ2F0aW9uPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2YmFyLWJyYW5kIiBocmVmPSIvSG9tZS9JbmRleCI+PC9hPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdmJhci1oZWFkZXIgLS0+DQogICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdmJhci10b3AtbGlua3MgbmF2YmFyLXJpZ2h0IGhpZGRlbi14cyBoaWRkZW4tc20gaGlkZGVuLW1kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48c3BhbiBpZD0icHJpbnRJY29uIiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1wcmludCIgb25jbGljaz0id2luZG93LnByaW50KCk7Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgPC91bD4NCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItZGVmYXVsdCBzaWRlYmFyIiByb2xlPSJuYXZpZ2F0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNpZGViYXItbmF2IG5hdmJhci1jb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYiIGlkPSJzaWRlLW1lbnUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbiBUcmFja2VyPHNwYW4gY2xhc3M9ImZhIGFycm93Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXYtc2Vjb25kLWxldmVsIGNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0hvbWUvQWJvdXQgdGFyZ2V0PV9zZWxmPldoYXQgaXMgQXBwbGljYXRpb24gVHJhY2tlcj88L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0hvbWUvRGlzY2xhaW1lciB0YXJnZXQ9X3NlbGY+RGlzY2xhaW1lcjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbnM8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdi1zZWNvbmQtbGV2ZWwgY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9JbmRleCB0YXJnZXQ9PkFwcGxpY2F0aW9uIFRyYWNrZXIgSG9tZTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9TZWFyY2ggaWQ9c2VhcmNoIHRhcmdldD1fc2VsZj5TZWFyY2g8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P1JlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9VHJ1ZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgaWQ9b3V0c3RhbmRpbmctYXBwcyB0YXJnZXQ9X3NlbGY+VW5kZXRlcm1pbmVkIEFwcGxpY2F0aW9uczwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/UmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPVRydWUmSW5jbHVkZURvY3VtZW50cz1GYWxzZSBpZD1leGhpYml0ZWQtYXBwcyB0YXJnZXQ9X3NlbGY+QXBwbGljYXRpb25zIE9uIEV4aGliaXRpb248L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdi1zZWNvbmQtbGV2ZWwgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjdGl2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJmYSBmYS1saXN0LXVsIGZhLWZ3Ij48L2k+QXBwbGljYXRpb25zIFN1Ym1pdHRlZDxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0yMSUyZjA0JTJmMjAyNSZEYXRlVG89MjIlMmYwNCUyZjIwMjUmRGF0ZVR5cGU9MSZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTEzJTJmMDQlMmYyMDI1JkRhdGVUbz0xOSUyZjA0JTJmMjAyNSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgV2VlazwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MSUyZjA0JTJmMjAyNSZEYXRlVG89MjIlMmYwNCUyZjIwMjUmRGF0ZVR5cGU9MSZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIE1vbnRoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDMlMmYyMDI1JkRhdGVUbz0zMSUyZjAzJTJmMjAyNSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgTW9udGg8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdi1zZWNvbmQtbGV2ZWwgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjdGl2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJmYSBmYS1saXN0LXVsIGZhLWZ3Ij48L2k+QXBwbGljYXRpb25zIERldGVybWluZWQ8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdi1zZWNvbmQtbGV2ZWwgY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MjElMmYwNCUyZjIwMjUmRGF0ZVRvPTIyJTJmMDQlMmYyMDI1JkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTEzJTJmMDQlMmYyMDI1JkRhdGVUbz0xOSUyZjA0JTJmMjAyNSZEYXRlVHlwZT0yJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1UcnVlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBXZWVrPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDQlMmYyMDI1JkRhdGVUbz0yMiUyZjA0JTJmMjAyNSZEYXRlVHlwZT0yJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1UcnVlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+VGhpcyBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MSUyZjAzJTJmMjAyNSZEYXRlVG89MzElMmYwMyUyZjIwMjUmRGF0ZVR5cGU9MiZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9VHJ1ZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgTW9udGg8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdi1zZWNvbmQtbGV2ZWwgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gLy5zaWRlYmFyLWNvbGxhcHNlIC0tPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdmJhci1zdGF0aWMtc2lkZSAtLT4NCiAgICAgICAgICAgICAgICA8L25hdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJwYWdlLXdyYXBwZXIiPg0KDQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIA0KDQoNCiAgICA8ZGl2IGNsYXNzPSJwYWdlLWhlYWRlciI+DQogICAgICAgIDxoMj5BcHBsaWNhdGlvbjogQ2hhbmdlIEFwcGxpY2F0aW9uICg1MjYuMjAxOS4xMjAuMSk8L2gyPg0KICAgIDwvZGl2Pg0KICAgIDxoND5EZXRhaWxlZCBpbmZvcm1hdGlvbiByZWxhdGVkIHRvIHRoZSBhcHBsaWNhdGlvbjo8L2g0Pg0KICAgIDxiciAvPg0KICAgIDxkaXY+DQogICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6c2hvd0FsbCgpOyI+U2hvdyBBbGw8L2E+IC8NCiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDpoaWRlQWxsKCk7Ij5IaWRlIEFsbDwvYT4NCiAgICA8L2Rpdj4NCiAgICA8ZGl2IGlkPSJhcHBsaWNhdGlvbiI+DQoNCiAgICAgICAgICAgIDxoMyBpZD0iZGV0YWlscyI+PGEgaHJlZj0iIyI+RGV0YWlsczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+RGVzY3JpcHRpb246IDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJkZXNjcmlwdGlvbiI+TWlub3IgQ2hhbmdlIC0gQWVyb3NwYWNlIFByZWNpbmN0PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlN1Ym1pdHRlZCBEYXRlOiA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjE1LzA0LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFwcGxpY2F0aW9uIFR5cGU6IDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkNoYW5nZSBBcHBsaWNhdGlvbjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJwcm9wZXJ0aWVzIj48YSBocmVmPSIjIj5Qcm9wZXJ0aWVzPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBpZD0icHJvcGVydHktbGlzdCI+MTAgQWlycG9ydCBEciwgS2Vuc2luZ3RvbiA0NjcwIFFMRCAgKExvdDogMyBTUDogMzMyMDYyKTxici8+MTAgQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAgKExvdDogMjAgU1A6IDMzMjA2Mik8YnIvPjExIEF2aWF0aW9uIENyZXMsIEtlbnNpbmd0b24gNDY3MCBRTEQgIChMb3Q6IDExIFNQOiAzMzIwNjIpPGJyLz4xMiBBaXJwb3J0IERyLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICAoTG90OiA0IFNQOiAzMzIwNjIpPGJyLz4xMiBBdmlhdGlvbiBDcmVzLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICAoTG90OiAyMSBTUDogMzMyMDYyKTxici8+MTMgQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAgKExvdDogMTAgU1A6IDMzMjA2Mik8YnIvPjE0IEFpcnBvcnQgRHIsIEtlbnNpbmd0b24gNDY3MCBRTEQgIChMb3Q6IDUgU1A6IDMzMjA2Mik8YnIvPjE0IEF2aWF0aW9uIENyZXMsIEtlbnNpbmd0b24gNDY3MCBRTEQgIChMb3Q6IDIyIFNQOiAzMzIwNjIpPGJyLz4xNSBBdmlhdGlvbiBDcmVzLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICAoTG90OiA5IFNQOiAzMTE2MDgpPGJyLz4xNiBBaXJwb3J0IERyLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICAoTG90OiA2IFNQOiAzMzIwNjIpPGJyLz4xNiBBdmlhdGlvbiBDcmVzLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICAoTG90OiAyMyBTUDogMzMyMDYyKTxici8+MTcgQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAgKExvdDogOCBTUDogMzExNjA4KTxici8+MTggQWlycG9ydCBEciwgS2Vuc2luZ3RvbiA0NjcwIFFMRCAgKExvdDogNyBTUDogMzMyMDYyKTxici8+MTggQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAgKExvdDogMjUgU1A6IDMzMjA2Mik8YnIvPjIwIEF2aWF0aW9uIENyZXMsIEtlbnNpbmd0b24gNDY3MCBRTEQgIChMb3Q6IDI2IFNQOiAzMTE2MDgpPGJyLz4yMiBBaXJwb3J0IERyLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICAoTG90OiA4IFNQOiAzMTE2MDgpPGJyLz4yNCBBdmlhdGlvbiBDcmVzLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICAoTG90OiAyOCBTUDogMzExNjA4KTxici8+MjYgQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAgKExvdDogMjkgU1A6IDMxMTYwOCk8YnIvPjI4IEF2aWF0aW9uIENyZXMsIEtlbnNpbmd0b24gNDY3MCBRTEQgIChMb3Q6IDMwIFNQOiAzMTE2MDgpPGJyLz4zIEF2aWF0aW9uIENyZXMsIEtlbnNpbmd0b24gNDY3MCBRTEQgIChMb3Q6IDE1IFNQOiAzMzIwNjIpPGJyLz41IEF2aWF0aW9uIENyZXMsIEtlbnNpbmd0b24gNDY3MCBRTEQgIChMb3Q6IDE0IFNQOiAzMzIwNjIpPGJyLz42IEFpcnBvcnQgRHIsIEtlbnNpbmd0b24gNDY3MCBRTEQgIChMb3Q6IDEgU1A6IDMzMjA2Mik8YnIvPjYgQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAgKExvdDogMTggU1A6IDMzMjA2Mik8YnIvPjcgQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAgKExvdDogMTMgU1A6IDMzMjA2Mik8YnIvPjggQWlycG9ydCBEciwgS2Vuc2luZ3RvbiA0NjcwIFFMRCAgKExvdDogMiBTUDogMzMyMDYyKTxici8+OCBBaXJwb3J0IERyLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICAoTG90OiAyIFNQOiAzNTI4NjcpPGJyLz44IEF2aWF0aW9uIENyZXMsIEtlbnNpbmd0b24gNDY3MCBRTEQgIChMb3Q6IDE5IFNQOiAzMzIwNjIpPGJyLz45IEF2aWF0aW9uIENyZXMsIEtlbnNpbmd0b24gNDY3MCBRTEQgIChMb3Q6IDEyIFNQOiAzMzIwNjIpPGJyLz5BaXJwb3J0IERyLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICAoTG90OiAzNiBTUDogMjgzOTc4KTxici8+QWlycG9ydCBEciwgS2Vuc2luZ3RvbiA0NjcwIFFMRCAgKExvdDogNDAgU1A6IDMxMTYwOCk8YnIvPkF2aWF0aW9uIENyZXMsIEtlbnNpbmd0b24gNDY3MCBRTEQgIChMb3Q6IDQxIFNQOiAzMTE2MDgpPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9InBlb3BsZSI+PGEgaHJlZj0iIyI+UGVvcGxlPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXBwbGljYW50OiANCkJ1bmRhYmVyZyBSZWdpb25hbCBDb3VuY2lsJm5ic3A7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0ib2ZmaWNlciI+PGEgaHJlZj0iIyI+T2ZmaWNlcjwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9Im9mZmljZXJOYW1lIj5TYXJhaCBMYXdsZXk8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0iZGVjaXNpb24iPjxhIGhyZWY9IiMiPkRlY2lzaW9uPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5BcHBsaWNhdGlvbiBTdGF0dXM6IERldGVybWluZWQ8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERldGVybWluYXRpb24gRGF0ZToNCjE3LzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+RGV0ZXJtaW5hdGlvbiBUeXBlOiBBcHByb3ZlZDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KDQogICAgICAgICAgICA8aDMgaWQ9InRyYWNraW5nIj48YSBocmVmPSIjIj5UcmFja2luZzwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaWNvbi13cmFwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPnN3aXBlIHRhYmxlIHRvIHRoZSBsZWZ0IHRvIHJldmVhbCBtb3JlIGRhdGE8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1hcnJvdy1yaWdodCIgYXJpYS1oaWRkZW49InRydWUiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtc3RyaXBlZCB0YWJsZS1ib3JkZXJlZCBuby1mb290ZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkRlc2NyaXB0aW9uPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkNvbW1lbmNlZCBEYXRlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkNvbXBsZXRlZCBEYXRlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkxvZGdlbWVudDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoxNS8wNC8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMTYvMDQvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5EZWNpc2lvbiBTdGFnZTwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoxNi8wNC8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMTcvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5EZWNpc2lvbiBOb3RpY2U8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMTcvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjIwLzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQoNCg0KDQoNCiAgICAgICAgICAgIDxoMyBpZD0icmVsYXRlZEFwcGxpY2F0aW9ucyI+PGEgaHJlZj0iIyI+UmVsYXRlZCBBcHBsaWNhdGlvbnM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgIDxiPk5vIGRhdGEuPC9iPg0KICAgICAgICAgICAgPC9kaXY+DQoNCg0KDQoNCg0KDQoNCjxoMyBpZD0iZG9jdW1lbnRzIj48YSBocmVmPSIjIj5Eb2N1bWVudHM8L2E+PC9oMz4NCjxkaXY+DQoNCiAgICAgICAgPGRpdiBjbGFzcz0iaWNvbi13cmFwIj4NCiAgICAgICAgICAgIDxzcGFuPnN3aXBlIHRhYmxlIHRvIHRoZSBsZWZ0IHRvIHJldmVhbCBtb3JlIGRhdGE8L3NwYW4+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1hcnJvdy1yaWdodCIgYXJpYS1oaWRkZW49InRydWUiPjwvc3Bhbj4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgaWQ9ImRvYy1jb3VudCI+VG90YWwgbnVtYmVyIG9mIGRvY3VtZW50czogMjwvZGl2Pg0KICAgICAgICA8dGFibGUgaWQ9ImRvYy10YWJsZSIgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtYm9yZGVyZWQgbm8tZm9vdGVyIj4NCiAgICAgICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0aD5SZWNvcmQgTnVtYmVyPC90aD4NCiAgICAgICAgICAgICAgICAgICAgPHRoPkRlc2NyaXB0aW9uPC90aD4NCiAgICAgICAgICAgICAgICAgICAgPHRoPkRvY3VtZW50IFR5cGU8L3RoPg0KICAgICAgICAgICAgICAgICAgICA8dGggc3R5bGU9ImRpc3BsYXk6bm9uZSI+U2l6ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgIDx0aD5WaWV3IExpbms8L3RoPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICA8L3RoZWFkPg0KICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KMSAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjEyMCAtIFByb3Bvc2FsIChBbWVuZGVkKSAtIEJSQyAtIEFpcnBvcnQgRHJpdmUgLSAxNjA0MjAxOS5wZGY8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICBQREYNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkIHN0eWxlPSJkaXNwbGF5Om5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAuMDAgTUINCg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+PGEgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgcm9sZT0iYnV0dG9uIiBocmVmPSJodHRwczovL2RhLmJ1bmRhYmVyZy5xbGQuZ292LmF1L0RvY3VtZW50L0Rvd25sb2FkP2tleT1ETHJvUGJzS0xqT05XdmsxbnZiWDV2LzJHRzhGQXpFcUpyOVE4b0pyU1k4dmltQUVNVE5KTzlJaXR6ck9KaTQ3K2U4cDBQK2hYRzhmUjM1QmNwMHJaQmRFQnZuTUlwelQmYW1wO2ZpbGVOYW1lPTEyMCstK1Byb3Bvc2FsKyhBbWVuZGVkKSstK0JSQystK0FpcnBvcnQrRHJpdmUrLSsxNjA0MjAxOS5wZGYucGRmIiB0YXJnZXQ9Il9ibGFuayI+VmlldzwvYT48L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+MTIwIC0gU2lnbmVkIERlY2lzaW9uIE5vdGljZSBQYWNrYWdlIC0gQ2hhbmdlIEFwcGxpY2F0aW9uIC0gQlJDIC0gQWlycG9ydCBEcml2ZSwgS2Vuc2luZ3RvbiAtIDE3MDUyMDE5LnBkZjwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIFBERg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQgc3R5bGU9ImRpc3BsYXk6bm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgMC4wMCBNQg0KDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD48YSBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiByb2xlPSJidXR0b24iIGhyZWY9Imh0dHBzOi8vZGEuYnVuZGFiZXJnLnFsZC5nb3YuYXUvRG9jdW1lbnQvRG93bmxvYWQ/a2V5PTZaN21JYnh2N3VBVis4RVZIMHJPRG9MKzhnTFhIZU5SQ2FPSDh0VjU4L0NMaTYrQlU4Y0I4NmhkYjloMUNHNzlBRTk3cm90OGdUNjFOSmJjVFZNQW9FMEpVclczM1UxQzliTUh4eTN6UkQ4VmIvcmg2cWV6NVB5WlphaXFpcmJrSWNPdkpPR09yN2hPRUxHRzYvdGl6d2g4aDloZHF3VmkmYW1wO2ZpbGVOYW1lPTEyMCstK1NpZ25lZCtEZWNpc2lvbitOb3RpY2UrUGFja2FnZSstK0NoYW5nZStBcHBsaWNhdGlvbistK0JSQystK0FpcnBvcnQrRHJpdmUlMmMrS2Vuc2luZ3RvbistKzE3MDUyMDE5LnBkZi5wZGYiIHRhcmdldD0iX2JsYW5rIj5WaWV3PC9hPjwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCg0KICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgPC90YWJsZT4NCjwvZGl2Pg0KDQoNCiAgICAgICAgICAgIDxoMyBpZD0iY29udGFjdFVzIj48YSBocmVmPSIjIj5Db250YWN0IFVzPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5TaG91bGQgeW91IHdpc2ggdG8gY29udGFjdCBjb3VuY2lsIHRvIG1ha2UgZW5xdWlyaWVzIHJlZ2FyZGluZyBhcHBsaWNhdGlvbnMgZGlzcGxheWVkIG9uIHRoZSB3ZWJzaXRlLCBwbGVhc2UgY29udGFjdCBjb3VuY2lsIGVpdGhlciBieSBlbWFpbCA8YSBocmVmPSJtYWlsdG86Q0VPQGJ1bmRhYmVyZy5xbGQuZ292LmF1P3N1YmplY3Q9U3VibWlzc2lvbiBmb3IgYXBwbGljYXRpb24gKDUyNi4yMDE5LjEyMC4xKSI+Q0VPQGJ1bmRhYmVyZy5xbGQuZ292LmF1PC9hPiwgcGhvbmUgMTMwMCA4ODMgNjk5IGR1cmluZyBub3JtYWwgb2ZmaWNlIGhvdXJzIG9yIGluIHdyaXRpbmcgdG8gUE8gQm94IDMxMzAsQlVOREFCRVJHIFFMRCA0NjcwDQogICAgICAgIC4gQWxsIGNvcnJlc3BvbmRlbmNlIHNob3VsZCBiZSBhZGRyZXNzZWQgdG8gdGhlIEdlbmVyYWwgTWFuYWdlciBhbmQgcXVvdGUgdGhlIHJlbGV2YW50IGFwcGxpY2F0aW9uIHJlZmVyZW5jZSBudW1iZXIuDQo8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCg0KPGgzIGlkPSJnb29nbGVtYXBzIj48YSBocmVmPSIjIj5Hb29nbGUgTWFwczwvYT48L2gzPg0KPGRpdiBpZD0ibWFwX2NvbnRhaW5lciI+DQogICAgPGRpdiBpZD0ibWFwX2NhbnZhcyIgY2xhc3M9ImlmcmFtZS1yd2QiPg0KICAgIDwvZGl2Pg0KPC9kaXY+DQoNCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCg0KICAgIHdpbmRvdy5vbmxvYWQgPSBsb2FkR29vZ2xlTWFwc1NjcmlwdDsNCg0KICAgIHZhciBnZW9jb2RlcjsNCiAgICB2YXIgbWFwOw0KICAgIHZhciB0aW1lb3V0ID0gMzAwOw0KICAgIHZhciBwcm9wZXJ0aWVzID0gWyIxMCBBaXJwb3J0IERyLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICIsIjEwIEF2aWF0aW9uIENyZXMsIEtlbnNpbmd0b24gNDY3MCBRTEQgIiwiMTEgQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAiLCIxMiBBaXJwb3J0IERyLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICIsIjEyIEF2aWF0aW9uIENyZXMsIEtlbnNpbmd0b24gNDY3MCBRTEQgIiwiMTMgQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAiLCIxNCBBaXJwb3J0IERyLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICIsIjE0IEF2aWF0aW9uIENyZXMsIEtlbnNpbmd0b24gNDY3MCBRTEQgIiwiMTUgQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAiLCIxNiBBaXJwb3J0IERyLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICIsIjE2IEF2aWF0aW9uIENyZXMsIEtlbnNpbmd0b24gNDY3MCBRTEQgIiwiMTcgQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAiLCIxOCBBaXJwb3J0IERyLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICIsIjE4IEF2aWF0aW9uIENyZXMsIEtlbnNpbmd0b24gNDY3MCBRTEQgIiwiMjAgQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAiLCIyMiBBaXJwb3J0IERyLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICIsIjI0IEF2aWF0aW9uIENyZXMsIEtlbnNpbmd0b24gNDY3MCBRTEQgIiwiMjYgQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAiLCIyOCBBdmlhdGlvbiBDcmVzLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICIsIjMgQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAiLCI1IEF2aWF0aW9uIENyZXMsIEtlbnNpbmd0b24gNDY3MCBRTEQgIiwiNiBBaXJwb3J0IERyLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICIsIjYgQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAiLCI3IEF2aWF0aW9uIENyZXMsIEtlbnNpbmd0b24gNDY3MCBRTEQgIiwiOCBBaXJwb3J0IERyLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICIsIjggQXZpYXRpb24gQ3JlcywgS2Vuc2luZ3RvbiA0NjcwIFFMRCAiLCI5IEF2aWF0aW9uIENyZXMsIEtlbnNpbmd0b24gNDY3MCBRTEQgIiwiQWlycG9ydCBEciwgS2Vuc2luZ3RvbiA0NjcwIFFMRCAiLCJBdmlhdGlvbiBDcmVzLCBLZW5zaW5ndG9uIDQ2NzAgUUxEICJdOw0KICAgIHZhciBsYXRMbmdBcnIgPSBbXTsNCg0KICAgIGZ1bmN0aW9uIGxvYWRHb29nbGVNYXBzU2NyaXB0KCkgew0KICAgICAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7DQogICAgICAgIHNjcmlwdC50eXBlID0gInRleHQvamF2YXNjcmlwdCI7DQogICAgICAgIHNjcmlwdC5zcmMgPSAiLy9tYXBzLmdvb2dsZWFwaXMuY29tL21hcHMvYXBpL2pzP2tleT1BSXphU3lBNUhZZ2FYQmNtYVFlMjBIV3Z2cWRXZ2tkUDlHLXJmSGMmY2FsbGJhY2s9bG9hZEdvb2dsZU1hcHMiOw0KICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gcmVuZGVyR29vZ2xlTWFwcygpDQogICAgew0KICAgICAgICB2YXIgbWFwT3B0aW9ucyA9IHsNCiAgICAgICAgICAgIGNlbnRlcjogbGF0TG5nQXJyWzBdLA0KICAgICAgICAgICAgem9vbTogMTYsDQogICAgICAgICAgICBtYXBUeXBlSWQ6IGdvb2dsZS5tYXBzLk1hcFR5cGVJZC5ST0FETUFQLA0KICAgICAgICAgICAgbWFwVHlwZUNvbnRyb2w6IGZhbHNlDQogICAgICAgIH0NCg0KICAgICAgICBtYXAgPSBuZXcgZ29vZ2xlLm1hcHMuTWFwKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtYXBfY2FudmFzIiksIG1hcE9wdGlvbnMpOw0KDQogICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZERvbUxpc3RlbmVyKHdpbmRvdywgJ3Jlc2l6ZScsIGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgdmFyIGNlbnRlciA9IG1hcC5nZXRDZW50ZXIoKTsNCiAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LnRyaWdnZXIobWFwLCAncmVzaXplJyk7DQogICAgICAgICAgICBtYXAuc2V0Q2VudGVyKGNlbnRlcik7DQogICAgICAgIH0pOw0KDQogICAgfQ0KDQogICAgZnVuY3Rpb24gbG9hZEdvb2dsZU1hcHMoKSB7DQogICAgICAgIGdlb2NvZGVyID0gbmV3IGdvb2dsZS5tYXBzLkdlb2NvZGVyKCk7DQogICAgICAgIHZhciBub09mRmFpbGVkTG9jYXRpb25TZWFyY2ggPSAwOw0KDQogICAgICAgICQocHJvcGVydGllcykuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHsNCiAgICAgICAgICAgIHZhciBwcm9wZXJ0eUFkZHJlc3MgPSBlbGVtZW50Ow0KDQogICAgICAgICAgICAvL0dldCBnZW9jb2RlDQogICAgICAgICAgICBnZW9jb2Rlci5nZW9jb2RlKHsgJ2FkZHJlc3MnOiBwcm9wZXJ0eUFkZHJlc3MgfSwgZnVuY3Rpb24gKHJlc3VsdHMsIHN0YXR1cykgew0KICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgPT0gZ29vZ2xlLm1hcHMuR2VvY29kZXJTdGF0dXMuT0spIHsNCg0KICAgICAgICAgICAgICAgICAgICB2YXIgbG9jYXRpb24gPSByZXN1bHRzWzBdLmdlb21ldHJ5LmxvY2F0aW9uOw0KICAgICAgICAgICAgICAgICAgICB2YXIgbGF0TG5nID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhsb2NhdGlvbi5sYXQoKSwgbG9jYXRpb24ubG5nKCkpOw0KDQogICAgICAgICAgICAgICAgICAgIGxhdExuZ0Fyci5wdXNoKGxhdExuZyk7DQoNCiAgICAgICAgICAgICAgICAgICAgaWYobGF0TG5nQXJyLmxlbmd0aCA9PSAxKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJHb29nbGVNYXBzKCk7DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAvL0NyZWF0ZSBtYXJrZXIgZm9yIG1hcCBhbmQgcGxhY2UgaXQgb24gdGhlIG1hcA0KICAgICAgICAgICAgICAgICAgICB2YXIgbWFya2VyID0gbmV3IGdvb2dsZS5tYXBzLk1hcmtlcih7DQogICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogbGF0TG5nLA0KICAgICAgICAgICAgICAgICAgICAgICAgbWFwOiBtYXANCiAgICAgICAgICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRlbnRTdHJpbmcgPSAnPGRpdj48c3Bhbj4nICsgcHJvcGVydHlBZGRyZXNzICsgJzwvc3Bhbj48L2Rpdj4nOw0KICAgICAgICAgICAgICAgICAgICB2YXIgaW5mb3dpbmRvdyA9IG5ldyBnb29nbGUubWFwcy5JbmZvV2luZG93KHsgICAvL0NyZWF0ZSBpbmZvIHdpbmRvdw0KICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogY29udGVudFN0cmluZw0KICAgICAgICAgICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcihtYXJrZXIsICdjbGljaycsIGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgaW5mb3dpbmRvdy5vcGVuKG1hcCwgbWFya2VyKTsNCiAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIC8vaWYgbm8gbG9jYXRpb24gZm91bmQgYnkgZ29vZ2xlIGZvciBhIHByb3BlcnR5DQogICAgICAgICAgICAgICAgZWxzZSBpZiAoc3RhdHVzID09ICJaRVJPX1JFU1VMVFMiKSB7DQogICAgICAgICAgICAgICAgICAgIG5vT2ZGYWlsZWRMb2NhdGlvblNlYXJjaCsrOw0KDQogICAgICAgICAgICAgICAgICAgIGlmKG5vT2ZGYWlsZWRMb2NhdGlvblNlYXJjaCA9PSAkKHByb3BlcnRpZXMpLmxlbmd0aCkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZUdvb2dsZU1hcHNDb250ZW50KCk7DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdHVzID09IGdvb2dsZS5tYXBzLkdlb2NvZGVyU3RhdHVzLk9WRVJfUVVFUllfTElNSVQpIHsNCiAgICAgICAgICAgICAgICAgICAgLy9zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgZ2V0R2VvQ29kZUZvckFkZHJlc3MoaWQsIGFkZHJlc3MpOyB9LCAodGltZW91dCkpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICAvL1JlcGxhY2VzIGdvb2dsZSBtYXBzIGNvbnRlbnQgd2l0aCBhIG5ldyBkaXYgYmxvY2sgdGhhdCBoYXMgaW5mbyBtZXNzYWdlDQogICAgZnVuY3Rpb24gcmVwbGFjZUdvb2dsZU1hcHNDb250ZW50KCkgew0KICAgICAgICB2YXIgbmV3Q29udGVudCA9ICc8ZGl2IGNsYXNzPSJ1aS1hY2NvcmRpb24tY29udGVudCB1aS1oZWxwZXItcmVzZXQgdWktd2lkZ2V0LWNvbnRlbnQgdWktY29ybmVyLWJvdHRvbSI+JyArDQogICAgICAgICAgICAnPHA+Q291bGRuXCd0IGZpbmQgdGhlIHByb3BlcnR5IGFkZHJlc3MoZXMpIG9uIEdvb2dsZSBNYXBzLiA8cD4nICsNCiAgICAgICAgICAgICc8L2Rpdj4nOw0KDQogICAgICAgICQoJyNtYXBfY29udGFpbmVyJykucmVwbGFjZVdpdGgobmV3Q29udGVudCk7DQogICAgfQ0KDQo8L3NjcmlwdD4NCg0KICAgIDwvZGl2Pg0KICAgIDxkaXYgY2xhc3M9Im1vZGFsIGZhZGUiIGlkPSJzdWJtaXNzaW9uLW1vZGFsIj4NCiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InNwaW5uZXIiPjwvZGl2PiA8IS0tIFRoaXMgZGl2IGhvc3RzIHRoZSBzcGlubmVyIC0tPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgZGF0YS1kaXNtaXNzPSJtb2RhbCIgYXJpYS1sYWJlbD0iQ2xvc2UiPjxzcGFuIGFyaWEtaGlkZGVuPSJ0cnVlIj4mdGltZXM7PC9zcGFuPjwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9Im1vZGFsLXRpdGxlIj5TdWJtaXNzaW9uIGZvciA1MjYuMjAxOS4xMjAuMTwvaDI+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KDQogICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkgew0KDQogICAgICAgICQoJyNhcHBsaWNhdGlvbicpLnRvZ2dsZXBhbmVscygpOw0KDQogICAgICAgICAgICAkKCcjcHJvcGVydGllcycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjZGV0YWlscycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjdHJhY2tpbmcnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI2RvY3VtZW50cycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjcmVsYXRlZEFwcGxpY2F0aW9ucycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjZ29vZ2xlbWFwcycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjY29udGFjdFVzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNleGhpYml0aW9uRGV0YWlscycpLmNsaWNrKCk7DQoNCiAgICAgICAgDQoNCg0KICAgICAgICAkKCcjc3VibWlzc2lvbi1idG4nKS5jbGljayhmdW5jdGlvbiAoKSB7ICAgICAgICANCg0KDQogICAgICAgICAgICB2YXIgdXJsID0gImh0dHBzOi8vZGEuYnVuZGFiZXJnLnFsZC5nb3YuYXUvL0FwcGxpY2F0aW9uL1N1Ym1pc3Npb24vIiArIGVuY29kZVVSSSgiNTI2LjIwMTkuMTIwLjEiKTsNCg0KICAgICAgICAgICAgJCgnI3N1Ym1pc3Npb24tbW9kYWwnKS5tb2RhbCgnc2hvdycpLmZpbmQoJy5tb2RhbC1ib2R5JykubG9hZCh1cmwpOw0KICAgICAgICB9KTsNCiAgICB9KTsNCg0KDQogICAgLyogU2hvd3MgYWxsIHRoZSBwYW5lbHMgKi8NCiAgICBmdW5jdGlvbiBzaG93QWxsKCkgew0KICAgICAgICAkKCcjYXBwbGljYXRpb24nKS5jaGlsZHJlbigiaDMiKS5lYWNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKCJ1aS1zdGF0ZS1kZWZhdWx0IikpIHsNCiAgICAgICAgICAgICAgICAkKHRoaXMpLmNsaWNrKCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0pOw0KICAgIH0NCg0KDQogICAgLyogSGlkZSBhbGwgdGhlIHBhbmVscyAqLw0KICAgIGZ1bmN0aW9uIGhpZGVBbGwoKSB7DQogICAgICAgICQoJyNhcHBsaWNhdGlvbicpLmNoaWxkcmVuKCJoMyIpLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoInVpLXN0YXRlLWFjdGl2ZSIpKSB7DQogICAgICAgICAgICAgICAgJCh0aGlzKS5jbGljaygpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICA8L3NjcmlwdD4NCg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPCEtLSAvLmNvbnRhaW5lci1mbHVpZCAtLT4NCg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwhLS0gLyNwYWdlLXdyYXBwZXIgLS0+DQogICAgICAgICAgICA8L2Rpdj4NCg0KDQogICAgICAgICAgICA8ZGl2IGlkPSJHcmVlbkJhciI+DQogICAgICAgICAgICAgICAgPGE+Q29weXJpZ2h0IMKpIDIwMTcgQnVuZGFiZXJnIFJlZ2lvbmFsIENvdW5jaWwuIEFsbCByaWdodHMgcmVzZXJ2ZWQ8L2E+DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQoNCiAgICA8ZGl2IGlkPSJ0aXB0aXBfaG9sZGVyIiBzdHlsZT0ibWF4LXdpZHRoOjMwMHB4OyI+PGRpdiBpZD0idGlwdGlwX2Fycm93Ij48ZGl2IGlkPSJ0aXB0aXBfYXJyb3dfaW5uZXIiPjwvZGl2PjwvZGl2PjxkaXYgaWQ9InRpcHRpcF9jb250ZW50Ij48L2Rpdj48L2Rpdj4NCjwvYm9keT4NCg0KPC9odG1sPg0K
  recorded_at: Mon, 21 Apr 2025 18:15:54 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/526.2019.00000120.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=okxmedroodbxmiq2535ybhzy; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '29955'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:15:57 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 80259d3643681fab8e9aae204c90dfc6.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - MEL52-P2
      X-Amz-Cf-Id:
      - 8g_Upc8P54pqXOL8F8kvkbFIqUxtT6qN-9--fqk8IH3ip4bpM5Fpyg==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:15:57 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/532.2019.00000570.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 302
      message: Found
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '133'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Location:
      - "/Home/Disclaimer"
      Server:
      - Microsoft-IIS/10.0
      Set-Cookie:
      - ASP.NET_SessionId=5jaj2fnkmmpqebd0xujf2odl; path=/; HttpOnly; SameSite=Lax
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:15:57 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 728631aa988d848a4cd2080bce0e3a8c.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - MEL52-P2
      X-Amz-Cf-Id:
      - YRXx5BiQA9dyzpmrDlPNFkTNK4j4SgiASCpE-T35ML3lAGP1B0-tkA==
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Home/Disclaimer\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:15:57 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Home/Disclaimer
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=5jaj2fnkmmpqebd0xujf2odl
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '14203'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:15:57 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 0e53c6b8d34d03ea3a772f278b3e4a48.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - MEL52-P2
      X-Amz-Cf-Id:
      - z4hcjgITlLJMnrV4oaKtOLV3EDz20b4ToghDtLPiht862WHeItEyJg==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:15:57 GMT
- request:
    method: post
    uri: https://da.bundaberg.qld.gov.au/Home/DisclaimerProcessing
    body:
      encoding: UTF-8
      string: agreed=true
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=5jaj2fnkmmpqebd0xujf2odl
      Host:
      - da.bundaberg.qld.gov.au
      Referer:
      - https://da.bundaberg.qld.gov.au/Home/Disclaimer
      Content-Type:
      - application/x-www-form-urlencoded
      Content-Length:
      - '11'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '170'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Location:
      - "/Application/ApplicationDetails/532.2019.00000570.001"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      Set-Cookie:
      - User=accessAllowed-MasterView=True; path=/
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:15:57 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 80259d3643681fab8e9aae204c90dfc6.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - MEL52-P2
      X-Amz-Cf-Id:
      - tQsE_pYoEsFnVdRxUK1osYFF7-x8v9PUnCMG9EdxTY4HnrbDqpJ04g==
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Application/ApplicationDetails/532.2019.00000570.001\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:15:57 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/532.2019.00000570.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=5jaj2fnkmmpqebd0xujf2odl; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Referer:
      - https://da.bundaberg.qld.gov.au/Home/Disclaimer
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '26746'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:15:59 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 f0d0acd995ee295f01d21363e9f3baf2.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - MEL52-P2
      X-Amz-Cf-Id:
      - lWobFeMZfW2XsZJgbQbWixNfeYBh60Hj_GZwLkqSpSpM1AQDPInQwQ==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:15:59 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/532.2019.00000570.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=5jaj2fnkmmpqebd0xujf2odl; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '26746'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:16:02 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 4c1d6b68ce47da49813119143ee7b8d8.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - MEL52-P2
      X-Amz-Cf-Id:
      - vAZGWZBe-oOf1EjAAkPuOkNuca2gryH93JiUhj1WPxapFtonzJwvCw==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:16:02 GMT
recorded_with: VCR 6.0.0
