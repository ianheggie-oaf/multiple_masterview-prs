---
http_interactions:
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 302
      message: Found
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Home/Disclaimer"
      Server:
      - Microsoft-IIS/10.0
      Set-Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; path=/; HttpOnly; SameSite=Lax
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:14:51 GMT
      Content-Length:
      - '133'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Home/Disclaimer\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Home/Disclaimer
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:14:51 GMT
      Content-Length:
      - '15446'
    body:
      encoding: UTF-8
      string: "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"utf-8\">\r\n
        \   <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta
        name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n    <meta
        name=\"author\" content=\"\">\r\n    <meta name=\"keywords\" content=\"Lismore
        City Council,DA Tracker,Application Tracker,Development Application,Development
        Application Tracking, DA Enquiry, Development Application Enquiry, Application
        Tracker\">\r\n    <meta name=\"description\" content=\"The official Lismore
        City Council Application Tracker\">\r\n\r\n    <title>Lismore City Council
        - Application Tracker</title>\r\n\r\n    <!--favicon-->\r\n    <link href=\"/favicon.ico\"
        rel=\"shortcut icon\" type=\"image/x-icon\">\r\n\r\n    <!-- jQuery -->\r\n
        \   <script src=\"/Scripts/jquery-1.11.1.js\"></script>\r\n\r\n    <script
        src=\"/Scripts/jquery-ui-1.11.2.js\"></script>\r\n\r\n    <link href=\"/Content/themes/base/core.css\"
        rel=\"stylesheet\"/>\r\n<link href=\"/Content/themes/base/accordion.css\"
        rel=\"stylesheet\"/>\r\n<link href=\"/Content/themes/base/theme.css\" rel=\"stylesheet\"/>\r\n\r\n\r\n
        \   <!-- Bootstrap -->\r\n    <script src=\"/Scripts/bootstrap.js\"></script>\r\n\r\n
        \   <link href=\"/Content/bootstrap-theme.css\" rel=\"stylesheet\"/>\r\n<link
        href=\"/Content/bootstrap.css\" rel=\"stylesheet\"/>\r\n\r\n    <link href=\"/Content/font-awesome.css\"
        rel=\"stylesheet\"/>\r\n\r\n\r\n    <!-- DataTables -->\r\n    <script src=\"/Scripts/DataTables/jquery.dataTables.js\"></script>\r\n<script
        src=\"/Scripts/DataTables/dataTables.bootstrap.js\"></script>\r\n<script src=\"/Scripts/DataTables/dataTables.responsive.js\"></script>\r\n\r\n
        \   \r\n    <link href=\"/Content/DataTables/css/dataTables.bootstrap.css\"
        rel=\"stylesheet\"/>\r\n<link href=\"/Content/DataTables/css/dataTables.responsive.css\"
        rel=\"stylesheet\"/>\r\n<link href=\"/Content/DataTables/css/dataTables.responsive.scss\"
        rel=\"stylesheet\"/>\r\n\r\n\r\n    <!-- Bootstrap SB-Admin-2 Plugin and other
        css and js files-->\r\n    <script src=\"/js/bootstrap-combobox.js\"></script>\r\n<script
        src=\"/js/bootstrap-datepicker.js\"></script>\r\n<script src=\"/js/jquery.form.js\"></script>\r\n<script
        src=\"/js/jquery.tablesorter.js\"></script>\r\n<script src=\"/js/masterview.js\"></script>\r\n<script
        src=\"/js/metisMenu.js\"></script>\r\n<script src=\"/js/sb-admin-2.js\"></script>\r\n\r\n
        \   <link href=\"/css/bootstrap-combobox.css\" rel=\"stylesheet\"/>\r\n<link
        href=\"/css/datepicker3.css\" rel=\"stylesheet\"/>\r\n<link href=\"/css/masterview-customisations.css\"
        rel=\"stylesheet\"/>\r\n<link href=\"/css/sb-admin-2.css\" rel=\"stylesheet\"/>\r\n\r\n\r\n
        \   <link href=\"/Council_Theme/Lismore/lismore.css\" rel=\"stylesheet\"/>\r\n\r\n
        \   \r\n\r\n    <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements
        and media queries -->\r\n    <!-- WARNING: Respond.js doesn't work if you
        view the page via file:// -->\r\n    <!--[if lt IE 9]>\r\n        <script
        src=\"https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js\"></script>\r\n
        \       <script src=\"https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js\"></script>\r\n
        \   <![endif]-->\r\n\r\n    <link href='http://fonts.googleapis.com/css?family=Raleway:300,400,600,700'
        rel='stylesheet' type='text/css'>\r\n    <link href='http://fonts.googleapis.com/css?family=Oswald:300,400,700'
        rel='stylesheet' type='text/css'>\r\n</head>\r\n\r\n\r\n<body class=\"cbp-spmenu-push\">\r\n
        \   <div class=\"wr\">\r\n<div id=\"header\">\r\n    <div class=\"container_12\">\r\n\r\n
        \       <h1 id=\"logo\"><a href=\"http://www.lismore.nsw.gov.au/default.asp\"><img
        src=\"//candidate-office.s3.amazonaws.com/shared/lismore/images/logo.png\"
        alt=\"Lismore City Council\" style=\"padding-top:5px\"><strong class=\"vh\">Lismore
        City Council</strong></a></h1>\r\n\r\n        <div class=\"utility right\">\r\n
        \           <a class=\"home-link\" href=\"http://www.lismore.nsw.gov.au/default.asp\">\r\n
        \               <img src=\"//candidate-office.s3.amazonaws.com/shared/lismore/images/home.png\"
        alt=\"Lismore City Council\">\r\n            </a>\r\n        </div>\r\n\r\n
        \       <div class=\"clear\">\r\n        </div>\r\n\r\n    </div>\r\n</div>\r\n
        \       <div id=\"banner\">\r\n            <div class=\"banner-text cf\">\r\n
        \               <div class=\"banner-text-container\">\r\n                    <h1
        class=\"ow\">DA Tracking <span>Portal</span></h1>\r\n                    <p
        class=\"nm\">Information on development applications in the Lismore Local
        Government Area. </p>\r\n                </div>\r\n            </div>\r\n
        \       </div>\r\n        <div class=\"container_12 intro cf\">            <!--
        Navigation -->\r\n            <nav class=\"navbar navbar-default navbar-static-top\"
        role=\"navigation\" style=\"margin-bottom: 0\">\r\n                <div class=\"navbar-header\">\r\n
        \                   <button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\"
        data-target=\".navbar-collapse\">\r\n                        <span class=\"sr-only\">Toggle
        navigation</span>\r\n                        <span class=\"icon-bar\"></span>\r\n
        \                       <span class=\"icon-bar\"></span>\r\n                        <span
        class=\"icon-bar\"></span>\r\n                    </button>\r\n                    <a
        class=\"navbar-brand\" href=\"#\"></a>\r\n                </div>\r\n                <!--
        /.navbar-header -->\r\n                <ul class=\"nav navbar-top-links navbar-right
        hidden-xs hidden-sm hidden-md\">\r\n                    <li>\r\n                        <a
        href=\"#\"><span id=\"printIcon\" class=\"glyphicon glyphicon-print\" onclick=\"window.print();\"></span></a>\r\n
        \                   </li>\r\n                </ul>\r\n\r\n                <div
        class=\"navbar-default sidebar\" role=\"navigation\">\r\n                    <div
        class=\"sidebar-nav navbar-collapse\">\r\n                        <ul class=\"nav\"
        id=\"side-menu\">\r\n\r\n                        </ul>\r\n                    </div>\r\n
        \                   <!-- /.sidebar-collapse -->\r\n                </div>\r\n
        \               <!-- /.navbar-static-side -->\r\n            </nav>\r\n            <div
        id=\"page-wrapper\">\r\n                <div class=\"container-fluid\">\r\n
        \                   \r\n\r\n\r\n\r\n<div class=\"page-header\">\r\n    <h2>Disclaimer</h2>\r\n</div>\r\n\r\n<div
        id=\"scrollableContent\">\r\n<h4>General conditions of use</h4>\r\n<p class=\"section\">\r\nThis
        website, including the online services provided within it, is provided in
        good faith and for information purposes only.\r\n</p>\r\n\r\n<p class=\"section\">\r\nAlthough
        every effort is made to ensure the relevance, accuracy, currency and timeliness
        of content, Lismore City Council (LCC) accepts no responsibility whatsoever
        for the accuracy, correctness or otherwise of any information on the pages
        published within this site.\r\n</p>\r\n\r\n<p class=\"section\">\r\nWithout
        limiting the generality of the foregoing, and subject only to statute, LCC
        does not warrant that the information on the pages published within this site
        can be relied upon, expressly disclaims all warranties, express or implied,
        including but not limited to the implied warranties of quality or accuracy
        or merchantability and fitness for a particular purpose, and does not warrant
        or make any representations regarding the use or the results of the use of
        any information on the page published within this site.\r\n</p>\r\n\r\n<p
        class=\"section\">\r\nThis facility is under constant amendment to provide
        the latest and most accurate information available. Some information may,
        however, not be current. Changes in circumstances after time of publication
        may impact on the accuracy of the information provided by this website. In
        addition, information published and transmitted electronically may be subject
        to corruption by the process. No person should place reliance upon information
        from this website in circumstances where loss, damage or injury is possible.
        This is particularly important should you wish to use any information for
        any legal or formal complaint purpose.\r\n\r\n</p>\r\n\r\n<p class=\"section\">\r\nSpecific
        enquiries should be made to LCC, in order to obtain the required information
        or advice directly from Council officers and to otherwise ascertain the accuracy
        of all information contained within these pages. In some cases, you may be
        required to make a written application to Council to obtain the desired information
        or advice. LCC is under no liability to any person in respect of any loss
        or damage (including consequential loss or damage) that may be suffered or
        incurred, or which may arise directly or indirectly, in respect of information
        on the pages published within this site.\r\n\r\n</p>\r\n\r\n<p class=\"section\">\r\nInformation
        that is defamatory, breaches copyright laws or is any way illegal must not
        be published on this website and any such content will be removed from the
        website as immediately as is practicable.\r\n\r\n</p>\r\n</br>\r\n\r\n<h4>Disclosure
        of private information</h4>\r\n\r\n<p class=\"section\">\r\nLCC is subject
        to guidelines provided by the Information and Privacy Commission in the matter
        of open government and disclosure of information in the public interest versus
        constraints around the appropriate and legal publication of personal information.
        Please be aware that various documents and forms on this website may contain
        detailed information about matters of privacy and also provides options available
        to persons submitting information to protect their personal information where
        desired. The documentation and submissions published on this website will
        be made available online, worldwide, for an indefinite period of time. If
        at any time you have concerns about your privacy and the implications of submitting
        information for publication, or information published on this website, phone
        us on 1300 87 83 87.\r\n\r\n</p>\r\n<p class=\"section\">\r\nThe Information
        and Privacy Commission guidelines state that it is not in the public interest
        to disclose certain personal information. While LCC will take steps and endeavour
        to protect personal information from being published online, it is the responsibility
        of applicants and people making submissions to properly manage and format
        documentation in accordance with submission guidelines to assist LCC in readily
        identifying personal information for non-disclosure on this website. You acknowledge
        that LCC will not be held liable for publishing personal information that
        is not able to be readily identified in documentation or severable from other
        relevant information provided that is allowed to be published.\r\n\r\n</p>\r\n<p
        class=\"section\">\r\nFurther information can be found at the Information
        and Privacy Commission website <a href=\"http://www.ipc.nsw.gov.au/privacy/ipc_index.html\">http://www.ipc.nsw.gov.au/privacy/ipc_index.html</a>
        or phone 1800 463 626.\r\n\r\n</p>\r\n<p class=\"section\">\r\nYou agree to
        not use information published on this website to harass, intimidate or contact
        other persons in a manner that is unwelcome.\r\n\r\n</p>\r\n<br/>\r\n<h4>Terms
        and conditions of DA Tracking 'search & enquiry' function</h4>\r\n\r\n<p class=\"section\">\r\nAccess
        to this website implies that you have agreed to the following terms and conditions:\r\n<ul>\r\n<li>The
        contents of this website (which includes downloadable material) are subject
        to copyright and are protected by laws of Australia and other countries through
        international treaties. </li>\r\n<li>LCC grants you a non-exclusive licence
        to reproduce the contents of this website in your web browser (and in any
        cache file produced by your web browser) for the sole purpose of viewing the
        content. LCC reserves all other rights.</li>\r\n</ul>\r\n</p>\r\n</br>\r\n<p
        class=\"section\">\r\nThe information provided on this website is to assist
        customers in tracking the progress of a development application. It represents
        key milestones in the development application process but is not a detailed
        history. Persons wishing to confirm information in detail should contact LCC
        order to obtain a written response.\r\n</p>\r\n</div>\r\n\r\n<p class=\"section\">\r\n</br>\r\n<b>I
        have read and understood the provisions set out above.</b>\r\n</p>\r\n</br>\r\n\r\n\r\n\r\n\r\n<form
        action=\"/home/disclaimerprocessing\" method=\"post\"><input id=\"agreed\"
        name=\"agreed\" type=\"hidden\" value=\"False\" />    <div id=\"btns\">\r\n
        \       <button id=\"agree\" type=\"button\" class=\"btn btn-primary\">Agree</button>\r\n
        \       <button id=\"disagree\" type=\"button\" class=\"btn btn-warning\">Disagree</button>\r\n
        \   </div>\r\n</form>\r\n<script type=\"text/javascript\">\r\n\r\n    var
        initialHeightOfScrollBox;\r\n    var lastScrollTop;\r\n    var headerHeight;\r\n\r\n
        \   $(document).ready(function () {\r\n\r\n        updateLeftMargin();\r\n
        \       attachClickHandlers();\r\n\r\n        if (isTextBlockOverflowing())
        {\r\n            var actualContentHeight = $('#page-wrapper').height();\r\n
        \           lastScrollTop = 0;\r\n            initialHeightOfScrollBox = $('#scrollableContent').height();\r\n
        \           headerHeight = $(window).height() - $('#scrollableContent').offset().top;\r\n\r\n
        \           var newHeight = headerHeight + $(window).scrollTop() - $('#btns').height()
        - 100;\r\n            $('#scrollableContent').height(newHeight);\r\n\r\n            $(window).scroll(function
        () {\r\n                var newHeight = headerHeight + $(window).scrollTop()
        - $('#btns').height() - 100;\r\n\r\n                adjustDisclaimerContent(newHeight);\r\n
        \           });\r\n\r\n\r\n            function isScrollDown() {\r\n                var
        st = $(window).scrollTop();\r\n                var result = st >= lastScrollTop;\t\t
        \ // downscroll\r\n\r\n                lastScrollTop = st;\r\n                return
        result;\r\n            }\r\n\r\n\r\n            function adjustDisclaimerContent(newHeight)
        {\r\n                var bIsDownScroll = isScrollDown();\r\n\r\n                var
        scrollableContentHeight = $('#scrollableContent').height();\r\n\r\n                if
        (bIsDownScroll && actualContentHeight > scrollableContentHeight) {\r\n                    $('#scrollableContent').height(newHeight);\r\n
        \               }\r\n                else if (!bIsDownScroll && actualContentHeight
        > newHeight) {\r\n                    $('#scrollableContent').height(newHeight);\r\n
        \               }\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n\r\n
        \   function updateLeftMargin() {\r\n        if ($('#side-menu').html()) {\r\n
        \           $('#page-wrapper').css({ 'margin-left': '0' });\r\n            $('.sidebar').hide();\r\n
        \       }\r\n    }\r\n\r\n\r\n    function attachClickHandlers() {\r\n        $('#agree').click(function
        () {\r\n            $('#agreed').val(\"true\");\r\n            $('form').submit();\r\n
        \       });\r\n\r\n        $('#disagree').click(function () {\r\n            $('#agreed').val(\"false\");\r\n
        \           $('form').submit();\r\n        });\r\n    }\r\n\r\n    function
        isTextBlockOverflowing() {\r\n        return $(\"#scrollableContent\").prop('scrollHeight')
        > $(\"#scrollableContent\").height();\r\n    }\r\n</script>\r\n                </div>\r\n
        \               <!-- /.container-fluid -->\r\n            </div>\r\n        </div>\r\n\r\n
        \       <div class=\"pre-footer container_12 cf\">\r\n            <div class=\"grid_4\">\r\n
        \              \r\n            </div>\r\n        </div>\r\n        <div id=\"footer\">\r\n
        \           <div class=\"container_12 cf\">\r\n                <div class=\"grid_12
        cf ow\">\r\n                    <p class=\"cp\">Copyright &copy; 2025 Lismore
        City Council</p>\r\n                    <p>\r\n\r\n                        <a
        href=\"http://www.lismore.nsw.gov.au/page.asp?p=DOC-OCT-64-57-30\" target=\"_parent\">Internet
        Privacy Statement</a>\r\n                        &nbsp;&nbsp; | &nbsp;&nbsp;\r\n
        \                       <a href=\"http://www.lismore.nsw.gov.au/page.asp?p=DOC-OCT-64-57-30\"
        target=\"_parent\">Disclaimer</a>\r\n                        &nbsp;&nbsp;
        | &nbsp;&nbsp;\r\n                        <a href=\"http://www.lismore.nsw.gov.au/cp_themes/default/sitemap.asp\"
        target=\"_parent\">Site Map</a>\r\n                    </p>\r\n                </div>\r\n
        \           </div>\r\n        </div>\r\n    </div>\r\n</body>\r\n</html>\r\n"
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: post
    uri: https://tracker.lismore.nsw.gov.au/home/disclaimerprocessing
    body:
      encoding: ASCII-8BIT
      string: agreed=true
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl
      Host:
      - tracker.lismore.nsw.gov.au
      Referer:
      - https://tracker.lismore.nsw.gov.au/Home/Disclaimer
      Content-Type:
      - application/x-www-form-urlencoded
      Content-Length:
      - '11'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      Set-Cookie:
      - User=accessAllowed-MasterView=True; path=/
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:14:51 GMT
      Content-Length:
      - '118'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Referer:
      - https://tracker.lismore.nsw.gov.au/Home/Disclaimer
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:14:51 GMT
      Content-Length:
      - '25928'
    body:
      encoding: UTF-8
      string: "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"utf-8\">\r\n
        \   <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta
        name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n    <meta
        name=\"author\" content=\"\">\r\n    <meta name=\"keywords\" content=\"Lismore
        City Council,DA Tracker,Application Tracker,Development Application,Development
        Application Tracking, DA Enquiry, Development Application Enquiry, Application
        Tracker\">\r\n    <meta name=\"description\" content=\"The official Lismore
        City Council Application Tracker\">\r\n\r\n    <title>Lismore City Council
        - Application Tracker</title>\r\n\r\n    <!--favicon-->\r\n    <link href=\"/favicon.ico\"
        rel=\"shortcut icon\" type=\"image/x-icon\">\r\n\r\n    <!-- jQuery -->\r\n
        \   <script src=\"/Scripts/jquery-1.11.1.js\"></script>\r\n\r\n    <script
        src=\"/Scripts/jquery-ui-1.11.2.js\"></script>\r\n\r\n    <link href=\"/Content/themes/base/core.css\"
        rel=\"stylesheet\"/>\r\n<link href=\"/Content/themes/base/accordion.css\"
        rel=\"stylesheet\"/>\r\n<link href=\"/Content/themes/base/theme.css\" rel=\"stylesheet\"/>\r\n\r\n\r\n
        \   <!-- Bootstrap -->\r\n    <script src=\"/Scripts/bootstrap.js\"></script>\r\n\r\n
        \   <link href=\"/Content/bootstrap-theme.css\" rel=\"stylesheet\"/>\r\n<link
        href=\"/Content/bootstrap.css\" rel=\"stylesheet\"/>\r\n\r\n    <link href=\"/Content/font-awesome.css\"
        rel=\"stylesheet\"/>\r\n\r\n\r\n    <!-- DataTables -->\r\n    <script src=\"/Scripts/DataTables/jquery.dataTables.js\"></script>\r\n<script
        src=\"/Scripts/DataTables/dataTables.bootstrap.js\"></script>\r\n<script src=\"/Scripts/DataTables/dataTables.responsive.js\"></script>\r\n\r\n
        \   \r\n    <link href=\"/Content/DataTables/css/dataTables.bootstrap.css\"
        rel=\"stylesheet\"/>\r\n<link href=\"/Content/DataTables/css/dataTables.responsive.css\"
        rel=\"stylesheet\"/>\r\n<link href=\"/Content/DataTables/css/dataTables.responsive.scss\"
        rel=\"stylesheet\"/>\r\n\r\n\r\n    <!-- Bootstrap SB-Admin-2 Plugin and other
        css and js files-->\r\n    <script src=\"/js/bootstrap-combobox.js\"></script>\r\n<script
        src=\"/js/bootstrap-datepicker.js\"></script>\r\n<script src=\"/js/jquery.form.js\"></script>\r\n<script
        src=\"/js/jquery.tablesorter.js\"></script>\r\n<script src=\"/js/masterview.js\"></script>\r\n<script
        src=\"/js/metisMenu.js\"></script>\r\n<script src=\"/js/sb-admin-2.js\"></script>\r\n\r\n
        \   <link href=\"/css/bootstrap-combobox.css\" rel=\"stylesheet\"/>\r\n<link
        href=\"/css/datepicker3.css\" rel=\"stylesheet\"/>\r\n<link href=\"/css/masterview-customisations.css\"
        rel=\"stylesheet\"/>\r\n<link href=\"/css/sb-admin-2.css\" rel=\"stylesheet\"/>\r\n\r\n\r\n
        \   <link href=\"/Council_Theme/Lismore/lismore.css\" rel=\"stylesheet\"/>\r\n\r\n
        \   \r\n\r\n    <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements
        and media queries -->\r\n    <!-- WARNING: Respond.js doesn't work if you
        view the page via file:// -->\r\n    <!--[if lt IE 9]>\r\n        <script
        src=\"https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js\"></script>\r\n
        \       <script src=\"https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js\"></script>\r\n
        \   <![endif]-->\r\n\r\n    <link href='http://fonts.googleapis.com/css?family=Raleway:300,400,600,700'
        rel='stylesheet' type='text/css'>\r\n    <link href='http://fonts.googleapis.com/css?family=Oswald:300,400,700'
        rel='stylesheet' type='text/css'>\r\n</head>\r\n\r\n\r\n<body class=\"cbp-spmenu-push\">\r\n
        \   <div class=\"wr\">\r\n<div id=\"header\">\r\n    <div class=\"container_12\">\r\n\r\n
        \       <h1 id=\"logo\"><a href=\"http://www.lismore.nsw.gov.au/default.asp\"><img
        src=\"//candidate-office.s3.amazonaws.com/shared/lismore/images/logo.png\"
        alt=\"Lismore City Council\" style=\"padding-top:5px\"><strong class=\"vh\">Lismore
        City Council</strong></a></h1>\r\n\r\n        <div class=\"utility right\">\r\n
        \           <a class=\"home-link\" href=\"http://www.lismore.nsw.gov.au/default.asp\">\r\n
        \               <img src=\"//candidate-office.s3.amazonaws.com/shared/lismore/images/home.png\"
        alt=\"Lismore City Council\">\r\n            </a>\r\n        </div>\r\n\r\n
        \       <div class=\"clear\">\r\n        </div>\r\n\r\n    </div>\r\n</div>\r\n
        \       <div id=\"banner\">\r\n            <div class=\"banner-text cf\">\r\n
        \               <div class=\"banner-text-container\">\r\n                    <h1
        class=\"ow\">DA Tracking <span>Portal</span></h1>\r\n                    <p
        class=\"nm\">Information on development applications in the Lismore Local
        Government Area. </p>\r\n                </div>\r\n            </div>\r\n
        \       </div>\r\n        <div class=\"container_12 intro cf\">            <!--
        Navigation -->\r\n            <nav class=\"navbar navbar-default navbar-static-top\"
        role=\"navigation\" style=\"margin-bottom: 0\">\r\n                <div class=\"navbar-header\">\r\n
        \                   <button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\"
        data-target=\".navbar-collapse\">\r\n                        <span class=\"sr-only\">Toggle
        navigation</span>\r\n                        <span class=\"icon-bar\"></span>\r\n
        \                       <span class=\"icon-bar\"></span>\r\n                        <span
        class=\"icon-bar\"></span>\r\n                    </button>\r\n                    <a
        class=\"navbar-brand\" href=\"#\"></a>\r\n                </div>\r\n                <!--
        /.navbar-header -->\r\n                <ul class=\"nav navbar-top-links navbar-right
        hidden-xs hidden-sm hidden-md\">\r\n                    <li>\r\n                        <a
        href=\"#\"><span id=\"printIcon\" class=\"glyphicon glyphicon-print\" onclick=\"window.print();\"></span></a>\r\n
        \                   </li>\r\n                </ul>\r\n\r\n                <div
        class=\"navbar-default sidebar\" role=\"navigation\">\r\n                    <div
        class=\"sidebar-nav navbar-collapse\">\r\n                        <ul class=\"nav\"
        id=\"side-menu\">\r\n                                    <li class=\"active\">\r\n
        \                                       <a href=\"#\"><i class=\"fa fa-list-ul
        fa-fw\"></i>Application Tracker<span class=\"fa arrow\"></span></a>\r\n                                        <ul
        class=\"nav nav-second-level collapse\">\r\n                                                <li>\r\n
        \                                                   <a href=/Home/About target=_self>What
        is Application Tracker?</a>\r\n                                                </li>\r\n
        \                                               <li>\r\n                                                    <a
        href=/Home/Disclaimer target=_self>Disclaimer</a>\r\n                                                </li>\r\n
        \                                       </ul>\r\n                                        <!--
        /.nav-second-level -->\r\n                                    </li>\r\n                                    <li
        class=\"active\">\r\n                                        <a href=\"#\"><i
        class=\"fa fa-list-ul fa-fw\"></i>Applications<span class=\"fa arrow\"></span></a>\r\n
        \                                       <ul class=\"nav nav-second-level collapse\">\r\n
        \                                               <li>\r\n                                                    <a
        href=/Home/Index target=>Application Tracker Home</a>\r\n                                                </li>\r\n
        \                                               <li>\r\n                                                    <a
        href=/Home/Search id=search target=_self>Search</a>\r\n                                                </li>\r\n
        \                                               <li>\r\n                                                    <a
        href=/Application/AdvancedSearchResult?RemoveUndeterminedApplications=False&ShowOutstandingApplications=True&ShowExhibitedApplications=False&IncludeDocuments=False
        id=outstanding-apps target=_self>Undetermined Applications</a>\r\n                                                </li>\r\n
        \                                               <li>\r\n                                                    <a
        href=/Application/AdvancedSearchResult?RemoveUndeterminedApplications=False&ShowOutstandingApplications=False&ShowExhibitedApplications=True&IncludeDocuments=False
        id=exhibited-apps target=_self>Applications On Exhibition</a>\r\n                                                </li>\r\n
        \                                       </ul>\r\n                                        <!--
        /.nav-second-level -->\r\n                                    </li>\r\n                                    <li
        class=\"active\">\r\n                                        <a href=\"#\"><i
        class=\"fa fa-list-ul fa-fw\"></i>Applications Submitted<span class=\"fa arrow\"></span></a>\r\n
        \                                       <ul class=\"nav nav-second-level collapse\">\r\n
        \                                               <li>\r\n                                                    <a
        href=/Application/AdvancedSearchResult?DateFrom=2%2f06%2f2025&DateTo=2%2f06%2f2025&DateType=1&RemoveUndeterminedApplications=False&ApplicationType=5%2c8%2c10%2c13&ShowOutstandingApplications=False&ShowExhibitedApplications=False&IncludeDocuments=False
        target=_self>This Week</a>\r\n                                                </li>\r\n
        \                                               <li>\r\n                                                    <a
        href=/Application/AdvancedSearchResult?DateFrom=25%2f05%2f2025&DateTo=31%2f05%2f2025&DateType=1&RemoveUndeterminedApplications=False&ApplicationType=5%2c8%2c10%2c13&ShowOutstandingApplications=False&ShowExhibitedApplications=False&IncludeDocuments=False
        target=_self>Last Week</a>\r\n                                                </li>\r\n
        \                                               <li>\r\n                                                    <a
        href=/Application/AdvancedSearchResult?DateFrom=1%2f06%2f2025&DateTo=2%2f06%2f2025&DateType=1&RemoveUndeterminedApplications=False&ApplicationType=5%2c8%2c10%2c13&ShowOutstandingApplications=False&ShowExhibitedApplications=False&IncludeDocuments=False
        target=_self>This Month</a>\r\n                                                </li>\r\n
        \                                               <li>\r\n                                                    <a
        href=/Application/AdvancedSearchResult?DateFrom=1%2f05%2f2025&DateTo=31%2f05%2f2025&DateType=1&RemoveUndeterminedApplications=False&ApplicationType=5%2c8%2c10%2c13&ShowOutstandingApplications=False&ShowExhibitedApplications=False&IncludeDocuments=False
        target=_self>Last Month</a>\r\n                                                </li>\r\n
        \                                       </ul>\r\n                                        <!--
        /.nav-second-level -->\r\n                                    </li>\r\n                                    <li
        class=\"active\">\r\n                                        <a href=\"#\"><i
        class=\"fa fa-list-ul fa-fw\"></i>Applications Determined<span class=\"fa
        arrow\"></span></a>\r\n                                        <ul class=\"nav
        nav-second-level collapse\">\r\n                                                <li>\r\n
        \                                                   <a href=/Application/AdvancedSearchResult?DateFrom=2%2f06%2f2025&DateTo=2%2f06%2f2025&DateType=2&RemoveUndeterminedApplications=True&ApplicationType=5%2c8%2c10%2c13&ShowOutstandingApplications=False&ShowExhibitedApplications=False&IncludeDocuments=False
        target=_self>This Week</a>\r\n                                                </li>\r\n
        \                                               <li>\r\n                                                    <a
        href=/Application/AdvancedSearchResult?DateFrom=25%2f05%2f2025&DateTo=31%2f05%2f2025&DateType=2&RemoveUndeterminedApplications=True&ApplicationType=5%2c8%2c10%2c13&ShowOutstandingApplications=False&ShowExhibitedApplications=False&IncludeDocuments=False
        target=_self>Last Week</a>\r\n                                                </li>\r\n
        \                                               <li>\r\n                                                    <a
        href=/Application/AdvancedSearchResult?DateFrom=1%2f06%2f2025&DateTo=2%2f06%2f2025&DateType=2&RemoveUndeterminedApplications=True&ApplicationType=5%2c8%2c10%2c13&ShowOutstandingApplications=False&ShowExhibitedApplications=False&IncludeDocuments=False
        target=_self>This Month</a>\r\n                                                </li>\r\n
        \                                               <li>\r\n                                                    <a
        href=/Application/AdvancedSearchResult?DateFrom=1%2f05%2f2025&DateTo=31%2f05%2f2025&DateType=2&RemoveUndeterminedApplications=True&ApplicationType=5%2c8%2c10%2c13&ShowOutstandingApplications=False&ShowExhibitedApplications=False&IncludeDocuments=False
        target=_self>Last Month</a>\r\n                                                </li>\r\n
        \                                       </ul>\r\n                                        <!--
        /.nav-second-level -->\r\n                                    </li>\r\n\r\n
        \                       </ul>\r\n                    </div>\r\n                    <!--
        /.sidebar-collapse -->\r\n                </div>\r\n                <!-- /.navbar-static-side
        -->\r\n            </nav>\r\n            <div id=\"page-wrapper\">\r\n                <div
        class=\"container-fluid\">\r\n                    \r\n\r\n\r\n\r\n\r\n\r\n<div
        class=\"page-header\">\r\n    <h2>Home</h2>\r\n</div>\r\n<div>\r\n    <p>Council's
        Development Application Tracker allows you to view details of applications
        lodged at Council since 1 January 2011 until today.</p>\r\n    <p>The \"Home\"
        page shows you the development applications submitted in the last two weeks.
        Click on one of the red icons on the map below to view more details about
        that application.</p>\r\n    <p>The options on the left hand side of this
        page allow you to search for applications submitted or determined over a specific
        week or month, undetermined applications and applications currently on exhibition.
        Alternatively, you can use the \"Search\" option if you have the application
        number or particulars about the property.\r\n    </p>\r\n</div>\r\n\r\n\r\n\r\n\r\n<div
        id=\"gmapsLabel\">\r\n    <h4>Applications submitted between 19 May 2025 and
        2 June 2025</h4>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n<div id=\"map_container\"
        class=\"homepage\">\r\n    <div id=\"map_canvas\" class=\"iframe-rwd\"></div>\r\n</div>\r\n\r\n\r\n<div
        id=\"map_canvas_print_container\">\r\n    <div id=\"map_canvas_print\"></div>\r\n</div>\r\n\r\n\r\n<script
        type=\"text/javascript\">\r\n\r\n    var map, mapPrint;\r\n    var geocoder;\r\n
        \   var bounds;\r\n    var next = 0;\r\n    var propertyAddressesGM;\r\n    var
        boundsEnabled = false;\r\n    var arrMarkerAndInfoWindowHolder = [];\r\n\r\n
        \   //CLIENT SPECIFIC VALUES\r\n    //prevents markers showing from outside
        this region when boundsEnabled=true\r\n    var latMaxLimit = -27;\r\n    var
        lngMaxLimit = 153;\r\n\r\n    // using the web.config to get zoomlevel,base
        address and scrollenabled values\r\n    var defaultZoomLevelGM = 10;\r\n    var
        scrollenabled = false;\r\n    var scrollconfig = \"\";\r\n    var baseaddress
        = \"\";\r\n    var basecountrycode = \"\";\r\n    var infowindow;\r\n\r\n
        \   function initializeGoogleMaps() {\r\n\r\n        google.maps.event.addDomListener(window,
        'resize', function() {\r\n            var center = map.getCenter();\r\n            google.maps.event.trigger(map,
        'resize');\r\n            map.setCenter(center);\r\n            mapPrint.setCenter(center);\r\n
        \       });\r\n\r\n        geocoder = new google.maps.Geocoder();\r\n        bounds
        = new google.maps.LatLngBounds();\r\n\r\n        scrollconfig = \"yes\";\r\n
        \       if(scrollconfig == \"yes\") {\r\n            scrollenabled = true;\r\n
        \       }\r\n\r\n        var mapOptions = {\r\n            zoom: defaultZoomLevelGM,\r\n
        \           mapTypeId: google.maps.MapTypeId.ROADMAP,\r\n            scrollwheel:
        true\r\n        };\r\n\r\n        map = new google.maps.Map(document.getElementById(\"map_canvas\"),
        mapOptions);\r\n\r\n        //Only load the maps for tablets and bigger screens\r\n
        \       if(screen.width > 768)\r\n        {\r\n            mapPrint = new
        google.maps.Map(document.getElementById(\"map_canvas_print\"), mapOptions);\r\n
        \           setEventListenersToBindPrintMapToDisplayMap();\r\n        }\r\n
        \       else {\r\n            $('#map_canvas_print_container').remove();\r\n
        \       }\r\n\r\n        setMapCentre();\r\n\r\n        populateMarkerAndInfoWindowHolderArray();\r\n\r\n
        \       createAndPlotMarkers() ;\r\n    }\r\n\r\n    function setMapCentre()
        {\r\n        // Get the centre Point address and Set Centre Point\r\n        baseaddress
        = \"43 Oliver Avenue, Goonellabah NSW 2480\";\r\n        basecountrycode =
        \"AU\";\r\n\r\n        geocoder.geocode({'address' : baseaddress, 'componentRestrictions'
        : {'country':basecountrycode}},\r\n            function(results, status) {\r\n
        \               if(status == google.maps.GeocoderStatus.OK) {\r\n                    var
        result = results[0].geometry.location;\r\n                    map.setCenter(result);\r\n
        \               }\r\n            });\r\n    }\r\n\r\n    /* Sets event handlers
        so that the changes on the display map reflect on the hidden print map */\r\n
        \   function setEventListenersToBindPrintMapToDisplayMap() {\r\n        google.maps.event.addListener(map,
        'zoom_changed', function() {\r\n            var zoomLevel = map.getZoom();\r\n
        \           var center = map.getCenter();\r\n\r\n            //Set zoom and
        center of the hidden printable map\r\n            mapPrint.setZoom(zoomLevel);\r\n
        \           mapPrint.setCenter(center);\r\n        });\r\n\r\n        google.maps.event.addListener(map,
        'center_changed', function() {\r\n            var center = map.getCenter();\r\n\r\n
        \           //Set center of the hidden printable map\r\n            mapPrint.setCenter(center);\r\n
        \       });\r\n    }\r\n\r\n    /* Parses XML geocodes and populates the data
        into MarkerAndInfoWindowHolder object instances to later plot on the map */\r\n
        \   function populateMarkerAndInfoWindowHolderArray() {\r\n        var properties
        = null;\r\n        latlngbounds = new google.maps.LatLngBounds();\r\n\r\n
        \       var item = [[\"-28.5956538,153.2297191\",\"15 Hillside Dr, Nimbin
        NSW 2480 \",\"DA25/54 - 15 Hillside Drive, Nimbin - Re-sited dwelling with
        alts \\u0026 ad\",\"005.2025.00000054.001\",\"5.2025.54.1\"],[\"-29.0007822,153.4100959\",\"670
        Broadwater Rd, Broadwater NSW 2472 \",\"DA23/258 - Stage 2 - Expanded dwelling
        and detached caport dual occ\",\"010.2023.00000258.001\",\"10.2023.258.1\"],[\"-28.82416079999999,153.3099632\",\"109
        Invercauld Rd, Goonellabah NSW 2480 \",\"over existing roof to SHS columns
        to front, all in classic cream\",\"010.2025.00000032.001\",\"10.2025.32.1\"],[\"-28.7752777,153.2847936\",\"300
        Dunoon Rd, North Lismore NSW 2480 \",\"DA24/288-2 - 300 Dunoon Road, North
        Lismore - S4.55(1A)\",\"005.2024.00000288.002\",\"5.2024.288.2\"],[\"-28.8099212,153.277481\",\"91
        Magellan St, Lismore NSW 2480 \",\"DA25/30 - 91 Magellan Street, Lismore -
        Change of use of part of a ret\",\"005.2025.00000030.001\",\"5.2025.30.1\"],[\"-28.76472,153.3369672\",\"28A
        Grace Rd, Bexhill NSW 2480 \",\"DA25/41 - 28A Grace Road, Bexhill - Dwelling,
        pool and gazebo\",\"005.2025.00000041.001\",\"5.2025.41.1\"],[\"-28.8136693,153.3086559\",\"29
        William Blair Ave, Goonellabah NSW 2480 \",\"DA25/48 - 29 William Blair Avenue,
        Goonellabah - Dwelling addition\",\"005.2025.00000048.001\",\"5.2025.48.1\"],[\"-28.8346781,153.3133653\",\"38
        Sawyers Ave, Goonellabah NSW 2480 \",\"DA25/51 - 38 Sawyers Avenue, Goonellabah
        - Retaining wall\",\"005.2025.00000051.001\",\"5.2025.51.1\"],[\"-28.826449,153.3406873\",\"11
        Keoghan Dr, Goonellabah NSW 2480 \",\"DA25/45 - 11 Keoghan Drive, Goonellabah
        - Dwelling and retaining wall\",\"005.2025.00000045.001\",\"5.2025.45.1\"],[\"-28.7864141,153.2332119\",\"337A
        Nimbin Rd, Booerie Creek NSW 2480 \",\"DA25/43 - 337A \\u0026 337B Nimbin
        Road, Booerie Creek - Subdivision\",\"005.2025.00000043.001\",\"5.2025.43.1\"],[\"-28.5962929,153.2276235\",\"23
        Alternative Way, Nimbin NSW 2480 \",\"DA24/240 - 23 Alternative Way, Nimbin
        - Subdivision Certificate\",\"013.2024.00000240.001\",\"13.2024.240.1\"],[\"-28.7528142,153.3883791\",\"59
        Federation Dr, Eltham NSW 2480 \",\"DA25/47 - 59 Federation Drive, Eltham
        - Replace pool and deck\",\"005.2025.00000047.001\",\"5.2025.47.1\"],[\"-28.8290018,153.2322376\",\"374
        Caniaba Rd, Caniaba NSW 2480 \",\"DA25/39 - 374 Caniaba Road Caniaba - Awning\",\"005.2025.00000039.001\",\"5.2025.39.1\"],[\"-28.8144827,153.3470009\",\"7
        Holland St, Goonellabah NSW 2480 \",\"\",\"008.2025.00000014.001\",\"8.2025.14.1\"],[\"-28.81304969999999,153.2788326\",\"75
        Conway St, Lismore NSW 2480 \",\"DA25/29 - 2/75 Conway Street, Lismore - Change
        of use to hair salon\",\"005.2025.00000029.001\",\"5.2025.29.1\"],[\"-28.8334442,153.3413256\",\"22
        Holmes Cct, Chilcotts Grass NSW 2480 \",\"\",\"008.2025.00000012.001\",\"8.2025.12.1\"],[\"-28.747896,153.255081\",\"262
        Keerrong Rd, Blakebrook NSW 2480 \",\"DA25/44 - 262 Keerrong Road, Keerrong
        - Re-sited dwelling det dual occ\",\"005.2025.00000044.001\",\"5.2025.44.1\"],[\"-28.5830131,153.2078991\",\"459
        Blade Rd, Nimbin NSW 2480 \",\"CC - 459 Blade Road Road NIMBIN - Dwelling\",\"010.2024.00000282.001\",\"10.2024.282.1\"],[\"-28.785165,153.3327083\",\"11
        Geraghtys Accs, Richmond Hill NSW 2480 \",\"CC - 11 Geraghtys Access Richmond
        Hill - Dwelling and garage\",\"010.2023.00000280.001\",\"10.2023.280.1\"],[\"-28.8239943,153.3412977\",\"7
        Doyle Pl, Goonellabah NSW 2480 \",\"DA25/36 - 7 Doyle Place, Goonellabah -
        Carport with blv\",\"005.2025.00000036.001\",\"5.2025.36.1\"]];\r\n\r\n        $(item).each(function()\r\n
        \       {\r\n            var arrProperty = $(this);\r\n            createMarkerAndInfoWindowHolderObjects(arrProperty[0],
        arrProperty[1], arrProperty[2], arrProperty[3], arrProperty[4]);\r\n        });\r\n
        \   }\r\n\r\n    /* Checks if a marker has already been created for newLocation
        */\r\n    function isNewLocation(newLocation)\r\n    {\r\n        var bNewLocation
        = true;\r\n\r\n        $(arrMarkerAndInfoWindowHolder).each(function () {\r\n\r\n
        \           if (newLocation.equals(this.location)) {\r\n                bNewLocation
        = false;\r\n                return false;   //This breaks the each loop\r\n
        \           }\r\n        });\r\n\r\n        return bNewLocation;\r\n    }\r\n\r\n
        \   /* Creates MarkerAndInfoWindowHolder objects and adds them to the array
        and modifies them */\r\n    function createMarkerAndInfoWindowHolderObjects(coord,
        address, content, key, appNo) {\r\n        var coordArray = new Array();\r\n
        \       coordArray[0] = parseFloat(coord.split(\",\")[0]); //.map not supported
        in IE 8\r\n        coordArray[1] = parseFloat(coord.split(\",\")[1]);\r\n\r\n
        \       if (!boundsEnabled || (parseInt(coordArray[0]) >= latMaxLimit && parseInt(coordArray[1])
        <= lngMaxLimit)) {\r\n            var newLocation = new google.maps.LatLng(coordArray[0],
        coordArray[1]);\r\n            var link = \"<a href='/Application/ApplicationDetails/\"
        + key + \"/'>\" + appNo + \" - \" + address + \"</a><br/>\" + content\r\n
        \           var bNewLocation = isNewLocation(newLocation);\r\n\r\n            if(bNewLocation)
        {\r\n                arrMarkerAndInfoWindowHolder.push(new MarkerAndInfoWindowHolder(content,
        newLocation, link));\r\n            }\r\n            else {\r\n                $(arrMarkerAndInfoWindowHolder).each(function
        (index, obj) {\r\n\r\n                    if (newLocation.equals(obj.location))
        {\r\n                        obj.infoWindowContent = obj.infoWindowContent
        + \"<br/>\" + link;\r\n\r\n                        return false;   //exit
        each loop\r\n                    }\r\n                });\r\n            }\r\n\r\n
        \           latlngbounds.extend(newLocation);\r\n        }\r\n    }\r\n\r\n
        \   /* Creates and sets the markers on the map */\r\n    function createAndPlotMarkers()
        {\r\n\r\n        $(arrMarkerAndInfoWindowHolder).each(function() {\r\n            var
        markerTitle = this.markerTitle;\r\n            var location = this.location;\r\n
        \           var infoWindowContent = this.infoWindowContent;\r\n\r\n            //Sets
        the marker on the display map\r\n            var marker = new google.maps.Marker({\r\n
        \               map: map,\r\n                position: location,\r\n                title:
        markerTitle\r\n            });\r\n\r\n            //Sets the marker on the
        printable map\r\n            new google.maps.Marker({\r\n                map:
        mapPrint,\r\n                position: location,\r\n                title:
        markerTitle\r\n            });\r\n\r\n            //Attach eventlistener to
        the marker\r\n            google.maps.event.addListener(marker, 'click', function
        () {\r\n                if (infowindow)\r\n                    infowindow.close();\r\n\r\n
        \               infowindow = new google.maps.InfoWindow({\r\n                    content:
        infoWindowContent,\r\n                    maxWidth: 400\r\n                });\r\n\r\n
        \               infowindow.open(map, marker);\r\n            });\r\n        });\r\n\r\n
        \   }\r\n\r\n    /* An object that holds information about the locations which
        have been created \r\n    using data from parsed geocode XML \r\n    markerTitle:
        title of the marker/pin on the map\r\n    location: google maps location object
        to pass to marker constructor\r\n    infoWindowContent: content that appears
        when the marker/pin is clicked\r\n    */\r\n    function MarkerAndInfoWindowHolder(markerTitle,
        location, infoWindowContent) {\r\n        this.markerTitle = markerTitle;\r\n
        \       this.location = location;\r\n        this.infoWindowContent = infoWindowContent;\r\n
        \   }\r\n\r\n    function loadGoogleMapsScript() {\r\n        var script =
        document.createElement(\"script\");\r\n        script.type = \"text/javascript\";\r\n
        \       script.src = \"//maps.googleapis.com/maps/api/js?key=AIzaSyA8yb0LzVXxMvh-3Uc6bo3T-BmlF6Ytvn4&callback=initializeGoogleMaps\";\r\n
        \       document.body.appendChild(script);\r\n    }\r\n\r\n    window.onload
        = loadGoogleMapsScript;\r\n\r\n</script>\r\n\r\n\r\n                </div>\r\n
        \               <!-- /.container-fluid -->\r\n            </div>\r\n        </div>\r\n\r\n
        \       <div class=\"pre-footer container_12 cf\">\r\n            <div class=\"grid_4\">\r\n
        \              \r\n            </div>\r\n        </div>\r\n        <div id=\"footer\">\r\n
        \           <div class=\"container_12 cf\">\r\n                <div class=\"grid_12
        cf ow\">\r\n                    <p class=\"cp\">Copyright &copy; 2025 Lismore
        City Council</p>\r\n                    <p>\r\n\r\n                        <a
        href=\"http://www.lismore.nsw.gov.au/page.asp?p=DOC-OCT-64-57-30\" target=\"_parent\">Internet
        Privacy Statement</a>\r\n                        &nbsp;&nbsp; | &nbsp;&nbsp;\r\n
        \                       <a href=\"http://www.lismore.nsw.gov.au/page.asp?p=DOC-OCT-64-57-30\"
        target=\"_parent\">Disclaimer</a>\r\n                        &nbsp;&nbsp;
        | &nbsp;&nbsp;\r\n                        <a href=\"http://www.lismore.nsw.gov.au/cp_themes/default/sitemap.asp\"
        target=\"_parent\">Site Map</a>\r\n                    </p>\r\n                </div>\r\n
        \           </div>\r\n        </div>\r\n    </div>\r\n</body>\r\n</html>\r\n"
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: post
    uri: https://tracker.lismore.nsw.gov.au/Application/GetApplications
    body:
      encoding: ASCII-8BIT
      string: start=0&length=100&json=%7B%22DateFrom%22%3A%2216%2F03%2F2025%22%2C%22DateTo%22%3A%2215%2F04%2F2025%22%2C%22DateType%22%3A%221%22%2C%22RemoveUndeterminedApplications%22%3Afalse%2C%22ShowOutstandingApplications%22%3Afalse%2C%22ShowExhibitedApplications%22%3Afalse%2C%22IncludeDocuments%22%3Afalse%7D
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Referer:
      - https://tracker.lismore.nsw.gov.au/
      Content-Type:
      - application/x-www-form-urlencoded
      Content-Length:
      - '298'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - application/json; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:14:52 GMT
      Content-Length:
      - '12625'
    body:
      encoding: UTF-8
      string: '{"draw":null,"recordsTotal":55,"recordsFiltered":55,"data":[["010.2025.00000039.001","10.2025.39.1","Construction
        Certificate","11/04/2025","374 Caniaba Rd, Caniaba NSW 2480 \u003cbr/\u003e\u003cb\u003eCC
        - 374 Caniaba Road, Caniaba - Awning\u003c/b\u003e"],["005.2025.00000039.001","5.2025.39.1","Development
        Application","17/03/2025","374 Caniaba Rd, Caniaba NSW 2480 \u003cbr/\u003e\u003cb\u003eDA25/39
        - 374 Caniaba Road Caniaba - Awning\u003c/b\u003e"],["005.2025.00000061.001","5.2025.61.1","Development
        Application","03/04/2025","174 Pelican Creek Rd, South Gundurimba NSW 2480
        \u003cbr/\u003e\u003cb\u003eDA25/61 - 174 Pelican Creek Road, South Gundurimba
        - Shed\u003c/b\u003e"],["005.2025.00000043.001","5.2025.43.1","Development
        Application","17/03/2025","337A Nimbin Rd, Booerie Creek NSW 2480 \u003cbr/\u003e337B
        Nimbin Rd, Booerie Creek NSW 2480 \u003cbr/\u003e\u003cb\u003eDA25/43 - 337A
        \u0026 337B Nimbin Road, Booerie Creek - Subdivision\u003c/b\u003e"],["013.2024.00000099.001","13.2024.99.1","Subdivision
        Certificate","07/04/2025","11 Airforce Rd, East Lismore NSW 2480 \u003cbr/\u003e13
        Airforce Rd, East Lismore NSW 2480 \u003cbr/\u003e15 Airforce Rd, East Lismore
        NSW 2480 \u003cbr/\u003e19 Airforce Rd, East Lismore NSW 2480 \u003cbr/\u003e\u003cb\u003eSC
        - 11, 13, 15 \u0026 19 Airforce Road East Lismore - Subdivision\u003c/b\u003e"],["005.2025.00000068.001","5.2025.68.1","Development
        Application","15/04/2025","325 Bangalow Rd, Howards Grass NSW 2480 \u003cbr/\u003e\u003cb\u003eDA25/68
        - 325 Bangalow Road, Howards Grass - Subdivision\u003c/b\u003e"],["005.2025.00000044.001","5.2025.44.1","Development
        Application","17/03/2025","262 Keerrong Rd, Blakebrook NSW 2480 \u003cbr/\u003e\u003cb\u003eDA25/44
        - 262 Keerrong Road, Keerrong - Re-sited dwelling det dual occ\u003c/b\u003e"],["010.2025.00000022.001","10.2025.22.1","Construction
        Certificate","03/04/2025","37 Greenhills Dr, Goonellabah NSW 2480 \u003cbr/\u003e\u003cb\u003eCC
        - 37 Greenhills Drive Goonellabah - Dwelling addition\u003c/b\u003e"],["008.2025.00000025.001","8.2025.25.1","Complying
        Development","04/04/2025","27 Hilltop Cl, Goonellabah NSW 2480 \u003cbr/\u003e\u003cb\u003e\u003c/b\u003e"],["008.2025.00000024.001","8.2025.24.1","Complying
        Development","08/04/2025","49 Hidden Valley Cct, Chilcotts Grass NSW 2480
        \u003cbr/\u003e\u003cb\u003e\u003c/b\u003e"],["005.2025.00000038.001","5.2025.38.1","Development
        Application","03/04/2025","133 Keen St, Lismore NSW 2480 \u003cbr/\u003e135
        Keen St, Lismore NSW 2480 \u003cbr/\u003e\u003cb\u003eDA25/38 - 133 135 Keen
        Street Lismore - Cafe\u003c/b\u003e"],["008.2025.00000022.001","8.2025.22.1","Complying
        Development","26/03/2025","14 Hidden Valley Cct, Chilcotts Grass NSW 2480
        \u003cbr/\u003e\u003cb\u003e\u003c/b\u003e"],["010.2024.00000204.002","10.2024.204.2","Construction
        Certificate","08/04/2025","589 Ballina Rd, Goonellabah NSW 2480 \u003cbr/\u003e\u003cb\u003eCC
        - 589B Ballina Road - Stage 2 Resited dwelling and alterations\u003c/b\u003e"],["008.2025.00000021.001","8.2025.21.1","Complying
        Development","31/03/2025","14 Hidden Valley Cct, Chilcotts Grass NSW 2480
        \u003cbr/\u003e\u003cb\u003e\u003c/b\u003e"],["005.2025.00000065.001","5.2025.65.1","Development
        Application","10/04/2025","43 Funnell Dr, Modanville NSW 2480 \u003cbr/\u003e\u003cb\u003eDA25/65
        - 43 Funnell Drive, Modanville - Relocated dwelling dual occ\u003c/b\u003e"],["008.2025.00000020.001","8.2025.20.1","Complying
        Development","24/03/2025","56 Mahogany Pde, Goonellabah NSW 2480 \u003cbr/\u003e\u003cb\u003e\u003c/b\u003e"],["005.2023.00000291.002","5.2023.291.2","S4.55","03/04/2025","324
        Gordon Rd, Koonorigan NSW 2480 \u003cbr/\u003e\u003cb\u003eDA23/291-2 - 324
        Koonorigan Road, Koonorigan - S4.55(1A)\u003c/b\u003e"],["013.2022.00000088.001","13.2022.88.1","Subdivision
        Certificate","24/03/2025","7 Atlas St, East Lismore NSW 2480 \u003cbr/\u003e\u003cb\u003eSC
        - 7 Atlas Street, East Lismore - Dwelling to create dual occ\u003c/b\u003e"],["010.2024.00000112.001","10.2024.112.1","Construction
        Certificate","07/04/2025","28 Spurfield Rd, Mcleans Ridges NSW 2480 \u003cbr/\u003e\u003cb\u003eDA24/112
        - 28 Spurfield Road McLeans Ridges - Dwelling Dual Occ\u003c/b\u003e"],["005.2024.00000117.002","5.2024.117.2","S4.55","27/03/2025","591
        Ballina Rd, Goonellabah NSW 2480 \u003cbr/\u003e\u003cb\u003eDA24/117-2 -
        591 Ballina Road, Goonellabah - S4.55(1)\u003c/b\u003e"],["005.2025.00000042.001","5.2025.42.1","Development
        Application","26/03/2025","91 Woodlark St, Lismore NSW 2480 \u003cbr/\u003e\u003cb\u003eDA25/42
        - 73 Keen Street, Lismore - Change of use of part of a buildin\u003c/b\u003e"],["005.2025.00000030.001","5.2025.30.1","Development
        Application","19/03/2025","91 Magellan St, Lismore NSW 2480 \u003cbr/\u003e\u003cb\u003eDA25/30
        - 91 Magellan Street, Lismore - Change of use of part of a ret\u003c/b\u003e"],["005.2025.00000071.001","5.2025.71.1","Development
        Application","15/04/2025","7 Georgi Pl, Nimbin NSW 2480 \u003cbr/\u003e\u003cb\u003eDA25/71
        - 7 Georgi Place Nimbin - Dwelling, shed and carport\u003c/b\u003e"],["005.2025.00000058.001","5.2025.58.1","Development
        Application","26/03/2025","26 Spurfield Rd, Mcleans Ridges NSW 2480 \u003cbr/\u003e26A
        Spurfield Rd, Mcleans Ridges NSW 2480 \u003cbr/\u003e\u003cb\u003eDA25/58
        - 26 Spurfield Road, McLeans Ridges - Detached dual occ\u003c/b\u003e"],["010.2024.00000207.001","10.2024.207.1","Construction
        Certificate","28/03/2025","55 Federation Dr, Eltham NSW 2480 \u003cbr/\u003e\u003cb\u003eCC
        - 55 Federation Drive Eltham - Dwelling alterations and additions\u003c/b\u003e"],["005.2025.00000070.001","5.2025.70.1","Development
        Application","14/04/2025","144 Fredericks Rd, Caniaba NSW 2480 \u003cbr/\u003e\u003cb\u003eDA25/70
        - 144 Fredericks Rd Caniaba - Dwelling adds, pool and gazebo\u003c/b\u003e"],["005.2025.00000063.001","5.2025.63.1","Development
        Application","11/04/2025","16 Sapphire Ct, Lismore Heights NSW 2480 \u003cbr/\u003e\u003cb\u003eDA25/63
        - 16 Sapphire Court, Lismore Heights - Carport with blv\u003c/b\u003e"],["005.2025.00000060.001","5.2025.60.1","Development
        Application","09/04/2025","86 Casino St, South Lismore NSW 2480 \u003cbr/\u003e\u003cb\u003eDA25/60
        - 86 Casino Street -Covered first floor deck\u003c/b\u003e"],["005.2025.00000062.001","5.2025.62.1","Development
        Application","10/04/2025","131 Laurel Ave, Lismore NSW 2480 \u003cbr/\u003e\u003cb\u003eDA25/62
        - 131 Laurel Avenue, Lismore - Raise existing dwelling\u003c/b\u003e"],["013.2023.00000179.002","13.2023.179.2","Subdivision
        Certificate","24/03/2025","730 Dunoon Rd, Tullera NSW 2480 \u003cbr/\u003e732
        Dunoon Rd, Tullera NSW 2480 \u003cbr/\u003e\u003cb\u003eSC - 730 \u0026 732
        Dunoon Road, Tullera - Subdivision\u003c/b\u003e"],["005.2025.00000057.001","5.2025.57.1","Development
        Application","03/04/2025","379A Richmond Hill Rd, Richmond Hill NSW 2480 \u003cbr/\u003e407
        Richmond Hill Rd, Richmond Hill NSW 2480 \u003cbr/\u003e\u003cb\u003eDA25/57
        - 379A \u0026 407 Richmond Hill Road, Richmond Hill - Subdivision\u003c/b\u003e"],["005.2025.00000056.001","5.2025.56.1","Development
        Application","25/03/2025","304 Dunoon Rd, North Lismore NSW 2480 \u003cbr/\u003e\u003cb\u003eDA25/56
        - 304 Dunoon Road, North Lismore - Dwelling addition\u003c/b\u003e"],["005.2025.00000067.001","5.2025.67.1","Development
        Application","15/04/2025","910 Kyogle Rd, Fernside NSW 2480 \u003cbr/\u003e940
        Kyogle Rd, Fernside NSW 2480 \u003cbr/\u003e\u003cb\u003eDA25/67 - 910 \u0026
        940 Kyogle Road, Fernside - Subdivision (boundary alte\u003c/b\u003e"],["005.2024.00000326.002","5.2024.326.2","S4.55","09/04/2025","16
        Cochran Pl, Lismore NSW 2480 \u003cbr/\u003e\u003cb\u003eDA24/326-2 - 16 Cochran
        Place Lismore - S4.55(1)\u003c/b\u003e"],["005.2025.00000064.001","5.2025.64.1","Development
        Application","09/04/2025","1545 Bangalow Rd, Clunes NSW 2480 \u003cbr/\u003e\u003cb\u003eDA25/64
        - 1545 Bangalow Road, Clunes - Use of relocated dwelling\u003c/b\u003e"],["005.2025.00000059.001","5.2025.59.1","Development
        Application","01/04/2025","3 Pinecrest Dr, Goonellabah NSW 2480 \u003cbr/\u003e\u003cb\u003eDA25/59
        - 3 Pinecrest Drive, Goonellabah - Extension to shed \u0026 new she\u003c/b\u003e"],["008.2025.00000017.001","8.2025.17.1","Complying
        Development","02/04/2025","1 Bounty St, Lismore NSW 2480 \u003cbr/\u003e\u003cb\u003erectify
        extensive flood damage\u003c/b\u003e"],["005.2025.00000054.001","5.2025.54.1","Development
        Application","20/03/2025","15 Hillside Dr, Nimbin NSW 2480 \u003cbr/\u003e\u003cb\u003eDA25/54
        - 15 Hillside Drive, Nimbin - Re-sited dwelling with alts \u0026 ad\u003c/b\u003e"],["005.2025.00000053.001","5.2025.53.1","Development
        Application","24/03/2025","14 Roseview Rd, Mcleans Ridges NSW 2480 \u003cbr/\u003e\u003cb\u003eDA25/53
        - 14 Roseview Road, McLeans Ridges - Change of use dual occ\u003c/b\u003e"],["005.2025.00000052.001","5.2025.52.1","Development
        Application","27/03/2025","18 Deloraine Rd, Lismore Heights NSW 2480 \u003cbr/\u003e\u003cb\u003eDA25/52
        - 18 Deloraine Road, Lismore Heights - Pool, workshop with alf\u003c/b\u003e"],["013.2024.00000240.001","13.2024.240.1","Subdivision
        Certificate","17/03/2025","23 Alternative Way, Nimbin NSW 2480 \u003cbr/\u003e\u003cb\u003eDA24/240
        - 23 Alternative Way, Nimbin - Subdivision Certificate\u003c/b\u003e"],["010.2024.00000189.001","10.2024.189.1","Construction
        Certificate","03/04/2025","111 Phyllis St, South Lismore NSW 2480 \u003cbr/\u003e113
        Phyllis St, South Lismore NSW 2480 \u003cbr/\u003e120 Casino St, South Lismore
        NSW 2480 \u003cbr/\u003e\u003cb\u003eCC - 111 \u0026 113 Phyllis and 120 Casino
        Street - STAGE 1 DA24/189\u003c/b\u003e"],["010.2024.00000294.001","10.2024.294.1","Construction
        Certificate","09/04/2025","4 Stewarts Way, Nimbin NSW 2480 \u003cbr/\u003e\u003cb\u003eCC
        - 4 Stewarts Way, Nimbin - Relocated dwelling to create detached du\u003c/b\u003e"],["013.2024.00000298.001","13.2024.298.1","Subdivision
        Certificate","28/03/2025","20 Phillip St, Goonellabah NSW 2480 \u003cbr/\u003e3
        Hayes St, Goonellabah NSW 2480 \u003cbr/\u003e\u003cb\u003eSC - 3 Hayes Street
        \u0026 20 Phillip Street, Goonellabah - Subdivisi\u003c/b\u003e"],["005.2025.00000050.001","5.2025.50.1","Development
        Application","24/03/2025","51 O\u0027Flynn St, Lismore Heights NSW 2480 \u003cbr/\u003e\u003cb\u003eDA25/50
        - 51 O\u0027Flynn Street, Lismore Heights - Carport\u003c/b\u003e"],["008.2025.00000016.001","8.2025.16.1","Complying
        Development","31/03/2025","2 Cochran St, Lismore NSW 2480 \u003cbr/\u003e\u003cb\u003elevel
        bathroom\u003c/b\u003e"],["005.2025.00000040.001","5.2025.40.1","Development
        Application","24/03/2025","1014 Kyogle Rd, Fernside NSW 2480 \u003cbr/\u003e1057
        Kyogle Rd, Fernside NSW 2480 \u003cbr/\u003e\u003cb\u003eDA25/40 - 1014 Kyogle
        Rd Fernside - Farm Production Brewery, Cafe and\u003c/b\u003e"],["010.2025.00000032.001","10.2025.32.1","Construction
        Certificate","19/03/2025","109 Invercauld Rd, Goonellabah NSW 2480 \u003cbr/\u003e\u003cb\u003eCarport
        with a building line variation to 1.356m to Invercauld Road\u003c/b\u003e"],["005.2024.00000288.002","5.2024.288.2","S4.55","19/03/2025","300
        Dunoon Rd, North Lismore NSW 2480 \u003cbr/\u003e\u003cb\u003eDA24/288-2 -
        300 Dunoon Road, North Lismore - S4.55(1A)\u003c/b\u003e"],["005.2025.00000051.001","5.2025.51.1","Development
        Application","20/03/2025","38 Sawyers Ave, Goonellabah NSW 2480 \u003cbr/\u003e\u003cb\u003eDA25/51
        - 38 Sawyers Avenue, Goonellabah - Retaining wall\u003c/b\u003e"],["010.2025.00000002.001","10.2025.2.1","Construction
        Certificate","25/03/2025","37 Wyrallah Rd, Girards Hill NSW 2480 \u003cbr/\u003e\u003cb\u003eCC
        - 37 Wyrallah Road Girards Hill - Raise dwelling\u003c/b\u003e"],["005.2025.00000048.001","5.2025.48.1","Development
        Application","19/03/2025","29 William Blair Ave, Goonellabah NSW 2480 \u003cbr/\u003e\u003cb\u003eDA25/48
        - 29 William Blair Avenue, Goonellabah - Dwelling addition\u003c/b\u003e"],["008.2025.00000014.001","8.2025.14.1","Complying
        Development","18/03/2025","7 Holland St, Goonellabah NSW 2480 \u003cbr/\u003e\u003cb\u003eCDA25/14
        - 7 Holland Street Goonellabah - Alterations\u003c/b\u003e"],["005.2022.00000331.003","5.2022.331.3","S4.55","24/03/2025","87
        Pineapple Rd, Goonellabah NSW 2480 \u003cbr/\u003e97 Pineapple Rd, Goonellabah
        NSW 2480 \u003cbr/\u003e\u003cb\u003eDA22/331-3 - 87 Pineapple Road, Goonellabah
        - S4.55(1A)\u003c/b\u003e"],["005.2020.00000385.002","5.2020.385.2","S4.55","24/03/2025","2
        Roseview Rd, Mcleans Ridges NSW 2480 \u003cbr/\u003e2A Roseview Rd, Mcleans
        Ridges NSW 2480 \u003cbr/\u003e\u003cb\u003eDA20/385-2 - 2 Roseview Road,
        McLeans Ridges - S4.55(1A)\u003c/b\u003e"]]}'
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/010.2025.00000039.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:14:55 GMT
      Content-Length:
      - '29599'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2025.00000039.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:14:57 GMT
      Content-Length:
      - '29803'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2025.00000061.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:14:59 GMT
      Content-Length:
      - '30515'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2025.00000043.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:15:01 GMT
      Content-Length:
      - '35663'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/013.2024.00000099.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:15:03 GMT
      Content-Length:
      - '28622'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQo8aHRtbCBsYW5nPSJlbiI+DQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+DQogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4NCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPg0KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIj4NCiAgICA8bWV0YSBuYW1lPSJrZXl3b3JkcyIgY29udGVudD0iTGlzbW9yZSBDaXR5IENvdW5jaWwsREEgVHJhY2tlcixBcHBsaWNhdGlvbiBUcmFja2VyLERldmVsb3BtZW50IEFwcGxpY2F0aW9uLERldmVsb3BtZW50IEFwcGxpY2F0aW9uIFRyYWNraW5nLCBEQSBFbnF1aXJ5LCBEZXZlbG9wbWVudCBBcHBsaWNhdGlvbiBFbnF1aXJ5LCBBcHBsaWNhdGlvbiBUcmFja2VyIj4NCiAgICA8bWV0YSBuYW1lPSJkZXNjcmlwdGlvbiIgY29udGVudD0iVGhlIG9mZmljaWFsIExpc21vcmUgQ2l0eSBDb3VuY2lsIEFwcGxpY2F0aW9uIFRyYWNrZXIiPg0KDQogICAgPHRpdGxlPkxpc21vcmUgQ2l0eSBDb3VuY2lsIC0gQXBwbGljYXRpb24gVHJhY2tlcjwvdGl0bGU+DQoNCiAgICA8IS0tZmF2aWNvbi0tPg0KICAgIDxsaW5rIGhyZWY9Ii9mYXZpY29uLmljbyIgcmVsPSJzaG9ydGN1dCBpY29uIiB0eXBlPSJpbWFnZS94LWljb24iPg0KDQogICAgPCEtLSBqUXVlcnkgLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS0xLjExLjEuanMiPjwvc2NyaXB0Pg0KDQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS11aS0xLjExLjIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvY29yZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvYWNjb3JkaW9uLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC90aGVtZXMvYmFzZS90aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQoNCiAgICA8IS0tIEJvb3RzdHJhcCAtLT4NCiAgICA8c2NyaXB0IHNyYz0iL1NjcmlwdHMvYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCg0KICAgIDxsaW5rIGhyZWY9Ii9Db250ZW50L2Jvb3RzdHJhcC10aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvYm9vdHN0cmFwLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9mb250LWF3ZXNvbWUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPCEtLSBEYXRhVGFibGVzIC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2pxdWVyeS5kYXRhVGFibGVzLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMuYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMucmVzcG9uc2l2ZS5qcyI+PC9zY3JpcHQ+DQoNCiAgICANCiAgICA8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLmJvb3RzdHJhcC5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvRGF0YVRhYmxlcy9jc3MvZGF0YVRhYmxlcy5yZXNwb25zaXZlLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLnJlc3BvbnNpdmUuc2NzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDwhLS0gQm9vdHN0cmFwIFNCLUFkbWluLTIgUGx1Z2luIGFuZCBvdGhlciBjc3MgYW5kIGpzIGZpbGVzLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9qcy9ib290c3RyYXAtY29tYm9ib3guanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9qcy9ib290c3RyYXAtZGF0ZXBpY2tlci5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL2pxdWVyeS5mb3JtLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvanF1ZXJ5LnRhYmxlc29ydGVyLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvbWFzdGVydmlldy5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL21ldGlzTWVudS5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL3NiLWFkbWluLTIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL2Nzcy9ib290c3RyYXAtY29tYm9ib3guY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvZGF0ZXBpY2tlcjMuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvbWFzdGVydmlldy1jdXN0b21pc2F0aW9ucy5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL2Nzcy9zYi1hZG1pbi0yLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDxsaW5rIGhyZWY9Ii9Db3VuY2lsX1RoZW1lL0xpc21vcmUvbGlzbW9yZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQogICAgDQoNCiAgICA8IS0tIEhUTUw1IFNoaW0gYW5kIFJlc3BvbmQuanMgSUU4IHN1cHBvcnQgb2YgSFRNTDUgZWxlbWVudHMgYW5kIG1lZGlhIHF1ZXJpZXMgLS0+DQogICAgPCEtLSBXQVJOSU5HOiBSZXNwb25kLmpzIGRvZXNuJ3Qgd29yayBpZiB5b3UgdmlldyB0aGUgcGFnZSB2aWEgZmlsZTovLyAtLT4NCiAgICA8IS0tW2lmIGx0IElFIDldPg0KICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9vc3MubWF4Y2RuLmNvbS9saWJzL2h0bWw1c2hpdi8zLjcuMC9odG1sNXNoaXYuanMiPjwvc2NyaXB0Pg0KICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9vc3MubWF4Y2RuLmNvbS9saWJzL3Jlc3BvbmQuanMvMS40LjIvcmVzcG9uZC5taW4uanMiPjwvc2NyaXB0Pg0KICAgIDwhW2VuZGlmXS0tPg0KDQogICAgPGxpbmsgaHJlZj0naHR0cDovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9UmFsZXdheTozMDAsNDAwLDYwMCw3MDAnIHJlbD0nc3R5bGVzaGVldCcgdHlwZT0ndGV4dC9jc3MnPg0KICAgIDxsaW5rIGhyZWY9J2h0dHA6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PU9zd2FsZDozMDAsNDAwLDcwMCcgcmVsPSdzdHlsZXNoZWV0JyB0eXBlPSd0ZXh0L2Nzcyc+DQo8L2hlYWQ+DQoNCg0KPGJvZHkgY2xhc3M9ImNicC1zcG1lbnUtcHVzaCI+DQogICAgPGRpdiBjbGFzcz0id3IiPg0KPGRpdiBpZD0iaGVhZGVyIj4NCiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXJfMTIiPg0KDQogICAgICAgIDxoMSBpZD0ibG9nbyI+PGEgaHJlZj0iaHR0cDovL3d3dy5saXNtb3JlLm5zdy5nb3YuYXUvZGVmYXVsdC5hc3AiPjxpbWcgc3JjPSIvL2NhbmRpZGF0ZS1vZmZpY2UuczMuYW1hem9uYXdzLmNvbS9zaGFyZWQvbGlzbW9yZS9pbWFnZXMvbG9nby5wbmciIGFsdD0iTGlzbW9yZSBDaXR5IENvdW5jaWwiIHN0eWxlPSJwYWRkaW5nLXRvcDo1cHgiPjxzdHJvbmcgY2xhc3M9InZoIj5MaXNtb3JlIENpdHkgQ291bmNpbDwvc3Ryb25nPjwvYT48L2gxPg0KDQogICAgICAgIDxkaXYgY2xhc3M9InV0aWxpdHkgcmlnaHQiPg0KICAgICAgICAgICAgPGEgY2xhc3M9ImhvbWUtbGluayIgaHJlZj0iaHR0cDovL3d3dy5saXNtb3JlLm5zdy5nb3YuYXUvZGVmYXVsdC5hc3AiPg0KICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvL2NhbmRpZGF0ZS1vZmZpY2UuczMuYW1hem9uYXdzLmNvbS9zaGFyZWQvbGlzbW9yZS9pbWFnZXMvaG9tZS5wbmciIGFsdD0iTGlzbW9yZSBDaXR5IENvdW5jaWwiPg0KICAgICAgICAgICAgPC9hPg0KICAgICAgICA8L2Rpdj4NCg0KICAgICAgICA8ZGl2IGNsYXNzPSJjbGVhciI+DQogICAgICAgIDwvZGl2Pg0KDQogICAgPC9kaXY+DQo8L2Rpdj4NCiAgICAgICAgPGRpdiBpZD0iYmFubmVyIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJhbm5lci10ZXh0IGNmIj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJiYW5uZXItdGV4dC1jb250YWluZXIiPg0KICAgICAgICAgICAgICAgICAgICA8aDEgY2xhc3M9Im93Ij5EQSBUcmFja2luZyA8c3Bhbj5Qb3J0YWw8L3NwYW4+PC9oMT4NCiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Im5tIj5JbmZvcm1hdGlvbiBvbiBkZXZlbG9wbWVudCBhcHBsaWNhdGlvbnMgaW4gdGhlIExpc21vcmUgTG9jYWwgR292ZXJubWVudCBBcmVhLiA8L3A+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lcl8xMiBpbnRybyBjZiI+ICAgICAgICAgICAgPCEtLSBOYXZpZ2F0aW9uIC0tPg0KICAgICAgICAgICAgPG5hdiBjbGFzcz0ibmF2YmFyIG5hdmJhci1kZWZhdWx0IG5hdmJhci1zdGF0aWMtdG9wIiByb2xlPSJuYXZpZ2F0aW9uIiBzdHlsZT0ibWFyZ2luLWJvdHRvbTogMCI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibmF2YmFyLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0ibmF2YmFyLXRvZ2dsZSIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLXRhcmdldD0iLm5hdmJhci1jb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3Itb25seSI+VG9nZ2xlIG5hdmlnYXRpb248L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1iYXIiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tYmFyIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2YmFyLWJyYW5kIiBocmVmPSIjIj48L2E+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPCEtLSAvLm5hdmJhci1oZWFkZXIgLS0+DQogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2YmFyLXRvcC1saW5rcyBuYXZiYXItcmlnaHQgaGlkZGVuLXhzIGhpZGRlbi1zbSBoaWRkZW4tbWQiPg0KICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48c3BhbiBpZD0icHJpbnRJY29uIiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1wcmludCIgb25jbGljaz0id2luZG93LnByaW50KCk7Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgIDwvdWw+DQoNCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItZGVmYXVsdCBzaWRlYmFyIiByb2xlPSJuYXZpZ2F0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2lkZWJhci1uYXYgbmF2YmFyLWNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IiBpZD0ic2lkZS1tZW51Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48aSBjbGFzcz0iZmEgZmEtbGlzdC11bCBmYS1mdyI+PC9pPkFwcGxpY2F0aW9uIFRyYWNrZXI8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9BYm91dCB0YXJnZXQ9X3NlbGY+V2hhdCBpcyBBcHBsaWNhdGlvbiBUcmFja2VyPzwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9EaXNjbGFpbWVyIHRhcmdldD1fc2VsZj5EaXNjbGFpbWVyPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gLy5uYXYtc2Vjb25kLWxldmVsIC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48aSBjbGFzcz0iZmEgZmEtbGlzdC11bCBmYS1mdyI+PC9pPkFwcGxpY2F0aW9uczxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXYtc2Vjb25kLWxldmVsIGNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL0luZGV4IHRhcmdldD0+QXBwbGljYXRpb24gVHJhY2tlciBIb21lPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL1NlYXJjaCBpZD1zZWFyY2ggdGFyZ2V0PV9zZWxmPlNlYXJjaDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/UmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1UcnVlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSBpZD1vdXRzdGFuZGluZy1hcHBzIHRhcmdldD1fc2VsZj5VbmRldGVybWluZWQgQXBwbGljYXRpb25zPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9SZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9VHJ1ZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIGlkPWV4aGliaXRlZC1hcHBzIHRhcmdldD1fc2VsZj5BcHBsaWNhdGlvbnMgT24gRXhoaWJpdGlvbjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjdGl2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbnMgU3VibWl0dGVkPHNwYW4gY2xhc3M9ImZhIGFycm93Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdi1zZWNvbmQtbGV2ZWwgY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTIlMmYwNiUyZjIwMjUmRGF0ZVRvPTIlMmYwNiUyZjIwMjUmRGF0ZVR5cGU9MSZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTI1JTJmMDUlMmYyMDI1JkRhdGVUbz0zMSUyZjA1JTJmMjAyNSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9NSUyYzglMmMxMCUyYzEzJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgV2VlazwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MSUyZjA2JTJmMjAyNSZEYXRlVG89MiUyZjA2JTJmMjAyNSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9NSUyYzglMmMxMCUyYzEzJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPlRoaXMgTW9udGg8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTElMmYwNSUyZjIwMjUmRGF0ZVRvPTMxJTJmMDUlMmYyMDI1JkRhdGVUeXBlPTEmUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJkFwcGxpY2F0aW9uVHlwZT01JTJjOCUyYzEwJTJjMTMmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjdGl2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbnMgRGV0ZXJtaW5lZDxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXYtc2Vjb25kLWxldmVsIGNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0yJTJmMDYlMmYyMDI1JkRhdGVUbz0yJTJmMDYlMmYyMDI1JkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTI1JTJmMDUlMmYyMDI1JkRhdGVUbz0zMSUyZjA1JTJmMjAyNSZEYXRlVHlwZT0yJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1UcnVlJkFwcGxpY2F0aW9uVHlwZT01JTJjOCUyYzEwJTJjMTMmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBXZWVrPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDYlMmYyMDI1JkRhdGVUbz0yJTJmMDYlMmYyMDI1JkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIE1vbnRoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDUlMmYyMDI1JkRhdGVUbz0zMSUyZjA1JTJmMjAyNSZEYXRlVHlwZT0yJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1UcnVlJkFwcGxpY2F0aW9uVHlwZT01JTJjOCUyYzEwJTJjMTMmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8IS0tIC8uc2lkZWJhci1jb2xsYXBzZSAtLT4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLXN0YXRpYy1zaWRlIC0tPg0KICAgICAgICAgICAgPC9uYXY+DQogICAgICAgICAgICA8ZGl2IGlkPSJwYWdlLXdyYXBwZXIiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+DQogICAgICAgICAgICAgICAgICAgIA0KDQoNCiAgICA8ZGl2IGNsYXNzPSJwYWdlLWhlYWRlciI+DQogICAgICAgIDxoMj5BcHBsaWNhdGlvbjogU3ViZGl2aXNpb24gQ2VydGlmaWNhdGUgKDEzLjIwMjQuOTkuMSk8L2gyPg0KICAgIDwvZGl2Pg0KICAgIDxoND5EZXRhaWxlZCBpbmZvcm1hdGlvbiByZWxhdGVkIHRvIHRoZSBhcHBsaWNhdGlvbjo8L2g0Pg0KICAgIDxiciAvPg0KICAgIDxkaXY+DQogICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6c2hvd0FsbCgpOyI+U2hvdyBBbGw8L2E+IC8NCiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDpoaWRlQWxsKCk7Ij5IaWRlIEFsbDwvYT4NCiAgICA8L2Rpdj4NCiAgICA8ZGl2IGlkPSJhcHBsaWNhdGlvbiI+DQoNCiAgICAgICAgICAgIDxoMyBpZD0iZGV0YWlscyI+PGEgaHJlZj0iIyI+RGV0YWlsczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+RGVzY3JpcHRpb246IDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlNDIC0gMTEsIDEzLCAxNSAmYW1wOyAxOSBBaXJmb3JjZSBSb2FkIEVhc3QgTGlzbW9yZSAtIFN1YmRpdmlzaW9uPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlN1Ym1pdHRlZCBEYXRlOiA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjA3LzA0LzIwMjUgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFwcGxpY2F0aW9uIFR5cGU6IDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlN1YmRpdmlzaW9uIENlcnRpZmljYXRlPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9InByb3BlcnRpZXMiPjxhIGhyZWY9IiMiPlByb3BlcnRpZXM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjExIEFpcmZvcmNlIFJkLCBFYXN0IExpc21vcmUgTlNXIDI0ODAgIChMT1Q6IDEgRFA6IDEyOTQ4MjEpPGJyLz4xMyBBaXJmb3JjZSBSZCwgRWFzdCBMaXNtb3JlIE5TVyAyNDgwICAoTE9UOiAyIERQOiAxMjk0ODIxKTxici8+MTUgQWlyZm9yY2UgUmQsIEVhc3QgTGlzbW9yZSBOU1cgMjQ4MCAgKExPVDogNiBEUDogMTI5NjI2Mik8YnIvPjE5IEFpcmZvcmNlIFJkLCBFYXN0IExpc21vcmUgTlNXIDI0ODAgIChMT1Q6IDUgRFA6IDEyOTQ4MjEpPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9InBlb3BsZSI+PGEgaHJlZj0iIyI+UGVvcGxlPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQWNjcmVkaXRlZCBDZXJ0aWZpZXI6ICANCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcHBsaWNhbnQ6ICANCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQcmluY2lwYWwgQ2VydGlmeWluZyBBdXRob3JpdHk6ICANCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9Im9mZmljZXIiPjxhIGhyZWY9IiMiPk9mZmljZXI8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPk1pY2hhZWwgQW5kZXJzb248L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0iZGVjaXNpb24iPjxhIGhyZWY9IiMiPkRlY2lzaW9uPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5BcHBsaWNhdGlvbiBTdGF0dXM6IERldGVybWluZWQ8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERldGVybWluYXRpb24gRGF0ZToNCjI2LzA1LzIwMjUgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRldGVybWluYXRpb24gVHlwZTogQXBwcm92ZWQ8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0iZXN0aW1hdGVkQ29zdCI+PGEgaHJlZj0iIyI+RXN0aW1hdGVkIENvc3Q8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPk5vdCBhcHBsaWNhYmxlLjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJ0cmFja2luZyI+PGEgaHJlZj0iIyI+VHJhY2tpbmc8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24td3JhcCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5zd2lwZSB0YWJsZSB0byB0aGUgbGVmdCB0byByZXZlYWwgbW9yZSBkYXRhPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tYXJyb3ctcmlnaHQiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtYm9yZGVyZWQgbm8tZm9vdGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5EZXNjcmlwdGlvbjwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Db21tZW5jZWQgRGF0ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+RHVlIERhdGU8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+Q29tcGxldGVkIERhdGU8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+QXBwbGljYXRpb24gUmVjZWl2ZWQ8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMDcvMDQvMjAyNSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQowNy8wNC8yMDI1ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQowOS8wNC8yMDI1ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkNlcnRpZmljYXRlIElzc3VlZDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyNi8wNS8yMDI1ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI3LzA1LzIwMjUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI2LzA1LzIwMjUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQoNCiAgICAgICAgICAgIDxoMyBpZD0icmVsYXRlZEFwcGxpY2F0aW9ucyI+PGEgaHJlZj0iIyI+UmVsYXRlZCBBcHBsaWNhdGlvbnM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24td3JhcCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5zd2lwZSB0YWJsZSB0byB0aGUgbGVmdCB0byByZXZlYWwgbW9yZSBkYXRhPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tYXJyb3ctcmlnaHQiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtYm9yZGVyZWQgbm8tZm9vdGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5BcHBsaWNhdGlvbiBUeXBlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkFwcGxpY2F0aW9uIE51bWJlcjwvdGg+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFM0LjU1DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vdHJhY2tlci5saXNtb3JlLm5zdy5nb3YuYXUvQXBwbGljYXRpb24vQXBwbGljYXRpb25EZXRhaWxzLzAwNS4yMDI0LjAwMDAwMDk5LjAwMi8iPjUuMjAyNC45OS4yPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCg0KICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCg0KDQoNCg0KDQoNCjxoMyBpZD0iZG9jdW1lbnRzIj48YSBocmVmPSIjIj5Eb2N1bWVudHM8L2E+PC9oMz4NCjxkaXY+DQoNCiAgICAgICAgPGI+Tm8gZGF0YS48L2I+DQo8L2Rpdj4NCg0KDQogICAgICAgICAgICA8aDMgaWQ9ImNvbnRhY3RVcyI+PGEgaHJlZj0iIyI+Q29udGFjdCBVczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PHA+DQpTaG91bGQgeW91IHdpc2ggdG8gY29udGFjdCBjb3VuY2lsIHRvIG1ha2UgZW5xdWlyaWVzIHJlZ2FyZGluZyBhcHBsaWNhdGlvbnMgZGlzcGxheWVkIG9uIHRoZSB3ZWJzaXRlLCBwbGVhc2UgY29udGFjdCBlaXRoZXIgYnkgZW1haWwgPGEgc3R5bGU9ImNvbG9yOiBibHVlIiBocmVmPSJtYWlsdG86Y291bmNpbEBsaXNtb3JlLm5zdy5nb3YuYXU/c3ViamVjdD1TdWJtaXNzaW9uIGZvciBhcHBsaWNhdGlvbiAxMy4yMDI0Ljk5LjEiPmNvdW5jaWxAbGlzbW9yZS5uc3cuZ292LmF1PC9hPiwgcGhvbmUgMTMwMCA4NyA4MyA4NyBkdXJpbmcgbm9ybWFsIG9mZmljZSBob3VycyBvciBpbiB3cml0aW5nIHRvIFBPIEJveCAyM0EsIExpc21vcmUgTlNXIDI0ODAuIEFsbCBjb3JyZXNwb25kZW5jZSBzaG91bGQgYmUgYWRkcmVzc2VkIHRvIHRoZSBHZW5lcmFsIE1hbmFnZXIgYW5kIHF1b3RlIHRoZSByZWxldmFudCBhcHBsaWNhdGlvbiByZWZlcmVuY2UgbnVtYmVyLg0KPC9wPg0KPHA+DQpJZiB0aGUgYXBwbGljYXRpb24gZGlzcGxheWVkIG9uIHRoaXMgd2Vic2l0ZSBpcyB1bmRlciBjdXJyZW50IG5laWdoYm91ciBub3RpZmljYXRpb24sIHByb3BlcnRpZXMgY29uc2lkZXJlZCBieSBDb3VuY2lsIHRvIHBvc3NpYmx5IGJlIGRldHJpbWVudGFsbHkgYWZmZWN0ZWQgd2lsbCBiZSBjb250YWN0ZWQgaW5kaXZpZHVhbGx5IGFuZCBhZHZpc2VkIG9mIHRoZWlyIHN1Ym1pc3Npb24gb3Bwb3J0dW5pdGllcyB1bmRlciBDaGFwdGVyIDEwIExpc21vcmUgRGV2ZWxvcG1lbnQgQ29udHJvbCBQbGFuIDIwMTIuDQo8L3A+DQo8cD4NCjxhIGhyZWY9Imh0dHA6Ly93d3cubGlzbW9yZS5uc3cuZ292LmF1L2NwX3RoZW1lcy9kZWZhdWx0L3BhZ2UuYXNwP3A9RE9DLUxIUi04My03Ni01OCIgIHRhcmdldD0iX2JsYW5rIj5DTElDSyBIRVJFPC9hPiB0byB2aXNpdCBDb3VuY2ls4oCZcyB3ZWJzaXRlIGFuZCBzZWUgZnVydGhlciBkZXRhaWxzIG9uIHRoZSBtYWtpbmcgb2Ygc3VibWlzc2lvbnMgb3IgcmluZyAxMzAwIDg3IDgzIDg3IGR1cmluZyBub3JtYWwgb2ZmaWNlIGhvdXJzLg0KPC9wPg0KPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0ibm90aWZpZWRBZGRyZXNzZXMiPjxhIGhyZWY9IiMiPk5vdGlmaWVkIEFkZHJlc3NlczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgPGI+Tm8gZGF0YS48L2I+DQogICAgICAgICAgICA8L2Rpdj4NCg0KPGgzIGlkPSJnb29nbGVtYXBzIj48YSBocmVmPSIjIj5Hb29nbGUgTWFwczwvYT48L2gzPg0KPGRpdiBpZD0ibWFwX2NvbnRhaW5lciI+DQogICAgPGRpdiBpZD0ibWFwX2NhbnZhcyIgY2xhc3M9ImlmcmFtZS1yd2QiPg0KICAgIDwvZGl2Pg0KPC9kaXY+DQoNCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCg0KICAgIHdpbmRvdy5vbmxvYWQgPSBsb2FkR29vZ2xlTWFwc1NjcmlwdDsNCg0KICAgIHZhciBnZW9jb2RlcjsNCiAgICB2YXIgbWFwOw0KICAgIHZhciB0aW1lb3V0ID0gMzAwOw0KICAgIHZhciBwcm9wZXJ0aWVzID0gWyIxMSBBaXJmb3JjZSBSZCwgRWFzdCBMaXNtb3JlIE5TVyAyNDgwICIsIjEzIEFpcmZvcmNlIFJkLCBFYXN0IExpc21vcmUgTlNXIDI0ODAgIiwiMTUgQWlyZm9yY2UgUmQsIEVhc3QgTGlzbW9yZSBOU1cgMjQ4MCAiLCIxOSBBaXJmb3JjZSBSZCwgRWFzdCBMaXNtb3JlIE5TVyAyNDgwICJdOw0KICAgIHZhciBsYXRMbmdBcnIgPSBbXTsNCg0KICAgIGZ1bmN0aW9uIGxvYWRHb29nbGVNYXBzU2NyaXB0KCkgew0KICAgICAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7DQogICAgICAgIHNjcmlwdC50eXBlID0gInRleHQvamF2YXNjcmlwdCI7DQogICAgICAgIHNjcmlwdC5zcmMgPSAiLy9tYXBzLmdvb2dsZWFwaXMuY29tL21hcHMvYXBpL2pzP2tleT1BSXphU3lBOHliMEx6Vlh4TXZoLTNVYzZibzNULUJtbEY2WXR2bjQmY2FsbGJhY2s9bG9hZEdvb2dsZU1hcHMiOw0KICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gcmVuZGVyR29vZ2xlTWFwcygpDQogICAgew0KICAgICAgICB2YXIgbWFwT3B0aW9ucyA9IHsNCiAgICAgICAgICAgIGNlbnRlcjogbGF0TG5nQXJyWzBdLA0KICAgICAgICAgICAgem9vbTogMTYsDQogICAgICAgICAgICBtYXBUeXBlSWQ6IGdvb2dsZS5tYXBzLk1hcFR5cGVJZC5ST0FETUFQLA0KICAgICAgICAgICAgbWFwVHlwZUNvbnRyb2w6IGZhbHNlDQogICAgICAgIH0NCg0KICAgICAgICBtYXAgPSBuZXcgZ29vZ2xlLm1hcHMuTWFwKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtYXBfY2FudmFzIiksIG1hcE9wdGlvbnMpOw0KDQogICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZERvbUxpc3RlbmVyKHdpbmRvdywgJ3Jlc2l6ZScsIGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgdmFyIGNlbnRlciA9IG1hcC5nZXRDZW50ZXIoKTsNCiAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LnRyaWdnZXIobWFwLCAncmVzaXplJyk7DQogICAgICAgICAgICBtYXAuc2V0Q2VudGVyKGNlbnRlcik7DQogICAgICAgIH0pOw0KDQogICAgfQ0KDQogICAgZnVuY3Rpb24gbG9hZEdvb2dsZU1hcHMoKSB7DQogICAgICAgIGdlb2NvZGVyID0gbmV3IGdvb2dsZS5tYXBzLkdlb2NvZGVyKCk7DQogICAgICAgIHZhciBub09mRmFpbGVkTG9jYXRpb25TZWFyY2ggPSAwOw0KDQogICAgICAgICQocHJvcGVydGllcykuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHsNCiAgICAgICAgICAgIHZhciBwcm9wZXJ0eUFkZHJlc3MgPSBlbGVtZW50Ow0KDQogICAgICAgICAgICAvL0dldCBnZW9jb2RlDQogICAgICAgICAgICBnZW9jb2Rlci5nZW9jb2RlKHsgJ2FkZHJlc3MnOiBwcm9wZXJ0eUFkZHJlc3MgfSwgZnVuY3Rpb24gKHJlc3VsdHMsIHN0YXR1cykgew0KICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgPT0gZ29vZ2xlLm1hcHMuR2VvY29kZXJTdGF0dXMuT0spIHsNCg0KICAgICAgICAgICAgICAgICAgICB2YXIgbG9jYXRpb24gPSByZXN1bHRzWzBdLmdlb21ldHJ5LmxvY2F0aW9uOw0KICAgICAgICAgICAgICAgICAgICB2YXIgbGF0TG5nID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhsb2NhdGlvbi5sYXQoKSwgbG9jYXRpb24ubG5nKCkpOw0KDQogICAgICAgICAgICAgICAgICAgIGxhdExuZ0Fyci5wdXNoKGxhdExuZyk7DQoNCiAgICAgICAgICAgICAgICAgICAgaWYobGF0TG5nQXJyLmxlbmd0aCA9PSAxKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJHb29nbGVNYXBzKCk7DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAvL0NyZWF0ZSBtYXJrZXIgZm9yIG1hcCBhbmQgcGxhY2UgaXQgb24gdGhlIG1hcA0KICAgICAgICAgICAgICAgICAgICB2YXIgbWFya2VyID0gbmV3IGdvb2dsZS5tYXBzLk1hcmtlcih7DQogICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogbGF0TG5nLA0KICAgICAgICAgICAgICAgICAgICAgICAgbWFwOiBtYXANCiAgICAgICAgICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRlbnRTdHJpbmcgPSAnPGRpdj48c3Bhbj4nICsgcHJvcGVydHlBZGRyZXNzICsgJzwvc3Bhbj48L2Rpdj4nOw0KICAgICAgICAgICAgICAgICAgICB2YXIgaW5mb3dpbmRvdyA9IG5ldyBnb29nbGUubWFwcy5JbmZvV2luZG93KHsgICAvL0NyZWF0ZSBpbmZvIHdpbmRvdw0KICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogY29udGVudFN0cmluZw0KICAgICAgICAgICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcihtYXJrZXIsICdjbGljaycsIGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgaW5mb3dpbmRvdy5vcGVuKG1hcCwgbWFya2VyKTsNCiAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIC8vaWYgbm8gbG9jYXRpb24gZm91bmQgYnkgZ29vZ2xlIGZvciBhIHByb3BlcnR5DQogICAgICAgICAgICAgICAgZWxzZSBpZiAoc3RhdHVzID09ICJaRVJPX1JFU1VMVFMiKSB7DQogICAgICAgICAgICAgICAgICAgIG5vT2ZGYWlsZWRMb2NhdGlvblNlYXJjaCsrOw0KDQogICAgICAgICAgICAgICAgICAgIGlmKG5vT2ZGYWlsZWRMb2NhdGlvblNlYXJjaCA9PSAkKHByb3BlcnRpZXMpLmxlbmd0aCkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZUdvb2dsZU1hcHNDb250ZW50KCk7DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdHVzID09IGdvb2dsZS5tYXBzLkdlb2NvZGVyU3RhdHVzLk9WRVJfUVVFUllfTElNSVQpIHsNCiAgICAgICAgICAgICAgICAgICAgLy9zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgZ2V0R2VvQ29kZUZvckFkZHJlc3MoaWQsIGFkZHJlc3MpOyB9LCAodGltZW91dCkpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICAvL1JlcGxhY2VzIGdvb2dsZSBtYXBzIGNvbnRlbnQgd2l0aCBhIG5ldyBkaXYgYmxvY2sgdGhhdCBoYXMgaW5mbyBtZXNzYWdlDQogICAgZnVuY3Rpb24gcmVwbGFjZUdvb2dsZU1hcHNDb250ZW50KCkgew0KICAgICAgICB2YXIgbmV3Q29udGVudCA9ICc8ZGl2IGNsYXNzPSJ1aS1hY2NvcmRpb24tY29udGVudCB1aS1oZWxwZXItcmVzZXQgdWktd2lkZ2V0LWNvbnRlbnQgdWktY29ybmVyLWJvdHRvbSI+JyArDQogICAgICAgICAgICAnPHA+Q291bGRuXCd0IGZpbmQgdGhlIHByb3BlcnR5IGFkZHJlc3MoZXMpIG9uIEdvb2dsZSBNYXBzLiA8cD4nICsNCiAgICAgICAgICAgICc8L2Rpdj4nOw0KDQogICAgICAgICQoJyNtYXBfY29udGFpbmVyJykucmVwbGFjZVdpdGgobmV3Q29udGVudCk7DQogICAgfQ0KDQo8L3NjcmlwdD4NCg0KICAgIDwvZGl2Pg0KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCg0KICAgICAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAkLmZuLnRvZ2dsZXBhbmVscyA9IGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5hZGRDbGFzcygidWktYWNjb3JkaW9uIHVpLWFjY29yZGlvbi1pY29ucyB1aS1oZWxwZXItcmVzZXQiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoImgzIikNCiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygidWktYWNjb3JkaW9uLWhlYWRlciB1aS1oZWxwZXItcmVzZXQgdWktc3RhdGUtZGVmYXVsdCB1aS1jb3JuZXItdG9wIHVpLWNvcm5lci1ib3R0b20iKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLmhvdmVyKGZ1bmN0aW9uICgpIHsgJCh0aGlzKS50b2dnbGVDbGFzcygidWktc3RhdGUtaG92ZXIiKTsgfSkNCiAgICAgICAgICAgICAgICAgICAgICAgIC5wcmVwZW5kKCc8c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLXVwIj48L3NwYW4+JykNCiAgICAgICAgICAgICAgICAgICAgICAgIC5jbGljayhmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS50b2dnbGVDbGFzcygidWktYWNjb3JkaW9uLWhlYWRlci1hY3RpdmUgdWktc3RhdGUtYWN0aXZlIHVpLXN0YXRlLWRlZmF1bHQgdWktY29ybmVyLWJvdHRvbSIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kKCI+IC5nbHlwaGljb24iKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudG9nZ2xlQ2xhc3MoImdseXBoaWNvbi1jaGV2cm9uLXVwIGdseXBoaWNvbi1jaGV2cm9uLWRvd24iKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZW5kKCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm5leHQoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc2xpZGVUb2dnbGUoKTsNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0pDQogICAgICAgICAgICAgICAgICAgICAgICAubmV4dCgpDQogICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoInVpLWFjY29yZGlvbi1jb250ZW50IHVpLWhlbHBlci1yZXNldCB1aS13aWRnZXQtY29udGVudCB1aS1jb3JuZXItYm90dG9tIikNCiAgICAgICAgICAgICAgICAgICAgICAgIC5oaWRlKCk7DQogICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICAkKCcjYXBwbGljYXRpb24nKS50b2dnbGVwYW5lbHMoKTsNCg0KICAgICAgICAgICAgJCgnI3Byb3BlcnRpZXMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI2RldGFpbHMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI3RyYWNraW5nJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNkb2N1bWVudHMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI3JlbGF0ZWRBcHBsaWNhdGlvbnMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI2ZlZXMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI2dvb2dsZW1hcHMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI2NvbnRhY3RVcycpLmNsaWNrKCk7DQogICAgICAgIH0pOw0KDQogICAgICAgIC8qIFNob3dzIGFsbCB0aGUgcGFuZWxzICovDQogICAgICAgIGZ1bmN0aW9uIHNob3dBbGwoKSB7DQogICAgICAgICAgICAkKCcjYXBwbGljYXRpb24nKS5jaGlsZHJlbigiaDMiKS5lYWNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcygidWktc3RhdGUtZGVmYXVsdCIpKSB7DQogICAgICAgICAgICAgICAgICAgICQodGhpcykuY2xpY2soKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8qIEhpZGUgYWxsIHRoZSBwYW5lbHMgKi8NCiAgICAgICAgZnVuY3Rpb24gaGlkZUFsbCgpIHsNCiAgICAgICAgICAgICQoJyNhcHBsaWNhdGlvbicpLmNoaWxkcmVuKCJoMyIpLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKCJ1aS1zdGF0ZS1hY3RpdmUiKSkgew0KICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmNsaWNrKCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSk7DQogICAgICAgIH0NCg0KICAgIDwvc2NyaXB0Pg0KDQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPCEtLSAvLmNvbnRhaW5lci1mbHVpZCAtLT4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCg0KICAgICAgICA8ZGl2IGNsYXNzPSJwcmUtZm9vdGVyIGNvbnRhaW5lcl8xMiBjZiI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJncmlkXzQiPg0KICAgICAgICAgICAgICAgDQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgaWQ9ImZvb3RlciI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXJfMTIgY2YiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImdyaWRfMTIgY2Ygb3ciPg0KICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iY3AiPkNvcHlyaWdodCAmY29weTsgMjAyNSBMaXNtb3JlIENpdHkgQ291bmNpbDwvcD4NCiAgICAgICAgICAgICAgICAgICAgPHA+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cubGlzbW9yZS5uc3cuZ292LmF1L3BhZ2UuYXNwP3A9RE9DLU9DVC02NC01Ny0zMCIgdGFyZ2V0PSJfcGFyZW50Ij5JbnRlcm5ldCBQcml2YWN5IFN0YXRlbWVudDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICZuYnNwOyZuYnNwOyB8ICZuYnNwOyZuYnNwOw0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5saXNtb3JlLm5zdy5nb3YuYXUvcGFnZS5hc3A/cD1ET0MtT0NULTY0LTU3LTMwIiB0YXJnZXQ9Il9wYXJlbnQiPkRpc2NsYWltZXI8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAmbmJzcDsmbmJzcDsgfCAmbmJzcDsmbmJzcDsNCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cubGlzbW9yZS5uc3cuZ292LmF1L2NwX3RoZW1lcy9kZWZhdWx0L3NpdGVtYXAuYXNwIiB0YXJnZXQ9Il9wYXJlbnQiPlNpdGUgTWFwPC9hPg0KICAgICAgICAgICAgICAgICAgICA8L3A+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQo8L2JvZHk+DQo8L2h0bWw+DQo=
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2025.00000068.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:15:05 GMT
      Content-Length:
      - '31363'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2025.00000044.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:15:08 GMT
      Content-Length:
      - '31561'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/010.2025.00000022.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:15:09 GMT
      Content-Length:
      - '30509'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/008.2025.00000025.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:15:12 GMT
      Content-Length:
      - '26653'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/008.2025.00000024.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:15:14 GMT
      Content-Length:
      - '27813'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2025.00000038.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:15:16 GMT
      Content-Length:
      - '33195'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/008.2025.00000022.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:15:18 GMT
      Content-Length:
      - '26690'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/010.2024.00000204.002
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:15:20 GMT
      Content-Length:
      - '29854'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/008.2025.00000021.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:15:22 GMT
      Content-Length:
      - '26680'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2025.00000065.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:15:24 GMT
      Content-Length:
      - '30222'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/008.2025.00000020.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:15:26 GMT
      Content-Length:
      - '26662'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2023.00000291.002
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:15:28 GMT
      Content-Length:
      - '30388'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/013.2022.00000088.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:15:31 GMT
      Content-Length:
      - '28513'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/010.2024.00000112.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:15:33 GMT
      Content-Length:
      - '29415'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2024.00000117.002
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:15:35 GMT
      Content-Length:
      - '30829'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQo8aHRtbCBsYW5nPSJlbiI+DQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+DQogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4NCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPg0KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIj4NCiAgICA8bWV0YSBuYW1lPSJrZXl3b3JkcyIgY29udGVudD0iTGlzbW9yZSBDaXR5IENvdW5jaWwsREEgVHJhY2tlcixBcHBsaWNhdGlvbiBUcmFja2VyLERldmVsb3BtZW50IEFwcGxpY2F0aW9uLERldmVsb3BtZW50IEFwcGxpY2F0aW9uIFRyYWNraW5nLCBEQSBFbnF1aXJ5LCBEZXZlbG9wbWVudCBBcHBsaWNhdGlvbiBFbnF1aXJ5LCBBcHBsaWNhdGlvbiBUcmFja2VyIj4NCiAgICA8bWV0YSBuYW1lPSJkZXNjcmlwdGlvbiIgY29udGVudD0iVGhlIG9mZmljaWFsIExpc21vcmUgQ2l0eSBDb3VuY2lsIEFwcGxpY2F0aW9uIFRyYWNrZXIiPg0KDQogICAgPHRpdGxlPkxpc21vcmUgQ2l0eSBDb3VuY2lsIC0gQXBwbGljYXRpb24gVHJhY2tlcjwvdGl0bGU+DQoNCiAgICA8IS0tZmF2aWNvbi0tPg0KICAgIDxsaW5rIGhyZWY9Ii9mYXZpY29uLmljbyIgcmVsPSJzaG9ydGN1dCBpY29uIiB0eXBlPSJpbWFnZS94LWljb24iPg0KDQogICAgPCEtLSBqUXVlcnkgLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS0xLjExLjEuanMiPjwvc2NyaXB0Pg0KDQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS11aS0xLjExLjIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvY29yZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvYWNjb3JkaW9uLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC90aGVtZXMvYmFzZS90aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQoNCiAgICA8IS0tIEJvb3RzdHJhcCAtLT4NCiAgICA8c2NyaXB0IHNyYz0iL1NjcmlwdHMvYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCg0KICAgIDxsaW5rIGhyZWY9Ii9Db250ZW50L2Jvb3RzdHJhcC10aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvYm9vdHN0cmFwLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9mb250LWF3ZXNvbWUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPCEtLSBEYXRhVGFibGVzIC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2pxdWVyeS5kYXRhVGFibGVzLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMuYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMucmVzcG9uc2l2ZS5qcyI+PC9zY3JpcHQ+DQoNCiAgICANCiAgICA8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLmJvb3RzdHJhcC5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvRGF0YVRhYmxlcy9jc3MvZGF0YVRhYmxlcy5yZXNwb25zaXZlLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLnJlc3BvbnNpdmUuc2NzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDwhLS0gQm9vdHN0cmFwIFNCLUFkbWluLTIgUGx1Z2luIGFuZCBvdGhlciBjc3MgYW5kIGpzIGZpbGVzLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9qcy9ib290c3RyYXAtY29tYm9ib3guanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9qcy9ib290c3RyYXAtZGF0ZXBpY2tlci5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL2pxdWVyeS5mb3JtLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvanF1ZXJ5LnRhYmxlc29ydGVyLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvbWFzdGVydmlldy5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL21ldGlzTWVudS5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL3NiLWFkbWluLTIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL2Nzcy9ib290c3RyYXAtY29tYm9ib3guY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvZGF0ZXBpY2tlcjMuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvbWFzdGVydmlldy1jdXN0b21pc2F0aW9ucy5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL2Nzcy9zYi1hZG1pbi0yLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDxsaW5rIGhyZWY9Ii9Db3VuY2lsX1RoZW1lL0xpc21vcmUvbGlzbW9yZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQogICAgDQoNCiAgICA8IS0tIEhUTUw1IFNoaW0gYW5kIFJlc3BvbmQuanMgSUU4IHN1cHBvcnQgb2YgSFRNTDUgZWxlbWVudHMgYW5kIG1lZGlhIHF1ZXJpZXMgLS0+DQogICAgPCEtLSBXQVJOSU5HOiBSZXNwb25kLmpzIGRvZXNuJ3Qgd29yayBpZiB5b3UgdmlldyB0aGUgcGFnZSB2aWEgZmlsZTovLyAtLT4NCiAgICA8IS0tW2lmIGx0IElFIDldPg0KICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9vc3MubWF4Y2RuLmNvbS9saWJzL2h0bWw1c2hpdi8zLjcuMC9odG1sNXNoaXYuanMiPjwvc2NyaXB0Pg0KICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9vc3MubWF4Y2RuLmNvbS9saWJzL3Jlc3BvbmQuanMvMS40LjIvcmVzcG9uZC5taW4uanMiPjwvc2NyaXB0Pg0KICAgIDwhW2VuZGlmXS0tPg0KDQogICAgPGxpbmsgaHJlZj0naHR0cDovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9UmFsZXdheTozMDAsNDAwLDYwMCw3MDAnIHJlbD0nc3R5bGVzaGVldCcgdHlwZT0ndGV4dC9jc3MnPg0KICAgIDxsaW5rIGhyZWY9J2h0dHA6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PU9zd2FsZDozMDAsNDAwLDcwMCcgcmVsPSdzdHlsZXNoZWV0JyB0eXBlPSd0ZXh0L2Nzcyc+DQo8L2hlYWQ+DQoNCg0KPGJvZHkgY2xhc3M9ImNicC1zcG1lbnUtcHVzaCI+DQogICAgPGRpdiBjbGFzcz0id3IiPg0KPGRpdiBpZD0iaGVhZGVyIj4NCiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXJfMTIiPg0KDQogICAgICAgIDxoMSBpZD0ibG9nbyI+PGEgaHJlZj0iaHR0cDovL3d3dy5saXNtb3JlLm5zdy5nb3YuYXUvZGVmYXVsdC5hc3AiPjxpbWcgc3JjPSIvL2NhbmRpZGF0ZS1vZmZpY2UuczMuYW1hem9uYXdzLmNvbS9zaGFyZWQvbGlzbW9yZS9pbWFnZXMvbG9nby5wbmciIGFsdD0iTGlzbW9yZSBDaXR5IENvdW5jaWwiIHN0eWxlPSJwYWRkaW5nLXRvcDo1cHgiPjxzdHJvbmcgY2xhc3M9InZoIj5MaXNtb3JlIENpdHkgQ291bmNpbDwvc3Ryb25nPjwvYT48L2gxPg0KDQogICAgICAgIDxkaXYgY2xhc3M9InV0aWxpdHkgcmlnaHQiPg0KICAgICAgICAgICAgPGEgY2xhc3M9ImhvbWUtbGluayIgaHJlZj0iaHR0cDovL3d3dy5saXNtb3JlLm5zdy5nb3YuYXUvZGVmYXVsdC5hc3AiPg0KICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvL2NhbmRpZGF0ZS1vZmZpY2UuczMuYW1hem9uYXdzLmNvbS9zaGFyZWQvbGlzbW9yZS9pbWFnZXMvaG9tZS5wbmciIGFsdD0iTGlzbW9yZSBDaXR5IENvdW5jaWwiPg0KICAgICAgICAgICAgPC9hPg0KICAgICAgICA8L2Rpdj4NCg0KICAgICAgICA8ZGl2IGNsYXNzPSJjbGVhciI+DQogICAgICAgIDwvZGl2Pg0KDQogICAgPC9kaXY+DQo8L2Rpdj4NCiAgICAgICAgPGRpdiBpZD0iYmFubmVyIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJhbm5lci10ZXh0IGNmIj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJiYW5uZXItdGV4dC1jb250YWluZXIiPg0KICAgICAgICAgICAgICAgICAgICA8aDEgY2xhc3M9Im93Ij5EQSBUcmFja2luZyA8c3Bhbj5Qb3J0YWw8L3NwYW4+PC9oMT4NCiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Im5tIj5JbmZvcm1hdGlvbiBvbiBkZXZlbG9wbWVudCBhcHBsaWNhdGlvbnMgaW4gdGhlIExpc21vcmUgTG9jYWwgR292ZXJubWVudCBBcmVhLiA8L3A+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lcl8xMiBpbnRybyBjZiI+ICAgICAgICAgICAgPCEtLSBOYXZpZ2F0aW9uIC0tPg0KICAgICAgICAgICAgPG5hdiBjbGFzcz0ibmF2YmFyIG5hdmJhci1kZWZhdWx0IG5hdmJhci1zdGF0aWMtdG9wIiByb2xlPSJuYXZpZ2F0aW9uIiBzdHlsZT0ibWFyZ2luLWJvdHRvbTogMCI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibmF2YmFyLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0ibmF2YmFyLXRvZ2dsZSIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLXRhcmdldD0iLm5hdmJhci1jb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3Itb25seSI+VG9nZ2xlIG5hdmlnYXRpb248L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1iYXIiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tYmFyIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2YmFyLWJyYW5kIiBocmVmPSIjIj48L2E+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPCEtLSAvLm5hdmJhci1oZWFkZXIgLS0+DQogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2YmFyLXRvcC1saW5rcyBuYXZiYXItcmlnaHQgaGlkZGVuLXhzIGhpZGRlbi1zbSBoaWRkZW4tbWQiPg0KICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48c3BhbiBpZD0icHJpbnRJY29uIiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1wcmludCIgb25jbGljaz0id2luZG93LnByaW50KCk7Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgIDwvdWw+DQoNCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItZGVmYXVsdCBzaWRlYmFyIiByb2xlPSJuYXZpZ2F0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2lkZWJhci1uYXYgbmF2YmFyLWNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IiBpZD0ic2lkZS1tZW51Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48aSBjbGFzcz0iZmEgZmEtbGlzdC11bCBmYS1mdyI+PC9pPkFwcGxpY2F0aW9uIFRyYWNrZXI8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9BYm91dCB0YXJnZXQ9X3NlbGY+V2hhdCBpcyBBcHBsaWNhdGlvbiBUcmFja2VyPzwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9EaXNjbGFpbWVyIHRhcmdldD1fc2VsZj5EaXNjbGFpbWVyPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gLy5uYXYtc2Vjb25kLWxldmVsIC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48aSBjbGFzcz0iZmEgZmEtbGlzdC11bCBmYS1mdyI+PC9pPkFwcGxpY2F0aW9uczxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXYtc2Vjb25kLWxldmVsIGNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL0luZGV4IHRhcmdldD0+QXBwbGljYXRpb24gVHJhY2tlciBIb21lPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL1NlYXJjaCBpZD1zZWFyY2ggdGFyZ2V0PV9zZWxmPlNlYXJjaDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/UmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1UcnVlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSBpZD1vdXRzdGFuZGluZy1hcHBzIHRhcmdldD1fc2VsZj5VbmRldGVybWluZWQgQXBwbGljYXRpb25zPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9SZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9VHJ1ZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIGlkPWV4aGliaXRlZC1hcHBzIHRhcmdldD1fc2VsZj5BcHBsaWNhdGlvbnMgT24gRXhoaWJpdGlvbjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjdGl2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbnMgU3VibWl0dGVkPHNwYW4gY2xhc3M9ImZhIGFycm93Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdi1zZWNvbmQtbGV2ZWwgY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTIlMmYwNiUyZjIwMjUmRGF0ZVRvPTIlMmYwNiUyZjIwMjUmRGF0ZVR5cGU9MSZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTI1JTJmMDUlMmYyMDI1JkRhdGVUbz0zMSUyZjA1JTJmMjAyNSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9NSUyYzglMmMxMCUyYzEzJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgV2VlazwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MSUyZjA2JTJmMjAyNSZEYXRlVG89MiUyZjA2JTJmMjAyNSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9NSUyYzglMmMxMCUyYzEzJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPlRoaXMgTW9udGg8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTElMmYwNSUyZjIwMjUmRGF0ZVRvPTMxJTJmMDUlMmYyMDI1JkRhdGVUeXBlPTEmUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJkFwcGxpY2F0aW9uVHlwZT01JTJjOCUyYzEwJTJjMTMmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjdGl2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbnMgRGV0ZXJtaW5lZDxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXYtc2Vjb25kLWxldmVsIGNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0yJTJmMDYlMmYyMDI1JkRhdGVUbz0yJTJmMDYlMmYyMDI1JkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTI1JTJmMDUlMmYyMDI1JkRhdGVUbz0zMSUyZjA1JTJmMjAyNSZEYXRlVHlwZT0yJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1UcnVlJkFwcGxpY2F0aW9uVHlwZT01JTJjOCUyYzEwJTJjMTMmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBXZWVrPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDYlMmYyMDI1JkRhdGVUbz0yJTJmMDYlMmYyMDI1JkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIE1vbnRoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDUlMmYyMDI1JkRhdGVUbz0zMSUyZjA1JTJmMjAyNSZEYXRlVHlwZT0yJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1UcnVlJkFwcGxpY2F0aW9uVHlwZT01JTJjOCUyYzEwJTJjMTMmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8IS0tIC8uc2lkZWJhci1jb2xsYXBzZSAtLT4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLXN0YXRpYy1zaWRlIC0tPg0KICAgICAgICAgICAgPC9uYXY+DQogICAgICAgICAgICA8ZGl2IGlkPSJwYWdlLXdyYXBwZXIiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+DQogICAgICAgICAgICAgICAgICAgIA0KDQoNCiAgICA8ZGl2IGNsYXNzPSJwYWdlLWhlYWRlciI+DQogICAgICAgIDxoMj5BcHBsaWNhdGlvbjogUzQuNTUgKDUuMjAyNC4xMTcuMik8L2gyPg0KICAgIDwvZGl2Pg0KICAgIDxoND5EZXRhaWxlZCBpbmZvcm1hdGlvbiByZWxhdGVkIHRvIHRoZSBhcHBsaWNhdGlvbjo8L2g0Pg0KICAgIDxiciAvPg0KICAgIDxkaXY+DQogICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6c2hvd0FsbCgpOyI+U2hvdyBBbGw8L2E+IC8NCiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDpoaWRlQWxsKCk7Ij5IaWRlIEFsbDwvYT4NCiAgICA8L2Rpdj4NCiAgICA8ZGl2IGlkPSJhcHBsaWNhdGlvbiI+DQoNCiAgICAgICAgICAgIDxoMyBpZD0iZGV0YWlscyI+PGEgaHJlZj0iIyI+RGV0YWlsczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+RGVzY3JpcHRpb246IDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRBMjQvMTE3LTIgLSA1OTEgQmFsbGluYSBSb2FkLCBHb29uZWxsYWJhaCAtIFM0LjU1KDEpPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlN1Ym1pdHRlZCBEYXRlOiA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI3LzAzLzIwMjUgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFwcGxpY2F0aW9uIFR5cGU6IDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlM0LjU1PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9InByb3BlcnRpZXMiPjxhIGhyZWY9IiMiPlByb3BlcnRpZXM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjU5MSBCYWxsaW5hIFJkLCBHb29uZWxsYWJhaCBOU1cgMjQ4MCAgKERQIDU2Mzk3MiBsb3QgMSk8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0icGVvcGxlIj48YSBocmVmPSIjIj5QZW9wbGU8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcHBsaWNhbnQ6ICANCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQcmluY2lwYWwgQ2VydGlmeWluZyBBdXRob3JpdHk6ICANCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9Im9mZmljZXIiPjxhIGhyZWY9IiMiPk9mZmljZXI8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlN0ZXBoZW4gS2Fwb3NpPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9ImRlY2lzaW9uIj48YSBocmVmPSIjIj5EZWNpc2lvbjwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+QXBwbGljYXRpb24gU3RhdHVzOiBEZXRlcm1pbmVkPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZXRlcm1pbmF0aW9uIERhdGU6DQoxNi8wNC8yMDI1ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5EZXRlcm1pbmF0aW9uIFR5cGU6IENvbmRpdGlvbmFsIENvbnNlbnQgLSBDb3VuY2lsIFN0YWZmPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9ImVzdGltYXRlZENvc3QiPjxhIGhyZWY9IiMiPkVzdGltYXRlZCBDb3N0PC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4kMC4wMDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJ0cmFja2luZyI+PGEgaHJlZj0iIyI+VHJhY2tpbmc8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24td3JhcCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5zd2lwZSB0YWJsZSB0byB0aGUgbGVmdCB0byByZXZlYWwgbW9yZSBkYXRhPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tYXJyb3ctcmlnaHQiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtYm9yZGVyZWQgbm8tZm9vdGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5EZXNjcmlwdGlvbjwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Db21tZW5jZWQgRGF0ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+RHVlIERhdGU8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+Q29tcGxldGVkIERhdGU8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+QXBwbGljYXRpb24gUmVjZWl2ZWQ8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjcvMDMvMjAyNSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyNy8wMy8yMDI1ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQowMS8wNC8yMDI1ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlNpdGUgVmlzaXQvSW5pdGlhbCBSZXZpZXc8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMDEvMDQvMjAyNSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyMi8wNC8yMDI1ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoxNS8wNC8yMDI1ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlJlZmVycmVkIEVuZ2luZWVyIE9mZmljZXI8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMDEvMDQvMjAyNSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoxNS8wNC8yMDI1ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQowMy8wNC8yMDI1ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkNvbnNlbnQgTm90aWNlIElzc3VlZDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoxNy8wNC8yMDI1ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjE3LzA0LzIwMjUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjE3LzA0LzIwMjUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQoNCiAgICAgICAgICAgIDxoMyBpZD0icmVsYXRlZEFwcGxpY2F0aW9ucyI+PGEgaHJlZj0iIyI+UmVsYXRlZCBBcHBsaWNhdGlvbnM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24td3JhcCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5zd2lwZSB0YWJsZSB0byB0aGUgbGVmdCB0byByZXZlYWwgbW9yZSBkYXRhPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tYXJyb3ctcmlnaHQiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtYm9yZGVyZWQgbm8tZm9vdGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5BcHBsaWNhdGlvbiBUeXBlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkFwcGxpY2F0aW9uIE51bWJlcjwvdGg+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERldmVsb3BtZW50IEFwcGxpY2F0aW9uDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vdHJhY2tlci5saXNtb3JlLm5zdy5nb3YuYXUvQXBwbGljYXRpb24vQXBwbGljYXRpb25EZXRhaWxzLzAwNS4yMDI0LjAwMDAwMTE3LjAwMS8iPjUuMjAyNC4xMTcuMTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQoNCiAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQoNCg0KDQoNCg0KDQo8aDMgaWQ9ImRvY3VtZW50cyI+PGEgaHJlZj0iIyI+RG9jdW1lbnRzPC9hPjwvaDM+DQo8ZGl2Pg0KDQogICAgICAgIDxkaXYgY2xhc3M9Imljb24td3JhcCI+DQogICAgICAgICAgICA8c3Bhbj5zd2lwZSB0YWJsZSB0byB0aGUgbGVmdCB0byByZXZlYWwgbW9yZSBkYXRhPC9zcGFuPg0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tYXJyb3ctcmlnaHQiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L3NwYW4+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8ZGl2IGlkPSJkb2MtY291bnQiPlRvdGFsIG51bWJlciBvZiBkb2N1bWVudHM6IDI8L2Rpdj4NCiAgICA8dGFibGUgaWQ9ImRvYy10YWJsZSIgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtYm9yZGVyZWQgbm8tZm9vdGVyIj4NCiAgICAgICAgPHRoZWFkPg0KICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgIDx0aD5SZWNvcmQgTnVtYmVyPC90aD4NCiAgICAgICAgICAgICAgICA8dGg+RGVzY3JpcHRpb248L3RoPg0KICAgICAgICAgICAgICAgIDx0aD5Eb2N1bWVudCBUeXBlPC90aD4NCiAgICAgICAgICAgICAgICA8dGg+U2l6ZTwvdGg+DQogICAgICAgICAgICAgICAgPHRoPlZpZXcgTGluazwvdGg+DQogICAgICAgICAgICA8L3RyPg0KICAgICAgICA8L3RoZWFkPg0KICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5BRDI1LzMyODk1PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Db3ZlciBsZXR0ZXIgLSBNb2RpZmljYXRpb24gb2YgQ29uc2VudCAtIDU5MSBCYWxsaW5hIFJvYWQgR09PTkVMTEFCQUggMjQ4MDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGQ+UERGPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDAuNjcgTUINCg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48YSBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiByb2xlPSJidXR0b24iIGhyZWY9Imh0dHBzOi8vdHJhY2tlci5saXNtb3JlLm5zdy5nb3YuYXUvRG9jdW1lbnQvRG93bmxvYWQ/a2V5PXdWQzZJV3VTNWQ0PSZhbXA7ZmlsZU5hbWU9Q292ZXIgbGV0dGVyIC0gTW9kaWZpY2F0aW9uIG9mIENvbnNlbnQgLSA1OTEgQmFsbGluYSBSb2FkIEdPT05FTExBQkFIIDI0ODAuUERGIiB0YXJnZXQ9Il9ibGFuayI+VmlldzwvYT48L3RkPg0KICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGQ+QUQyNS8zMjkwMDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGQ+Tm90aWNlIG9mIERldGVybWluYXRpb24gUzQuNTUgTW9kaWZpY2F0aW9uIC0gNTkxIEJhbGxpbmEgUm9hZCBHT09ORUxMQUJBSCAyNDgwPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5QREY8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgMS4wNSBNQg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHJvbGU9ImJ1dHRvbiIgaHJlZj0iaHR0cHM6Ly90cmFja2VyLmxpc21vcmUubnN3Lmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9cG96N0x2NTBFenM9JmFtcDtmaWxlTmFtZT1Ob3RpY2Ugb2YgRGV0ZXJtaW5hdGlvbiBTNC41NSBNb2RpZmljYXRpb24gLSA1OTEgQmFsbGluYSBSb2FkIEdPT05FTExBQkFIIDI0ODAuUERGIiB0YXJnZXQ9Il9ibGFuayI+VmlldzwvYT48L3RkPg0KICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICA8L3Rib2R5Pg0KICAgIDwvdGFibGU+DQo8L2Rpdj4NCg0KDQogICAgICAgICAgICA8aDMgaWQ9ImNvbnRhY3RVcyI+PGEgaHJlZj0iIyI+Q29udGFjdCBVczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PHA+DQpTaG91bGQgeW91IHdpc2ggdG8gY29udGFjdCBjb3VuY2lsIHRvIG1ha2UgZW5xdWlyaWVzIHJlZ2FyZGluZyBhcHBsaWNhdGlvbnMgZGlzcGxheWVkIG9uIHRoZSB3ZWJzaXRlLCBwbGVhc2UgY29udGFjdCBlaXRoZXIgYnkgZW1haWwgPGEgc3R5bGU9ImNvbG9yOiBibHVlIiBocmVmPSJtYWlsdG86Y291bmNpbEBsaXNtb3JlLm5zdy5nb3YuYXU/c3ViamVjdD1TdWJtaXNzaW9uIGZvciBhcHBsaWNhdGlvbiA1LjIwMjQuMTE3LjIiPmNvdW5jaWxAbGlzbW9yZS5uc3cuZ292LmF1PC9hPiwgcGhvbmUgMTMwMCA4NyA4MyA4NyBkdXJpbmcgbm9ybWFsIG9mZmljZSBob3VycyBvciBpbiB3cml0aW5nIHRvIFBPIEJveCAyM0EsIExpc21vcmUgTlNXIDI0ODAuIEFsbCBjb3JyZXNwb25kZW5jZSBzaG91bGQgYmUgYWRkcmVzc2VkIHRvIHRoZSBHZW5lcmFsIE1hbmFnZXIgYW5kIHF1b3RlIHRoZSByZWxldmFudCBhcHBsaWNhdGlvbiByZWZlcmVuY2UgbnVtYmVyLg0KPC9wPg0KPHA+DQpJZiB0aGUgYXBwbGljYXRpb24gZGlzcGxheWVkIG9uIHRoaXMgd2Vic2l0ZSBpcyB1bmRlciBjdXJyZW50IG5laWdoYm91ciBub3RpZmljYXRpb24sIHByb3BlcnRpZXMgY29uc2lkZXJlZCBieSBDb3VuY2lsIHRvIHBvc3NpYmx5IGJlIGRldHJpbWVudGFsbHkgYWZmZWN0ZWQgd2lsbCBiZSBjb250YWN0ZWQgaW5kaXZpZHVhbGx5IGFuZCBhZHZpc2VkIG9mIHRoZWlyIHN1Ym1pc3Npb24gb3Bwb3J0dW5pdGllcyB1bmRlciBDaGFwdGVyIDEwIExpc21vcmUgRGV2ZWxvcG1lbnQgQ29udHJvbCBQbGFuIDIwMTIuDQo8L3A+DQo8cD4NCjxhIGhyZWY9Imh0dHA6Ly93d3cubGlzbW9yZS5uc3cuZ292LmF1L2NwX3RoZW1lcy9kZWZhdWx0L3BhZ2UuYXNwP3A9RE9DLUxIUi04My03Ni01OCIgIHRhcmdldD0iX2JsYW5rIj5DTElDSyBIRVJFPC9hPiB0byB2aXNpdCBDb3VuY2ls4oCZcyB3ZWJzaXRlIGFuZCBzZWUgZnVydGhlciBkZXRhaWxzIG9uIHRoZSBtYWtpbmcgb2Ygc3VibWlzc2lvbnMgb3IgcmluZyAxMzAwIDg3IDgzIDg3IGR1cmluZyBub3JtYWwgb2ZmaWNlIGhvdXJzLg0KPC9wPg0KPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0ibm90aWZpZWRBZGRyZXNzZXMiPjxhIGhyZWY9IiMiPk5vdGlmaWVkIEFkZHJlc3NlczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgPGI+Tm8gZGF0YS48L2I+DQogICAgICAgICAgICA8L2Rpdj4NCg0KPGgzIGlkPSJnb29nbGVtYXBzIj48YSBocmVmPSIjIj5Hb29nbGUgTWFwczwvYT48L2gzPg0KPGRpdiBpZD0ibWFwX2NvbnRhaW5lciI+DQogICAgPGRpdiBpZD0ibWFwX2NhbnZhcyIgY2xhc3M9ImlmcmFtZS1yd2QiPg0KICAgIDwvZGl2Pg0KPC9kaXY+DQoNCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCg0KICAgIHdpbmRvdy5vbmxvYWQgPSBsb2FkR29vZ2xlTWFwc1NjcmlwdDsNCg0KICAgIHZhciBnZW9jb2RlcjsNCiAgICB2YXIgbWFwOw0KICAgIHZhciB0aW1lb3V0ID0gMzAwOw0KICAgIHZhciBwcm9wZXJ0aWVzID0gWyI1OTEgQmFsbGluYSBSZCwgR29vbmVsbGFiYWggTlNXIDI0ODAgIl07DQogICAgdmFyIGxhdExuZ0FyciA9IFtdOw0KDQogICAgZnVuY3Rpb24gbG9hZEdvb2dsZU1hcHNTY3JpcHQoKSB7DQogICAgICAgIHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzY3JpcHQiKTsNCiAgICAgICAgc2NyaXB0LnR5cGUgPSAidGV4dC9qYXZhc2NyaXB0IjsNCiAgICAgICAgc2NyaXB0LnNyYyA9ICIvL21hcHMuZ29vZ2xlYXBpcy5jb20vbWFwcy9hcGkvanM/a2V5PUFJemFTeUE4eWIwTHpWWHhNdmgtM1VjNmJvM1QtQm1sRjZZdHZuNCZjYWxsYmFjaz1sb2FkR29vZ2xlTWFwcyI7DQogICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2NyaXB0KTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiByZW5kZXJHb29nbGVNYXBzKCkNCiAgICB7DQogICAgICAgIHZhciBtYXBPcHRpb25zID0gew0KICAgICAgICAgICAgY2VudGVyOiBsYXRMbmdBcnJbMF0sDQogICAgICAgICAgICB6b29tOiAxNiwNCiAgICAgICAgICAgIG1hcFR5cGVJZDogZ29vZ2xlLm1hcHMuTWFwVHlwZUlkLlJPQURNQVAsDQogICAgICAgICAgICBtYXBUeXBlQ29udHJvbDogZmFsc2UNCiAgICAgICAgfQ0KDQogICAgICAgIG1hcCA9IG5ldyBnb29nbGUubWFwcy5NYXAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm1hcF9jYW52YXMiKSwgbWFwT3B0aW9ucyk7DQoNCiAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkRG9tTGlzdGVuZXIod2luZG93LCAncmVzaXplJywgZnVuY3Rpb24oKSB7DQogICAgICAgICAgICB2YXIgY2VudGVyID0gbWFwLmdldENlbnRlcigpOw0KICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQudHJpZ2dlcihtYXAsICdyZXNpemUnKTsNCiAgICAgICAgICAgIG1hcC5zZXRDZW50ZXIoY2VudGVyKTsNCiAgICAgICAgfSk7DQoNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBsb2FkR29vZ2xlTWFwcygpIHsNCiAgICAgICAgZ2VvY29kZXIgPSBuZXcgZ29vZ2xlLm1hcHMuR2VvY29kZXIoKTsNCiAgICAgICAgdmFyIG5vT2ZGYWlsZWRMb2NhdGlvblNlYXJjaCA9IDA7DQoNCiAgICAgICAgJChwcm9wZXJ0aWVzKS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkgew0KICAgICAgICAgICAgdmFyIHByb3BlcnR5QWRkcmVzcyA9IGVsZW1lbnQ7DQoNCiAgICAgICAgICAgIC8vR2V0IGdlb2NvZGUNCiAgICAgICAgICAgIGdlb2NvZGVyLmdlb2NvZGUoeyAnYWRkcmVzcyc6IHByb3BlcnR5QWRkcmVzcyB9LCBmdW5jdGlvbiAocmVzdWx0cywgc3RhdHVzKSB7DQogICAgICAgICAgICAgICAgaWYgKHN0YXR1cyA9PSBnb29nbGUubWFwcy5HZW9jb2RlclN0YXR1cy5PSykgew0KDQogICAgICAgICAgICAgICAgICAgIHZhciBsb2NhdGlvbiA9IHJlc3VsdHNbMF0uZ2VvbWV0cnkubG9jYXRpb247DQogICAgICAgICAgICAgICAgICAgIHZhciBsYXRMbmcgPSBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKGxvY2F0aW9uLmxhdCgpLCBsb2NhdGlvbi5sbmcoKSk7DQoNCiAgICAgICAgICAgICAgICAgICAgbGF0TG5nQXJyLnB1c2gobGF0TG5nKTsNCg0KICAgICAgICAgICAgICAgICAgICBpZihsYXRMbmdBcnIubGVuZ3RoID09IDEpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckdvb2dsZU1hcHMoKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgIC8vQ3JlYXRlIG1hcmtlciBmb3IgbWFwIGFuZCBwbGFjZSBpdCBvbiB0aGUgbWFwDQogICAgICAgICAgICAgICAgICAgIHZhciBtYXJrZXIgPSBuZXcgZ29vZ2xlLm1hcHMuTWFya2VyKHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBsYXRMbmcsDQogICAgICAgICAgICAgICAgICAgICAgICBtYXA6IG1hcA0KICAgICAgICAgICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgICAgICAgICB2YXIgY29udGVudFN0cmluZyA9ICc8ZGl2PjxzcGFuPicgKyBwcm9wZXJ0eUFkZHJlc3MgKyAnPC9zcGFuPjwvZGl2Pic7DQogICAgICAgICAgICAgICAgICAgIHZhciBpbmZvd2luZG93ID0gbmV3IGdvb2dsZS5tYXBzLkluZm9XaW5kb3coeyAgIC8vQ3JlYXRlIGluZm8gd2luZG93DQogICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBjb250ZW50U3RyaW5nDQogICAgICAgICAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKG1hcmtlciwgJ2NsaWNrJywgZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpbmZvd2luZG93Lm9wZW4obWFwLCBtYXJrZXIpOw0KICAgICAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgLy9pZiBubyBsb2NhdGlvbiBmb3VuZCBieSBnb29nbGUgZm9yIGEgcHJvcGVydHkNCiAgICAgICAgICAgICAgICBlbHNlIGlmIChzdGF0dXMgPT0gIlpFUk9fUkVTVUxUUyIpIHsNCiAgICAgICAgICAgICAgICAgICAgbm9PZkZhaWxlZExvY2F0aW9uU2VhcmNoKys7DQoNCiAgICAgICAgICAgICAgICAgICAgaWYobm9PZkZhaWxlZExvY2F0aW9uU2VhcmNoID09ICQocHJvcGVydGllcykubGVuZ3RoKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlR29vZ2xlTWFwc0NvbnRlbnQoKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0dXMgPT0gZ29vZ2xlLm1hcHMuR2VvY29kZXJTdGF0dXMuT1ZFUl9RVUVSWV9MSU1JVCkgew0KICAgICAgICAgICAgICAgICAgICAvL3NldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyBnZXRHZW9Db2RlRm9yQWRkcmVzcyhpZCwgYWRkcmVzcyk7IH0sICh0aW1lb3V0KSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSk7DQogICAgICAgIH0pOw0KICAgIH0NCg0KICAgIC8vUmVwbGFjZXMgZ29vZ2xlIG1hcHMgY29udGVudCB3aXRoIGEgbmV3IGRpdiBibG9jayB0aGF0IGhhcyBpbmZvIG1lc3NhZ2UNCiAgICBmdW5jdGlvbiByZXBsYWNlR29vZ2xlTWFwc0NvbnRlbnQoKSB7DQogICAgICAgIHZhciBuZXdDb250ZW50ID0gJzxkaXYgY2xhc3M9InVpLWFjY29yZGlvbi1jb250ZW50IHVpLWhlbHBlci1yZXNldCB1aS13aWRnZXQtY29udGVudCB1aS1jb3JuZXItYm90dG9tIj4nICsNCiAgICAgICAgICAgICc8cD5Db3VsZG5cJ3QgZmluZCB0aGUgcHJvcGVydHkgYWRkcmVzcyhlcykgb24gR29vZ2xlIE1hcHMuIDxwPicgKw0KICAgICAgICAgICAgJzwvZGl2Pic7DQoNCiAgICAgICAgJCgnI21hcF9jb250YWluZXInKS5yZXBsYWNlV2l0aChuZXdDb250ZW50KTsNCiAgICB9DQoNCjwvc2NyaXB0Pg0KDQogICAgPC9kaXY+DQogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KDQogICAgICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICQuZm4udG9nZ2xlcGFuZWxzID0gZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKCJ1aS1hY2NvcmRpb24gdWktYWNjb3JkaW9uLWljb25zIHVpLWhlbHBlci1yZXNldCIpDQogICAgICAgICAgICAgICAgICAgICAgICAuZmluZCgiaDMiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCJ1aS1hY2NvcmRpb24taGVhZGVyIHVpLWhlbHBlci1yZXNldCB1aS1zdGF0ZS1kZWZhdWx0IHVpLWNvcm5lci10b3AgdWktY29ybmVyLWJvdHRvbSIpDQogICAgICAgICAgICAgICAgICAgICAgICAuaG92ZXIoZnVuY3Rpb24gKCkgeyAkKHRoaXMpLnRvZ2dsZUNsYXNzKCJ1aS1zdGF0ZS1ob3ZlciIpOyB9KQ0KICAgICAgICAgICAgICAgICAgICAgICAgLnByZXBlbmQoJzxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tdXAiPjwvc3Bhbj4nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLmNsaWNrKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnRvZ2dsZUNsYXNzKCJ1aS1hY2NvcmRpb24taGVhZGVyLWFjdGl2ZSB1aS1zdGF0ZS1hY3RpdmUgdWktc3RhdGUtZGVmYXVsdCB1aS1jb3JuZXItYm90dG9tIikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoIj4gLmdseXBoaWNvbiIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50b2dnbGVDbGFzcygiZ2x5cGhpY29uLWNoZXZyb24tdXAgZ2x5cGhpY29uLWNoZXZyb24tZG93biIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5lbmQoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubmV4dCgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zbGlkZVRvZ2dsZSgpOw0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgICAgICAgICAgICAgfSkNCiAgICAgICAgICAgICAgICAgICAgICAgIC5uZXh0KCkNCiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygidWktYWNjb3JkaW9uLWNvbnRlbnQgdWktaGVscGVyLXJlc2V0IHVpLXdpZGdldC1jb250ZW50IHVpLWNvcm5lci1ib3R0b20iKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLmhpZGUoKTsNCiAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgICQoJyNhcHBsaWNhdGlvbicpLnRvZ2dsZXBhbmVscygpOw0KDQogICAgICAgICAgICAkKCcjcHJvcGVydGllcycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjZGV0YWlscycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjdHJhY2tpbmcnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI2RvY3VtZW50cycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjcmVsYXRlZEFwcGxpY2F0aW9ucycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjZmVlcycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjZ29vZ2xlbWFwcycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjY29udGFjdFVzJykuY2xpY2soKTsNCiAgICAgICAgfSk7DQoNCiAgICAgICAgLyogU2hvd3MgYWxsIHRoZSBwYW5lbHMgKi8NCiAgICAgICAgZnVuY3Rpb24gc2hvd0FsbCgpIHsNCiAgICAgICAgICAgICQoJyNhcHBsaWNhdGlvbicpLmNoaWxkcmVuKCJoMyIpLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKCJ1aS1zdGF0ZS1kZWZhdWx0IikpIHsNCiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5jbGljaygpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9DQoNCiAgICAgICAgLyogSGlkZSBhbGwgdGhlIHBhbmVscyAqLw0KICAgICAgICBmdW5jdGlvbiBoaWRlQWxsKCkgew0KICAgICAgICAgICAgJCgnI2FwcGxpY2F0aW9uJykuY2hpbGRyZW4oImgzIikuZWFjaChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoInVpLXN0YXRlLWFjdGl2ZSIpKSB7DQogICAgICAgICAgICAgICAgICAgICQodGhpcykuY2xpY2soKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KTsNCiAgICAgICAgfQ0KDQogICAgPC9zY3JpcHQ+DQoNCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8uY29udGFpbmVyLWZsdWlkIC0tPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KDQogICAgICAgIDxkaXYgY2xhc3M9InByZS1mb290ZXIgY29udGFpbmVyXzEyIGNmIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImdyaWRfNCI+DQogICAgICAgICAgICAgICANCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBpZD0iZm9vdGVyIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lcl8xMiBjZiI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ3JpZF8xMiBjZiBvdyI+DQogICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjcCI+Q29weXJpZ2h0ICZjb3B5OyAyMDI1IExpc21vcmUgQ2l0eSBDb3VuY2lsPC9wPg0KICAgICAgICAgICAgICAgICAgICA8cD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5saXNtb3JlLm5zdy5nb3YuYXUvcGFnZS5hc3A/cD1ET0MtT0NULTY0LTU3LTMwIiB0YXJnZXQ9Il9wYXJlbnQiPkludGVybmV0IFByaXZhY3kgU3RhdGVtZW50PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgJm5ic3A7Jm5ic3A7IHwgJm5ic3A7Jm5ic3A7DQogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmxpc21vcmUubnN3Lmdvdi5hdS9wYWdlLmFzcD9wPURPQy1PQ1QtNjQtNTctMzAiIHRhcmdldD0iX3BhcmVudCI+RGlzY2xhaW1lcjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICZuYnNwOyZuYnNwOyB8ICZuYnNwOyZuYnNwOw0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5saXNtb3JlLm5zdy5nb3YuYXUvY3BfdGhlbWVzL2RlZmF1bHQvc2l0ZW1hcC5hc3AiIHRhcmdldD0iX3BhcmVudCI+U2l0ZSBNYXA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCjwvYm9keT4NCjwvaHRtbD4NCg==
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2025.00000042.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:15:37 GMT
      Content-Length:
      - '32770'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2025.00000030.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:15:40 GMT
      Content-Length:
      - '31107'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQo8aHRtbCBsYW5nPSJlbiI+DQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+DQogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4NCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPg0KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIj4NCiAgICA8bWV0YSBuYW1lPSJrZXl3b3JkcyIgY29udGVudD0iTGlzbW9yZSBDaXR5IENvdW5jaWwsREEgVHJhY2tlcixBcHBsaWNhdGlvbiBUcmFja2VyLERldmVsb3BtZW50IEFwcGxpY2F0aW9uLERldmVsb3BtZW50IEFwcGxpY2F0aW9uIFRyYWNraW5nLCBEQSBFbnF1aXJ5LCBEZXZlbG9wbWVudCBBcHBsaWNhdGlvbiBFbnF1aXJ5LCBBcHBsaWNhdGlvbiBUcmFja2VyIj4NCiAgICA8bWV0YSBuYW1lPSJkZXNjcmlwdGlvbiIgY29udGVudD0iVGhlIG9mZmljaWFsIExpc21vcmUgQ2l0eSBDb3VuY2lsIEFwcGxpY2F0aW9uIFRyYWNrZXIiPg0KDQogICAgPHRpdGxlPkxpc21vcmUgQ2l0eSBDb3VuY2lsIC0gQXBwbGljYXRpb24gVHJhY2tlcjwvdGl0bGU+DQoNCiAgICA8IS0tZmF2aWNvbi0tPg0KICAgIDxsaW5rIGhyZWY9Ii9mYXZpY29uLmljbyIgcmVsPSJzaG9ydGN1dCBpY29uIiB0eXBlPSJpbWFnZS94LWljb24iPg0KDQogICAgPCEtLSBqUXVlcnkgLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS0xLjExLjEuanMiPjwvc2NyaXB0Pg0KDQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS11aS0xLjExLjIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvY29yZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvYWNjb3JkaW9uLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC90aGVtZXMvYmFzZS90aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQoNCiAgICA8IS0tIEJvb3RzdHJhcCAtLT4NCiAgICA8c2NyaXB0IHNyYz0iL1NjcmlwdHMvYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCg0KICAgIDxsaW5rIGhyZWY9Ii9Db250ZW50L2Jvb3RzdHJhcC10aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvYm9vdHN0cmFwLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9mb250LWF3ZXNvbWUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPCEtLSBEYXRhVGFibGVzIC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2pxdWVyeS5kYXRhVGFibGVzLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMuYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMucmVzcG9uc2l2ZS5qcyI+PC9zY3JpcHQ+DQoNCiAgICANCiAgICA8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLmJvb3RzdHJhcC5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvRGF0YVRhYmxlcy9jc3MvZGF0YVRhYmxlcy5yZXNwb25zaXZlLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLnJlc3BvbnNpdmUuc2NzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDwhLS0gQm9vdHN0cmFwIFNCLUFkbWluLTIgUGx1Z2luIGFuZCBvdGhlciBjc3MgYW5kIGpzIGZpbGVzLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9qcy9ib290c3RyYXAtY29tYm9ib3guanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9qcy9ib290c3RyYXAtZGF0ZXBpY2tlci5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL2pxdWVyeS5mb3JtLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvanF1ZXJ5LnRhYmxlc29ydGVyLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvbWFzdGVydmlldy5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL21ldGlzTWVudS5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL3NiLWFkbWluLTIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL2Nzcy9ib290c3RyYXAtY29tYm9ib3guY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvZGF0ZXBpY2tlcjMuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvbWFzdGVydmlldy1jdXN0b21pc2F0aW9ucy5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL2Nzcy9zYi1hZG1pbi0yLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDxsaW5rIGhyZWY9Ii9Db3VuY2lsX1RoZW1lL0xpc21vcmUvbGlzbW9yZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQogICAgDQoNCiAgICA8IS0tIEhUTUw1IFNoaW0gYW5kIFJlc3BvbmQuanMgSUU4IHN1cHBvcnQgb2YgSFRNTDUgZWxlbWVudHMgYW5kIG1lZGlhIHF1ZXJpZXMgLS0+DQogICAgPCEtLSBXQVJOSU5HOiBSZXNwb25kLmpzIGRvZXNuJ3Qgd29yayBpZiB5b3UgdmlldyB0aGUgcGFnZSB2aWEgZmlsZTovLyAtLT4NCiAgICA8IS0tW2lmIGx0IElFIDldPg0KICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9vc3MubWF4Y2RuLmNvbS9saWJzL2h0bWw1c2hpdi8zLjcuMC9odG1sNXNoaXYuanMiPjwvc2NyaXB0Pg0KICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9vc3MubWF4Y2RuLmNvbS9saWJzL3Jlc3BvbmQuanMvMS40LjIvcmVzcG9uZC5taW4uanMiPjwvc2NyaXB0Pg0KICAgIDwhW2VuZGlmXS0tPg0KDQogICAgPGxpbmsgaHJlZj0naHR0cDovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9UmFsZXdheTozMDAsNDAwLDYwMCw3MDAnIHJlbD0nc3R5bGVzaGVldCcgdHlwZT0ndGV4dC9jc3MnPg0KICAgIDxsaW5rIGhyZWY9J2h0dHA6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PU9zd2FsZDozMDAsNDAwLDcwMCcgcmVsPSdzdHlsZXNoZWV0JyB0eXBlPSd0ZXh0L2Nzcyc+DQo8L2hlYWQ+DQoNCg0KPGJvZHkgY2xhc3M9ImNicC1zcG1lbnUtcHVzaCI+DQogICAgPGRpdiBjbGFzcz0id3IiPg0KPGRpdiBpZD0iaGVhZGVyIj4NCiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXJfMTIiPg0KDQogICAgICAgIDxoMSBpZD0ibG9nbyI+PGEgaHJlZj0iaHR0cDovL3d3dy5saXNtb3JlLm5zdy5nb3YuYXUvZGVmYXVsdC5hc3AiPjxpbWcgc3JjPSIvL2NhbmRpZGF0ZS1vZmZpY2UuczMuYW1hem9uYXdzLmNvbS9zaGFyZWQvbGlzbW9yZS9pbWFnZXMvbG9nby5wbmciIGFsdD0iTGlzbW9yZSBDaXR5IENvdW5jaWwiIHN0eWxlPSJwYWRkaW5nLXRvcDo1cHgiPjxzdHJvbmcgY2xhc3M9InZoIj5MaXNtb3JlIENpdHkgQ291bmNpbDwvc3Ryb25nPjwvYT48L2gxPg0KDQogICAgICAgIDxkaXYgY2xhc3M9InV0aWxpdHkgcmlnaHQiPg0KICAgICAgICAgICAgPGEgY2xhc3M9ImhvbWUtbGluayIgaHJlZj0iaHR0cDovL3d3dy5saXNtb3JlLm5zdy5nb3YuYXUvZGVmYXVsdC5hc3AiPg0KICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvL2NhbmRpZGF0ZS1vZmZpY2UuczMuYW1hem9uYXdzLmNvbS9zaGFyZWQvbGlzbW9yZS9pbWFnZXMvaG9tZS5wbmciIGFsdD0iTGlzbW9yZSBDaXR5IENvdW5jaWwiPg0KICAgICAgICAgICAgPC9hPg0KICAgICAgICA8L2Rpdj4NCg0KICAgICAgICA8ZGl2IGNsYXNzPSJjbGVhciI+DQogICAgICAgIDwvZGl2Pg0KDQogICAgPC9kaXY+DQo8L2Rpdj4NCiAgICAgICAgPGRpdiBpZD0iYmFubmVyIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJhbm5lci10ZXh0IGNmIj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJiYW5uZXItdGV4dC1jb250YWluZXIiPg0KICAgICAgICAgICAgICAgICAgICA8aDEgY2xhc3M9Im93Ij5EQSBUcmFja2luZyA8c3Bhbj5Qb3J0YWw8L3NwYW4+PC9oMT4NCiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Im5tIj5JbmZvcm1hdGlvbiBvbiBkZXZlbG9wbWVudCBhcHBsaWNhdGlvbnMgaW4gdGhlIExpc21vcmUgTG9jYWwgR292ZXJubWVudCBBcmVhLiA8L3A+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lcl8xMiBpbnRybyBjZiI+ICAgICAgICAgICAgPCEtLSBOYXZpZ2F0aW9uIC0tPg0KICAgICAgICAgICAgPG5hdiBjbGFzcz0ibmF2YmFyIG5hdmJhci1kZWZhdWx0IG5hdmJhci1zdGF0aWMtdG9wIiByb2xlPSJuYXZpZ2F0aW9uIiBzdHlsZT0ibWFyZ2luLWJvdHRvbTogMCI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibmF2YmFyLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0ibmF2YmFyLXRvZ2dsZSIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLXRhcmdldD0iLm5hdmJhci1jb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3Itb25seSI+VG9nZ2xlIG5hdmlnYXRpb248L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1iYXIiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tYmFyIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2YmFyLWJyYW5kIiBocmVmPSIjIj48L2E+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPCEtLSAvLm5hdmJhci1oZWFkZXIgLS0+DQogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2YmFyLXRvcC1saW5rcyBuYXZiYXItcmlnaHQgaGlkZGVuLXhzIGhpZGRlbi1zbSBoaWRkZW4tbWQiPg0KICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48c3BhbiBpZD0icHJpbnRJY29uIiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1wcmludCIgb25jbGljaz0id2luZG93LnByaW50KCk7Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgIDwvdWw+DQoNCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItZGVmYXVsdCBzaWRlYmFyIiByb2xlPSJuYXZpZ2F0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2lkZWJhci1uYXYgbmF2YmFyLWNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IiBpZD0ic2lkZS1tZW51Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48aSBjbGFzcz0iZmEgZmEtbGlzdC11bCBmYS1mdyI+PC9pPkFwcGxpY2F0aW9uIFRyYWNrZXI8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9BYm91dCB0YXJnZXQ9X3NlbGY+V2hhdCBpcyBBcHBsaWNhdGlvbiBUcmFja2VyPzwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9EaXNjbGFpbWVyIHRhcmdldD1fc2VsZj5EaXNjbGFpbWVyPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gLy5uYXYtc2Vjb25kLWxldmVsIC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48aSBjbGFzcz0iZmEgZmEtbGlzdC11bCBmYS1mdyI+PC9pPkFwcGxpY2F0aW9uczxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXYtc2Vjb25kLWxldmVsIGNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL0luZGV4IHRhcmdldD0+QXBwbGljYXRpb24gVHJhY2tlciBIb21lPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL1NlYXJjaCBpZD1zZWFyY2ggdGFyZ2V0PV9zZWxmPlNlYXJjaDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/UmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1UcnVlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSBpZD1vdXRzdGFuZGluZy1hcHBzIHRhcmdldD1fc2VsZj5VbmRldGVybWluZWQgQXBwbGljYXRpb25zPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9SZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9VHJ1ZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIGlkPWV4aGliaXRlZC1hcHBzIHRhcmdldD1fc2VsZj5BcHBsaWNhdGlvbnMgT24gRXhoaWJpdGlvbjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjdGl2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbnMgU3VibWl0dGVkPHNwYW4gY2xhc3M9ImZhIGFycm93Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdi1zZWNvbmQtbGV2ZWwgY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTIlMmYwNiUyZjIwMjUmRGF0ZVRvPTIlMmYwNiUyZjIwMjUmRGF0ZVR5cGU9MSZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTI1JTJmMDUlMmYyMDI1JkRhdGVUbz0zMSUyZjA1JTJmMjAyNSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9NSUyYzglMmMxMCUyYzEzJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgV2VlazwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MSUyZjA2JTJmMjAyNSZEYXRlVG89MiUyZjA2JTJmMjAyNSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9NSUyYzglMmMxMCUyYzEzJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPlRoaXMgTW9udGg8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTElMmYwNSUyZjIwMjUmRGF0ZVRvPTMxJTJmMDUlMmYyMDI1JkRhdGVUeXBlPTEmUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJkFwcGxpY2F0aW9uVHlwZT01JTJjOCUyYzEwJTJjMTMmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjdGl2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbnMgRGV0ZXJtaW5lZDxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXYtc2Vjb25kLWxldmVsIGNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0yJTJmMDYlMmYyMDI1JkRhdGVUbz0yJTJmMDYlMmYyMDI1JkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTI1JTJmMDUlMmYyMDI1JkRhdGVUbz0zMSUyZjA1JTJmMjAyNSZEYXRlVHlwZT0yJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1UcnVlJkFwcGxpY2F0aW9uVHlwZT01JTJjOCUyYzEwJTJjMTMmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBXZWVrPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDYlMmYyMDI1JkRhdGVUbz0yJTJmMDYlMmYyMDI1JkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIE1vbnRoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDUlMmYyMDI1JkRhdGVUbz0zMSUyZjA1JTJmMjAyNSZEYXRlVHlwZT0yJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1UcnVlJkFwcGxpY2F0aW9uVHlwZT01JTJjOCUyYzEwJTJjMTMmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8IS0tIC8uc2lkZWJhci1jb2xsYXBzZSAtLT4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLXN0YXRpYy1zaWRlIC0tPg0KICAgICAgICAgICAgPC9uYXY+DQogICAgICAgICAgICA8ZGl2IGlkPSJwYWdlLXdyYXBwZXIiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+DQogICAgICAgICAgICAgICAgICAgIA0KDQoNCiAgICA8ZGl2IGNsYXNzPSJwYWdlLWhlYWRlciI+DQogICAgICAgIDxoMj5BcHBsaWNhdGlvbjogRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24gKDUuMjAyNS4zMC4xKTwvaDI+DQogICAgPC9kaXY+DQogICAgPGg0PkRldGFpbGVkIGluZm9ybWF0aW9uIHJlbGF0ZWQgdG8gdGhlIGFwcGxpY2F0aW9uOjwvaDQ+DQogICAgPGJyIC8+DQogICAgPGRpdj4NCiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDpzaG93QWxsKCk7Ij5TaG93IEFsbDwvYT4gLw0KICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OmhpZGVBbGwoKTsiPkhpZGUgQWxsPC9hPg0KICAgIDwvZGl2Pg0KICAgIDxkaXYgaWQ9ImFwcGxpY2F0aW9uIj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJkZXRhaWxzIj48YSBocmVmPSIjIj5EZXRhaWxzPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5EZXNjcmlwdGlvbjogPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+REEyNS8zMCAtIDkxIE1hZ2VsbGFuIFN0cmVldCwgTGlzbW9yZSAtIENoYW5nZSBvZiB1c2Ugb2YgcGFydCBvZiBhIHJldDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5TdWJtaXR0ZWQgRGF0ZTogPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoxOS8wMy8yMDI1ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5BcHBsaWNhdGlvbiBUeXBlOiA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5EZXZlbG9wbWVudCBBcHBsaWNhdGlvbjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJwcm9wZXJ0aWVzIj48YSBocmVmPSIjIj5Qcm9wZXJ0aWVzPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD45MSBNYWdlbGxhbiBTdCwgTGlzbW9yZSBOU1cgMjQ4MCAgKERQIDQwMzQ5NSBsb3QgQik8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0icGVvcGxlIj48YSBocmVmPSIjIj5QZW9wbGU8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcHBsaWNhbnQ6IERhbmllbCBFdGhlcmlkZ2UNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQcmluY2lwYWwgQ2VydGlmeWluZyBBdXRob3JpdHk6ICANCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9Im9mZmljZXIiPjxhIGhyZWY9IiMiPk9mZmljZXI8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlN1emFubmUgVGhhdGNoZXI8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0iZGVjaXNpb24iPjxhIGhyZWY9IiMiPkRlY2lzaW9uPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5BcHBsaWNhdGlvbiBTdGF0dXM6IERldGVybWluZWQ8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERldGVybWluYXRpb24gRGF0ZToNCjAyLzA1LzIwMjUgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRldGVybWluYXRpb24gVHlwZTogQ29uZGl0aW9uYWwgQ29uc2VudCAtIENvdW5jaWwgU3RhZmY8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0iZXN0aW1hdGVkQ29zdCI+PGEgaHJlZj0iIyI+RXN0aW1hdGVkIENvc3Q8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPiQxMCwwMDAuMDA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0idHJhY2tpbmciPjxhIGhyZWY9IiMiPlRyYWNraW5nPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpY29uLXdyYXAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+c3dpcGUgdGFibGUgdG8gdGhlIGxlZnQgdG8gcmV2ZWFsIG1vcmUgZGF0YTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWFycm93LXJpZ2h0IiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSB0YWJsZS1zdHJpcGVkIHRhYmxlLWJvcmRlcmVkIG5vLWZvb3RlciI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+RGVzY3JpcHRpb248L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+Q29tbWVuY2VkIERhdGU8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkR1ZSBEYXRlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkNvbXBsZXRlZCBEYXRlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFwcGxpY2F0aW9uIFJlY2VpdmVkPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjE5LzAzLzIwMjUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMTkvMDMvMjAyNSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjAvMDMvMjAyNSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5TaXRlIFZpc2l0L0luaXRpYWwgUmV2aWV3PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjIwLzAzLzIwMjUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMTAvMDQvMjAyNSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjEvMDMvMjAyNSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5SZWZlcnJlZCBCQ0EvRmlyZSBPZmZpY2VyPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjIwLzAzLzIwMjUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMDMvMDQvMjAyNSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjYvMDMvMjAyNSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5SZWZlcnJlZCBFbnZpcm9ubWVudGFsIEhlYWx0aDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyMC8wMy8yMDI1ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjAzLzA0LzIwMjUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI0LzA0LzIwMjUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+QWRkaXRpb25hbCBJbmZvcm1hdGlvbiBSZXF1ZXN0PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjIxLzAzLzIwMjUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjAvMDQvMjAyNSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjUvMDQvMjAyNSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5SZWZlcnJlZCBFbnZpcm9ubWVudGFsIEhlYWx0aDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQowMS8wNC8yMDI1ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjE1LzA0LzIwMjUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI0LzA0LzIwMjUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+Q29uc2VudCBOb3RpY2UgSXNzdWVkPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjAyLzA1LzIwMjUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMDIvMDUvMjAyNSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMDIvMDUvMjAyNSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCg0KICAgICAgICAgICAgPGgzIGlkPSJyZWxhdGVkQXBwbGljYXRpb25zIj48YSBocmVmPSIjIj5SZWxhdGVkIEFwcGxpY2F0aW9uczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgPGI+Tm8gZGF0YS48L2I+DQogICAgICAgICAgICA8L2Rpdj4NCg0KDQoNCg0KDQoNCg0KPGgzIGlkPSJkb2N1bWVudHMiPjxhIGhyZWY9IiMiPkRvY3VtZW50czwvYT48L2gzPg0KPGRpdj4NCg0KICAgICAgICA8ZGl2IGNsYXNzPSJpY29uLXdyYXAiPg0KICAgICAgICAgICAgPHNwYW4+c3dpcGUgdGFibGUgdG8gdGhlIGxlZnQgdG8gcmV2ZWFsIG1vcmUgZGF0YTwvc3Bhbj4NCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWFycm93LXJpZ2h0IiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9zcGFuPg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBpZD0iZG9jLWNvdW50Ij5Ub3RhbCBudW1iZXIgb2YgZG9jdW1lbnRzOiAyPC9kaXY+DQogICAgPHRhYmxlIGlkPSJkb2MtdGFibGUiIGNsYXNzPSJ0YWJsZSB0YWJsZS1zdHJpcGVkIHRhYmxlLWJvcmRlcmVkIG5vLWZvb3RlciI+DQogICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICA8dGg+UmVjb3JkIE51bWJlcjwvdGg+DQogICAgICAgICAgICAgICAgPHRoPkRlc2NyaXB0aW9uPC90aD4NCiAgICAgICAgICAgICAgICA8dGg+RG9jdW1lbnQgVHlwZTwvdGg+DQogICAgICAgICAgICAgICAgPHRoPlNpemU8L3RoPg0KICAgICAgICAgICAgICAgIDx0aD5WaWV3IExpbms8L3RoPg0KICAgICAgICAgICAgPC90cj4NCiAgICAgICAgPC90aGVhZD4NCiAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGQ+QUQyNS8zNzM4MzwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGQ+Tm90aWNlIG9mIERldGVybWluYXRpb24gQ292ZXIgTGV0dGVyIC0gOTEgTWFnZWxsYW4gU3RyZWV0IExJU01PUkUgMjQ4MDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGQ+UERGPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDAuNjIgTUINCg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48YSBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiByb2xlPSJidXR0b24iIGhyZWY9Imh0dHBzOi8vdHJhY2tlci5saXNtb3JlLm5zdy5nb3YuYXUvRG9jdW1lbnQvRG93bmxvYWQ/a2V5PW5JWDBESzhKZDFVPSZhbXA7ZmlsZU5hbWU9Tm90aWNlIG9mIERldGVybWluYXRpb24gQ292ZXIgTGV0dGVyIC0gOTEgTWFnZWxsYW4gU3RyZWV0IExJU01PUkUgMjQ4MC5QREYiIHRhcmdldD0iX2JsYW5rIj5WaWV3PC9hPjwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5BRDI1LzM3Mzg1PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Ob3RpY2Ugb2YgRGV0ZXJtaW5hdGlvbiAtIERldmVsb3BtZW50IENvbnNlbnQgLSA5MSBNYWdlbGxhbiBTdHJlZXQgTElTTU9SRSAyNDgwPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5QREY8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgMC43OCBNQg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHJvbGU9ImJ1dHRvbiIgaHJlZj0iaHR0cHM6Ly90cmFja2VyLmxpc21vcmUubnN3Lmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9V2VZTmIyZXVCNTQ9JmFtcDtmaWxlTmFtZT1Ob3RpY2Ugb2YgRGV0ZXJtaW5hdGlvbiAtIERldmVsb3BtZW50IENvbnNlbnQgLSA5MSBNYWdlbGxhbiBTdHJlZXQgTElTTU9SRSAyNDgwLlBERiIgdGFyZ2V0PSJfYmxhbmsiPlZpZXc8L2E+PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgPC90Ym9keT4NCiAgICA8L3RhYmxlPg0KPC9kaXY+DQoNCg0KICAgICAgICAgICAgPGgzIGlkPSJjb250YWN0VXMiPjxhIGhyZWY9IiMiPkNvbnRhY3QgVXM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxwPg0KU2hvdWxkIHlvdSB3aXNoIHRvIGNvbnRhY3QgY291bmNpbCB0byBtYWtlIGVucXVpcmllcyByZWdhcmRpbmcgYXBwbGljYXRpb25zIGRpc3BsYXllZCBvbiB0aGUgd2Vic2l0ZSwgcGxlYXNlIGNvbnRhY3QgZWl0aGVyIGJ5IGVtYWlsIDxhIHN0eWxlPSJjb2xvcjogYmx1ZSIgaHJlZj0ibWFpbHRvOmNvdW5jaWxAbGlzbW9yZS5uc3cuZ292LmF1P3N1YmplY3Q9U3VibWlzc2lvbiBmb3IgYXBwbGljYXRpb24gNS4yMDI1LjMwLjEiPmNvdW5jaWxAbGlzbW9yZS5uc3cuZ292LmF1PC9hPiwgcGhvbmUgMTMwMCA4NyA4MyA4NyBkdXJpbmcgbm9ybWFsIG9mZmljZSBob3VycyBvciBpbiB3cml0aW5nIHRvIFBPIEJveCAyM0EsIExpc21vcmUgTlNXIDI0ODAuIEFsbCBjb3JyZXNwb25kZW5jZSBzaG91bGQgYmUgYWRkcmVzc2VkIHRvIHRoZSBHZW5lcmFsIE1hbmFnZXIgYW5kIHF1b3RlIHRoZSByZWxldmFudCBhcHBsaWNhdGlvbiByZWZlcmVuY2UgbnVtYmVyLg0KPC9wPg0KPHA+DQpJZiB0aGUgYXBwbGljYXRpb24gZGlzcGxheWVkIG9uIHRoaXMgd2Vic2l0ZSBpcyB1bmRlciBjdXJyZW50IG5laWdoYm91ciBub3RpZmljYXRpb24sIHByb3BlcnRpZXMgY29uc2lkZXJlZCBieSBDb3VuY2lsIHRvIHBvc3NpYmx5IGJlIGRldHJpbWVudGFsbHkgYWZmZWN0ZWQgd2lsbCBiZSBjb250YWN0ZWQgaW5kaXZpZHVhbGx5IGFuZCBhZHZpc2VkIG9mIHRoZWlyIHN1Ym1pc3Npb24gb3Bwb3J0dW5pdGllcyB1bmRlciBDaGFwdGVyIDEwIExpc21vcmUgRGV2ZWxvcG1lbnQgQ29udHJvbCBQbGFuIDIwMTIuDQo8L3A+DQo8cD4NCjxhIGhyZWY9Imh0dHA6Ly93d3cubGlzbW9yZS5uc3cuZ292LmF1L2NwX3RoZW1lcy9kZWZhdWx0L3BhZ2UuYXNwP3A9RE9DLUxIUi04My03Ni01OCIgIHRhcmdldD0iX2JsYW5rIj5DTElDSyBIRVJFPC9hPiB0byB2aXNpdCBDb3VuY2ls4oCZcyB3ZWJzaXRlIGFuZCBzZWUgZnVydGhlciBkZXRhaWxzIG9uIHRoZSBtYWtpbmcgb2Ygc3VibWlzc2lvbnMgb3IgcmluZyAxMzAwIDg3IDgzIDg3IGR1cmluZyBub3JtYWwgb2ZmaWNlIGhvdXJzLg0KPC9wPg0KPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0ibm90aWZpZWRBZGRyZXNzZXMiPjxhIGhyZWY9IiMiPk5vdGlmaWVkIEFkZHJlc3NlczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgPGI+Tm8gZGF0YS48L2I+DQogICAgICAgICAgICA8L2Rpdj4NCg0KPGgzIGlkPSJnb29nbGVtYXBzIj48YSBocmVmPSIjIj5Hb29nbGUgTWFwczwvYT48L2gzPg0KPGRpdiBpZD0ibWFwX2NvbnRhaW5lciI+DQogICAgPGRpdiBpZD0ibWFwX2NhbnZhcyIgY2xhc3M9ImlmcmFtZS1yd2QiPg0KICAgIDwvZGl2Pg0KPC9kaXY+DQoNCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCg0KICAgIHdpbmRvdy5vbmxvYWQgPSBsb2FkR29vZ2xlTWFwc1NjcmlwdDsNCg0KICAgIHZhciBnZW9jb2RlcjsNCiAgICB2YXIgbWFwOw0KICAgIHZhciB0aW1lb3V0ID0gMzAwOw0KICAgIHZhciBwcm9wZXJ0aWVzID0gWyI5MSBNYWdlbGxhbiBTdCwgTGlzbW9yZSBOU1cgMjQ4MCAiXTsNCiAgICB2YXIgbGF0TG5nQXJyID0gW107DQoNCiAgICBmdW5jdGlvbiBsb2FkR29vZ2xlTWFwc1NjcmlwdCgpIHsNCiAgICAgICAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNjcmlwdCIpOw0KICAgICAgICBzY3JpcHQudHlwZSA9ICJ0ZXh0L2phdmFzY3JpcHQiOw0KICAgICAgICBzY3JpcHQuc3JjID0gIi8vbWFwcy5nb29nbGVhcGlzLmNvbS9tYXBzL2FwaS9qcz9rZXk9QUl6YVN5QTh5YjBMelZYeE12aC0zVWM2Ym8zVC1CbWxGNll0dm40JmNhbGxiYWNrPWxvYWRHb29nbGVNYXBzIjsNCiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHJlbmRlckdvb2dsZU1hcHMoKQ0KICAgIHsNCiAgICAgICAgdmFyIG1hcE9wdGlvbnMgPSB7DQogICAgICAgICAgICBjZW50ZXI6IGxhdExuZ0FyclswXSwNCiAgICAgICAgICAgIHpvb206IDE2LA0KICAgICAgICAgICAgbWFwVHlwZUlkOiBnb29nbGUubWFwcy5NYXBUeXBlSWQuUk9BRE1BUCwNCiAgICAgICAgICAgIG1hcFR5cGVDb250cm9sOiBmYWxzZQ0KICAgICAgICB9DQoNCiAgICAgICAgbWFwID0gbmV3IGdvb2dsZS5tYXBzLk1hcChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibWFwX2NhbnZhcyIpLCBtYXBPcHRpb25zKTsNCg0KICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGREb21MaXN0ZW5lcih3aW5kb3csICdyZXNpemUnLCBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgIHZhciBjZW50ZXIgPSBtYXAuZ2V0Q2VudGVyKCk7DQogICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC50cmlnZ2VyKG1hcCwgJ3Jlc2l6ZScpOw0KICAgICAgICAgICAgbWFwLnNldENlbnRlcihjZW50ZXIpOw0KICAgICAgICB9KTsNCg0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGxvYWRHb29nbGVNYXBzKCkgew0KICAgICAgICBnZW9jb2RlciA9IG5ldyBnb29nbGUubWFwcy5HZW9jb2RlcigpOw0KICAgICAgICB2YXIgbm9PZkZhaWxlZExvY2F0aW9uU2VhcmNoID0gMDsNCg0KICAgICAgICAkKHByb3BlcnRpZXMpLmVhY2goZnVuY3Rpb24gKGluZGV4LCBlbGVtZW50KSB7DQogICAgICAgICAgICB2YXIgcHJvcGVydHlBZGRyZXNzID0gZWxlbWVudDsNCg0KICAgICAgICAgICAgLy9HZXQgZ2VvY29kZQ0KICAgICAgICAgICAgZ2VvY29kZXIuZ2VvY29kZSh7ICdhZGRyZXNzJzogcHJvcGVydHlBZGRyZXNzIH0sIGZ1bmN0aW9uIChyZXN1bHRzLCBzdGF0dXMpIHsNCiAgICAgICAgICAgICAgICBpZiAoc3RhdHVzID09IGdvb2dsZS5tYXBzLkdlb2NvZGVyU3RhdHVzLk9LKSB7DQoNCiAgICAgICAgICAgICAgICAgICAgdmFyIGxvY2F0aW9uID0gcmVzdWx0c1swXS5nZW9tZXRyeS5sb2NhdGlvbjsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGxhdExuZyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmcobG9jYXRpb24ubGF0KCksIGxvY2F0aW9uLmxuZygpKTsNCg0KICAgICAgICAgICAgICAgICAgICBsYXRMbmdBcnIucHVzaChsYXRMbmcpOw0KDQogICAgICAgICAgICAgICAgICAgIGlmKGxhdExuZ0Fyci5sZW5ndGggPT0gMSkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyR29vZ2xlTWFwcygpOw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgLy9DcmVhdGUgbWFya2VyIGZvciBtYXAgYW5kIHBsYWNlIGl0IG9uIHRoZSBtYXANCiAgICAgICAgICAgICAgICAgICAgdmFyIG1hcmtlciA9IG5ldyBnb29nbGUubWFwcy5NYXJrZXIoew0KICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGxhdExuZywNCiAgICAgICAgICAgICAgICAgICAgICAgIG1hcDogbWFwDQogICAgICAgICAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICAgICAgICAgIHZhciBjb250ZW50U3RyaW5nID0gJzxkaXY+PHNwYW4+JyArIHByb3BlcnR5QWRkcmVzcyArICc8L3NwYW4+PC9kaXY+JzsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGluZm93aW5kb3cgPSBuZXcgZ29vZ2xlLm1hcHMuSW5mb1dpbmRvdyh7ICAgLy9DcmVhdGUgaW5mbyB3aW5kb3cNCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnRTdHJpbmcNCiAgICAgICAgICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIobWFya2VyLCAnY2xpY2snLCBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGluZm93aW5kb3cub3BlbihtYXAsIG1hcmtlcik7DQogICAgICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAvL2lmIG5vIGxvY2F0aW9uIGZvdW5kIGJ5IGdvb2dsZSBmb3IgYSBwcm9wZXJ0eQ0KICAgICAgICAgICAgICAgIGVsc2UgaWYgKHN0YXR1cyA9PSAiWkVST19SRVNVTFRTIikgew0KICAgICAgICAgICAgICAgICAgICBub09mRmFpbGVkTG9jYXRpb25TZWFyY2grKzsNCg0KICAgICAgICAgICAgICAgICAgICBpZihub09mRmFpbGVkTG9jYXRpb25TZWFyY2ggPT0gJChwcm9wZXJ0aWVzKS5sZW5ndGgpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlcGxhY2VHb29nbGVNYXBzQ29udGVudCgpOw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PSBnb29nbGUubWFwcy5HZW9jb2RlclN0YXR1cy5PVkVSX1FVRVJZX0xJTUlUKSB7DQogICAgICAgICAgICAgICAgICAgIC8vc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IGdldEdlb0NvZGVGb3JBZGRyZXNzKGlkLCBhZGRyZXNzKTsgfSwgKHRpbWVvdXQpKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KTsNCiAgICAgICAgfSk7DQogICAgfQ0KDQogICAgLy9SZXBsYWNlcyBnb29nbGUgbWFwcyBjb250ZW50IHdpdGggYSBuZXcgZGl2IGJsb2NrIHRoYXQgaGFzIGluZm8gbWVzc2FnZQ0KICAgIGZ1bmN0aW9uIHJlcGxhY2VHb29nbGVNYXBzQ29udGVudCgpIHsNCiAgICAgICAgdmFyIG5ld0NvbnRlbnQgPSAnPGRpdiBjbGFzcz0idWktYWNjb3JkaW9uLWNvbnRlbnQgdWktaGVscGVyLXJlc2V0IHVpLXdpZGdldC1jb250ZW50IHVpLWNvcm5lci1ib3R0b20iPicgKw0KICAgICAgICAgICAgJzxwPkNvdWxkblwndCBmaW5kIHRoZSBwcm9wZXJ0eSBhZGRyZXNzKGVzKSBvbiBHb29nbGUgTWFwcy4gPHA+JyArDQogICAgICAgICAgICAnPC9kaXY+JzsNCg0KICAgICAgICAkKCcjbWFwX2NvbnRhaW5lcicpLnJlcGxhY2VXaXRoKG5ld0NvbnRlbnQpOw0KICAgIH0NCg0KPC9zY3JpcHQ+DQoNCiAgICA8L2Rpdj4NCiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+DQoNCiAgICAgICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgJC5mbi50b2dnbGVwYW5lbHMgPSBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoInVpLWFjY29yZGlvbiB1aS1hY2NvcmRpb24taWNvbnMgdWktaGVscGVyLXJlc2V0IikNCiAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kKCJoMyIpDQogICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoInVpLWFjY29yZGlvbi1oZWFkZXIgdWktaGVscGVyLXJlc2V0IHVpLXN0YXRlLWRlZmF1bHQgdWktY29ybmVyLXRvcCB1aS1jb3JuZXItYm90dG9tIikNCiAgICAgICAgICAgICAgICAgICAgICAgIC5ob3ZlcihmdW5jdGlvbiAoKSB7ICQodGhpcykudG9nZ2xlQ2xhc3MoInVpLXN0YXRlLWhvdmVyIik7IH0pDQogICAgICAgICAgICAgICAgICAgICAgICAucHJlcGVuZCgnPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi11cCI+PC9zcGFuPicpDQogICAgICAgICAgICAgICAgICAgICAgICAuY2xpY2soZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykudG9nZ2xlQ2xhc3MoInVpLWFjY29yZGlvbi1oZWFkZXItYWN0aXZlIHVpLXN0YXRlLWFjdGl2ZSB1aS1zdGF0ZS1kZWZhdWx0IHVpLWNvcm5lci1ib3R0b20iKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmluZCgiPiAuZ2x5cGhpY29uIikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRvZ2dsZUNsYXNzKCJnbHlwaGljb24tY2hldnJvbi11cCBnbHlwaGljb24tY2hldnJvbi1kb3duIikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmVuZCgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5uZXh0KCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWRlVG9nZ2xlKCk7DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgICAgICAgICB9KQ0KICAgICAgICAgICAgICAgICAgICAgICAgLm5leHQoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCJ1aS1hY2NvcmRpb24tY29udGVudCB1aS1oZWxwZXItcmVzZXQgdWktd2lkZ2V0LWNvbnRlbnQgdWktY29ybmVyLWJvdHRvbSIpDQogICAgICAgICAgICAgICAgICAgICAgICAuaGlkZSgpOw0KICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgJCgnI2FwcGxpY2F0aW9uJykudG9nZ2xlcGFuZWxzKCk7DQoNCiAgICAgICAgICAgICQoJyNwcm9wZXJ0aWVzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNkZXRhaWxzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyN0cmFja2luZycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjZG9jdW1lbnRzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNyZWxhdGVkQXBwbGljYXRpb25zJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNmZWVzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNnb29nbGVtYXBzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNjb250YWN0VXMnKS5jbGljaygpOw0KICAgICAgICB9KTsNCg0KICAgICAgICAvKiBTaG93cyBhbGwgdGhlIHBhbmVscyAqLw0KICAgICAgICBmdW5jdGlvbiBzaG93QWxsKCkgew0KICAgICAgICAgICAgJCgnI2FwcGxpY2F0aW9uJykuY2hpbGRyZW4oImgzIikuZWFjaChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoInVpLXN0YXRlLWRlZmF1bHQiKSkgew0KICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmNsaWNrKCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSk7DQogICAgICAgIH0NCg0KICAgICAgICAvKiBIaWRlIGFsbCB0aGUgcGFuZWxzICovDQogICAgICAgIGZ1bmN0aW9uIGhpZGVBbGwoKSB7DQogICAgICAgICAgICAkKCcjYXBwbGljYXRpb24nKS5jaGlsZHJlbigiaDMiKS5lYWNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcygidWktc3RhdGUtYWN0aXZlIikpIHsNCiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5jbGljaygpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9DQoNCiAgICA8L3NjcmlwdD4NCg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwhLS0gLy5jb250YWluZXItZmx1aWQgLS0+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgPGRpdiBjbGFzcz0icHJlLWZvb3RlciBjb250YWluZXJfMTIgY2YiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ3JpZF80Ij4NCiAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8ZGl2IGlkPSJmb290ZXIiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyXzEyIGNmIj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJncmlkXzEyIGNmIG93Ij4NCiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImNwIj5Db3B5cmlnaHQgJmNvcHk7IDIwMjUgTGlzbW9yZSBDaXR5IENvdW5jaWw8L3A+DQogICAgICAgICAgICAgICAgICAgIDxwPg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmxpc21vcmUubnN3Lmdvdi5hdS9wYWdlLmFzcD9wPURPQy1PQ1QtNjQtNTctMzAiIHRhcmdldD0iX3BhcmVudCI+SW50ZXJuZXQgUHJpdmFjeSBTdGF0ZW1lbnQ8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAmbmJzcDsmbmJzcDsgfCAmbmJzcDsmbmJzcDsNCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cubGlzbW9yZS5uc3cuZ292LmF1L3BhZ2UuYXNwP3A9RE9DLU9DVC02NC01Ny0zMCIgdGFyZ2V0PSJfcGFyZW50Ij5EaXNjbGFpbWVyPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgJm5ic3A7Jm5ic3A7IHwgJm5ic3A7Jm5ic3A7DQogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmxpc21vcmUubnN3Lmdvdi5hdS9jcF90aGVtZXMvZGVmYXVsdC9zaXRlbWFwLmFzcCIgdGFyZ2V0PSJfcGFyZW50Ij5TaXRlIE1hcDwvYT4NCiAgICAgICAgICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KPC9ib2R5Pg0KPC9odG1sPg0K
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2025.00000071.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:15:42 GMT
      Content-Length:
      - '29274'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2025.00000058.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:15:44 GMT
      Content-Length:
      - '30348'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/010.2024.00000207.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:15:46 GMT
      Content-Length:
      - '29847'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2025.00000070.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:15:48 GMT
      Content-Length:
      - '27917'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2025.00000063.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:15:50 GMT
      Content-Length:
      - '30229'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2025.00000060.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:15:53 GMT
      Content-Length:
      - '29764'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2025.00000062.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:15:55 GMT
      Content-Length:
      - '29746'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/013.2023.00000179.002
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:15:57 GMT
      Content-Length:
      - '28596'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2025.00000057.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:16:00 GMT
      Content-Length:
      - '36658'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2025.00000056.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:16:01 GMT
      Content-Length:
      - '30451'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2025.00000067.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:16:05 GMT
      Content-Length:
      - '34486'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2024.00000326.002
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:16:08 GMT
      Content-Length:
      - '30808'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2025.00000064.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:16:11 GMT
      Content-Length:
      - '36589'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2025.00000059.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:16:13 GMT
      Content-Length:
      - '29782'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/008.2025.00000017.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:16:15 GMT
      Content-Length:
      - '26675'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2025.00000054.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:16:17 GMT
      Content-Length:
      - '31324'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2025.00000053.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:16:19 GMT
      Content-Length:
      - '35238'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2025.00000052.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:16:22 GMT
      Content-Length:
      - '29804'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/013.2024.00000240.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:16:24 GMT
      Content-Length:
      - '28072'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/010.2024.00000189.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:16:26 GMT
      Content-Length:
      - '30508'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/010.2024.00000294.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:16:28 GMT
      Content-Length:
      - '28947'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/013.2024.00000298.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:16:29 GMT
      Content-Length:
      - '28627'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2025.00000050.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:16:32 GMT
      Content-Length:
      - '30240'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/008.2025.00000016.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:16:34 GMT
      Content-Length:
      - '26657'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2025.00000040.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:16:37 GMT
      Content-Length:
      - '48004'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/010.2025.00000032.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:16:39 GMT
      Content-Length:
      - '29842'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2024.00000288.002
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:16:41 GMT
      Content-Length:
      - '30395'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2025.00000051.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:16:44 GMT
      Content-Length:
      - '29323'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/010.2025.00000002.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:16:46 GMT
      Content-Length:
      - '29398'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2025.00000048.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:16:48 GMT
      Content-Length:
      - '29365'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/008.2025.00000014.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:16:50 GMT
      Content-Length:
      - '27652'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQo8aHRtbCBsYW5nPSJlbiI+DQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+DQogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4NCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPg0KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIj4NCiAgICA8bWV0YSBuYW1lPSJrZXl3b3JkcyIgY29udGVudD0iTGlzbW9yZSBDaXR5IENvdW5jaWwsREEgVHJhY2tlcixBcHBsaWNhdGlvbiBUcmFja2VyLERldmVsb3BtZW50IEFwcGxpY2F0aW9uLERldmVsb3BtZW50IEFwcGxpY2F0aW9uIFRyYWNraW5nLCBEQSBFbnF1aXJ5LCBEZXZlbG9wbWVudCBBcHBsaWNhdGlvbiBFbnF1aXJ5LCBBcHBsaWNhdGlvbiBUcmFja2VyIj4NCiAgICA8bWV0YSBuYW1lPSJkZXNjcmlwdGlvbiIgY29udGVudD0iVGhlIG9mZmljaWFsIExpc21vcmUgQ2l0eSBDb3VuY2lsIEFwcGxpY2F0aW9uIFRyYWNrZXIiPg0KDQogICAgPHRpdGxlPkxpc21vcmUgQ2l0eSBDb3VuY2lsIC0gQXBwbGljYXRpb24gVHJhY2tlcjwvdGl0bGU+DQoNCiAgICA8IS0tZmF2aWNvbi0tPg0KICAgIDxsaW5rIGhyZWY9Ii9mYXZpY29uLmljbyIgcmVsPSJzaG9ydGN1dCBpY29uIiB0eXBlPSJpbWFnZS94LWljb24iPg0KDQogICAgPCEtLSBqUXVlcnkgLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS0xLjExLjEuanMiPjwvc2NyaXB0Pg0KDQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS11aS0xLjExLjIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvY29yZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvYWNjb3JkaW9uLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC90aGVtZXMvYmFzZS90aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQoNCiAgICA8IS0tIEJvb3RzdHJhcCAtLT4NCiAgICA8c2NyaXB0IHNyYz0iL1NjcmlwdHMvYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCg0KICAgIDxsaW5rIGhyZWY9Ii9Db250ZW50L2Jvb3RzdHJhcC10aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvYm9vdHN0cmFwLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9mb250LWF3ZXNvbWUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPCEtLSBEYXRhVGFibGVzIC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2pxdWVyeS5kYXRhVGFibGVzLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMuYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMucmVzcG9uc2l2ZS5qcyI+PC9zY3JpcHQ+DQoNCiAgICANCiAgICA8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLmJvb3RzdHJhcC5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvRGF0YVRhYmxlcy9jc3MvZGF0YVRhYmxlcy5yZXNwb25zaXZlLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLnJlc3BvbnNpdmUuc2NzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDwhLS0gQm9vdHN0cmFwIFNCLUFkbWluLTIgUGx1Z2luIGFuZCBvdGhlciBjc3MgYW5kIGpzIGZpbGVzLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9qcy9ib290c3RyYXAtY29tYm9ib3guanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9qcy9ib290c3RyYXAtZGF0ZXBpY2tlci5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL2pxdWVyeS5mb3JtLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvanF1ZXJ5LnRhYmxlc29ydGVyLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvbWFzdGVydmlldy5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL21ldGlzTWVudS5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL3NiLWFkbWluLTIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL2Nzcy9ib290c3RyYXAtY29tYm9ib3guY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvZGF0ZXBpY2tlcjMuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvbWFzdGVydmlldy1jdXN0b21pc2F0aW9ucy5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL2Nzcy9zYi1hZG1pbi0yLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDxsaW5rIGhyZWY9Ii9Db3VuY2lsX1RoZW1lL0xpc21vcmUvbGlzbW9yZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQogICAgDQoNCiAgICA8IS0tIEhUTUw1IFNoaW0gYW5kIFJlc3BvbmQuanMgSUU4IHN1cHBvcnQgb2YgSFRNTDUgZWxlbWVudHMgYW5kIG1lZGlhIHF1ZXJpZXMgLS0+DQogICAgPCEtLSBXQVJOSU5HOiBSZXNwb25kLmpzIGRvZXNuJ3Qgd29yayBpZiB5b3UgdmlldyB0aGUgcGFnZSB2aWEgZmlsZTovLyAtLT4NCiAgICA8IS0tW2lmIGx0IElFIDldPg0KICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9vc3MubWF4Y2RuLmNvbS9saWJzL2h0bWw1c2hpdi8zLjcuMC9odG1sNXNoaXYuanMiPjwvc2NyaXB0Pg0KICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9vc3MubWF4Y2RuLmNvbS9saWJzL3Jlc3BvbmQuanMvMS40LjIvcmVzcG9uZC5taW4uanMiPjwvc2NyaXB0Pg0KICAgIDwhW2VuZGlmXS0tPg0KDQogICAgPGxpbmsgaHJlZj0naHR0cDovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9UmFsZXdheTozMDAsNDAwLDYwMCw3MDAnIHJlbD0nc3R5bGVzaGVldCcgdHlwZT0ndGV4dC9jc3MnPg0KICAgIDxsaW5rIGhyZWY9J2h0dHA6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PU9zd2FsZDozMDAsNDAwLDcwMCcgcmVsPSdzdHlsZXNoZWV0JyB0eXBlPSd0ZXh0L2Nzcyc+DQo8L2hlYWQ+DQoNCg0KPGJvZHkgY2xhc3M9ImNicC1zcG1lbnUtcHVzaCI+DQogICAgPGRpdiBjbGFzcz0id3IiPg0KPGRpdiBpZD0iaGVhZGVyIj4NCiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXJfMTIiPg0KDQogICAgICAgIDxoMSBpZD0ibG9nbyI+PGEgaHJlZj0iaHR0cDovL3d3dy5saXNtb3JlLm5zdy5nb3YuYXUvZGVmYXVsdC5hc3AiPjxpbWcgc3JjPSIvL2NhbmRpZGF0ZS1vZmZpY2UuczMuYW1hem9uYXdzLmNvbS9zaGFyZWQvbGlzbW9yZS9pbWFnZXMvbG9nby5wbmciIGFsdD0iTGlzbW9yZSBDaXR5IENvdW5jaWwiIHN0eWxlPSJwYWRkaW5nLXRvcDo1cHgiPjxzdHJvbmcgY2xhc3M9InZoIj5MaXNtb3JlIENpdHkgQ291bmNpbDwvc3Ryb25nPjwvYT48L2gxPg0KDQogICAgICAgIDxkaXYgY2xhc3M9InV0aWxpdHkgcmlnaHQiPg0KICAgICAgICAgICAgPGEgY2xhc3M9ImhvbWUtbGluayIgaHJlZj0iaHR0cDovL3d3dy5saXNtb3JlLm5zdy5nb3YuYXUvZGVmYXVsdC5hc3AiPg0KICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvL2NhbmRpZGF0ZS1vZmZpY2UuczMuYW1hem9uYXdzLmNvbS9zaGFyZWQvbGlzbW9yZS9pbWFnZXMvaG9tZS5wbmciIGFsdD0iTGlzbW9yZSBDaXR5IENvdW5jaWwiPg0KICAgICAgICAgICAgPC9hPg0KICAgICAgICA8L2Rpdj4NCg0KICAgICAgICA8ZGl2IGNsYXNzPSJjbGVhciI+DQogICAgICAgIDwvZGl2Pg0KDQogICAgPC9kaXY+DQo8L2Rpdj4NCiAgICAgICAgPGRpdiBpZD0iYmFubmVyIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJhbm5lci10ZXh0IGNmIj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJiYW5uZXItdGV4dC1jb250YWluZXIiPg0KICAgICAgICAgICAgICAgICAgICA8aDEgY2xhc3M9Im93Ij5EQSBUcmFja2luZyA8c3Bhbj5Qb3J0YWw8L3NwYW4+PC9oMT4NCiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Im5tIj5JbmZvcm1hdGlvbiBvbiBkZXZlbG9wbWVudCBhcHBsaWNhdGlvbnMgaW4gdGhlIExpc21vcmUgTG9jYWwgR292ZXJubWVudCBBcmVhLiA8L3A+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lcl8xMiBpbnRybyBjZiI+ICAgICAgICAgICAgPCEtLSBOYXZpZ2F0aW9uIC0tPg0KICAgICAgICAgICAgPG5hdiBjbGFzcz0ibmF2YmFyIG5hdmJhci1kZWZhdWx0IG5hdmJhci1zdGF0aWMtdG9wIiByb2xlPSJuYXZpZ2F0aW9uIiBzdHlsZT0ibWFyZ2luLWJvdHRvbTogMCI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibmF2YmFyLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0ibmF2YmFyLXRvZ2dsZSIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLXRhcmdldD0iLm5hdmJhci1jb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3Itb25seSI+VG9nZ2xlIG5hdmlnYXRpb248L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1iYXIiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tYmFyIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2YmFyLWJyYW5kIiBocmVmPSIjIj48L2E+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPCEtLSAvLm5hdmJhci1oZWFkZXIgLS0+DQogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2YmFyLXRvcC1saW5rcyBuYXZiYXItcmlnaHQgaGlkZGVuLXhzIGhpZGRlbi1zbSBoaWRkZW4tbWQiPg0KICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48c3BhbiBpZD0icHJpbnRJY29uIiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1wcmludCIgb25jbGljaz0id2luZG93LnByaW50KCk7Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgIDwvdWw+DQoNCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItZGVmYXVsdCBzaWRlYmFyIiByb2xlPSJuYXZpZ2F0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2lkZWJhci1uYXYgbmF2YmFyLWNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IiBpZD0ic2lkZS1tZW51Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48aSBjbGFzcz0iZmEgZmEtbGlzdC11bCBmYS1mdyI+PC9pPkFwcGxpY2F0aW9uIFRyYWNrZXI8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9BYm91dCB0YXJnZXQ9X3NlbGY+V2hhdCBpcyBBcHBsaWNhdGlvbiBUcmFja2VyPzwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9EaXNjbGFpbWVyIHRhcmdldD1fc2VsZj5EaXNjbGFpbWVyPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gLy5uYXYtc2Vjb25kLWxldmVsIC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48aSBjbGFzcz0iZmEgZmEtbGlzdC11bCBmYS1mdyI+PC9pPkFwcGxpY2F0aW9uczxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXYtc2Vjb25kLWxldmVsIGNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL0luZGV4IHRhcmdldD0+QXBwbGljYXRpb24gVHJhY2tlciBIb21lPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL1NlYXJjaCBpZD1zZWFyY2ggdGFyZ2V0PV9zZWxmPlNlYXJjaDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/UmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1UcnVlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSBpZD1vdXRzdGFuZGluZy1hcHBzIHRhcmdldD1fc2VsZj5VbmRldGVybWluZWQgQXBwbGljYXRpb25zPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9SZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9VHJ1ZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIGlkPWV4aGliaXRlZC1hcHBzIHRhcmdldD1fc2VsZj5BcHBsaWNhdGlvbnMgT24gRXhoaWJpdGlvbjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjdGl2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbnMgU3VibWl0dGVkPHNwYW4gY2xhc3M9ImZhIGFycm93Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdi1zZWNvbmQtbGV2ZWwgY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTIlMmYwNiUyZjIwMjUmRGF0ZVRvPTIlMmYwNiUyZjIwMjUmRGF0ZVR5cGU9MSZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTI1JTJmMDUlMmYyMDI1JkRhdGVUbz0zMSUyZjA1JTJmMjAyNSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9NSUyYzglMmMxMCUyYzEzJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgV2VlazwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MSUyZjA2JTJmMjAyNSZEYXRlVG89MiUyZjA2JTJmMjAyNSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9NSUyYzglMmMxMCUyYzEzJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPlRoaXMgTW9udGg8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTElMmYwNSUyZjIwMjUmRGF0ZVRvPTMxJTJmMDUlMmYyMDI1JkRhdGVUeXBlPTEmUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJkFwcGxpY2F0aW9uVHlwZT01JTJjOCUyYzEwJTJjMTMmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjdGl2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbnMgRGV0ZXJtaW5lZDxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXYtc2Vjb25kLWxldmVsIGNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0yJTJmMDYlMmYyMDI1JkRhdGVUbz0yJTJmMDYlMmYyMDI1JkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTI1JTJmMDUlMmYyMDI1JkRhdGVUbz0zMSUyZjA1JTJmMjAyNSZEYXRlVHlwZT0yJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1UcnVlJkFwcGxpY2F0aW9uVHlwZT01JTJjOCUyYzEwJTJjMTMmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBXZWVrPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDYlMmYyMDI1JkRhdGVUbz0yJTJmMDYlMmYyMDI1JkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPTUlMmM4JTJjMTAlMmMxMyZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIE1vbnRoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDUlMmYyMDI1JkRhdGVUbz0zMSUyZjA1JTJmMjAyNSZEYXRlVHlwZT0yJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1UcnVlJkFwcGxpY2F0aW9uVHlwZT01JTJjOCUyYzEwJTJjMTMmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8IS0tIC8uc2lkZWJhci1jb2xsYXBzZSAtLT4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLXN0YXRpYy1zaWRlIC0tPg0KICAgICAgICAgICAgPC9uYXY+DQogICAgICAgICAgICA8ZGl2IGlkPSJwYWdlLXdyYXBwZXIiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+DQogICAgICAgICAgICAgICAgICAgIA0KDQoNCiAgICA8ZGl2IGNsYXNzPSJwYWdlLWhlYWRlciI+DQogICAgICAgIDxoMj5BcHBsaWNhdGlvbjogQ29tcGx5aW5nIERldmVsb3BtZW50ICg4LjIwMjUuMTQuMSk8L2gyPg0KICAgIDwvZGl2Pg0KICAgIDxoND5EZXRhaWxlZCBpbmZvcm1hdGlvbiByZWxhdGVkIHRvIHRoZSBhcHBsaWNhdGlvbjo8L2g0Pg0KICAgIDxiciAvPg0KICAgIDxkaXY+DQogICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6c2hvd0FsbCgpOyI+U2hvdyBBbGw8L2E+IC8NCiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDpoaWRlQWxsKCk7Ij5IaWRlIEFsbDwvYT4NCiAgICA8L2Rpdj4NCiAgICA8ZGl2IGlkPSJhcHBsaWNhdGlvbiI+DQoNCiAgICAgICAgICAgIDxoMyBpZD0iZGV0YWlscyI+PGEgaHJlZj0iIyI+RGV0YWlsczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+RGVzY3JpcHRpb246IDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkNEQTI1LzE0IC0gNyBIb2xsYW5kIFN0cmVldCBHb29uZWxsYWJhaCAtIEFsdGVyYXRpb25zPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlN1Ym1pdHRlZCBEYXRlOiA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjE4LzAzLzIwMjUgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFwcGxpY2F0aW9uIFR5cGU6IDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkNvbXBseWluZyBEZXZlbG9wbWVudDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJwcm9wZXJ0aWVzIj48YSBocmVmPSIjIj5Qcm9wZXJ0aWVzPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD43IEhvbGxhbmQgU3QsIEdvb25lbGxhYmFoIE5TVyAyNDgwICAoRFAgNzkzNDA3IGxvdCAxMik8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0icGVvcGxlIj48YSBocmVmPSIjIj5QZW9wbGU8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBY2NyZWRpdGVkIENlcnRpZmllcjogUGV0ZXIgSG9mc3RldHRlcg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFwcGxpY2FudDogIA0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFByaW5jaXBhbCBDZXJ0aWZ5aW5nIEF1dGhvcml0eTogIA0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0ib2ZmaWNlciI+PGEgaHJlZj0iIyI+T2ZmaWNlcjwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+UGV0ZXIgSG9mc3RldHRlcjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJkZWNpc2lvbiI+PGEgaHJlZj0iIyI+RGVjaXNpb248L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFwcGxpY2F0aW9uIFN0YXR1czogRGV0ZXJtaW5lZDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGV0ZXJtaW5hdGlvbiBEYXRlOg0KMTkvMDMvMjAyNSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+RGV0ZXJtaW5hdGlvbiBUeXBlOiBSZWdpc3RyYXRpb24gLSBQcml2YXRlIENlcnRpZmljYXRpb248L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0iZXN0aW1hdGVkQ29zdCI+PGEgaHJlZj0iIyI+RXN0aW1hdGVkIENvc3Q8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPiQwLjAwPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9InRyYWNraW5nIj48YSBocmVmPSIjIj5UcmFja2luZzwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaWNvbi13cmFwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPnN3aXBlIHRhYmxlIHRvIHRoZSBsZWZ0IHRvIHJldmVhbCBtb3JlIGRhdGE8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1hcnJvdy1yaWdodCIgYXJpYS1oaWRkZW49InRydWUiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtc3RyaXBlZCB0YWJsZS1ib3JkZXJlZCBuby1mb290ZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkRlc2NyaXB0aW9uPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkNvbW1lbmNlZCBEYXRlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5EdWUgRGF0ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Db21wbGV0ZWQgRGF0ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5BcHBsaWNhdGlvbiBSZWNlaXZlZDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoxOS8wMy8yMDI1ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjE5LzAzLzIwMjUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI2LzAzLzIwMjUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+QXBwbGljYXRpb24gUmVjZWl2ZWQ8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMTkvMDMvMjAyNSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoxOS8wMy8yMDI1ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyNi8wMy8yMDI1ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkNEQyBJc3N1ZWQgKFByaXZhdGUgUENBKTwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoxOS8wMy8yMDI1ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjE5LzAzLzIwMjUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI2LzAzLzIwMjUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQoNCiAgICAgICAgICAgIDxoMyBpZD0icmVsYXRlZEFwcGxpY2F0aW9ucyI+PGEgaHJlZj0iIyI+UmVsYXRlZCBBcHBsaWNhdGlvbnM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgIDxiPk5vIGRhdGEuPC9iPg0KICAgICAgICAgICAgPC9kaXY+DQoNCg0KDQoNCg0KDQoNCjxoMyBpZD0iZG9jdW1lbnRzIj48YSBocmVmPSIjIj5Eb2N1bWVudHM8L2E+PC9oMz4NCjxkaXY+DQoNCiAgICAgICAgPGI+Tm8gZGF0YS48L2I+DQo8L2Rpdj4NCg0KDQogICAgICAgICAgICA8aDMgaWQ9ImNvbnRhY3RVcyI+PGEgaHJlZj0iIyI+Q29udGFjdCBVczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PHA+DQpTaG91bGQgeW91IHdpc2ggdG8gY29udGFjdCBjb3VuY2lsIHRvIG1ha2UgZW5xdWlyaWVzIHJlZ2FyZGluZyBhcHBsaWNhdGlvbnMgZGlzcGxheWVkIG9uIHRoZSB3ZWJzaXRlLCBwbGVhc2UgY29udGFjdCBlaXRoZXIgYnkgZW1haWwgPGEgc3R5bGU9ImNvbG9yOiBibHVlIiBocmVmPSJtYWlsdG86Y291bmNpbEBsaXNtb3JlLm5zdy5nb3YuYXU/c3ViamVjdD1TdWJtaXNzaW9uIGZvciBhcHBsaWNhdGlvbiA4LjIwMjUuMTQuMSI+Y291bmNpbEBsaXNtb3JlLm5zdy5nb3YuYXU8L2E+LCBwaG9uZSAxMzAwIDg3IDgzIDg3IGR1cmluZyBub3JtYWwgb2ZmaWNlIGhvdXJzIG9yIGluIHdyaXRpbmcgdG8gUE8gQm94IDIzQSwgTGlzbW9yZSBOU1cgMjQ4MC4gQWxsIGNvcnJlc3BvbmRlbmNlIHNob3VsZCBiZSBhZGRyZXNzZWQgdG8gdGhlIEdlbmVyYWwgTWFuYWdlciBhbmQgcXVvdGUgdGhlIHJlbGV2YW50IGFwcGxpY2F0aW9uIHJlZmVyZW5jZSBudW1iZXIuDQo8L3A+DQo8cD4NCklmIHRoZSBhcHBsaWNhdGlvbiBkaXNwbGF5ZWQgb24gdGhpcyB3ZWJzaXRlIGlzIHVuZGVyIGN1cnJlbnQgbmVpZ2hib3VyIG5vdGlmaWNhdGlvbiwgcHJvcGVydGllcyBjb25zaWRlcmVkIGJ5IENvdW5jaWwgdG8gcG9zc2libHkgYmUgZGV0cmltZW50YWxseSBhZmZlY3RlZCB3aWxsIGJlIGNvbnRhY3RlZCBpbmRpdmlkdWFsbHkgYW5kIGFkdmlzZWQgb2YgdGhlaXIgc3VibWlzc2lvbiBvcHBvcnR1bml0aWVzIHVuZGVyIENoYXB0ZXIgMTAgTGlzbW9yZSBEZXZlbG9wbWVudCBDb250cm9sIFBsYW4gMjAxMi4NCjwvcD4NCjxwPg0KPGEgaHJlZj0iaHR0cDovL3d3dy5saXNtb3JlLm5zdy5nb3YuYXUvY3BfdGhlbWVzL2RlZmF1bHQvcGFnZS5hc3A/cD1ET0MtTEhSLTgzLTc2LTU4IiAgdGFyZ2V0PSJfYmxhbmsiPkNMSUNLIEhFUkU8L2E+IHRvIHZpc2l0IENvdW5jaWzigJlzIHdlYnNpdGUgYW5kIHNlZSBmdXJ0aGVyIGRldGFpbHMgb24gdGhlIG1ha2luZyBvZiBzdWJtaXNzaW9ucyBvciByaW5nIDEzMDAgODcgODMgODcgZHVyaW5nIG5vcm1hbCBvZmZpY2UgaG91cnMuDQo8L3A+DQo8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJub3RpZmllZEFkZHJlc3NlcyI+PGEgaHJlZj0iIyI+Tm90aWZpZWQgQWRkcmVzc2VzPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8Yj5ObyBkYXRhLjwvYj4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQo8aDMgaWQ9Imdvb2dsZW1hcHMiPjxhIGhyZWY9IiMiPkdvb2dsZSBNYXBzPC9hPjwvaDM+DQo8ZGl2IGlkPSJtYXBfY29udGFpbmVyIj4NCiAgICA8ZGl2IGlkPSJtYXBfY2FudmFzIiBjbGFzcz0iaWZyYW1lLXJ3ZCI+DQogICAgPC9kaXY+DQo8L2Rpdj4NCg0KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KDQogICAgd2luZG93Lm9ubG9hZCA9IGxvYWRHb29nbGVNYXBzU2NyaXB0Ow0KDQogICAgdmFyIGdlb2NvZGVyOw0KICAgIHZhciBtYXA7DQogICAgdmFyIHRpbWVvdXQgPSAzMDA7DQogICAgdmFyIHByb3BlcnRpZXMgPSBbIjcgSG9sbGFuZCBTdCwgR29vbmVsbGFiYWggTlNXIDI0ODAgIl07DQogICAgdmFyIGxhdExuZ0FyciA9IFtdOw0KDQogICAgZnVuY3Rpb24gbG9hZEdvb2dsZU1hcHNTY3JpcHQoKSB7DQogICAgICAgIHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzY3JpcHQiKTsNCiAgICAgICAgc2NyaXB0LnR5cGUgPSAidGV4dC9qYXZhc2NyaXB0IjsNCiAgICAgICAgc2NyaXB0LnNyYyA9ICIvL21hcHMuZ29vZ2xlYXBpcy5jb20vbWFwcy9hcGkvanM/a2V5PUFJemFTeUE4eWIwTHpWWHhNdmgtM1VjNmJvM1QtQm1sRjZZdHZuNCZjYWxsYmFjaz1sb2FkR29vZ2xlTWFwcyI7DQogICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2NyaXB0KTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiByZW5kZXJHb29nbGVNYXBzKCkNCiAgICB7DQogICAgICAgIHZhciBtYXBPcHRpb25zID0gew0KICAgICAgICAgICAgY2VudGVyOiBsYXRMbmdBcnJbMF0sDQogICAgICAgICAgICB6b29tOiAxNiwNCiAgICAgICAgICAgIG1hcFR5cGVJZDogZ29vZ2xlLm1hcHMuTWFwVHlwZUlkLlJPQURNQVAsDQogICAgICAgICAgICBtYXBUeXBlQ29udHJvbDogZmFsc2UNCiAgICAgICAgfQ0KDQogICAgICAgIG1hcCA9IG5ldyBnb29nbGUubWFwcy5NYXAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm1hcF9jYW52YXMiKSwgbWFwT3B0aW9ucyk7DQoNCiAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkRG9tTGlzdGVuZXIod2luZG93LCAncmVzaXplJywgZnVuY3Rpb24oKSB7DQogICAgICAgICAgICB2YXIgY2VudGVyID0gbWFwLmdldENlbnRlcigpOw0KICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQudHJpZ2dlcihtYXAsICdyZXNpemUnKTsNCiAgICAgICAgICAgIG1hcC5zZXRDZW50ZXIoY2VudGVyKTsNCiAgICAgICAgfSk7DQoNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBsb2FkR29vZ2xlTWFwcygpIHsNCiAgICAgICAgZ2VvY29kZXIgPSBuZXcgZ29vZ2xlLm1hcHMuR2VvY29kZXIoKTsNCiAgICAgICAgdmFyIG5vT2ZGYWlsZWRMb2NhdGlvblNlYXJjaCA9IDA7DQoNCiAgICAgICAgJChwcm9wZXJ0aWVzKS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkgew0KICAgICAgICAgICAgdmFyIHByb3BlcnR5QWRkcmVzcyA9IGVsZW1lbnQ7DQoNCiAgICAgICAgICAgIC8vR2V0IGdlb2NvZGUNCiAgICAgICAgICAgIGdlb2NvZGVyLmdlb2NvZGUoeyAnYWRkcmVzcyc6IHByb3BlcnR5QWRkcmVzcyB9LCBmdW5jdGlvbiAocmVzdWx0cywgc3RhdHVzKSB7DQogICAgICAgICAgICAgICAgaWYgKHN0YXR1cyA9PSBnb29nbGUubWFwcy5HZW9jb2RlclN0YXR1cy5PSykgew0KDQogICAgICAgICAgICAgICAgICAgIHZhciBsb2NhdGlvbiA9IHJlc3VsdHNbMF0uZ2VvbWV0cnkubG9jYXRpb247DQogICAgICAgICAgICAgICAgICAgIHZhciBsYXRMbmcgPSBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKGxvY2F0aW9uLmxhdCgpLCBsb2NhdGlvbi5sbmcoKSk7DQoNCiAgICAgICAgICAgICAgICAgICAgbGF0TG5nQXJyLnB1c2gobGF0TG5nKTsNCg0KICAgICAgICAgICAgICAgICAgICBpZihsYXRMbmdBcnIubGVuZ3RoID09IDEpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckdvb2dsZU1hcHMoKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgIC8vQ3JlYXRlIG1hcmtlciBmb3IgbWFwIGFuZCBwbGFjZSBpdCBvbiB0aGUgbWFwDQogICAgICAgICAgICAgICAgICAgIHZhciBtYXJrZXIgPSBuZXcgZ29vZ2xlLm1hcHMuTWFya2VyKHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBsYXRMbmcsDQogICAgICAgICAgICAgICAgICAgICAgICBtYXA6IG1hcA0KICAgICAgICAgICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgICAgICAgICB2YXIgY29udGVudFN0cmluZyA9ICc8ZGl2PjxzcGFuPicgKyBwcm9wZXJ0eUFkZHJlc3MgKyAnPC9zcGFuPjwvZGl2Pic7DQogICAgICAgICAgICAgICAgICAgIHZhciBpbmZvd2luZG93ID0gbmV3IGdvb2dsZS5tYXBzLkluZm9XaW5kb3coeyAgIC8vQ3JlYXRlIGluZm8gd2luZG93DQogICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBjb250ZW50U3RyaW5nDQogICAgICAgICAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKG1hcmtlciwgJ2NsaWNrJywgZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpbmZvd2luZG93Lm9wZW4obWFwLCBtYXJrZXIpOw0KICAgICAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgLy9pZiBubyBsb2NhdGlvbiBmb3VuZCBieSBnb29nbGUgZm9yIGEgcHJvcGVydHkNCiAgICAgICAgICAgICAgICBlbHNlIGlmIChzdGF0dXMgPT0gIlpFUk9fUkVTVUxUUyIpIHsNCiAgICAgICAgICAgICAgICAgICAgbm9PZkZhaWxlZExvY2F0aW9uU2VhcmNoKys7DQoNCiAgICAgICAgICAgICAgICAgICAgaWYobm9PZkZhaWxlZExvY2F0aW9uU2VhcmNoID09ICQocHJvcGVydGllcykubGVuZ3RoKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlR29vZ2xlTWFwc0NvbnRlbnQoKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0dXMgPT0gZ29vZ2xlLm1hcHMuR2VvY29kZXJTdGF0dXMuT1ZFUl9RVUVSWV9MSU1JVCkgew0KICAgICAgICAgICAgICAgICAgICAvL3NldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyBnZXRHZW9Db2RlRm9yQWRkcmVzcyhpZCwgYWRkcmVzcyk7IH0sICh0aW1lb3V0KSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSk7DQogICAgICAgIH0pOw0KICAgIH0NCg0KICAgIC8vUmVwbGFjZXMgZ29vZ2xlIG1hcHMgY29udGVudCB3aXRoIGEgbmV3IGRpdiBibG9jayB0aGF0IGhhcyBpbmZvIG1lc3NhZ2UNCiAgICBmdW5jdGlvbiByZXBsYWNlR29vZ2xlTWFwc0NvbnRlbnQoKSB7DQogICAgICAgIHZhciBuZXdDb250ZW50ID0gJzxkaXYgY2xhc3M9InVpLWFjY29yZGlvbi1jb250ZW50IHVpLWhlbHBlci1yZXNldCB1aS13aWRnZXQtY29udGVudCB1aS1jb3JuZXItYm90dG9tIj4nICsNCiAgICAgICAgICAgICc8cD5Db3VsZG5cJ3QgZmluZCB0aGUgcHJvcGVydHkgYWRkcmVzcyhlcykgb24gR29vZ2xlIE1hcHMuIDxwPicgKw0KICAgICAgICAgICAgJzwvZGl2Pic7DQoNCiAgICAgICAgJCgnI21hcF9jb250YWluZXInKS5yZXBsYWNlV2l0aChuZXdDb250ZW50KTsNCiAgICB9DQoNCjwvc2NyaXB0Pg0KDQogICAgPC9kaXY+DQogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KDQogICAgICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICQuZm4udG9nZ2xlcGFuZWxzID0gZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKCJ1aS1hY2NvcmRpb24gdWktYWNjb3JkaW9uLWljb25zIHVpLWhlbHBlci1yZXNldCIpDQogICAgICAgICAgICAgICAgICAgICAgICAuZmluZCgiaDMiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCJ1aS1hY2NvcmRpb24taGVhZGVyIHVpLWhlbHBlci1yZXNldCB1aS1zdGF0ZS1kZWZhdWx0IHVpLWNvcm5lci10b3AgdWktY29ybmVyLWJvdHRvbSIpDQogICAgICAgICAgICAgICAgICAgICAgICAuaG92ZXIoZnVuY3Rpb24gKCkgeyAkKHRoaXMpLnRvZ2dsZUNsYXNzKCJ1aS1zdGF0ZS1ob3ZlciIpOyB9KQ0KICAgICAgICAgICAgICAgICAgICAgICAgLnByZXBlbmQoJzxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tdXAiPjwvc3Bhbj4nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLmNsaWNrKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnRvZ2dsZUNsYXNzKCJ1aS1hY2NvcmRpb24taGVhZGVyLWFjdGl2ZSB1aS1zdGF0ZS1hY3RpdmUgdWktc3RhdGUtZGVmYXVsdCB1aS1jb3JuZXItYm90dG9tIikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoIj4gLmdseXBoaWNvbiIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50b2dnbGVDbGFzcygiZ2x5cGhpY29uLWNoZXZyb24tdXAgZ2x5cGhpY29uLWNoZXZyb24tZG93biIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5lbmQoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubmV4dCgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zbGlkZVRvZ2dsZSgpOw0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgICAgICAgICAgICAgfSkNCiAgICAgICAgICAgICAgICAgICAgICAgIC5uZXh0KCkNCiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygidWktYWNjb3JkaW9uLWNvbnRlbnQgdWktaGVscGVyLXJlc2V0IHVpLXdpZGdldC1jb250ZW50IHVpLWNvcm5lci1ib3R0b20iKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLmhpZGUoKTsNCiAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgICQoJyNhcHBsaWNhdGlvbicpLnRvZ2dsZXBhbmVscygpOw0KDQogICAgICAgICAgICAkKCcjcHJvcGVydGllcycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjZGV0YWlscycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjdHJhY2tpbmcnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI2RvY3VtZW50cycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjcmVsYXRlZEFwcGxpY2F0aW9ucycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjZmVlcycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjZ29vZ2xlbWFwcycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjY29udGFjdFVzJykuY2xpY2soKTsNCiAgICAgICAgfSk7DQoNCiAgICAgICAgLyogU2hvd3MgYWxsIHRoZSBwYW5lbHMgKi8NCiAgICAgICAgZnVuY3Rpb24gc2hvd0FsbCgpIHsNCiAgICAgICAgICAgICQoJyNhcHBsaWNhdGlvbicpLmNoaWxkcmVuKCJoMyIpLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKCJ1aS1zdGF0ZS1kZWZhdWx0IikpIHsNCiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5jbGljaygpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9DQoNCiAgICAgICAgLyogSGlkZSBhbGwgdGhlIHBhbmVscyAqLw0KICAgICAgICBmdW5jdGlvbiBoaWRlQWxsKCkgew0KICAgICAgICAgICAgJCgnI2FwcGxpY2F0aW9uJykuY2hpbGRyZW4oImgzIikuZWFjaChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoInVpLXN0YXRlLWFjdGl2ZSIpKSB7DQogICAgICAgICAgICAgICAgICAgICQodGhpcykuY2xpY2soKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KTsNCiAgICAgICAgfQ0KDQogICAgPC9zY3JpcHQ+DQoNCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8uY29udGFpbmVyLWZsdWlkIC0tPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KDQogICAgICAgIDxkaXYgY2xhc3M9InByZS1mb290ZXIgY29udGFpbmVyXzEyIGNmIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImdyaWRfNCI+DQogICAgICAgICAgICAgICANCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBpZD0iZm9vdGVyIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lcl8xMiBjZiI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ3JpZF8xMiBjZiBvdyI+DQogICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjcCI+Q29weXJpZ2h0ICZjb3B5OyAyMDI1IExpc21vcmUgQ2l0eSBDb3VuY2lsPC9wPg0KICAgICAgICAgICAgICAgICAgICA8cD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5saXNtb3JlLm5zdy5nb3YuYXUvcGFnZS5hc3A/cD1ET0MtT0NULTY0LTU3LTMwIiB0YXJnZXQ9Il9wYXJlbnQiPkludGVybmV0IFByaXZhY3kgU3RhdGVtZW50PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgJm5ic3A7Jm5ic3A7IHwgJm5ic3A7Jm5ic3A7DQogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmxpc21vcmUubnN3Lmdvdi5hdS9wYWdlLmFzcD9wPURPQy1PQ1QtNjQtNTctMzAiIHRhcmdldD0iX3BhcmVudCI+RGlzY2xhaW1lcjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICZuYnNwOyZuYnNwOyB8ICZuYnNwOyZuYnNwOw0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5saXNtb3JlLm5zdy5nb3YuYXUvY3BfdGhlbWVzL2RlZmF1bHQvc2l0ZW1hcC5hc3AiIHRhcmdldD0iX3BhcmVudCI+U2l0ZSBNYXA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCjwvYm9keT4NCjwvaHRtbD4NCg==
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2022.00000331.003
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:16:53 GMT
      Content-Length:
      - '33232'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
- request:
    method: get
    uri: https://tracker.lismore.nsw.gov.au/Application/ApplicationDetails/005.2020.00000385.002
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.8.5 Ruby/3.2.2p53 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=f42et5wjfqr4fyw4zrx20dkl; User=accessAllowed-MasterView=True
      Host:
      - tracker.lismore.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Content-Security-Policy-Report-Only:
      - 'default-src ''self'' www.google-analytics.com stats.g.doubleclick.net paperform.co;
        font-src ''self'' data: fonts.gstatic.com; style-src ''self'' ''unsafe-inline''
        fonts.googleapis.com f1-oc.readspeaker.com cdnjs.cloudflare.com; script-src
        ''self'' ''unsafe-inline'' paperform.co www.google.com komito.net f1-oc.readspeaker.com
        cdnjs.cloudflare.com www.google-analytics.com ajax.googleapis.com browser-update.org
        www.gstatic.com; img-src ''self''  stats.g.doubleclick.net *.gumlet.io azvgvdpauo.cloudimg.io
        cdn-c.pagemind.com paperform.co'
      Permissions-Policy:
      - microphone=()
      Referrer-Policy:
      - no-referrer-when-downgrade
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Date:
      - Mon, 02 Jun 2025 09:16:55 GMT
      Content-Length:
      - '33669'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 14 Apr 2025 14:00:00 GMT
recorded_with: VCR 6.3.1
