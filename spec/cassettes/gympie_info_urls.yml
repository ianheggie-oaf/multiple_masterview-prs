---
http_interactions:
- request:
    method: get
    uri: https://daonline.gympie.qld.gov.au/Application/ApplicationDetails/007.2019.00001677.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - daonline.gympie.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 302
      message: Found
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Home/Disclaimer"
      Server:
      - Microsoft-IIS/8.5
      Set-Cookie:
      - ASP.NET_SessionId=bl0ck4eiskvl2vo42dt35bpx; path=/; HttpOnly; SameSite=Lax
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:19:29 GMT
      Content-Length:
      - '133'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Home/Disclaimer\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:19:29 GMT
- request:
    method: get
    uri: https://daonline.gympie.qld.gov.au/Home/Disclaimer
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=bl0ck4eiskvl2vo42dt35bpx
      Host:
      - daonline.gympie.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:19:29 GMT
      Content-Length:
      - '16047'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:19:30 GMT
- request:
    method: post
    uri: https://daonline.gympie.qld.gov.au/Home/DisclaimerProcessing
    body:
      encoding: UTF-8
      string: agreed=true
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=bl0ck4eiskvl2vo42dt35bpx
      Host:
      - daonline.gympie.qld.gov.au
      Referer:
      - https://daonline.gympie.qld.gov.au/Home/Disclaimer
      Content-Type:
      - application/x-www-form-urlencoded
      Content-Length:
      - '11'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Application/ApplicationDetails/007.2019.00001677.001"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      Set-Cookie:
      - User=accessAllowed-MasterView=True; path=/
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:19:29 GMT
      Content-Length:
      - '170'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Application/ApplicationDetails/007.2019.00001677.001\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:19:30 GMT
- request:
    method: get
    uri: https://daonline.gympie.qld.gov.au/Application/ApplicationDetails/007.2019.00001677.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=bl0ck4eiskvl2vo42dt35bpx; User=accessAllowed-MasterView=True
      Host:
      - daonline.gympie.qld.gov.au
      Referer:
      - https://daonline.gympie.qld.gov.au/Home/Disclaimer
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:19:41 GMT
      Content-Length:
      - '46343'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:19:41 GMT
- request:
    method: get
    uri: https://daonline.gympie.qld.gov.au/Application/ApplicationDetails/007.2019.00001677.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=bl0ck4eiskvl2vo42dt35bpx; User=accessAllowed-MasterView=True
      Host:
      - daonline.gympie.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:19:41 GMT
      Content-Length:
      - '46343'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQo8aHRtbCBsYW5nPSJlbiI+DQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+DQogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4NCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPg0KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIj4NCiAgICA8bWV0YSBuYW1lPSJrZXl3b3JkcyIgY29udGVudD0iR3ltcGllIFJlZ2lvbmFsIENvdW5jaWwsREEgVHJhY2tlcixEZXZlbG9wbWVudCBBcHBsaWNhdGlvbixEZXZlbG9wbWVudCBBcHBsaWNhdGlvbiBUcmFja2luZywgREEgRW5xdWlyeSwgRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24gRW5xdWlyeSwgQXBwbGljYXRpb24gVHJhY2tlciI+DQogICAgPG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iIGNvbnRlbnQ9IlRoZSBvZmZpY2lhbCBHeW1waWUgUmVnaW9uYWwgQ291bmNpbCBBcHBsaWNhdGlvbiBUcmFja2VyIj4NCg0KICAgIDx0aXRsZT5HeW1waWUgUmVnaW9uYWwgQ291bmNpbCAtIEFwcGxpY2F0aW9uIFRyYWNrZXI8L3RpdGxlPg0KDQogICAgPCEtLWZhdmljb24tLT4NCiAgICA8bGluayBocmVmPSIvZmF2aWNvbi5pY28iIHJlbD0ic2hvcnRjdXQgaWNvbiIgdHlwZT0iaW1hZ2UveC1pY29uIj4NCg0KICAgIDwhLS0galF1ZXJ5IC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvU2NyaXB0cy9qcXVlcnktMS4xMS4xLmpzIj48L3NjcmlwdD4NCg0KICAgIDxzY3JpcHQgc3JjPSIvU2NyaXB0cy9qcXVlcnktdWktMS4xMS4yLmpzIj48L3NjcmlwdD4NCg0KICAgIDxsaW5rIGhyZWY9Ii9Db250ZW50L3RoZW1lcy9iYXNlL2NvcmUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9Db250ZW50L3RoZW1lcy9iYXNlL2FjY29yZGlvbi5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvdGhlbWUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPCEtLSBCb290c3RyYXAgLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2Jvb3RzdHJhcC5qcyI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9ib290c3RyYXAtdGhlbWUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9Db250ZW50L2Jvb3RzdHJhcC5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQogICAgPGxpbmsgaHJlZj0iL0NvbnRlbnQvZm9udC1hd2Vzb21lLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDwhLS0gRGF0YVRhYmxlcyAtLT4NCiAgICA8c2NyaXB0IHNyYz0iL1NjcmlwdHMvRGF0YVRhYmxlcy9qcXVlcnkuZGF0YVRhYmxlcy5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL1NjcmlwdHMvRGF0YVRhYmxlcy9kYXRhVGFibGVzLmJvb3RzdHJhcC5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL1NjcmlwdHMvRGF0YVRhYmxlcy9kYXRhVGFibGVzLnJlc3BvbnNpdmUuanMiPjwvc2NyaXB0Pg0KDQogICAgDQogICAgPGxpbmsgaHJlZj0iL0NvbnRlbnQvRGF0YVRhYmxlcy9jc3MvZGF0YVRhYmxlcy5ib290c3RyYXAuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9Db250ZW50L0RhdGFUYWJsZXMvY3NzL2RhdGFUYWJsZXMucmVzcG9uc2l2ZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvRGF0YVRhYmxlcy9jc3MvZGF0YVRhYmxlcy5yZXNwb25zaXZlLnNjc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQoNCiAgICA8IS0tIEJvb3RzdHJhcCBTQi1BZG1pbi0yIFBsdWdpbiBhbmQgb3RoZXIgY3NzIGFuZCBqcyBmaWxlcy0tPg0KICAgIDxzY3JpcHQgc3JjPSIvanMvYm9vdHN0cmFwLWNvbWJvYm94LmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvYm9vdHN0cmFwLWRhdGVwaWNrZXIuanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9qcy9ib290c3RyYXAtZGlhbG9nLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvanF1ZXJ5LmZvcm0uanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9qcy9qcXVlcnkudGFibGVzb3J0ZXIuanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9qcy9tYXN0ZXJ2aWV3LmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvbWV0aXNNZW51LmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvc2ItYWRtaW4tMi5qcyI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvY3NzL2Jvb3RzdHJhcC1jb21ib2JveC5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL2Nzcy9kYXRlcGlja2VyMy5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL2Nzcy9tYXN0ZXJ2aWV3LWN1c3RvbWlzYXRpb25zLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvY3NzL3NiLWFkbWluLTIuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPGxpbmsgaHJlZj0iL0NvdW5jaWxfVGhlbWUvZ3ltcGllL2d5bXBpZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQogICAgDQoNCiAgICA8IS0tIEhUTUw1IFNoaW0gYW5kIFJlc3BvbmQuanMgSUU4IHN1cHBvcnQgb2YgSFRNTDUgZWxlbWVudHMgYW5kIG1lZGlhIHF1ZXJpZXMgLS0+DQogICAgPCEtLSBXQVJOSU5HOiBSZXNwb25kLmpzIGRvZXNuJ3Qgd29yayBpZiB5b3UgdmlldyB0aGUgcGFnZSB2aWEgZmlsZTovLyAtLT4NCiAgICA8IS0tW2lmIGx0IElFIDldPg0KICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9vc3MubWF4Y2RuLmNvbS9saWJzL2h0bWw1c2hpdi8zLjcuMC9odG1sNXNoaXYuanMiPjwvc2NyaXB0Pg0KICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9vc3MubWF4Y2RuLmNvbS9saWJzL3Jlc3BvbmQuanMvMS40LjIvcmVzcG9uZC5taW4uanMiPjwvc2NyaXB0Pg0KICAgIDwhW2VuZGlmXS0tPg0KPC9oZWFkPg0KDQoNCg0KPGJvZHk+DQogICAgPGRpdiBjbGFzcz0icHVzaG1lbnUgY2JwLXNwbWVudS1wdXNoIj4NCiAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4NCiAgICAgICAgICAgIDxoZWFkZXIgaWQ9IkhlYWRlciI+DQogICAgICAgICAgICAgICAgPG5hdiBjbGFzcz0ibmF2YmFyIG5hdmJhci1kZWZhdWx0IiByb2xlPSJuYXZpZ2F0aW9uIiBpZD0iTmF2QmFyIj4NCiAgICAgICAgICAgICAgICAgICAgPCEtLSBCcmFuZCBhbmQgdG9nZ2xlIGdldCBncm91cGVkIGZvciBiZXR0ZXIgbW9iaWxlIGRpc3BsYXkgLS0+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZnIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idXRpbHMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly93d3cuZ3ltcGllLnFsZC5nb3YuYXUiPkhvbWU8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vd3d3Lmd5bXBpZS5xbGQuZ292LmF1L2NvbnRhY3QtdXMiPkNvbnRhY3QgVXM8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8aDEgaWQ9ImxvZ28iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmd5bXBpZS5xbGQuZ292LmF1Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9Db3VuY2lsX1RoZW1lL2d5bXBpZS9sb2dvLnBuZyIgYWx0PSJHeW1waWUgUmVnaW9uYWwgQ291bmNpbCI+PHN0cm9uZyBjbGFzcz0idmgiPkd5bXBpZSBSZWdpb25hbCBDb3VuY2lsPC9zdHJvbmc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9oMT4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9uYXY+DQogICAgICAgICAgICA8L2hlYWRlcj4NCg0KICAgICAgICAgICAgPGRpdiBpZD0iY29udGVudCI+DQogICAgICAgICAgICAgICAgPCEtLSBOYXZpZ2F0aW9uIC0tPg0KICAgICAgICAgICAgICAgIDxuYXYgY2xhc3M9Im5hdmJhciBuYXZiYXItZGVmYXVsdCBuYXZiYXItc3RhdGljLXRvcCIgcm9sZT0ibmF2aWdhdGlvbiIgc3R5bGU9Im1hcmdpbi1ib3R0b206IDAiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0ibmF2YmFyLXRvZ2dsZSIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLXRhcmdldD0iLm5hdmJhci1jb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPlRvZ2dsZSBuYXZpZ2F0aW9uPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2YmFyLWJyYW5kIiBocmVmPSIvSG9tZS9JbmRleCI+PC9hPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdmJhci1oZWFkZXIgLS0+DQogICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdmJhci10b3AtbGlua3MgbmF2YmFyLXJpZ2h0IGhpZGRlbi14cyBoaWRkZW4tc20gaGlkZGVuLW1kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48c3BhbiBpZD0icHJpbnRJY29uIiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1wcmludCIgb25jbGljaz0id2luZG93LnByaW50KCk7Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgPC91bD4NCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItZGVmYXVsdCBzaWRlYmFyIiByb2xlPSJuYXZpZ2F0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNpZGViYXItbmF2IG5hdmJhci1jb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYiIGlkPSJzaWRlLW1lbnUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbiBUcmFja2VyPHNwYW4gY2xhc3M9ImZhIGFycm93Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXYtc2Vjb25kLWxldmVsIGNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0hvbWUvQWJvdXQgdGFyZ2V0PV9zZWxmPldoYXQgaXMgQXBwbGljYXRpb24gVHJhY2tlcj88L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0hvbWUvRGlzY2xhaW1lciB0YXJnZXQ9X3NlbGY+RGlzY2xhaW1lcjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbnM8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdi1zZWNvbmQtbGV2ZWwgY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9JbmRleCB0YXJnZXQ9PkFwcGxpY2F0aW9uIFRyYWNrZXIgSG9tZTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9TZWFyY2ggaWQ9c2VhcmNoIHRhcmdldD1fc2VsZj5TZWFyY2g8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P1JlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9VHJ1ZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgaWQ9b3V0c3RhbmRpbmctYXBwcyB0YXJnZXQ9X3NlbGY+VW5kZXRlcm1pbmVkIEFwcGxpY2F0aW9uczwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/UmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPVRydWUmSW5jbHVkZURvY3VtZW50cz1GYWxzZSBpZD1leGhpYml0ZWQtYXBwcyB0YXJnZXQ9X3NlbGY+QXBwbGljYXRpb25zIE9uIEV4aGliaXRpb248L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdi1zZWNvbmQtbGV2ZWwgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjdGl2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJmYSBmYS1saXN0LXVsIGZhLWZ3Ij48L2k+QXBwbGljYXRpb25zIFN1Ym1pdHRlZDxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0yMSUyZjA0JTJmMjAyNSZEYXRlVG89MjIlMmYwNCUyZjIwMjUmRGF0ZVR5cGU9MSZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTEzJTJmMDQlMmYyMDI1JkRhdGVUbz0xOSUyZjA0JTJmMjAyNSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgV2VlazwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MSUyZjA0JTJmMjAyNSZEYXRlVG89MjIlMmYwNCUyZjIwMjUmRGF0ZVR5cGU9MSZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIE1vbnRoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDMlMmYyMDI1JkRhdGVUbz0zMSUyZjAzJTJmMjAyNSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgTW9udGg8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdi1zZWNvbmQtbGV2ZWwgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjdGl2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJmYSBmYS1saXN0LXVsIGZhLWZ3Ij48L2k+QXBwbGljYXRpb25zIERldGVybWluZWQ8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdi1zZWNvbmQtbGV2ZWwgY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MjElMmYwNCUyZjIwMjUmRGF0ZVRvPTIyJTJmMDQlMmYyMDI1JkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTEzJTJmMDQlMmYyMDI1JkRhdGVUbz0xOSUyZjA0JTJmMjAyNSZEYXRlVHlwZT0yJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1UcnVlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBXZWVrPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDQlMmYyMDI1JkRhdGVUbz0yMiUyZjA0JTJmMjAyNSZEYXRlVHlwZT0yJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1UcnVlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+VGhpcyBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MSUyZjAzJTJmMjAyNSZEYXRlVG89MzElMmYwMyUyZjIwMjUmRGF0ZVR5cGU9MiZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9VHJ1ZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgTW9udGg8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdi1zZWNvbmQtbGV2ZWwgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gLy5zaWRlYmFyLWNvbGxhcHNlIC0tPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdmJhci1zdGF0aWMtc2lkZSAtLT4NCiAgICAgICAgICAgICAgICA8L25hdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJwYWdlLXdyYXBwZXIiPg0KDQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIA0KDQoNCiAgICA8ZGl2IGNsYXNzPSJwYWdlLWhlYWRlciI+DQogICAgICAgIDxoMj5BcHBsaWNhdGlvbjogTWF0ZXJpYWwgQ2hhbmdlIG9mIFVzZSAoNy4yMDE5LjE2NzcuMSk8L2gyPg0KICAgIDwvZGl2Pg0KICAgIDxoND5EZXRhaWxlZCBpbmZvcm1hdGlvbiByZWxhdGVkIHRvIHRoZSBhcHBsaWNhdGlvbjo8L2g0Pg0KICAgIDxiciAvPg0KICAgIDxkaXY+DQogICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6c2hvd0FsbCgpOyI+U2hvdyBBbGw8L2E+IC8NCiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDpoaWRlQWxsKCk7Ij5IaWRlIEFsbDwvYT4NCiAgICA8L2Rpdj4NCiAgICA8ZGl2IGlkPSJhcHBsaWNhdGlvbiI+DQoNCiAgICAgICAgICAgIDxoMyBpZD0iZGV0YWlscyI+PGEgaHJlZj0iIyI+RGV0YWlsczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+RGVzY3JpcHRpb246IDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJkZXNjcmlwdGlvbiI+U2hvd3Jvb20gKE1vdG9yIFZlaGljbGUgU2FsZXMgU2hvd3Jvb20pLCBPdXRkb29yIFNhbGVzIChNb3RvciBWZWhpY2xlIFNhbGVzIFlhcmQpIGFuZCBMb3cgSW1wYWN0IEluZHVzdHJ5IChNb3RvciBWZWhpY2xlIFdvcmtzaG9wKTwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5TdWJtaXR0ZWQgRGF0ZTogPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyOC8wNC8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5BcHBsaWNhdGlvbiBUeXBlOiA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5NYXRlcmlhbCBDaGFuZ2Ugb2YgVXNlPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9InByb3BlcnRpZXMiPjxhIGhyZWY9IiMiPlByb3BlcnRpZXM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJwcm9wZXJ0eS1saXN0Ij4yIExhdXJlbmNlc29uIFJkLCBHbGFubWlyZSA0NTcwIFFMRCAgKExvdDogMyBTUDogMTQ3MDM5KTwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJwZW9wbGUiPjxhIGhyZWY9IiMiPlBlb3BsZTwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFwcGxpY2FudDogIFBlYXJsYnVyeSBQdHkgTHRkDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXNzZXNzbWVudCBNYW5hZ2VyOiAgR3ltcGllIFJlZ2lvbmFsIENvdW5jaWwNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9Im9mZmljZXIiPjxhIGhyZWY9IiMiPk9mZmljZXI8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJvZmZpY2VyTmFtZSI+Q3VydGlzIE1jTWlsbGFuPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9ImRlY2lzaW9uIj48YSBocmVmPSIjIj5EZWNpc2lvbjwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+QXBwbGljYXRpb24gU3RhdHVzOiBEZXRlcm1pbmVkPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZXRlcm1pbmF0aW9uIERhdGU6DQoyNi8xMC8yMDIwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRldGVybWluYXRpb24gVHlwZTogQXBwcm92ZWQgYnkgRGVsZWdhdGlvbjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KDQogICAgICAgICAgICA8aDMgaWQ9InRyYWNraW5nIj48YSBocmVmPSIjIj5UcmFja2luZzwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaWNvbi13cmFwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPnN3aXBlIHRhYmxlIHRvIHRoZSBsZWZ0IHRvIHJldmVhbCBtb3JlIGRhdGE8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1hcnJvdy1yaWdodCIgYXJpYS1oaWRkZW49InRydWUiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtc3RyaXBlZCB0YWJsZS1ib3JkZXJlZCBuby1mb290ZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkRlc2NyaXB0aW9uPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkNvbW1lbmNlZCBEYXRlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkNvbXBsZXRlZCBEYXRlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkNvbmZpcm1hdGlvbiBQZXJpb2Q8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMTUvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI0LzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+SXNzdWUgQ29uZmlybWF0aW9uIE5vdGljZTwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyNC8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjQvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5SZWZlcnJhbCBJbmZvL0Fzc2VzczwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyOS8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMDkvMDMvMjAyMCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Jc3N1ZSBJbmZvcm1hdGlvbiBSZXF1ZXN0PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjA3LzA2LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQowNy8wNi8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkluZm8gUmVxdWVzdCBSZXNwb25zZTwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQowNy8wNi8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMDkvMDMvMjAyMCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Db25maXJtYXRpb24gUGVyaW9kPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjA5LzAzLzIwMjAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyMy8wMy8yMDIwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPklzc3VlIEluZm9ybWF0aW9uIFJlcXVlc3Q8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMDYvMDQvMjAyMCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjA2LzA0LzIwMjAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+SW5mbyBSZXF1ZXN0IFJlc3BvbnNlPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjA2LzA0LzIwMjAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoxNS8wNi8yMDIwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlJlZmVycmFsIEluZm8vQXNzZXNzPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjA2LzA0LzIwMjAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyNC8wNy8yMDIwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPk5vdGlmaWNhdGlvbiBQZXJpb2Q8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMTQvMDcvMjAyMCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjA1LzA4LzIwMjAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+RGVjaXNpb24gQXNzZXNzbWVudDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyNC8wOC8yMDIwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjYvMTAvMjAyMCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Jc3N1ZSBEZWNpc2lvbiBOb3RpY2U8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjYvMTAvMjAyMCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI3LzEwLzIwMjAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+U3RhdGVtZW50IG9mIFJlYXNvbnM8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjcvMTAvMjAyMCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjE1LzAyLzIwMjEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQoNCg0KDQoNCiAgICAgICAgICAgIDxoMyBpZD0icmVsYXRlZEFwcGxpY2F0aW9ucyI+PGEgaHJlZj0iIyI+UmVsYXRlZCBBcHBsaWNhdGlvbnM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgIDxiPk5vIGRhdGEuPC9iPg0KICAgICAgICAgICAgPC9kaXY+DQoNCg0KDQoNCg0KDQoNCjxoMyBpZD0iZG9jdW1lbnRzIj48YSBocmVmPSIjIj5Eb2N1bWVudHM8L2E+PC9oMz4NCjxkaXY+DQoNCiAgICAgICAgPGRpdiBjbGFzcz0iaWNvbi13cmFwIj4NCiAgICAgICAgICAgIDxzcGFuPnN3aXBlIHRhYmxlIHRvIHRoZSBsZWZ0IHRvIHJldmVhbCBtb3JlIGRhdGE8L3NwYW4+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1hcnJvdy1yaWdodCIgYXJpYS1oaWRkZW49InRydWUiPjwvc3Bhbj4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgaWQ9ImRvYy1jb3VudCI+VG90YWwgbnVtYmVyIG9mIGRvY3VtZW50czogMjM8L2Rpdj4NCiAgICAgICAgPHRhYmxlIGlkPSJkb2MtdGFibGUiIGNsYXNzPSJ0YWJsZSB0YWJsZS1zdHJpcGVkIHRhYmxlLWJvcmRlcmVkIG5vLWZvb3RlciI+DQogICAgICAgICAgICA8dGhlYWQ+DQogICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICA8dGg+UmVjb3JkIE51bWJlcjwvdGg+DQogICAgICAgICAgICAgICAgICAgIDx0aD5OYW1lPC90aD4NCiAgICAgICAgICAgICAgICAgICAgPHRoPkRvY3VtZW50IFR5cGU8L3RoPg0KICAgICAgICAgICAgICAgICAgICA8dGg+U2l6ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgIDx0aD5WaWV3IExpbms8L3RoPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICA8L3RoZWFkPg0KICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjE5MDI1MCAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPkFkanVzdG1lbnQgdG8gUGxhbiAtIEJ1bGsgRWFydGh3b3JrcyAtIDIwMTktMTY3Ny5tc2c8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICBDb3JyZXNwb25kZW5jZSBJTldBUkRTDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLjcyIE1CDQoNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHJvbGU9ImJ1dHRvbiIgaHJlZj0iaHR0cHM6Ly9kYW9ubGluZS5neW1waWUucWxkLmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9XFB1YmxpYyBBY2Nlc3NcUEQgT25saW5lXE1hdGVyaWFsIENoYW5nZSBvZiBVc2VcMjAxOS0xNjc3XFxBZGp1c3RtZW50IHRvIFBsYW4gLSBCdWxrIEVhcnRod29ya3MgLSAyMDE5LTE2NzcubXNnJmFtcDtmaWxlTmFtZT1BZGp1c3RtZW50K3RvK1BsYW4rLStCdWxrK0VhcnRod29ya3MrLSsyMDE5LTE2NzcubXNnIiB0YXJnZXQ9Il9ibGFuayI+VmlldzwvYT48L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyMTY3MjkwICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+QXBwbGljYW50JiMzOTtzIFJlcXVlc3QgdG8gRXh0ZW5kIEluZm9ybWF0aW9uIFJlcXVlc3QgUmVzcG9uc2UgUGVyaW9kIC0gMyAtIDIwMTktMTY3Ny5tc2c8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICBDb3JyZXNwb25kZW5jZSBJTldBUkRTDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLjQ2IE1CDQoNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHJvbGU9ImJ1dHRvbiIgaHJlZj0iaHR0cHM6Ly9kYW9ubGluZS5neW1waWUucWxkLmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9XFB1YmxpYyBBY2Nlc3NcUEQgT25saW5lXE1hdGVyaWFsIENoYW5nZSBvZiBVc2VcMjAxOS0xNjc3XFxBcHBsaWNhbnQmIzM5O3MgUmVxdWVzdCB0byBFeHRlbmQgSW5mb3JtYXRpb24gUmVxdWVzdCBSZXNwb25zZSBQZXJpb2QgLSAzIC0gMjAxOS0xNjc3Lm1zZyZhbXA7ZmlsZU5hbWU9QXBwbGljYW50JTI3cytSZXF1ZXN0K3RvK0V4dGVuZCtJbmZvcm1hdGlvbitSZXF1ZXN0K1Jlc3BvbnNlK1BlcmlvZCstKzMrLSsyMDE5LTE2NzcubXNnIiB0YXJnZXQ9Il9ibGFuayI+VmlldzwvYT48L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyMjE1MDgxICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+QXBwbGljYW50JiMzOTtzIFJlc3BvbnNlIHRvIENvdW5jaWwmIzM5O3MgSW5mb3JtYXRpb24gUmVxdWVzdCAtIDIgLSAyMDE5LTE2NzcubXNnPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgQ29ycmVzcG9uZGVuY2UgSU5XQVJEUw0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgMTUuODggTUINCg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+PGEgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgcm9sZT0iYnV0dG9uIiBocmVmPSJodHRwczovL2Rhb25saW5lLmd5bXBpZS5xbGQuZ292LmF1L0RvY3VtZW50L0Rvd25sb2FkP2tleT1cUHVibGljIEFjY2Vzc1xQRCBPbmxpbmVcTWF0ZXJpYWwgQ2hhbmdlIG9mIFVzZVwyMDE5LTE2NzdcXEFwcGxpY2FudCYjMzk7cyBSZXNwb25zZSB0byBDb3VuY2lsJiMzOTtzIEluZm9ybWF0aW9uIFJlcXVlc3QgLSAyIC0gMjAxOS0xNjc3Lm1zZyZhbXA7ZmlsZU5hbWU9QXBwbGljYW50JTI3cytSZXNwb25zZSt0bytDb3VuY2lsJTI3cytJbmZvcm1hdGlvbitSZXF1ZXN0Ky0rMistKzIwMTktMTY3Ny5tc2ciIHRhcmdldD0iX2JsYW5rIj5WaWV3PC9hPjwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCjIxMTg2MTYgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD5BcHBsaWNhdGlvbiBNYXRlcmlhbCAtIDIwMTktMTY3Ny5wZGY8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICBDb3JyZXNwb25kZW5jZSBJTldBUkRTDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA2LjA4IE1CDQoNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHJvbGU9ImJ1dHRvbiIgaHJlZj0iaHR0cHM6Ly9kYW9ubGluZS5neW1waWUucWxkLmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9XFB1YmxpYyBBY2Nlc3NcUEQgT25saW5lXE1hdGVyaWFsIENoYW5nZSBvZiBVc2VcMjAxOS0xNjc3XFxBcHBsaWNhdGlvbiBNYXRlcmlhbCAtIDIwMTktMTY3Ny5wZGYmYW1wO2ZpbGVOYW1lPUFwcGxpY2F0aW9uK01hdGVyaWFsKy0rMjAxOS0xNjc3LnBkZiIgdGFyZ2V0PSJfYmxhbmsiPlZpZXc8L2E+PC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjE5MDI0OSAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPkNoYW5nZSB0byBkZXZlbG9wbWVudCBhcHBsaWNhdGlvbiAtIDIwMTktMTY3Ny5tc2c8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICBDb3JyZXNwb25kZW5jZSBJTldBUkRTDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA5LjUzIE1CDQoNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHJvbGU9ImJ1dHRvbiIgaHJlZj0iaHR0cHM6Ly9kYW9ubGluZS5neW1waWUucWxkLmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9XFB1YmxpYyBBY2Nlc3NcUEQgT25saW5lXE1hdGVyaWFsIENoYW5nZSBvZiBVc2VcMjAxOS0xNjc3XFxDaGFuZ2UgdG8gZGV2ZWxvcG1lbnQgYXBwbGljYXRpb24gLSAyMDE5LTE2NzcubXNnJmFtcDtmaWxlTmFtZT1DaGFuZ2UrdG8rZGV2ZWxvcG1lbnQrYXBwbGljYXRpb24rLSsyMDE5LTE2NzcubXNnIiB0YXJnZXQ9Il9ibGFuayI+VmlldzwvYT48L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyMTkzNzc4ICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+Q29uZmlybWF0aW9uIE5vdGljZSAtIDIgLSAyMDE5LTE2NzcucGRmPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgQ29ycmVzcG9uZGVuY2UgT1VUV0FSRFMNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAuNzkgTUINCg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+PGEgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgcm9sZT0iYnV0dG9uIiBocmVmPSJodHRwczovL2Rhb25saW5lLmd5bXBpZS5xbGQuZ292LmF1L0RvY3VtZW50L0Rvd25sb2FkP2tleT1cUHVibGljIEFjY2Vzc1xQRCBPbmxpbmVcTWF0ZXJpYWwgQ2hhbmdlIG9mIFVzZVwyMDE5LTE2NzdcXENvbmZpcm1hdGlvbiBOb3RpY2UgLSAyIC0gMjAxOS0xNjc3LnBkZiZhbXA7ZmlsZU5hbWU9Q29uZmlybWF0aW9uK05vdGljZSstKzIrLSsyMDE5LTE2NzcucGRmIiB0YXJnZXQ9Il9ibGFuayI+VmlldzwvYT48L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyMTE4OTQ1ICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+Q29uZmlybWF0aW9uIE5vdGljZSAtIDIwMTktMTY3Ny5wZGY8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICBDb3JyZXNwb25kZW5jZSBPVVRXQVJEUw0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgMC44NyBNQg0KDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD48YSBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiByb2xlPSJidXR0b24iIGhyZWY9Imh0dHBzOi8vZGFvbmxpbmUuZ3ltcGllLnFsZC5nb3YuYXUvRG9jdW1lbnQvRG93bmxvYWQ/a2V5PVxQdWJsaWMgQWNjZXNzXFBEIE9ubGluZVxNYXRlcmlhbCBDaGFuZ2Ugb2YgVXNlXDIwMTktMTY3N1xcQ29uZmlybWF0aW9uIE5vdGljZSAtIDIwMTktMTY3Ny5wZGYmYW1wO2ZpbGVOYW1lPUNvbmZpcm1hdGlvbitOb3RpY2UrLSsyMDE5LTE2NzcucGRmIiB0YXJnZXQ9Il9ibGFuayI+VmlldzwvYT48L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyMjU3NzA2ICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+RGVjaXNpb24gTm90aWNlIFBhY2thZ2UgLSAyMDE5LTE2NzcucGRmPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgQ29ycmVzcG9uZGVuY2UgT1VUV0FSRFMNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDkuMjEgTUINCg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+PGEgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgcm9sZT0iYnV0dG9uIiBocmVmPSJodHRwczovL2Rhb25saW5lLmd5bXBpZS5xbGQuZ292LmF1L0RvY3VtZW50L0Rvd25sb2FkP2tleT1cUHVibGljIEFjY2Vzc1xQRCBPbmxpbmVcTWF0ZXJpYWwgQ2hhbmdlIG9mIFVzZVwyMDE5LTE2NzdcXERlY2lzaW9uIE5vdGljZSBQYWNrYWdlIC0gMjAxOS0xNjc3LnBkZiZhbXA7ZmlsZU5hbWU9RGVjaXNpb24rTm90aWNlK1BhY2thZ2UrLSsyMDE5LTE2NzcucGRmIiB0YXJnZXQ9Il9ibGFuayI+VmlldzwvYT48L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyMTY4MTAzICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+RXh0ZW5zaW9uIHRvIEluZm9ybWF0aW9uIFJlcXVlc3QgUGFydCAtIDIgLSAyMDE5LTE2NzcucGRmPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgQ29ycmVzcG9uZGVuY2UgT1VUV0FSRFMNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAuMDEgTUINCg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+PGEgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgcm9sZT0iYnV0dG9uIiBocmVmPSJodHRwczovL2Rhb25saW5lLmd5bXBpZS5xbGQuZ292LmF1L0RvY3VtZW50L0Rvd25sb2FkP2tleT1cUHVibGljIEFjY2Vzc1xQRCBPbmxpbmVcTWF0ZXJpYWwgQ2hhbmdlIG9mIFVzZVwyMDE5LTE2NzdcXEV4dGVuc2lvbiB0byBJbmZvcm1hdGlvbiBSZXF1ZXN0IFBhcnQgLSAyIC0gMjAxOS0xNjc3LnBkZiZhbXA7ZmlsZU5hbWU9RXh0ZW5zaW9uK3RvK0luZm9ybWF0aW9uK1JlcXVlc3QrUGFydCstKzIrLSsyMDE5LTE2NzcucGRmIiB0YXJnZXQ9Il9ibGFuayI+VmlldzwvYT48L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyMTQ2MTI4ICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+RXh0ZW5zaW9uIHRvIEluZm9ybWF0aW9uIFJlcXVlc3QgUGFydCAtIDIwMTktMTY3Ny5wZGY8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICBDb3JyZXNwb25kZW5jZSBPVVRXQVJEUw0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgMC4zNCBNQg0KDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD48YSBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiByb2xlPSJidXR0b24iIGhyZWY9Imh0dHBzOi8vZGFvbmxpbmUuZ3ltcGllLnFsZC5nb3YuYXUvRG9jdW1lbnQvRG93bmxvYWQ/a2V5PVxQdWJsaWMgQWNjZXNzXFBEIE9ubGluZVxNYXRlcmlhbCBDaGFuZ2Ugb2YgVXNlXDIwMTktMTY3N1xcRXh0ZW5zaW9uIHRvIEluZm9ybWF0aW9uIFJlcXVlc3QgUGFydCAtIDIwMTktMTY3Ny5wZGYmYW1wO2ZpbGVOYW1lPUV4dGVuc2lvbit0bytJbmZvcm1hdGlvbitSZXF1ZXN0K1BhcnQrLSsyMDE5LTE2NzcucGRmIiB0YXJnZXQ9Il9ibGFuayI+VmlldzwvYT48L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyMjI2MDg2ICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+RXh0ZW5zaW9uIHRvIFJlZmVycmFsIEFnZW5jeSBBc3Nlc3NtZW50IFBlcmlvZCAtIDIgLSBEU0RNSVAgLSAyMDE5LTE2NzcubXNnPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgQ29ycmVzcG9uZGVuY2UgSU5XQVJEUw0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgMC4xNyBNQg0KDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD48YSBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiByb2xlPSJidXR0b24iIGhyZWY9Imh0dHBzOi8vZGFvbmxpbmUuZ3ltcGllLnFsZC5nb3YuYXUvRG9jdW1lbnQvRG93bmxvYWQ/a2V5PVxQdWJsaWMgQWNjZXNzXFBEIE9ubGluZVxNYXRlcmlhbCBDaGFuZ2Ugb2YgVXNlXDIwMTktMTY3N1xcRXh0ZW5zaW9uIHRvIFJlZmVycmFsIEFnZW5jeSBBc3Nlc3NtZW50IFBlcmlvZCAtIDIgLSBEU0RNSVAgLSAyMDE5LTE2NzcubXNnJmFtcDtmaWxlTmFtZT1FeHRlbnNpb24rdG8rUmVmZXJyYWwrQWdlbmN5K0Fzc2Vzc21lbnQrUGVyaW9kKy0rMistK0RTRE1JUCstKzIwMTktMTY3Ny5tc2ciIHRhcmdldD0iX2JsYW5rIj5WaWV3PC9hPjwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCjIyMjE4MzYgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD5FeHRlbnNpb24gdG8gUmVmZXJyYWwgQWdlbmN5IEFzc2Vzc21lbnQgUGVyaW9kIC0gRFNETUlQIC0gMjAxOS0xNjc3Lm1zZzwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIENvcnJlc3BvbmRlbmNlIElOV0FSRFMNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAuMTcgTUINCg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+PGEgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgcm9sZT0iYnV0dG9uIiBocmVmPSJodHRwczovL2Rhb25saW5lLmd5bXBpZS5xbGQuZ292LmF1L0RvY3VtZW50L0Rvd25sb2FkP2tleT1cUHVibGljIEFjY2Vzc1xQRCBPbmxpbmVcTWF0ZXJpYWwgQ2hhbmdlIG9mIFVzZVwyMDE5LTE2NzdcXEV4dGVuc2lvbiB0byBSZWZlcnJhbCBBZ2VuY3kgQXNzZXNzbWVudCBQZXJpb2QgLSBEU0RNSVAgLSAyMDE5LTE2NzcubXNnJmFtcDtmaWxlTmFtZT1FeHRlbnNpb24rdG8rUmVmZXJyYWwrQWdlbmN5K0Fzc2Vzc21lbnQrUGVyaW9kKy0rRFNETUlQKy0rMjAxOS0xNjc3Lm1zZyIgdGFyZ2V0PSJfYmxhbmsiPlZpZXc8L2E+PC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjIxNTA1MyAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPkluZm9ybWF0aW9uIFJlcXVlc3QgLSAyIC0gMjAxOS0xNjc3LnBkZjwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIENvcnJlc3BvbmRlbmNlIE9VVFdBUkRTDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxLjc3IE1CDQoNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHJvbGU9ImJ1dHRvbiIgaHJlZj0iaHR0cHM6Ly9kYW9ubGluZS5neW1waWUucWxkLmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9XFB1YmxpYyBBY2Nlc3NcUEQgT25saW5lXE1hdGVyaWFsIENoYW5nZSBvZiBVc2VcMjAxOS0xNjc3XFxJbmZvcm1hdGlvbiBSZXF1ZXN0IC0gMiAtIDIwMTktMTY3Ny5wZGYmYW1wO2ZpbGVOYW1lPUluZm9ybWF0aW9uK1JlcXVlc3QrLSsyKy0rMjAxOS0xNjc3LnBkZiIgdGFyZ2V0PSJfYmxhbmsiPlZpZXc8L2E+PC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjEyMzM3NCAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPkluZm9ybWF0aW9uIFJlcXVlc3QgLSAyMDE5LTE2NzcucGRmPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgQ29ycmVzcG9uZGVuY2UgT1VUV0FSRFMNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEuNzEgTUINCg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+PGEgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgcm9sZT0iYnV0dG9uIiBocmVmPSJodHRwczovL2Rhb25saW5lLmd5bXBpZS5xbGQuZ292LmF1L0RvY3VtZW50L0Rvd25sb2FkP2tleT1cUHVibGljIEFjY2Vzc1xQRCBPbmxpbmVcTWF0ZXJpYWwgQ2hhbmdlIG9mIFVzZVwyMDE5LTE2NzdcXEluZm9ybWF0aW9uIFJlcXVlc3QgLSAyMDE5LTE2NzcucGRmJmFtcDtmaWxlTmFtZT1JbmZvcm1hdGlvbitSZXF1ZXN0Ky0rMjAxOS0xNjc3LnBkZiIgdGFyZ2V0PSJfYmxhbmsiPlZpZXc8L2E+PC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjIzMDI4MyAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPk5vdGljZSBvZiBDb21wbGlhbmNlIHdpdGggUHVibGljIE5vdGlmaWNhdGlvbiBSZXF1aXJlbWVudHMgLSAyMDE5LTE2NzcucGRmPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgSW50ZXJuYWwNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAuNzIgTUINCg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+PGEgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgcm9sZT0iYnV0dG9uIiBocmVmPSJodHRwczovL2Rhb25saW5lLmd5bXBpZS5xbGQuZ292LmF1L0RvY3VtZW50L0Rvd25sb2FkP2tleT1cUHVibGljIEFjY2Vzc1xQRCBPbmxpbmVcTWF0ZXJpYWwgQ2hhbmdlIG9mIFVzZVwyMDE5LTE2NzdcXE5vdGljZSBvZiBDb21wbGlhbmNlIHdpdGggUHVibGljIE5vdGlmaWNhdGlvbiBSZXF1aXJlbWVudHMgLSAyMDE5LTE2NzcucGRmJmFtcDtmaWxlTmFtZT1Ob3RpY2Urb2YrQ29tcGxpYW5jZSt3aXRoK1B1YmxpYytOb3RpZmljYXRpb24rUmVxdWlyZW1lbnRzKy0rMjAxOS0xNjc3LnBkZiIgdGFyZ2V0PSJfYmxhbmsiPlZpZXc8L2E+PC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjIyMDI4NiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPk5vdGljZSBvZiBJbnRlbnRpb24gdG8gQ29tbWVuY2UgUHVibGljIE5vdGlmaWNhdGlvbiAtIDIwMTktMTY3Ny5tc2c8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICBDb3JyZXNwb25kZW5jZSBJTldBUkRTDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLjAxIE1CDQoNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHJvbGU9ImJ1dHRvbiIgaHJlZj0iaHR0cHM6Ly9kYW9ubGluZS5neW1waWUucWxkLmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9XFB1YmxpYyBBY2Nlc3NcUEQgT25saW5lXE1hdGVyaWFsIENoYW5nZSBvZiBVc2VcMjAxOS0xNjc3XFxOb3RpY2Ugb2YgSW50ZW50aW9uIHRvIENvbW1lbmNlIFB1YmxpYyBOb3RpZmljYXRpb24gLSAyMDE5LTE2NzcubXNnJmFtcDtmaWxlTmFtZT1Ob3RpY2Urb2YrSW50ZW50aW9uK3RvK0NvbW1lbmNlK1B1YmxpYytOb3RpZmljYXRpb24rLSsyMDE5LTE2NzcubXNnIiB0YXJnZXQ9Il9ibGFuayI+VmlldzwvYT48L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyMjI0OTg1ICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+Tm90aWNlIG9mIEludGVudGlvbiB0byBDb21tZW5jZSBQdWJsaWMgTm90aWZpY2F0aW9uIC0gQW1lbmRlZCAtIDIwMTktMTY3Ny5tc2c8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICBDb3JyZXNwb25kZW5jZSBJTldBUkRTDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLjExIE1CDQoNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHJvbGU9ImJ1dHRvbiIgaHJlZj0iaHR0cHM6Ly9kYW9ubGluZS5neW1waWUucWxkLmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9XFB1YmxpYyBBY2Nlc3NcUEQgT25saW5lXE1hdGVyaWFsIENoYW5nZSBvZiBVc2VcMjAxOS0xNjc3XFxOb3RpY2Ugb2YgSW50ZW50aW9uIHRvIENvbW1lbmNlIFB1YmxpYyBOb3RpZmljYXRpb24gLSBBbWVuZGVkIC0gMjAxOS0xNjc3Lm1zZyZhbXA7ZmlsZU5hbWU9Tm90aWNlK29mK0ludGVudGlvbit0bytDb21tZW5jZStQdWJsaWMrTm90aWZpY2F0aW9uKy0rQW1lbmRlZCstKzIwMTktMTY3Ny5tc2ciIHRhcmdldD0iX2JsYW5rIj5WaWV3PC9hPjwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCjIxMjA5MTYgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD5SZWZlcnJhbCBBZ2VuY3kgLSBDb25maXJtYXRpb24gTm90aWNlIC0gRFNETUlQIC0gMjAxOS0xNjc3Lm1zZzwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIENvcnJlc3BvbmRlbmNlIElOV0FSRFMNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAuMjMgTUINCg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+PGEgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgcm9sZT0iYnV0dG9uIiBocmVmPSJodHRwczovL2Rhb25saW5lLmd5bXBpZS5xbGQuZ292LmF1L0RvY3VtZW50L0Rvd25sb2FkP2tleT1cUHVibGljIEFjY2Vzc1xQRCBPbmxpbmVcTWF0ZXJpYWwgQ2hhbmdlIG9mIFVzZVwyMDE5LTE2NzdcXFJlZmVycmFsIEFnZW5jeSAtIENvbmZpcm1hdGlvbiBOb3RpY2UgLSBEU0RNSVAgLSAyMDE5LTE2NzcubXNnJmFtcDtmaWxlTmFtZT1SZWZlcnJhbCtBZ2VuY3krLStDb25maXJtYXRpb24rTm90aWNlKy0rRFNETUlQKy0rMjAxOS0xNjc3Lm1zZyIgdGFyZ2V0PSJfYmxhbmsiPlZpZXc8L2E+PC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjE5OTIwNiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPlJlZmVycmFsIEFnZW5jeSBDb25maXJtYXRpb24gTm90aWNlIC0gMiAtIERTRE1JUCAtIDIwMTktMTY3Ny5tc2c8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICBDb3JyZXNwb25kZW5jZSBJTldBUkRTDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLjIzIE1CDQoNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHJvbGU9ImJ1dHRvbiIgaHJlZj0iaHR0cHM6Ly9kYW9ubGluZS5neW1waWUucWxkLmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9XFB1YmxpYyBBY2Nlc3NcUEQgT25saW5lXE1hdGVyaWFsIENoYW5nZSBvZiBVc2VcMjAxOS0xNjc3XFxSZWZlcnJhbCBBZ2VuY3kgQ29uZmlybWF0aW9uIE5vdGljZSAtIDIgLSBEU0RNSVAgLSAyMDE5LTE2NzcubXNnJmFtcDtmaWxlTmFtZT1SZWZlcnJhbCtBZ2VuY3krQ29uZmlybWF0aW9uK05vdGljZSstKzIrLStEU0RNSVArLSsyMDE5LTE2NzcubXNnIiB0YXJnZXQ9Il9ibGFuayI+VmlldzwvYT48L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyMjAyOTM2ICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+UmVmZXJyYWwgQWdlbmN5IEluZm9ybWF0aW9uIFJlcXVlc3QgLSBEU0RNSVAgLSAyIC0gMjAxOS0xNjc3Lm1zZzwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIENvcnJlc3BvbmRlbmNlIElOV0FSRFMNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAuMjggTUINCg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+PGEgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgcm9sZT0iYnV0dG9uIiBocmVmPSJodHRwczovL2Rhb25saW5lLmd5bXBpZS5xbGQuZ292LmF1L0RvY3VtZW50L0Rvd25sb2FkP2tleT1cUHVibGljIEFjY2Vzc1xQRCBPbmxpbmVcTWF0ZXJpYWwgQ2hhbmdlIG9mIFVzZVwyMDE5LTE2NzdcXFJlZmVycmFsIEFnZW5jeSBJbmZvcm1hdGlvbiBSZXF1ZXN0IC0gRFNETUlQIC0gMiAtIDIwMTktMTY3Ny5tc2cmYW1wO2ZpbGVOYW1lPVJlZmVycmFsK0FnZW5jeStJbmZvcm1hdGlvbitSZXF1ZXN0Ky0rRFNETUlQKy0rMistKzIwMTktMTY3Ny5tc2ciIHRhcmdldD0iX2JsYW5rIj5WaWV3PC9hPjwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCjIxMjMyOTAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD5SZWZlcnJhbCBBZ2VuY3kgSW5mb3JtYXRpb24gUmVxdWVzdCAtIERTRE1JUCAtIDIwMTktMTY3Ny5tc2c8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICBDb3JyZXNwb25kZW5jZSBJTldBUkRTDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLjMwIE1CDQoNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHJvbGU9ImJ1dHRvbiIgaHJlZj0iaHR0cHM6Ly9kYW9ubGluZS5neW1waWUucWxkLmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9XFB1YmxpYyBBY2Nlc3NcUEQgT25saW5lXE1hdGVyaWFsIENoYW5nZSBvZiBVc2VcMjAxOS0xNjc3XFxSZWZlcnJhbCBBZ2VuY3kgSW5mb3JtYXRpb24gUmVxdWVzdCAtIERTRE1JUCAtIDIwMTktMTY3Ny5tc2cmYW1wO2ZpbGVOYW1lPVJlZmVycmFsK0FnZW5jeStJbmZvcm1hdGlvbitSZXF1ZXN0Ky0rRFNETUlQKy0rMjAxOS0xNjc3Lm1zZyIgdGFyZ2V0PSJfYmxhbmsiPlZpZXc8L2E+PC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjIyNjA4OCAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPlJlZmVycmFsIEFnZW5jeSBSZXNwb25zZSAtIDIwMTktMTY3Ny5tc2c8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICBDb3JyZXNwb25kZW5jZSBJTldBUkRTDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA3LjM1IE1CDQoNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHJvbGU9ImJ1dHRvbiIgaHJlZj0iaHR0cHM6Ly9kYW9ubGluZS5neW1waWUucWxkLmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9XFB1YmxpYyBBY2Nlc3NcUEQgT25saW5lXE1hdGVyaWFsIENoYW5nZSBvZiBVc2VcMjAxOS0xNjc3XFxSZWZlcnJhbCBBZ2VuY3kgUmVzcG9uc2UgLSAyMDE5LTE2NzcubXNnJmFtcDtmaWxlTmFtZT1SZWZlcnJhbCtBZ2VuY3krUmVzcG9uc2UrLSsyMDE5LTE2NzcubXNnIiB0YXJnZXQ9Il9ibGFuayI+VmlldzwvYT48L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyMjg1ODQ5ICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+U3RhdGVtZW50IG9mIFJlYXNvbnMtMjAxOS0xNjc3LnBkZjwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIENvcnJlc3BvbmRlbmNlIE9VVFdBUkRTDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxLjE0IE1CDQoNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHJvbGU9ImJ1dHRvbiIgaHJlZj0iaHR0cHM6Ly9kYW9ubGluZS5neW1waWUucWxkLmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9XFB1YmxpYyBBY2Nlc3NcUEQgT25saW5lXE1hdGVyaWFsIENoYW5nZSBvZiBVc2VcMjAxOS0xNjc3XFxTdGF0ZW1lbnQgb2YgUmVhc29ucy0yMDE5LTE2NzcucGRmJmFtcDtmaWxlTmFtZT1TdGF0ZW1lbnQrb2YrUmVhc29ucy0yMDE5LTE2NzcucGRmIiB0YXJnZXQ9Il9ibGFuayI+VmlldzwvYT48L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQoNCiAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgIDwvdGFibGU+DQo8L2Rpdj4NCg0KDQogICAgICAgICAgICA8aDMgaWQ9ImNvbnRhY3RVcyI+PGEgaHJlZj0iIyI+Q29udGFjdCBVczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PHA+DQpQbGVhc2UgY29udGFjdCBDb3VuY2lsJ3MgRGV2ZWxvcG1lbnQgYW5kIENvbXBsaWFuY2UgU2VjdGlvbiBvbiAwNyA1NDgxIDA0NTQgb3IgPGEgaHJlZj0ibWFpbHRvOnBsYW5uaW5nQGd5bXBpZS5xbGQuZ292LmF1P3N1YmplY3Q9RW5xdWlyeSBmb3IgQXBwbGljYXRpb24gKDcuMjAxOS4xNjc3LjEpIj5wbGFubmluZ0BneW1waWUucWxkLmdvdi5hdTwvYT4gZm9yIGZ1cnRoZXIgcXVlcmllcyByZWxhdGluZyB0byBhbiBhcHBsaWNhdGlvbi4gDQo8L3A+ICAgIA0KPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQoNCjxoMyBpZD0iZ29vZ2xlbWFwcyI+PGEgaHJlZj0iIyI+R29vZ2xlIE1hcHM8L2E+PC9oMz4NCjxkaXYgaWQ9Im1hcF9jb250YWluZXIiPg0KICAgIDxkaXYgaWQ9Im1hcF9jYW52YXMiIGNsYXNzPSJpZnJhbWUtcndkIj4NCiAgICA8L2Rpdj4NCjwvZGl2Pg0KDQo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+DQoNCiAgICB3aW5kb3cub25sb2FkID0gbG9hZEdvb2dsZU1hcHNTY3JpcHQ7DQoNCiAgICB2YXIgZ2VvY29kZXI7DQogICAgdmFyIG1hcDsNCiAgICB2YXIgdGltZW91dCA9IDMwMDsNCiAgICB2YXIgcHJvcGVydGllcyA9IFsiMiBMYXVyZW5jZXNvbiBSZCwgR2xhbm1pcmUgNDU3MCBRTEQgIl07DQogICAgdmFyIGxhdExuZ0FyciA9IFtdOw0KDQogICAgZnVuY3Rpb24gbG9hZEdvb2dsZU1hcHNTY3JpcHQoKSB7DQogICAgICAgIHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzY3JpcHQiKTsNCiAgICAgICAgc2NyaXB0LnR5cGUgPSAidGV4dC9qYXZhc2NyaXB0IjsNCiAgICAgICAgc2NyaXB0LnNyYyA9ICIvL21hcHMuZ29vZ2xlYXBpcy5jb20vbWFwcy9hcGkvanM/a2V5PUFJemFTeUJQbTR3MGNmVzFjZFAxSzZqRmNSRnFxa1dfZzdhVnk1WSZjYWxsYmFjaz1sb2FkR29vZ2xlTWFwcyI7DQogICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2NyaXB0KTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiByZW5kZXJHb29nbGVNYXBzKCkNCiAgICB7DQogICAgICAgIHZhciBtYXBPcHRpb25zID0gew0KICAgICAgICAgICAgY2VudGVyOiBsYXRMbmdBcnJbMF0sDQogICAgICAgICAgICB6b29tOiAxNiwNCiAgICAgICAgICAgIG1hcFR5cGVJZDogZ29vZ2xlLm1hcHMuTWFwVHlwZUlkLlJPQURNQVAsDQogICAgICAgICAgICBtYXBUeXBlQ29udHJvbDogZmFsc2UNCiAgICAgICAgfQ0KDQogICAgICAgIG1hcCA9IG5ldyBnb29nbGUubWFwcy5NYXAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm1hcF9jYW52YXMiKSwgbWFwT3B0aW9ucyk7DQoNCiAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkRG9tTGlzdGVuZXIod2luZG93LCAncmVzaXplJywgZnVuY3Rpb24oKSB7DQogICAgICAgICAgICB2YXIgY2VudGVyID0gbWFwLmdldENlbnRlcigpOw0KICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQudHJpZ2dlcihtYXAsICdyZXNpemUnKTsNCiAgICAgICAgICAgIG1hcC5zZXRDZW50ZXIoY2VudGVyKTsNCiAgICAgICAgfSk7DQoNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBsb2FkR29vZ2xlTWFwcygpIHsNCiAgICAgICAgZ2VvY29kZXIgPSBuZXcgZ29vZ2xlLm1hcHMuR2VvY29kZXIoKTsNCiAgICAgICAgdmFyIG5vT2ZGYWlsZWRMb2NhdGlvblNlYXJjaCA9IDA7DQoNCiAgICAgICAgJChwcm9wZXJ0aWVzKS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkgew0KICAgICAgICAgICAgdmFyIHByb3BlcnR5QWRkcmVzcyA9IGVsZW1lbnQ7DQoNCiAgICAgICAgICAgIC8vR2V0IGdlb2NvZGUNCiAgICAgICAgICAgIGdlb2NvZGVyLmdlb2NvZGUoeyAnYWRkcmVzcyc6IHByb3BlcnR5QWRkcmVzcyB9LCBmdW5jdGlvbiAocmVzdWx0cywgc3RhdHVzKSB7DQogICAgICAgICAgICAgICAgaWYgKHN0YXR1cyA9PSBnb29nbGUubWFwcy5HZW9jb2RlclN0YXR1cy5PSykgew0KDQogICAgICAgICAgICAgICAgICAgIHZhciBsb2NhdGlvbiA9IHJlc3VsdHNbMF0uZ2VvbWV0cnkubG9jYXRpb247DQogICAgICAgICAgICAgICAgICAgIHZhciBsYXRMbmcgPSBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKGxvY2F0aW9uLmxhdCgpLCBsb2NhdGlvbi5sbmcoKSk7DQoNCiAgICAgICAgICAgICAgICAgICAgbGF0TG5nQXJyLnB1c2gobGF0TG5nKTsNCg0KICAgICAgICAgICAgICAgICAgICBpZihsYXRMbmdBcnIubGVuZ3RoID09IDEpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckdvb2dsZU1hcHMoKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgIC8vQ3JlYXRlIG1hcmtlciBmb3IgbWFwIGFuZCBwbGFjZSBpdCBvbiB0aGUgbWFwDQogICAgICAgICAgICAgICAgICAgIHZhciBtYXJrZXIgPSBuZXcgZ29vZ2xlLm1hcHMuTWFya2VyKHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBsYXRMbmcsDQogICAgICAgICAgICAgICAgICAgICAgICBtYXA6IG1hcA0KICAgICAgICAgICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgICAgICAgICB2YXIgY29udGVudFN0cmluZyA9ICc8ZGl2PjxzcGFuPicgKyBwcm9wZXJ0eUFkZHJlc3MgKyAnPC9zcGFuPjwvZGl2Pic7DQogICAgICAgICAgICAgICAgICAgIHZhciBpbmZvd2luZG93ID0gbmV3IGdvb2dsZS5tYXBzLkluZm9XaW5kb3coeyAgIC8vQ3JlYXRlIGluZm8gd2luZG93DQogICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBjb250ZW50U3RyaW5nDQogICAgICAgICAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKG1hcmtlciwgJ2NsaWNrJywgZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpbmZvd2luZG93Lm9wZW4obWFwLCBtYXJrZXIpOw0KICAgICAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgLy9pZiBubyBsb2NhdGlvbiBmb3VuZCBieSBnb29nbGUgZm9yIGEgcHJvcGVydHkNCiAgICAgICAgICAgICAgICBlbHNlIGlmIChzdGF0dXMgPT0gIlpFUk9fUkVTVUxUUyIpIHsNCiAgICAgICAgICAgICAgICAgICAgbm9PZkZhaWxlZExvY2F0aW9uU2VhcmNoKys7DQoNCiAgICAgICAgICAgICAgICAgICAgaWYobm9PZkZhaWxlZExvY2F0aW9uU2VhcmNoID09ICQocHJvcGVydGllcykubGVuZ3RoKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlR29vZ2xlTWFwc0NvbnRlbnQoKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0dXMgPT0gZ29vZ2xlLm1hcHMuR2VvY29kZXJTdGF0dXMuT1ZFUl9RVUVSWV9MSU1JVCkgew0KICAgICAgICAgICAgICAgICAgICAvL3NldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyBnZXRHZW9Db2RlRm9yQWRkcmVzcyhpZCwgYWRkcmVzcyk7IH0sICh0aW1lb3V0KSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSk7DQogICAgICAgIH0pOw0KICAgIH0NCg0KICAgIC8vUmVwbGFjZXMgZ29vZ2xlIG1hcHMgY29udGVudCB3aXRoIGEgbmV3IGRpdiBibG9jayB0aGF0IGhhcyBpbmZvIG1lc3NhZ2UNCiAgICBmdW5jdGlvbiByZXBsYWNlR29vZ2xlTWFwc0NvbnRlbnQoKSB7DQogICAgICAgIHZhciBuZXdDb250ZW50ID0gJzxkaXYgY2xhc3M9InVpLWFjY29yZGlvbi1jb250ZW50IHVpLWhlbHBlci1yZXNldCB1aS13aWRnZXQtY29udGVudCB1aS1jb3JuZXItYm90dG9tIj4nICsNCiAgICAgICAgICAgICc8cD5Db3VsZG5cJ3QgZmluZCB0aGUgcHJvcGVydHkgYWRkcmVzcyhlcykgb24gR29vZ2xlIE1hcHMuIDxwPicgKw0KICAgICAgICAgICAgJzwvZGl2Pic7DQoNCiAgICAgICAgJCgnI21hcF9jb250YWluZXInKS5yZXBsYWNlV2l0aChuZXdDb250ZW50KTsNCiAgICB9DQoNCjwvc2NyaXB0Pg0KDQogICAgPC9kaXY+DQogICAgPGRpdiBjbGFzcz0ibW9kYWwgZmFkZSIgaWQ9InN1Ym1pc3Npb24tbW9kYWwiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2ciPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3Bpbm5lciI+PC9kaXY+IDwhLS0gVGhpcyBkaXYgaG9zdHMgdGhlIHNwaW5uZXIgLS0+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImNsb3NlIiBkYXRhLWRpc21pc3M9Im1vZGFsIiBhcmlhLWxhYmVsPSJDbG9zZSI+PHNwYW4gYXJpYS1oaWRkZW49InRydWUiPiZ0aW1lczs8L3NwYW4+PC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0ibW9kYWwtdGl0bGUiPlN1Ym1pc3Npb24gZm9yIDcuMjAxOS4xNjc3LjE8L2gyPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCg0KICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHsNCg0KICAgICAgICAkKCcjYXBwbGljYXRpb24nKS50b2dnbGVwYW5lbHMoKTsNCg0KICAgICAgICAgICAgJCgnI2RldGFpbHMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI3Byb3BlcnRpZXMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI3Blb3BsZScpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjZGVjaXNpb24nKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI2dvb2dsZW1hcHMnKS5jbGljaygpOw0KDQogICAgICAgIA0KDQoNCiAgICAgICAgJCgnI3N1Ym1pc3Npb24tYnRuJykuY2xpY2soZnVuY3Rpb24gKCkgeyAgICAgICAgDQoNCg0KICAgICAgICAgICAgdmFyIHVybCA9ICJodHRwczovL2Rhb25saW5lLmd5bXBpZS5xbGQuZ292LmF1Ly9BcHBsaWNhdGlvbi9TdWJtaXNzaW9uLyIgKyBlbmNvZGVVUkkoIjcuMjAxOS4xNjc3LjEiKTsNCg0KICAgICAgICAgICAgJCgnI3N1Ym1pc3Npb24tbW9kYWwnKS5tb2RhbCgnc2hvdycpLmZpbmQoJy5tb2RhbC1ib2R5JykubG9hZCh1cmwpOw0KICAgICAgICB9KTsNCiAgICB9KTsNCg0KDQogICAgLyogU2hvd3MgYWxsIHRoZSBwYW5lbHMgKi8NCiAgICBmdW5jdGlvbiBzaG93QWxsKCkgew0KICAgICAgICAkKCcjYXBwbGljYXRpb24nKS5jaGlsZHJlbigiaDMiKS5lYWNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKCJ1aS1zdGF0ZS1kZWZhdWx0IikpIHsNCiAgICAgICAgICAgICAgICAkKHRoaXMpLmNsaWNrKCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0pOw0KICAgIH0NCg0KDQogICAgLyogSGlkZSBhbGwgdGhlIHBhbmVscyAqLw0KICAgIGZ1bmN0aW9uIGhpZGVBbGwoKSB7DQogICAgICAgICQoJyNhcHBsaWNhdGlvbicpLmNoaWxkcmVuKCJoMyIpLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoInVpLXN0YXRlLWFjdGl2ZSIpKSB7DQogICAgICAgICAgICAgICAgJCh0aGlzKS5jbGljaygpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICA8L3NjcmlwdD4NCg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPCEtLSAvLmNvbnRhaW5lci1mbHVpZCAtLT4NCg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwhLS0gLyNwYWdlLXdyYXBwZXIgLS0+DQogICAgICAgICAgICA8L2Rpdj4NCg0KDQogICAgICAgICAgICA8ZGl2IGlkPSJHcmVlbkJhciI+DQogICAgICAgICAgICAgICAgPGEgc3R5bGU9ImN1cnNvcjpkZWZhdWx0Ij4gQ29weXJpZ2h0IMKpIDIwMTggQ2l2aWNhIHwgPC9hPg0KICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmd5bXBpZS5xbGQuZ292LmF1L2Rpc2NsYWltZXIiIHRhcmdldD0iX3BhcmVudCI+Q29weXJpZ2h0IGFuZCBEaXNjbGFpbWVyPC9hPg0KICAgICAgICAgICAgICAgIDxhIHN0eWxlPSJjdXJzb3I6ZGVmYXVsdCI+IHwgPC9hPg0KICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmd5bXBpZS5xbGQuZ292LmF1L3ByaXZhY3ktc3RhdGVtZW50IiB0YXJnZXQ9Il9wYXJlbnQiPlByaXZhY3kgU3RhdGVtZW50PC9hPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8ZGl2PiA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQoNCiAgICA8ZGl2IGlkPSJ0aXB0aXBfaG9sZGVyIiBzdHlsZT0ibWF4LXdpZHRoOjMwMHB4OyI+PGRpdiBpZD0idGlwdGlwX2Fycm93Ij48ZGl2IGlkPSJ0aXB0aXBfYXJyb3dfaW5uZXIiPjwvZGl2PjwvZGl2PjxkaXYgaWQ9InRpcHRpcF9jb250ZW50Ij48L2Rpdj48L2Rpdj4NCjwvYm9keT4NCg0KPHNjcmlwdCBhc3luYyBzcmM9Imh0dHBzOi8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL2d0YWcvanM/aWQ9VUEtMTIxNzczNzc3LTEiPjwvc2NyaXB0Pg0KPHNjcmlwdD4NCgl3aW5kb3cuZGF0YUxheWVyID0gd2luZG93LmRhdGFMYXllciB8fCBbXTsNCglmdW5jdGlvbiBndGFnKCl7ZGF0YUxheWVyLnB1c2goYXJndW1lbnRzKTt9DQoJZ3RhZygnanMnLCBuZXcgRGF0ZSgpKTsNCg0KCWd0YWcoJ2NvbmZpZycsICdVQS0xMjE3NzM3NzctMScpOw0KPC9zY3JpcHQ+DQo8L2h0bWw+DQo=
  recorded_at: Mon, 21 Apr 2025 18:19:42 GMT
- request:
    method: get
    uri: https://daonline.gympie.qld.gov.au/Application/ApplicationDetails/007.2019.00001835.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - daonline.gympie.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 302
      message: Found
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Home/Disclaimer"
      Server:
      - Microsoft-IIS/8.5
      Set-Cookie:
      - ASP.NET_SessionId=chnmejlnl53pklglx4va530s; path=/; HttpOnly; SameSite=Lax
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:19:42 GMT
      Content-Length:
      - '133'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Home/Disclaimer\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:19:42 GMT
- request:
    method: get
    uri: https://daonline.gympie.qld.gov.au/Home/Disclaimer
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=chnmejlnl53pklglx4va530s
      Host:
      - daonline.gympie.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:19:42 GMT
      Content-Length:
      - '16047'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQo8aHRtbCBsYW5nPSJlbiI+DQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+DQogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4NCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPg0KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIj4NCiAgICA8bWV0YSBuYW1lPSJrZXl3b3JkcyIgY29udGVudD0iR3ltcGllIFJlZ2lvbmFsIENvdW5jaWwsREEgVHJhY2tlcixEZXZlbG9wbWVudCBBcHBsaWNhdGlvbixEZXZlbG9wbWVudCBBcHBsaWNhdGlvbiBUcmFja2luZywgREEgRW5xdWlyeSwgRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24gRW5xdWlyeSwgQXBwbGljYXRpb24gVHJhY2tlciI+DQogICAgPG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iIGNvbnRlbnQ9IlRoZSBvZmZpY2lhbCBHeW1waWUgUmVnaW9uYWwgQ291bmNpbCBBcHBsaWNhdGlvbiBUcmFja2VyIj4NCg0KICAgIDx0aXRsZT5HeW1waWUgUmVnaW9uYWwgQ291bmNpbCAtIEFwcGxpY2F0aW9uIFRyYWNrZXI8L3RpdGxlPg0KDQogICAgPCEtLWZhdmljb24tLT4NCiAgICA8bGluayBocmVmPSIvZmF2aWNvbi5pY28iIHJlbD0ic2hvcnRjdXQgaWNvbiIgdHlwZT0iaW1hZ2UveC1pY29uIj4NCg0KICAgIDwhLS0galF1ZXJ5IC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvU2NyaXB0cy9qcXVlcnktMS4xMS4xLmpzIj48L3NjcmlwdD4NCg0KICAgIDxzY3JpcHQgc3JjPSIvU2NyaXB0cy9qcXVlcnktdWktMS4xMS4yLmpzIj48L3NjcmlwdD4NCg0KICAgIDxsaW5rIGhyZWY9Ii9Db250ZW50L3RoZW1lcy9iYXNlL2NvcmUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9Db250ZW50L3RoZW1lcy9iYXNlL2FjY29yZGlvbi5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvdGhlbWUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPCEtLSBCb290c3RyYXAgLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2Jvb3RzdHJhcC5qcyI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9ib290c3RyYXAtdGhlbWUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9Db250ZW50L2Jvb3RzdHJhcC5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQogICAgPGxpbmsgaHJlZj0iL0NvbnRlbnQvZm9udC1hd2Vzb21lLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDwhLS0gRGF0YVRhYmxlcyAtLT4NCiAgICA8c2NyaXB0IHNyYz0iL1NjcmlwdHMvRGF0YVRhYmxlcy9qcXVlcnkuZGF0YVRhYmxlcy5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL1NjcmlwdHMvRGF0YVRhYmxlcy9kYXRhVGFibGVzLmJvb3RzdHJhcC5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL1NjcmlwdHMvRGF0YVRhYmxlcy9kYXRhVGFibGVzLnJlc3BvbnNpdmUuanMiPjwvc2NyaXB0Pg0KDQogICAgDQogICAgPGxpbmsgaHJlZj0iL0NvbnRlbnQvRGF0YVRhYmxlcy9jc3MvZGF0YVRhYmxlcy5ib290c3RyYXAuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9Db250ZW50L0RhdGFUYWJsZXMvY3NzL2RhdGFUYWJsZXMucmVzcG9uc2l2ZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvRGF0YVRhYmxlcy9jc3MvZGF0YVRhYmxlcy5yZXNwb25zaXZlLnNjc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQoNCiAgICA8IS0tIEJvb3RzdHJhcCBTQi1BZG1pbi0yIFBsdWdpbiBhbmQgb3RoZXIgY3NzIGFuZCBqcyBmaWxlcy0tPg0KICAgIDxzY3JpcHQgc3JjPSIvanMvYm9vdHN0cmFwLWNvbWJvYm94LmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvYm9vdHN0cmFwLWRhdGVwaWNrZXIuanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9qcy9ib290c3RyYXAtZGlhbG9nLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvanF1ZXJ5LmZvcm0uanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9qcy9qcXVlcnkudGFibGVzb3J0ZXIuanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9qcy9tYXN0ZXJ2aWV3LmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvbWV0aXNNZW51LmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvc2ItYWRtaW4tMi5qcyI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvY3NzL2Jvb3RzdHJhcC1jb21ib2JveC5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL2Nzcy9kYXRlcGlja2VyMy5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL2Nzcy9tYXN0ZXJ2aWV3LWN1c3RvbWlzYXRpb25zLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvY3NzL3NiLWFkbWluLTIuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPGxpbmsgaHJlZj0iL0NvdW5jaWxfVGhlbWUvZ3ltcGllL2d5bXBpZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQogICAgDQoNCiAgICA8IS0tIEhUTUw1IFNoaW0gYW5kIFJlc3BvbmQuanMgSUU4IHN1cHBvcnQgb2YgSFRNTDUgZWxlbWVudHMgYW5kIG1lZGlhIHF1ZXJpZXMgLS0+DQogICAgPCEtLSBXQVJOSU5HOiBSZXNwb25kLmpzIGRvZXNuJ3Qgd29yayBpZiB5b3UgdmlldyB0aGUgcGFnZSB2aWEgZmlsZTovLyAtLT4NCiAgICA8IS0tW2lmIGx0IElFIDldPg0KICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9vc3MubWF4Y2RuLmNvbS9saWJzL2h0bWw1c2hpdi8zLjcuMC9odG1sNXNoaXYuanMiPjwvc2NyaXB0Pg0KICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9vc3MubWF4Y2RuLmNvbS9saWJzL3Jlc3BvbmQuanMvMS40LjIvcmVzcG9uZC5taW4uanMiPjwvc2NyaXB0Pg0KICAgIDwhW2VuZGlmXS0tPg0KPC9oZWFkPg0KDQoNCg0KPGJvZHk+DQogICAgPGRpdiBjbGFzcz0icHVzaG1lbnUgY2JwLXNwbWVudS1wdXNoIj4NCiAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4NCiAgICAgICAgICAgIDxoZWFkZXIgaWQ9IkhlYWRlciI+DQogICAgICAgICAgICAgICAgPG5hdiBjbGFzcz0ibmF2YmFyIG5hdmJhci1kZWZhdWx0IiByb2xlPSJuYXZpZ2F0aW9uIiBpZD0iTmF2QmFyIj4NCiAgICAgICAgICAgICAgICAgICAgPCEtLSBCcmFuZCBhbmQgdG9nZ2xlIGdldCBncm91cGVkIGZvciBiZXR0ZXIgbW9iaWxlIGRpc3BsYXkgLS0+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZnIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idXRpbHMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly93d3cuZ3ltcGllLnFsZC5nb3YuYXUiPkhvbWU8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vd3d3Lmd5bXBpZS5xbGQuZ292LmF1L2NvbnRhY3QtdXMiPkNvbnRhY3QgVXM8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8aDEgaWQ9ImxvZ28iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmd5bXBpZS5xbGQuZ292LmF1Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9Db3VuY2lsX1RoZW1lL2d5bXBpZS9sb2dvLnBuZyIgYWx0PSJHeW1waWUgUmVnaW9uYWwgQ291bmNpbCI+PHN0cm9uZyBjbGFzcz0idmgiPkd5bXBpZSBSZWdpb25hbCBDb3VuY2lsPC9zdHJvbmc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9oMT4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9uYXY+DQogICAgICAgICAgICA8L2hlYWRlcj4NCg0KICAgICAgICAgICAgPGRpdiBpZD0iY29udGVudCI+DQogICAgICAgICAgICAgICAgPCEtLSBOYXZpZ2F0aW9uIC0tPg0KICAgICAgICAgICAgICAgIDxuYXYgY2xhc3M9Im5hdmJhciBuYXZiYXItZGVmYXVsdCBuYXZiYXItc3RhdGljLXRvcCIgcm9sZT0ibmF2aWdhdGlvbiIgc3R5bGU9Im1hcmdpbi1ib3R0b206IDAiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0ibmF2YmFyLXRvZ2dsZSIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLXRhcmdldD0iLm5hdmJhci1jb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPlRvZ2dsZSBuYXZpZ2F0aW9uPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2YmFyLWJyYW5kIiBocmVmPSIvSG9tZS9JbmRleCI+PC9hPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdmJhci1oZWFkZXIgLS0+DQogICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdmJhci10b3AtbGlua3MgbmF2YmFyLXJpZ2h0IGhpZGRlbi14cyBoaWRkZW4tc20gaGlkZGVuLW1kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48c3BhbiBpZD0icHJpbnRJY29uIiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1wcmludCIgb25jbGljaz0id2luZG93LnByaW50KCk7Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgPC91bD4NCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItZGVmYXVsdCBzaWRlYmFyIiByb2xlPSJuYXZpZ2F0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNpZGViYXItbmF2IG5hdmJhci1jb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYiIGlkPSJzaWRlLW1lbnUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLnNpZGViYXItY29sbGFwc2UgLS0+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLXN0YXRpYy1zaWRlIC0tPg0KICAgICAgICAgICAgICAgIDwvbmF2Pg0KICAgICAgICAgICAgICAgIDxkaXYgaWQ9InBhZ2Utd3JhcHBlciI+DQoNCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyLWZsdWlkIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgDQoNCg0KPGRpdiBjbGFzcz0icGFnZS1oZWFkZXIiPg0KPGgyPkRpc2NsYWltZXI8L2gyPg0KPC9kaXY+DQoNCjxkaXYgaWQ9InNjcm9sbGFibGVDb250ZW50Ij4NCjxoMz5EQXMgT25saW5lIC0gRGV2ZWxvcG1lbnQgQXBwbGljYXRpb25zPC9oMz4NCjxwPiZuYnNwOzwvcD4NCjxoND5Db3B5cmlnaHQ8L2g0Pg0KPHAgY2xhc3M9InNlY3Rpb24iPk1hc3RlcnZpZXcgc29mdHdhcmUgKHJlZmVycmVkIHRvIGluIHRoZXNlIHRlcm1zIGFuZCBjb25kaXRpb25zIGFzIERBcyBPbmxpbmUpIENvcHlyaWdodCAmIzE2OTsgMjAxNyBDaXZpY2EgUHR5IExpbWl0ZWQgd2l0aCBhIG5vbi1leGNsdXNpdmUgbGljZW5jZSB0byBHeW1waWUgUmVnaW9uYWwgQ291bmNpbC4NCkV4Y2VwdCBmb3IgdGhlIHB1cnBvc2UgZXhwcmVzc2x5IHN0YXRlZCBiZWxvdyBhbmQgZm9yIHB1cnBvc2VzIHBlcm1pdHRlZCBieSB0aGUgQ29weXJpZ2h0IEFjdCAxOTY4IChDdGgpLCByZXByb2R1Y3Rpb24sIHB1YmxpY2F0aW9uLCBjb21tdW5pY2F0aW9uIHRvIHRoZSBwdWJsaWMsIGFkYXB0YXRpb24sIHNlbGxpbmcsIHJlLXRyYW5zbWlzc2lvbiwgcmVmcmFtaW5nLCBsaW5raW5nLCBjb21tZXJjaWFsIG9yIG90aGVyIHVzZSAod2hldGhlciBmb3IgY29tcGVuc2F0aW9uIG9mIGFueSBraW5kIG9yIG5vdCkgb2YgZG9jdW1lbnRzLCBjb250ZW50IG9yIGluZm9ybWF0aW9uIG1hZGUgYXZhaWxhYmxlIHVzaW5nIERBcyBPbmxpbmUgYnkgd2hhdGV2ZXIgbWVhbnMgaXMgcHJvaGliaXRlZCB1bmxlc3MgdGhlIHdyaXR0ZW4gY29uc2VudCBvZiB0aGUgQ29weXJpZ2h0IG93bmVyIGlzIG9idGFpbmVkLg0KREFzIE9ubGluZSB1c2VycyBhcmUgZXhwcmVzc2x5IHBlcm1pdHRlZCB0byByZXByb2R1Y2UgdGhlIGNvbnRlbnRzIG9mIHRoZSBEQXMgT25saW5lIHdlYnNpdGUgaW4gdGhlaXIgd2ViIGJyb3dzZXIgKGFuZCBpbiBhbnkgY2FjaGUgZmlsZSBwcm9kdWNlZCBieSB0aGVpciB3ZWIgYnJvd3NlcikgZm9yIHRoZSBzb2xlIHB1cnBvc2Ugb2YgdGhlaXIgcGVyc29uYWwgbm9uLWNvbW1lcmNpYWwgdmlld2luZyBvZiB0aGUgY29udGVudCBhbmQgcHJpbnRpbmcgb2YgZG9jdW1lbnRhdGlvbi4NCiA8L3A+DQo8cD4mbmJzcDs8L3A+DQogPGg0PkRpc2NsYWltZXI8L2g0Pg0KDQo8cCBjbGFzcz0ic2VjdGlvbiI+VGhlIGluZm9ybWF0aW9uIHByb3ZpZGVkIGJ5IERBcyBPbmxpbmUgaXMgbWFkZSBhdmFpbGFibGUgYXMgYSBnZW5lcmFsIHJlZmVyZW5jZSBzb3VyY2Ugb25seS4NCkRBcyBPbmxpbmUgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQsIGFuZCBtdXN0IG5vdCBiZSB1c2VkLCBmb3IgZm9ybWFsIHB1cnBvc2VzIHN1Y2ggYXMgZm9yIHRoZSBwdXJwb3NlcyBvZiBwcm9wZXJ0eSB0cmFuc2FjdGlvbnMgb3Igc2V0dGxlbWVudHMuIEFjY2VzcyB0byBkb2N1bWVudHMgYW5kIGluZm9ybWF0aW9uIGZvciBmb3JtYWwgcHVycG9zZXMgbXVzdCBiZSBvYnRhaW5lZCB0aHJvdWdoIENvdW5jaWwncyBmb3JtYWwgZG9jdW1lbnQgc2VhcmNoIHByb2NlZHVyZXMsIG5vdCB0aHJvdWdoIERBcyBPbmxpbmUuRm9yIGZ1cnRoZXIgaW5mb3JtYXRpb24gb24gUHJvcGVydHkgU2VhcmNoZXMsIHBsZWFzZSByZWZlciB0byBDb3VuY2lsJ3Mgd2Vic2l0ZSBhdCA8YSBocmVmPSJodHRwczovL3d3dy5neW1waWUucWxkLmdvdi5hdS9zZWFyY2hlcyIgdGFyZ2V0PSJfYmxhbmsiPnd3dy5neW1waWUucWxkLmdvdi5hdS9zZWFyY2hlczwvYT4uPC9wPg0KDQo8cCBjbGFzcz0ic2VjdGlvbiI+Q291bmNpbCBtYWtlcyBubyByZXByZXNlbnRhdGlvbnMgYW5kIGdpdmVzIG5vIHdhcnJhbnRpZXMgKGV4cHJlc3Mgb3IgaW1wbGllZCkgYWJvdXQgdGhlIGluZm9ybWF0aW9uIChpbmNsdWRpbmcgYWNjdXJhY3ksIHJlbGlhYmlsaXR5LCBjb21wbGV0ZW5lc3MsIHF1YWxpdHksIG1lcmNoYW50YWJpbGl0eSwgZml0bmVzcyBvciBzdWl0YWJpbGl0eSkgZm9yIGFueSBwdXJwb3NlIG5vciB0aGF0IGFjY2VzcyB0byBhbmQgdXNlIG9mIHRoaXMgd2Vic2l0ZSBvciBzeXN0ZW0gaXMgZnJlZSBmcm9tIGNvbXB1dGVyIHZpcnVzZXMgb3Igb3RoZXIgaW5mZWN0aW9ucyBvciBjb250YW1pbmF0aW9ucy4gTm8gbGlhYmlsaXR5IGlzIGFjY2VwdGVkIGJ5IHRoZSBDb3VuY2lsIChpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uLCB3aGV0aGVyIGluIGFuIGFjdGlvbiBvZiBjb250cmFjdCwgbmVnbGlnZW5jZSBvciBvdGhlciB0b3J0aW91cyBhY3Rpb24pIGZvciBhbnkgbG9zcywgZGFtYWdlIG9yIGNvc3RzIChpbmNsdWRpbmcgY29uc2VxdWVudGlhbCwgc3BlY2lhbCBvciBpbmRpcmVjdCBkYW1hZ2VzKSByZWxhdGluZyB0byBhY2Nlc3MgdG8sIHVzZSBvZiwgb3IgcmVsaWFuY2UgdXBvbiB0aGUgaW5mb3JtYXRpb24gb2J0YWluZWQgdXNpbmcgREFzIE9ubGluZS48L3A+DQo8cCBjbGFzcz0ic2VjdGlvbiI+VGhlIGluZm9ybWF0aW9uIHByb3ZpZGVkIG9uIHRoaXMgd2ViIHNpdGUgaXMgdG8gYXNzaXN0IGN1c3RvbWVycyBpbiB0cmFja2luZyBwcm9ncmVzcyBvZiB0aGUgRGV2ZWxvcG1lbnQgQXBwbGljYXRpb25zLiBJdCByZXByZXNlbnRzIGtleSBtaWxlc3RvbmVzIGluIHRoZSBEZXZlbG9wbWVudCBBcHBsaWNhdGlvbiBwcm9jZXNzIGJ1dCBpcyBub3QgYSBkZXRhaWxlZCBoaXN0b3J5LiBIb3dldmVyLCBwdXJjaGFzaW5nIGRlY2lzaW9ucyBzaG91bGQgbm90IHJlbHkgb24gdGhlIGluZm9ybWF0aW9uIGNvbnRhaW5lZCBvbiB0aGlzIHdlYiBzaXRlLiBQZXJzb25zIHdpc2hpbmcgdG8gY29uZmlybSBpbmZvcm1hdGlvbiBpbiBkZXRhaWwgc2hvdWxkIGNvbnRhY3QgQ291bmNpbCB2aWEgZWl0aGVyIGVtYWlsLCBvciBpbiB3cml0aW5nIGluIG9yZGVyIHRvIG9idGFpbiBhIHdyaXR0ZW4gcmVzcG9uc2UuPC9wPg0KDQo8cCBjbGFzcz0ic2VjdGlvbiI+DQpGb3IgZGV2ZWxvcG1lbnQgYXBwbGljYXRpb25zIHJlY2VpdmVkIHByaW9yIHRvIDMgSnVseSAyMDE3LCBvbmx5IHRoZSBkZWNpc2lvbiBub3RpY2UgYW5kIGFwcHJvdmVkIHBsYW5zLCB3aGVyZSByZWxldmFudCwgd2lsbCBiZSBtYWRlIGF2YWlsYWJsZS4NCjwvcD4NCjxwIGNsYXNzPSJzZWN0aW9uIj4NCkRldmVsb3BtZW50IEFwcGxpY2F0aW9ucyByZWxhdGluZyB0byB0aGUgZm9ybWVyIFNoaXJlcyBvZiBLaWxraXZhbiBhbmQgVGlhcm8gKERpdmlzaW9uIDMpLCBwcmlvciB0byB0aGVpciBhbWFsZ2FtYXRpb24gaW50byBHeW1waWUgUmVnaW9uYWwgQ291bmNpbCBvbiAxNSBNYXJjaCAyMDA4LCBhcmUgbm90IGRpc3BsYXllZC4NCjwvcD4NCjxwIGNsYXNzPSJzZWN0aW9uIj4NCk5vdGU6IEFwcGxpY2F0aW9ucyBmb3IgQnVpbGRpbmcgV29yayBvciBQbHVtYmluZyBhbmQgRHJhaW5hZ2UgV29yayBhcmUgbm90IGluY2x1ZGVkLiANCjwvcD4NCjxwIGNsYXNzPSJzZWN0aW9uIj4NClRoZXJlIGlzIG5vIG9ubGluZSBsb2RnZW1lbnQgc2VydmljZSBwcm92aWRlZCBieSB0aGlzIGZhY2lsaXR5Lg0KPC9wPg0KPHA+Jm5ic3A7PC9wPg0KIDxoND5JbmZvcm1hdGlvbiBwcml2YWN5PC9oND4NCg0KPHAgY2xhc3M9InNlY3Rpb24iPkRBcyBPbmxpbmUgbWF5IHJlY29yZCBzb21lIGluZm9ybWF0aW9uIGFib3V0IGVhY2ggYWNjZXNzIHRvIERBcyBPbmxpbmUgKGZvciBleGFtcGxlLCB0aGUgbFAgYWRkcmVzcyBvZiB0aGUgY29tcHV0ZXIgZnJvbSB3aGljaCBEQXMgT25saW5lIGlzIGFjY2Vzc2VkLCB0aGUgZGF0ZSBhbmQgdGltZSBvZiBhY2Nlc3MsIGFuZCB0aGUgcGFnZXMsIGRvY3VtZW50cyBvciBpbmZvcm1hdGlvbiBhY2Nlc3NlZCkuIFRoaXMgaW5mb3JtYXRpb24gaXMgdXNlZCBmb3Igc3RhdGlzdGljYWwgYW5kIHNpdGUgZGV2ZWxvcG1lbnQgcHVycG9zZXMuPC9wPg0KPHAgY2xhc3M9InNlY3Rpb24iPkV4Y2VwdCBmb3IgaW5mb3JtYXRpb24gc3BlY2lmaWNhbGx5IHByb3ZpZGVkIGJ5IHVzZXJzLCB0aGUgQ291bmNpbCBkb2VzIG5vdCBjb2xsZWN0IGFueSBvdGhlciBwZXJzb25hbCBpbmZvcm1hdGlvbiBkdXJpbmcgdXNlIG9mIERBcyBPbmxpbmUuIEFueSBwZXJzb25hbCBpbmZvcm1hdGlvbiBzcGVjaWZpY2FsbHkgcHJvdmlkZWQgd2lsbCBub3QgYmUgZGlzY2xvc2VkIHRvIHRoaXJkIHBhcnRpZXMgZXhjZXB0IHdpdGggdGhlIGNvbnNlbnQgb2YgdGhlIHN1YmplY3QgdXNlciwgb3Igd2hlcmUgcmVxdWlyZWQgYnkgbGF3LjwvcD4NCjxwIGNsYXNzPSJzZWN0aW9uIj5UaGUgQ291bmNpbCB0YWtlcyBzdGVwcyB0byBtYWludGFpbiB0aGUgY3VycmVuY3kgYW5kIGFjY3VyYWN5IG9mIHRoZSBwZXJzb25hbCBpbmZvcm1hdGlvbiBpdCBob2xkcy4gSWYgdXNlcnMgcmVxdWlyZSBhY2Nlc3MgdG8gYW55IHBlcnNvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZW0gdGhhdCBtYXkgaGVsZCBieSB0aGUgQ291bmNpbCwgb3IgaWYgdXNlcnMgaGF2ZSBhbnkgb3RoZXIgcXVlc3Rpb25zIGFib3V0IGluZm9ybWF0aW9uIHByaXZhY3ksIGVtYWlsIENvdW5jaWwuIDwvcD4NCjxwIGNsYXNzPSJzZWN0aW9uIj5Gb3IgZnVydGhlciBpbmZvcm1hdGlvbiBvbiBDb3VuY2lsJ3MgUHJpdmFjeSBTdGF0ZW1lbnQgYW5kIEluZm9ybWF0aW9uIFByaXZhY3kgUG9saWN5IHJlZmVyIHRvIENvdW5jaWwncyB3ZWJzaXRlIGF0IDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmd5bXBpZS5xbGQuZ292LmF1L3ByaXZhY3ktc3RhdGVtZW50IiB0YXJnZXQ9Il9ibGFuayI+d3d3Lmd5bXBpZS5xbGQuZ292LmF1L3ByaXZhY3ktc3RhdGVtZW50PC9hPi48L3A+DQo8cD4mbmJzcDs8L3A+DQo8aDQ+UmlnaHQgdG8gZ3JhbnQgb3IgcmVmdXNlIGFjY2VzczwvaDQ+DQoNCjxwIGNsYXNzPSJzZWN0aW9uIj5BY2Nlc3MgdG8gdGhlIFBsYW5uaW5nIGFuZCBEZXZlbG9wbWVudCBPbmxpbmUgc3lzdGVtIGlzIGF0IHRoZSBkaXNjcmV0aW9uIG9mIENvdW5jaWwuIENvdW5jaWwgcmVzZXJ2ZXMgdGhlIHJpZ2h0IHRvIHJlZnVzZSB0byBhbGxvdyBhY2Nlc3MgdG8gYW55IHBhcnQgb2YgdGhlIFBsYW5uaW5nIGFuZCBEZXZlbG9wbWVudCBPbmxpbmUgc3lzdGVtIHdpdGhvdXQgcHJpb3Igbm90aWNlLCBhbmQgd2l0aG91dCB0aGUgbmVlZCB0byBnaXZlIGFueSByZWFzb24gZm9yIGRvaW5nIHNvLjwvcD4NCjxwPiZuYnNwOzwvcD4NCjxoND5TeXN0ZW0gUmVxdWlyZW1lbnRzPC9oND4NCg0KPHAgY2xhc3M9InNlY3Rpb24iPlRoZSBEQXMgT25saW5lIHRvb2wgaGFzIGJlZW4gdGVzdGVkIGFuZCBjZXJ0aWZpZWQgdG8gZnVuY3Rpb24gY29ycmVjdGx5IGluIGFsbCBtb2Rlcm4gYnJvd3NlcnMuIFNvbWUgZnVuY3Rpb25hbGl0eSwgZS5nLiBtYXBwaW5nLCB2aWV3aW5nIG9mIGRvY3VtZW50cywgbWF5IHJlcXVpcmUgYWRkaXRpb25hbCBzb2Z0d2FyZSB0byBiZSBpbnN0YWxsZWQuIENvdW5jaWwgaXMgbm90IGluIGEgcG9zaXRpb24gdG8gcHJvdmlkZSBzb2Z0d2FyZSBjb21wYXRpYmlsaXR5IHN1cHBvcnQuPC9wPg0KDQo8cCBjbGFzcz0ic2VjdGlvbiI+SWYgeW91IGRvIG5vdCBoYXZlIE1pY3Jvc29mdCBPZmZpY2Ugb3IgYXJlIHVzaW5nIGFuIEFwcGxlIE1hYyBhbmQgYXJlIHVuYWJsZSB0byBvcGVuIE1TRyBmaWxlcywgcGxlYXNlIHVzZSBhIHZpZXdlciBzdWNoIGFzIDxhIGhyZWY9Imh0dHBzOi8vc291cmNlZm9yZ2UubmV0L3Byb2plY3RzL21zZ3ZpZXdlci8iIHRhcmdldD0iX2JsYW5rIj5Nc2dWaWV3ZXI8L2E+IG9yIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmNvb2x1dGlscy5jb20vTWFpbFZpZXdlciIgdGFyZ2V0PSJfYmxhbmsiPk1haWwgVmlld2VyPC9hPiBJcGFkIHVzZXJzIHNlYXJjaCB0aGUgYXBwIHN0b3JlIGZvciBNU0cgdmlld2VycyBzdWNoIGFzIEtsYW1tZXIuPC9wPg0KDQo8cD4mbmJzcDs8L3A+DQo8L2Rpdj4NCg0KPHAgY2xhc3M9InNlY3Rpb24iPg0KPC9icj4NCjxiPkkgaGF2ZSByZWFkIGFuZCB1bmRlcnN0b29kIHRoZSBwcm92aXNpb25zIHNldCBvdXQgYWJvdmUuPC9iPg0KPC9wPg0KPC9icj4NCg0KDQoNCg0KPGZvcm0gYWN0aW9uPSIvSG9tZS9EaXNjbGFpbWVyUHJvY2Vzc2luZyIgaWQ9ImRpc2NsYWltZXItZm9ybSIgbWV0aG9kPSJwb3N0Ij48aW5wdXQgaWQ9ImFncmVlZCIgbmFtZT0iYWdyZWVkIiB0eXBlPSJoaWRkZW4iIHZhbHVlPSJGYWxzZSIgLz4gICAgPGRpdiBpZD0iYnRucyI+DQogICAgICAgIDxidXR0b24gaWQ9ImFncmVlIiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIGZvcm09ImRpc2NsYWltZXItZm9ybSI+QWdyZWU8L2J1dHRvbj4NCiAgICAgICAgPGJ1dHRvbiBpZD0iZGlzYWdyZWUiIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4td2FybmluZyIgZm9ybT0iZGlzY2xhaW1lci1mb3JtIj5EaXNhZ3JlZTwvYnV0dG9uPg0KICAgIDwvZGl2Pg0KPC9mb3JtPg0KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KDQogICAgdmFyIGxhc3RTY3JvbGxUb3A7DQogICAgdmFyIG1heFNjcm9sbGFibGVDb250ZW50SGVpZ2h0Ow0KDQogICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkgew0KDQogICAgICAgIHVwZGF0ZUxlZnRNYXJnaW4oKTsNCiAgICAgICAgYXR0YWNoQ2xpY2tIYW5kbGVycygpOw0KDQogICAgICAgIGlmIChpc1RleHRCbG9ja092ZXJmbG93aW5nKCkpIHsNCiAgICAgICAgICAgIGxhc3RTY3JvbGxUb3AgPSAwOzsNCiAgICAgICAgICAgIHZhciB3aW5kb3dIZWlnaHQgPSAkKHdpbmRvdykuaGVpZ2h0KCk7DQoNCiAgICAgICAgICAgIHZhciBoZWFkZXJIZWlnaHQgPSAkKCcjc2Nyb2xsYWJsZUNvbnRlbnQnKS5vZmZzZXQoKS50b3A7DQogICAgICAgICAgICB2YXIgbmV3SGVpZ2h0ID0gZ2V0TmV3SGVpZ2h0KCk7DQoNCiAgICAgICAgICAgIGFkanVzdERpc2NsYWltZXJDb250ZW50Rm9yRG93blNjcm9sbChuZXdIZWlnaHQpOw0KDQogICAgICAgICAgICAkKHdpbmRvdykuc2Nyb2xsKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICB2YXIgbkhlaWdodCA9ICQod2luZG93KS5oZWlnaHQoKSAtIChoZWFkZXJIZWlnaHQgLSAkKHdpbmRvdykuc2Nyb2xsVG9wKCkgKyAkKCdmb3JtJykuaGVpZ2h0KCkgKyAxMDApOw0KDQogICAgICAgICAgICAgICAgdmFyIGJJc0Rvd25TY3JvbGwgPSBpc1Njcm9sbERvd24oKTsNCg0KICAgICAgICAgICAgICAgIGlmIChiSXNEb3duU2Nyb2xsKQ0KICAgICAgICAgICAgICAgICAgICBhZGp1c3REaXNjbGFpbWVyQ29udGVudEZvckRvd25TY3JvbGwobkhlaWdodCk7DQogICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgICAgICBhZGp1c3REaXNjbGFpbWVyQ29udGVudEZvclVwU2Nyb2xsKG5IZWlnaHQpOw0KICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIGdldE5ld0hlaWdodCgpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gJCh3aW5kb3cpLmhlaWdodCgpIC0gKGhlYWRlckhlaWdodCArICQod2luZG93KS5zY3JvbGxUb3AoKSArICQoJ2Zvcm0nKS5oZWlnaHQoKSArIDEwMCk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIGlzU2Nyb2xsRG93bigpIHsNCiAgICAgICAgICAgICAgICB2YXIgc3QgPSAkKHdpbmRvdykuc2Nyb2xsVG9wKCk7DQogICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHN0ID49IGxhc3RTY3JvbGxUb3A7CQkgIC8vIGRvd25zY3JvbGwNCg0KICAgICAgICAgICAgICAgIGxhc3RTY3JvbGxUb3AgPSBzdDsNCiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0Ow0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBmdW5jdGlvbiBoYXNTY3JvbGxCYXIoaXRlbSkgew0KICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLmdldCgwKS5zY3JvbGxIZWlnaHQgPiBpdGVtLmdldCgwKS5jbGllbnRIZWlnaHQ7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIGFkanVzdERpc2NsYWltZXJDb250ZW50Rm9yRG93blNjcm9sbChuSGVpZ2h0KSB7DQogICAgICAgICAgICAgICAgdmFyIGlzU2Nyb2xsYWJsZSA9IGhhc1Njcm9sbEJhcigkKCcjc2Nyb2xsYWJsZUNvbnRlbnQnKSk7DQogICAgICAgICAgICAgICAgaWYgKGlzU2Nyb2xsYWJsZSkgew0KICAgICAgICAgICAgICAgICAgICAkKCcjc2Nyb2xsYWJsZUNvbnRlbnQnKS5oZWlnaHQobkhlaWdodCk7DQogICAgICAgICAgICAgICAgICAgIG1heFNjcm9sbGFibGVDb250ZW50SGVpZ2h0ID0gbkhlaWdodDsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIGFkanVzdERpc2NsYWltZXJDb250ZW50Rm9yVXBTY3JvbGwobkhlaWdodCkgew0KICAgICAgICAgICAgICAgIHZhciBpc1Njcm9sbGFibGUgPSBoYXNTY3JvbGxCYXIoJCgnI3Njcm9sbGFibGVDb250ZW50JykpOw0KDQogICAgICAgICAgICAgICAgaWYgKG1heFNjcm9sbGFibGVDb250ZW50SGVpZ2h0ID4gbkhlaWdodCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICQoJyNzY3JvbGxhYmxlQ29udGVudCcpLmhlaWdodChuSGVpZ2h0KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9KTsNCg0KDQogICAgZnVuY3Rpb24gdXBkYXRlTGVmdE1hcmdpbigpIHsNCiAgICAgICAgaWYgKCQoJyNzaWRlLW1lbnUnKS5odG1sKCkpIHsNCiAgICAgICAgICAgICQoJyNwYWdlLXdyYXBwZXInKS5jc3MoeyAnbWFyZ2luLWxlZnQnOiAnMCcgfSk7DQogICAgICAgICAgICAkKCcuc2lkZWJhcicpLmhpZGUoKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KDQogICAgZnVuY3Rpb24gYXR0YWNoQ2xpY2tIYW5kbGVycygpIHsNCiAgICAgICAgJCgnI2FncmVlJykuY2xpY2soZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgJCgnI2FncmVlZCcpLnZhbCgidHJ1ZSIpOw0KICAgICAgICAgICAgJCgnI2Rpc2NsYWltZXItZm9ybScpLnN1Ym1pdCgpOw0KICAgICAgICB9KTsNCg0KICAgICAgICAkKCcjZGlzYWdyZWUnKS5jbGljayhmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAkKCcjYWdyZWVkJykudmFsKCJmYWxzZSIpOw0KICAgICAgICAgICAgJCgnI2Rpc2NsYWltZXItZm9ybScpLnN1Ym1pdCgpOw0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBpc1RleHRCbG9ja092ZXJmbG93aW5nKCkgew0KICAgICAgICByZXR1cm4gJCgiI3Njcm9sbGFibGVDb250ZW50IikucHJvcCgnc2Nyb2xsSGVpZ2h0JykgPiAkKCIjc2Nyb2xsYWJsZUNvbnRlbnQiKS5oZWlnaHQoKTsNCiAgICB9DQo8L3NjcmlwdD4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwhLS0gLy5jb250YWluZXItZmx1aWQgLS0+DQoNCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8jcGFnZS13cmFwcGVyIC0tPg0KICAgICAgICAgICAgPC9kaXY+DQoNCg0KICAgICAgICAgICAgPGRpdiBpZD0iR3JlZW5CYXIiPg0KICAgICAgICAgICAgICAgIDxhIHN0eWxlPSJjdXJzb3I6ZGVmYXVsdCI+IENvcHlyaWdodCDCqSAyMDE4IENpdmljYSB8IDwvYT4NCiAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5neW1waWUucWxkLmdvdi5hdS9kaXNjbGFpbWVyIiB0YXJnZXQ9Il9wYXJlbnQiPkNvcHlyaWdodCBhbmQgRGlzY2xhaW1lcjwvYT4NCiAgICAgICAgICAgICAgICA8YSBzdHlsZT0iY3Vyc29yOmRlZmF1bHQiPiB8IDwvYT4NCiAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5neW1waWUucWxkLmdvdi5hdS9wcml2YWN5LXN0YXRlbWVudCIgdGFyZ2V0PSJfcGFyZW50Ij5Qcml2YWN5IFN0YXRlbWVudDwvYT4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGRpdj4gPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KDQogICAgPGRpdiBpZD0idGlwdGlwX2hvbGRlciIgc3R5bGU9Im1heC13aWR0aDozMDBweDsiPjxkaXYgaWQ9InRpcHRpcF9hcnJvdyI+PGRpdiBpZD0idGlwdGlwX2Fycm93X2lubmVyIj48L2Rpdj48L2Rpdj48ZGl2IGlkPSJ0aXB0aXBfY29udGVudCI+PC9kaXY+PC9kaXY+DQo8L2JvZHk+DQoNCjxzY3JpcHQgYXN5bmMgc3JjPSJodHRwczovL3d3dy5nb29nbGV0YWdtYW5hZ2VyLmNvbS9ndGFnL2pzP2lkPVVBLTEyMTc3Mzc3Ny0xIj48L3NjcmlwdD4NCjxzY3JpcHQ+DQoJd2luZG93LmRhdGFMYXllciA9IHdpbmRvdy5kYXRhTGF5ZXIgfHwgW107DQoJZnVuY3Rpb24gZ3RhZygpe2RhdGFMYXllci5wdXNoKGFyZ3VtZW50cyk7fQ0KCWd0YWcoJ2pzJywgbmV3IERhdGUoKSk7DQoNCglndGFnKCdjb25maWcnLCAnVUEtMTIxNzczNzc3LTEnKTsNCjwvc2NyaXB0Pg0KPC9odG1sPg0K
  recorded_at: Mon, 21 Apr 2025 18:19:43 GMT
- request:
    method: post
    uri: https://daonline.gympie.qld.gov.au/Home/DisclaimerProcessing
    body:
      encoding: UTF-8
      string: agreed=true
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=chnmejlnl53pklglx4va530s
      Host:
      - daonline.gympie.qld.gov.au
      Referer:
      - https://daonline.gympie.qld.gov.au/Home/Disclaimer
      Content-Type:
      - application/x-www-form-urlencoded
      Content-Length:
      - '11'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Application/ApplicationDetails/007.2019.00001835.001"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      Set-Cookie:
      - User=accessAllowed-MasterView=True; path=/
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:19:42 GMT
      Content-Length:
      - '170'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Application/ApplicationDetails/007.2019.00001835.001\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:19:43 GMT
- request:
    method: get
    uri: https://daonline.gympie.qld.gov.au/Application/ApplicationDetails/007.2019.00001835.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=chnmejlnl53pklglx4va530s; User=accessAllowed-MasterView=True
      Host:
      - daonline.gympie.qld.gov.au
      Referer:
      - https://daonline.gympie.qld.gov.au/Home/Disclaimer
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:19:43 GMT
      Content-Length:
      - '36810'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:19:44 GMT
- request:
    method: get
    uri: https://daonline.gympie.qld.gov.au/Application/ApplicationDetails/007.2019.00001835.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=chnmejlnl53pklglx4va530s; User=accessAllowed-MasterView=True
      Host:
      - daonline.gympie.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:19:43 GMT
      Content-Length:
      - '36810'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:19:44 GMT
- request:
    method: get
    uri: https://daonline.gympie.qld.gov.au/Application/ApplicationDetails/007.2019.00001840.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - daonline.gympie.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 302
      message: Found
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Home/Disclaimer"
      Server:
      - Microsoft-IIS/8.5
      Set-Cookie:
      - ASP.NET_SessionId=fwzyc5jhj0muwdefijzsypr5; path=/; HttpOnly; SameSite=Lax
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:19:43 GMT
      Content-Length:
      - '133'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Home/Disclaimer\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:19:44 GMT
- request:
    method: get
    uri: https://daonline.gympie.qld.gov.au/Home/Disclaimer
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=fwzyc5jhj0muwdefijzsypr5
      Host:
      - daonline.gympie.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:19:44 GMT
      Content-Length:
      - '16047'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:19:45 GMT
- request:
    method: post
    uri: https://daonline.gympie.qld.gov.au/Home/DisclaimerProcessing
    body:
      encoding: UTF-8
      string: agreed=true
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=fwzyc5jhj0muwdefijzsypr5
      Host:
      - daonline.gympie.qld.gov.au
      Referer:
      - https://daonline.gympie.qld.gov.au/Home/Disclaimer
      Content-Type:
      - application/x-www-form-urlencoded
      Content-Length:
      - '11'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Application/ApplicationDetails/007.2019.00001840.001"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      Set-Cookie:
      - User=accessAllowed-MasterView=True; path=/
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:19:44 GMT
      Content-Length:
      - '170'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Application/ApplicationDetails/007.2019.00001840.001\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:19:45 GMT
- request:
    method: get
    uri: https://daonline.gympie.qld.gov.au/Application/ApplicationDetails/007.2019.00001840.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=fwzyc5jhj0muwdefijzsypr5; User=accessAllowed-MasterView=True
      Host:
      - daonline.gympie.qld.gov.au
      Referer:
      - https://daonline.gympie.qld.gov.au/Home/Disclaimer
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:19:44 GMT
      Content-Length:
      - '29380'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:19:45 GMT
- request:
    method: get
    uri: https://daonline.gympie.qld.gov.au/Application/ApplicationDetails/007.2019.00001840.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=fwzyc5jhj0muwdefijzsypr5; User=accessAllowed-MasterView=True
      Host:
      - daonline.gympie.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:19:45 GMT
      Content-Length:
      - '29380'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:19:46 GMT
- request:
    method: get
    uri: https://daonline.gympie.qld.gov.au/Application/ApplicationDetails/007.2019.00001854.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - daonline.gympie.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 302
      message: Found
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Home/Disclaimer"
      Server:
      - Microsoft-IIS/8.5
      Set-Cookie:
      - ASP.NET_SessionId=pecv0uqacqsfuyfm3gphlqg4; path=/; HttpOnly; SameSite=Lax
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:19:45 GMT
      Content-Length:
      - '133'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Home/Disclaimer\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:19:46 GMT
- request:
    method: get
    uri: https://daonline.gympie.qld.gov.au/Home/Disclaimer
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=pecv0uqacqsfuyfm3gphlqg4
      Host:
      - daonline.gympie.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:19:45 GMT
      Content-Length:
      - '16047'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:19:46 GMT
- request:
    method: post
    uri: https://daonline.gympie.qld.gov.au/Home/DisclaimerProcessing
    body:
      encoding: UTF-8
      string: agreed=true
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=pecv0uqacqsfuyfm3gphlqg4
      Host:
      - daonline.gympie.qld.gov.au
      Referer:
      - https://daonline.gympie.qld.gov.au/Home/Disclaimer
      Content-Type:
      - application/x-www-form-urlencoded
      Content-Length:
      - '11'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Application/ApplicationDetails/007.2019.00001854.001"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      Set-Cookie:
      - User=accessAllowed-MasterView=True; path=/
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:19:45 GMT
      Content-Length:
      - '170'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Application/ApplicationDetails/007.2019.00001854.001\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:19:47 GMT
- request:
    method: get
    uri: https://daonline.gympie.qld.gov.au/Application/ApplicationDetails/007.2019.00001854.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=pecv0uqacqsfuyfm3gphlqg4; User=accessAllowed-MasterView=True
      Host:
      - daonline.gympie.qld.gov.au
      Referer:
      - https://daonline.gympie.qld.gov.au/Home/Disclaimer
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:19:47 GMT
      Content-Length:
      - '35740'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:19:47 GMT
- request:
    method: get
    uri: https://daonline.gympie.qld.gov.au/Application/ApplicationDetails/007.2019.00001854.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=pecv0uqacqsfuyfm3gphlqg4; User=accessAllowed-MasterView=True
      Host:
      - daonline.gympie.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:19:47 GMT
      Content-Length:
      - '35740'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:19:48 GMT
- request:
    method: get
    uri: https://daonline.gympie.qld.gov.au/Application/ApplicationDetails/007.2019.00001896.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - daonline.gympie.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 302
      message: Found
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Home/Disclaimer"
      Server:
      - Microsoft-IIS/8.5
      Set-Cookie:
      - ASP.NET_SessionId=2v2zqzjgoc4mnsdtfbngewe2; path=/; HttpOnly; SameSite=Lax
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:19:48 GMT
      Content-Length:
      - '133'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Home/Disclaimer\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:19:48 GMT
- request:
    method: get
    uri: https://daonline.gympie.qld.gov.au/Home/Disclaimer
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=2v2zqzjgoc4mnsdtfbngewe2
      Host:
      - daonline.gympie.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:19:48 GMT
      Content-Length:
      - '16047'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQo8aHRtbCBsYW5nPSJlbiI+DQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+DQogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4NCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPg0KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIj4NCiAgICA8bWV0YSBuYW1lPSJrZXl3b3JkcyIgY29udGVudD0iR3ltcGllIFJlZ2lvbmFsIENvdW5jaWwsREEgVHJhY2tlcixEZXZlbG9wbWVudCBBcHBsaWNhdGlvbixEZXZlbG9wbWVudCBBcHBsaWNhdGlvbiBUcmFja2luZywgREEgRW5xdWlyeSwgRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24gRW5xdWlyeSwgQXBwbGljYXRpb24gVHJhY2tlciI+DQogICAgPG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iIGNvbnRlbnQ9IlRoZSBvZmZpY2lhbCBHeW1waWUgUmVnaW9uYWwgQ291bmNpbCBBcHBsaWNhdGlvbiBUcmFja2VyIj4NCg0KICAgIDx0aXRsZT5HeW1waWUgUmVnaW9uYWwgQ291bmNpbCAtIEFwcGxpY2F0aW9uIFRyYWNrZXI8L3RpdGxlPg0KDQogICAgPCEtLWZhdmljb24tLT4NCiAgICA8bGluayBocmVmPSIvZmF2aWNvbi5pY28iIHJlbD0ic2hvcnRjdXQgaWNvbiIgdHlwZT0iaW1hZ2UveC1pY29uIj4NCg0KICAgIDwhLS0galF1ZXJ5IC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvU2NyaXB0cy9qcXVlcnktMS4xMS4xLmpzIj48L3NjcmlwdD4NCg0KICAgIDxzY3JpcHQgc3JjPSIvU2NyaXB0cy9qcXVlcnktdWktMS4xMS4yLmpzIj48L3NjcmlwdD4NCg0KICAgIDxsaW5rIGhyZWY9Ii9Db250ZW50L3RoZW1lcy9iYXNlL2NvcmUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9Db250ZW50L3RoZW1lcy9iYXNlL2FjY29yZGlvbi5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvdGhlbWUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPCEtLSBCb290c3RyYXAgLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2Jvb3RzdHJhcC5qcyI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9ib290c3RyYXAtdGhlbWUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9Db250ZW50L2Jvb3RzdHJhcC5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQogICAgPGxpbmsgaHJlZj0iL0NvbnRlbnQvZm9udC1hd2Vzb21lLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDwhLS0gRGF0YVRhYmxlcyAtLT4NCiAgICA8c2NyaXB0IHNyYz0iL1NjcmlwdHMvRGF0YVRhYmxlcy9qcXVlcnkuZGF0YVRhYmxlcy5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL1NjcmlwdHMvRGF0YVRhYmxlcy9kYXRhVGFibGVzLmJvb3RzdHJhcC5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL1NjcmlwdHMvRGF0YVRhYmxlcy9kYXRhVGFibGVzLnJlc3BvbnNpdmUuanMiPjwvc2NyaXB0Pg0KDQogICAgDQogICAgPGxpbmsgaHJlZj0iL0NvbnRlbnQvRGF0YVRhYmxlcy9jc3MvZGF0YVRhYmxlcy5ib290c3RyYXAuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9Db250ZW50L0RhdGFUYWJsZXMvY3NzL2RhdGFUYWJsZXMucmVzcG9uc2l2ZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvRGF0YVRhYmxlcy9jc3MvZGF0YVRhYmxlcy5yZXNwb25zaXZlLnNjc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQoNCiAgICA8IS0tIEJvb3RzdHJhcCBTQi1BZG1pbi0yIFBsdWdpbiBhbmQgb3RoZXIgY3NzIGFuZCBqcyBmaWxlcy0tPg0KICAgIDxzY3JpcHQgc3JjPSIvanMvYm9vdHN0cmFwLWNvbWJvYm94LmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvYm9vdHN0cmFwLWRhdGVwaWNrZXIuanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9qcy9ib290c3RyYXAtZGlhbG9nLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvanF1ZXJ5LmZvcm0uanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9qcy9qcXVlcnkudGFibGVzb3J0ZXIuanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9qcy9tYXN0ZXJ2aWV3LmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvbWV0aXNNZW51LmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvc2ItYWRtaW4tMi5qcyI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvY3NzL2Jvb3RzdHJhcC1jb21ib2JveC5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL2Nzcy9kYXRlcGlja2VyMy5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL2Nzcy9tYXN0ZXJ2aWV3LWN1c3RvbWlzYXRpb25zLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvY3NzL3NiLWFkbWluLTIuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPGxpbmsgaHJlZj0iL0NvdW5jaWxfVGhlbWUvZ3ltcGllL2d5bXBpZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQogICAgDQoNCiAgICA8IS0tIEhUTUw1IFNoaW0gYW5kIFJlc3BvbmQuanMgSUU4IHN1cHBvcnQgb2YgSFRNTDUgZWxlbWVudHMgYW5kIG1lZGlhIHF1ZXJpZXMgLS0+DQogICAgPCEtLSBXQVJOSU5HOiBSZXNwb25kLmpzIGRvZXNuJ3Qgd29yayBpZiB5b3UgdmlldyB0aGUgcGFnZSB2aWEgZmlsZTovLyAtLT4NCiAgICA8IS0tW2lmIGx0IElFIDldPg0KICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9vc3MubWF4Y2RuLmNvbS9saWJzL2h0bWw1c2hpdi8zLjcuMC9odG1sNXNoaXYuanMiPjwvc2NyaXB0Pg0KICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9vc3MubWF4Y2RuLmNvbS9saWJzL3Jlc3BvbmQuanMvMS40LjIvcmVzcG9uZC5taW4uanMiPjwvc2NyaXB0Pg0KICAgIDwhW2VuZGlmXS0tPg0KPC9oZWFkPg0KDQoNCg0KPGJvZHk+DQogICAgPGRpdiBjbGFzcz0icHVzaG1lbnUgY2JwLXNwbWVudS1wdXNoIj4NCiAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4NCiAgICAgICAgICAgIDxoZWFkZXIgaWQ9IkhlYWRlciI+DQogICAgICAgICAgICAgICAgPG5hdiBjbGFzcz0ibmF2YmFyIG5hdmJhci1kZWZhdWx0IiByb2xlPSJuYXZpZ2F0aW9uIiBpZD0iTmF2QmFyIj4NCiAgICAgICAgICAgICAgICAgICAgPCEtLSBCcmFuZCBhbmQgdG9nZ2xlIGdldCBncm91cGVkIGZvciBiZXR0ZXIgbW9iaWxlIGRpc3BsYXkgLS0+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZnIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idXRpbHMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly93d3cuZ3ltcGllLnFsZC5nb3YuYXUiPkhvbWU8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vd3d3Lmd5bXBpZS5xbGQuZ292LmF1L2NvbnRhY3QtdXMiPkNvbnRhY3QgVXM8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8aDEgaWQ9ImxvZ28iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmd5bXBpZS5xbGQuZ292LmF1Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9Db3VuY2lsX1RoZW1lL2d5bXBpZS9sb2dvLnBuZyIgYWx0PSJHeW1waWUgUmVnaW9uYWwgQ291bmNpbCI+PHN0cm9uZyBjbGFzcz0idmgiPkd5bXBpZSBSZWdpb25hbCBDb3VuY2lsPC9zdHJvbmc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9oMT4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9uYXY+DQogICAgICAgICAgICA8L2hlYWRlcj4NCg0KICAgICAgICAgICAgPGRpdiBpZD0iY29udGVudCI+DQogICAgICAgICAgICAgICAgPCEtLSBOYXZpZ2F0aW9uIC0tPg0KICAgICAgICAgICAgICAgIDxuYXYgY2xhc3M9Im5hdmJhciBuYXZiYXItZGVmYXVsdCBuYXZiYXItc3RhdGljLXRvcCIgcm9sZT0ibmF2aWdhdGlvbiIgc3R5bGU9Im1hcmdpbi1ib3R0b206IDAiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0ibmF2YmFyLXRvZ2dsZSIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLXRhcmdldD0iLm5hdmJhci1jb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPlRvZ2dsZSBuYXZpZ2F0aW9uPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2YmFyLWJyYW5kIiBocmVmPSIvSG9tZS9JbmRleCI+PC9hPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdmJhci1oZWFkZXIgLS0+DQogICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdmJhci10b3AtbGlua3MgbmF2YmFyLXJpZ2h0IGhpZGRlbi14cyBoaWRkZW4tc20gaGlkZGVuLW1kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48c3BhbiBpZD0icHJpbnRJY29uIiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1wcmludCIgb25jbGljaz0id2luZG93LnByaW50KCk7Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgPC91bD4NCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItZGVmYXVsdCBzaWRlYmFyIiByb2xlPSJuYXZpZ2F0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNpZGViYXItbmF2IG5hdmJhci1jb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYiIGlkPSJzaWRlLW1lbnUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLnNpZGViYXItY29sbGFwc2UgLS0+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLXN0YXRpYy1zaWRlIC0tPg0KICAgICAgICAgICAgICAgIDwvbmF2Pg0KICAgICAgICAgICAgICAgIDxkaXYgaWQ9InBhZ2Utd3JhcHBlciI+DQoNCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyLWZsdWlkIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgDQoNCg0KPGRpdiBjbGFzcz0icGFnZS1oZWFkZXIiPg0KPGgyPkRpc2NsYWltZXI8L2gyPg0KPC9kaXY+DQoNCjxkaXYgaWQ9InNjcm9sbGFibGVDb250ZW50Ij4NCjxoMz5EQXMgT25saW5lIC0gRGV2ZWxvcG1lbnQgQXBwbGljYXRpb25zPC9oMz4NCjxwPiZuYnNwOzwvcD4NCjxoND5Db3B5cmlnaHQ8L2g0Pg0KPHAgY2xhc3M9InNlY3Rpb24iPk1hc3RlcnZpZXcgc29mdHdhcmUgKHJlZmVycmVkIHRvIGluIHRoZXNlIHRlcm1zIGFuZCBjb25kaXRpb25zIGFzIERBcyBPbmxpbmUpIENvcHlyaWdodCAmIzE2OTsgMjAxNyBDaXZpY2EgUHR5IExpbWl0ZWQgd2l0aCBhIG5vbi1leGNsdXNpdmUgbGljZW5jZSB0byBHeW1waWUgUmVnaW9uYWwgQ291bmNpbC4NCkV4Y2VwdCBmb3IgdGhlIHB1cnBvc2UgZXhwcmVzc2x5IHN0YXRlZCBiZWxvdyBhbmQgZm9yIHB1cnBvc2VzIHBlcm1pdHRlZCBieSB0aGUgQ29weXJpZ2h0IEFjdCAxOTY4IChDdGgpLCByZXByb2R1Y3Rpb24sIHB1YmxpY2F0aW9uLCBjb21tdW5pY2F0aW9uIHRvIHRoZSBwdWJsaWMsIGFkYXB0YXRpb24sIHNlbGxpbmcsIHJlLXRyYW5zbWlzc2lvbiwgcmVmcmFtaW5nLCBsaW5raW5nLCBjb21tZXJjaWFsIG9yIG90aGVyIHVzZSAod2hldGhlciBmb3IgY29tcGVuc2F0aW9uIG9mIGFueSBraW5kIG9yIG5vdCkgb2YgZG9jdW1lbnRzLCBjb250ZW50IG9yIGluZm9ybWF0aW9uIG1hZGUgYXZhaWxhYmxlIHVzaW5nIERBcyBPbmxpbmUgYnkgd2hhdGV2ZXIgbWVhbnMgaXMgcHJvaGliaXRlZCB1bmxlc3MgdGhlIHdyaXR0ZW4gY29uc2VudCBvZiB0aGUgQ29weXJpZ2h0IG93bmVyIGlzIG9idGFpbmVkLg0KREFzIE9ubGluZSB1c2VycyBhcmUgZXhwcmVzc2x5IHBlcm1pdHRlZCB0byByZXByb2R1Y2UgdGhlIGNvbnRlbnRzIG9mIHRoZSBEQXMgT25saW5lIHdlYnNpdGUgaW4gdGhlaXIgd2ViIGJyb3dzZXIgKGFuZCBpbiBhbnkgY2FjaGUgZmlsZSBwcm9kdWNlZCBieSB0aGVpciB3ZWIgYnJvd3NlcikgZm9yIHRoZSBzb2xlIHB1cnBvc2Ugb2YgdGhlaXIgcGVyc29uYWwgbm9uLWNvbW1lcmNpYWwgdmlld2luZyBvZiB0aGUgY29udGVudCBhbmQgcHJpbnRpbmcgb2YgZG9jdW1lbnRhdGlvbi4NCiA8L3A+DQo8cD4mbmJzcDs8L3A+DQogPGg0PkRpc2NsYWltZXI8L2g0Pg0KDQo8cCBjbGFzcz0ic2VjdGlvbiI+VGhlIGluZm9ybWF0aW9uIHByb3ZpZGVkIGJ5IERBcyBPbmxpbmUgaXMgbWFkZSBhdmFpbGFibGUgYXMgYSBnZW5lcmFsIHJlZmVyZW5jZSBzb3VyY2Ugb25seS4NCkRBcyBPbmxpbmUgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQsIGFuZCBtdXN0IG5vdCBiZSB1c2VkLCBmb3IgZm9ybWFsIHB1cnBvc2VzIHN1Y2ggYXMgZm9yIHRoZSBwdXJwb3NlcyBvZiBwcm9wZXJ0eSB0cmFuc2FjdGlvbnMgb3Igc2V0dGxlbWVudHMuIEFjY2VzcyB0byBkb2N1bWVudHMgYW5kIGluZm9ybWF0aW9uIGZvciBmb3JtYWwgcHVycG9zZXMgbXVzdCBiZSBvYnRhaW5lZCB0aHJvdWdoIENvdW5jaWwncyBmb3JtYWwgZG9jdW1lbnQgc2VhcmNoIHByb2NlZHVyZXMsIG5vdCB0aHJvdWdoIERBcyBPbmxpbmUuRm9yIGZ1cnRoZXIgaW5mb3JtYXRpb24gb24gUHJvcGVydHkgU2VhcmNoZXMsIHBsZWFzZSByZWZlciB0byBDb3VuY2lsJ3Mgd2Vic2l0ZSBhdCA8YSBocmVmPSJodHRwczovL3d3dy5neW1waWUucWxkLmdvdi5hdS9zZWFyY2hlcyIgdGFyZ2V0PSJfYmxhbmsiPnd3dy5neW1waWUucWxkLmdvdi5hdS9zZWFyY2hlczwvYT4uPC9wPg0KDQo8cCBjbGFzcz0ic2VjdGlvbiI+Q291bmNpbCBtYWtlcyBubyByZXByZXNlbnRhdGlvbnMgYW5kIGdpdmVzIG5vIHdhcnJhbnRpZXMgKGV4cHJlc3Mgb3IgaW1wbGllZCkgYWJvdXQgdGhlIGluZm9ybWF0aW9uIChpbmNsdWRpbmcgYWNjdXJhY3ksIHJlbGlhYmlsaXR5LCBjb21wbGV0ZW5lc3MsIHF1YWxpdHksIG1lcmNoYW50YWJpbGl0eSwgZml0bmVzcyBvciBzdWl0YWJpbGl0eSkgZm9yIGFueSBwdXJwb3NlIG5vciB0aGF0IGFjY2VzcyB0byBhbmQgdXNlIG9mIHRoaXMgd2Vic2l0ZSBvciBzeXN0ZW0gaXMgZnJlZSBmcm9tIGNvbXB1dGVyIHZpcnVzZXMgb3Igb3RoZXIgaW5mZWN0aW9ucyBvciBjb250YW1pbmF0aW9ucy4gTm8gbGlhYmlsaXR5IGlzIGFjY2VwdGVkIGJ5IHRoZSBDb3VuY2lsIChpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uLCB3aGV0aGVyIGluIGFuIGFjdGlvbiBvZiBjb250cmFjdCwgbmVnbGlnZW5jZSBvciBvdGhlciB0b3J0aW91cyBhY3Rpb24pIGZvciBhbnkgbG9zcywgZGFtYWdlIG9yIGNvc3RzIChpbmNsdWRpbmcgY29uc2VxdWVudGlhbCwgc3BlY2lhbCBvciBpbmRpcmVjdCBkYW1hZ2VzKSByZWxhdGluZyB0byBhY2Nlc3MgdG8sIHVzZSBvZiwgb3IgcmVsaWFuY2UgdXBvbiB0aGUgaW5mb3JtYXRpb24gb2J0YWluZWQgdXNpbmcgREFzIE9ubGluZS48L3A+DQo8cCBjbGFzcz0ic2VjdGlvbiI+VGhlIGluZm9ybWF0aW9uIHByb3ZpZGVkIG9uIHRoaXMgd2ViIHNpdGUgaXMgdG8gYXNzaXN0IGN1c3RvbWVycyBpbiB0cmFja2luZyBwcm9ncmVzcyBvZiB0aGUgRGV2ZWxvcG1lbnQgQXBwbGljYXRpb25zLiBJdCByZXByZXNlbnRzIGtleSBtaWxlc3RvbmVzIGluIHRoZSBEZXZlbG9wbWVudCBBcHBsaWNhdGlvbiBwcm9jZXNzIGJ1dCBpcyBub3QgYSBkZXRhaWxlZCBoaXN0b3J5LiBIb3dldmVyLCBwdXJjaGFzaW5nIGRlY2lzaW9ucyBzaG91bGQgbm90IHJlbHkgb24gdGhlIGluZm9ybWF0aW9uIGNvbnRhaW5lZCBvbiB0aGlzIHdlYiBzaXRlLiBQZXJzb25zIHdpc2hpbmcgdG8gY29uZmlybSBpbmZvcm1hdGlvbiBpbiBkZXRhaWwgc2hvdWxkIGNvbnRhY3QgQ291bmNpbCB2aWEgZWl0aGVyIGVtYWlsLCBvciBpbiB3cml0aW5nIGluIG9yZGVyIHRvIG9idGFpbiBhIHdyaXR0ZW4gcmVzcG9uc2UuPC9wPg0KDQo8cCBjbGFzcz0ic2VjdGlvbiI+DQpGb3IgZGV2ZWxvcG1lbnQgYXBwbGljYXRpb25zIHJlY2VpdmVkIHByaW9yIHRvIDMgSnVseSAyMDE3LCBvbmx5IHRoZSBkZWNpc2lvbiBub3RpY2UgYW5kIGFwcHJvdmVkIHBsYW5zLCB3aGVyZSByZWxldmFudCwgd2lsbCBiZSBtYWRlIGF2YWlsYWJsZS4NCjwvcD4NCjxwIGNsYXNzPSJzZWN0aW9uIj4NCkRldmVsb3BtZW50IEFwcGxpY2F0aW9ucyByZWxhdGluZyB0byB0aGUgZm9ybWVyIFNoaXJlcyBvZiBLaWxraXZhbiBhbmQgVGlhcm8gKERpdmlzaW9uIDMpLCBwcmlvciB0byB0aGVpciBhbWFsZ2FtYXRpb24gaW50byBHeW1waWUgUmVnaW9uYWwgQ291bmNpbCBvbiAxNSBNYXJjaCAyMDA4LCBhcmUgbm90IGRpc3BsYXllZC4NCjwvcD4NCjxwIGNsYXNzPSJzZWN0aW9uIj4NCk5vdGU6IEFwcGxpY2F0aW9ucyBmb3IgQnVpbGRpbmcgV29yayBvciBQbHVtYmluZyBhbmQgRHJhaW5hZ2UgV29yayBhcmUgbm90IGluY2x1ZGVkLiANCjwvcD4NCjxwIGNsYXNzPSJzZWN0aW9uIj4NClRoZXJlIGlzIG5vIG9ubGluZSBsb2RnZW1lbnQgc2VydmljZSBwcm92aWRlZCBieSB0aGlzIGZhY2lsaXR5Lg0KPC9wPg0KPHA+Jm5ic3A7PC9wPg0KIDxoND5JbmZvcm1hdGlvbiBwcml2YWN5PC9oND4NCg0KPHAgY2xhc3M9InNlY3Rpb24iPkRBcyBPbmxpbmUgbWF5IHJlY29yZCBzb21lIGluZm9ybWF0aW9uIGFib3V0IGVhY2ggYWNjZXNzIHRvIERBcyBPbmxpbmUgKGZvciBleGFtcGxlLCB0aGUgbFAgYWRkcmVzcyBvZiB0aGUgY29tcHV0ZXIgZnJvbSB3aGljaCBEQXMgT25saW5lIGlzIGFjY2Vzc2VkLCB0aGUgZGF0ZSBhbmQgdGltZSBvZiBhY2Nlc3MsIGFuZCB0aGUgcGFnZXMsIGRvY3VtZW50cyBvciBpbmZvcm1hdGlvbiBhY2Nlc3NlZCkuIFRoaXMgaW5mb3JtYXRpb24gaXMgdXNlZCBmb3Igc3RhdGlzdGljYWwgYW5kIHNpdGUgZGV2ZWxvcG1lbnQgcHVycG9zZXMuPC9wPg0KPHAgY2xhc3M9InNlY3Rpb24iPkV4Y2VwdCBmb3IgaW5mb3JtYXRpb24gc3BlY2lmaWNhbGx5IHByb3ZpZGVkIGJ5IHVzZXJzLCB0aGUgQ291bmNpbCBkb2VzIG5vdCBjb2xsZWN0IGFueSBvdGhlciBwZXJzb25hbCBpbmZvcm1hdGlvbiBkdXJpbmcgdXNlIG9mIERBcyBPbmxpbmUuIEFueSBwZXJzb25hbCBpbmZvcm1hdGlvbiBzcGVjaWZpY2FsbHkgcHJvdmlkZWQgd2lsbCBub3QgYmUgZGlzY2xvc2VkIHRvIHRoaXJkIHBhcnRpZXMgZXhjZXB0IHdpdGggdGhlIGNvbnNlbnQgb2YgdGhlIHN1YmplY3QgdXNlciwgb3Igd2hlcmUgcmVxdWlyZWQgYnkgbGF3LjwvcD4NCjxwIGNsYXNzPSJzZWN0aW9uIj5UaGUgQ291bmNpbCB0YWtlcyBzdGVwcyB0byBtYWludGFpbiB0aGUgY3VycmVuY3kgYW5kIGFjY3VyYWN5IG9mIHRoZSBwZXJzb25hbCBpbmZvcm1hdGlvbiBpdCBob2xkcy4gSWYgdXNlcnMgcmVxdWlyZSBhY2Nlc3MgdG8gYW55IHBlcnNvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZW0gdGhhdCBtYXkgaGVsZCBieSB0aGUgQ291bmNpbCwgb3IgaWYgdXNlcnMgaGF2ZSBhbnkgb3RoZXIgcXVlc3Rpb25zIGFib3V0IGluZm9ybWF0aW9uIHByaXZhY3ksIGVtYWlsIENvdW5jaWwuIDwvcD4NCjxwIGNsYXNzPSJzZWN0aW9uIj5Gb3IgZnVydGhlciBpbmZvcm1hdGlvbiBvbiBDb3VuY2lsJ3MgUHJpdmFjeSBTdGF0ZW1lbnQgYW5kIEluZm9ybWF0aW9uIFByaXZhY3kgUG9saWN5IHJlZmVyIHRvIENvdW5jaWwncyB3ZWJzaXRlIGF0IDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmd5bXBpZS5xbGQuZ292LmF1L3ByaXZhY3ktc3RhdGVtZW50IiB0YXJnZXQ9Il9ibGFuayI+d3d3Lmd5bXBpZS5xbGQuZ292LmF1L3ByaXZhY3ktc3RhdGVtZW50PC9hPi48L3A+DQo8cD4mbmJzcDs8L3A+DQo8aDQ+UmlnaHQgdG8gZ3JhbnQgb3IgcmVmdXNlIGFjY2VzczwvaDQ+DQoNCjxwIGNsYXNzPSJzZWN0aW9uIj5BY2Nlc3MgdG8gdGhlIFBsYW5uaW5nIGFuZCBEZXZlbG9wbWVudCBPbmxpbmUgc3lzdGVtIGlzIGF0IHRoZSBkaXNjcmV0aW9uIG9mIENvdW5jaWwuIENvdW5jaWwgcmVzZXJ2ZXMgdGhlIHJpZ2h0IHRvIHJlZnVzZSB0byBhbGxvdyBhY2Nlc3MgdG8gYW55IHBhcnQgb2YgdGhlIFBsYW5uaW5nIGFuZCBEZXZlbG9wbWVudCBPbmxpbmUgc3lzdGVtIHdpdGhvdXQgcHJpb3Igbm90aWNlLCBhbmQgd2l0aG91dCB0aGUgbmVlZCB0byBnaXZlIGFueSByZWFzb24gZm9yIGRvaW5nIHNvLjwvcD4NCjxwPiZuYnNwOzwvcD4NCjxoND5TeXN0ZW0gUmVxdWlyZW1lbnRzPC9oND4NCg0KPHAgY2xhc3M9InNlY3Rpb24iPlRoZSBEQXMgT25saW5lIHRvb2wgaGFzIGJlZW4gdGVzdGVkIGFuZCBjZXJ0aWZpZWQgdG8gZnVuY3Rpb24gY29ycmVjdGx5IGluIGFsbCBtb2Rlcm4gYnJvd3NlcnMuIFNvbWUgZnVuY3Rpb25hbGl0eSwgZS5nLiBtYXBwaW5nLCB2aWV3aW5nIG9mIGRvY3VtZW50cywgbWF5IHJlcXVpcmUgYWRkaXRpb25hbCBzb2Z0d2FyZSB0byBiZSBpbnN0YWxsZWQuIENvdW5jaWwgaXMgbm90IGluIGEgcG9zaXRpb24gdG8gcHJvdmlkZSBzb2Z0d2FyZSBjb21wYXRpYmlsaXR5IHN1cHBvcnQuPC9wPg0KDQo8cCBjbGFzcz0ic2VjdGlvbiI+SWYgeW91IGRvIG5vdCBoYXZlIE1pY3Jvc29mdCBPZmZpY2Ugb3IgYXJlIHVzaW5nIGFuIEFwcGxlIE1hYyBhbmQgYXJlIHVuYWJsZSB0byBvcGVuIE1TRyBmaWxlcywgcGxlYXNlIHVzZSBhIHZpZXdlciBzdWNoIGFzIDxhIGhyZWY9Imh0dHBzOi8vc291cmNlZm9yZ2UubmV0L3Byb2plY3RzL21zZ3ZpZXdlci8iIHRhcmdldD0iX2JsYW5rIj5Nc2dWaWV3ZXI8L2E+IG9yIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmNvb2x1dGlscy5jb20vTWFpbFZpZXdlciIgdGFyZ2V0PSJfYmxhbmsiPk1haWwgVmlld2VyPC9hPiBJcGFkIHVzZXJzIHNlYXJjaCB0aGUgYXBwIHN0b3JlIGZvciBNU0cgdmlld2VycyBzdWNoIGFzIEtsYW1tZXIuPC9wPg0KDQo8cD4mbmJzcDs8L3A+DQo8L2Rpdj4NCg0KPHAgY2xhc3M9InNlY3Rpb24iPg0KPC9icj4NCjxiPkkgaGF2ZSByZWFkIGFuZCB1bmRlcnN0b29kIHRoZSBwcm92aXNpb25zIHNldCBvdXQgYWJvdmUuPC9iPg0KPC9wPg0KPC9icj4NCg0KDQoNCg0KPGZvcm0gYWN0aW9uPSIvSG9tZS9EaXNjbGFpbWVyUHJvY2Vzc2luZyIgaWQ9ImRpc2NsYWltZXItZm9ybSIgbWV0aG9kPSJwb3N0Ij48aW5wdXQgaWQ9ImFncmVlZCIgbmFtZT0iYWdyZWVkIiB0eXBlPSJoaWRkZW4iIHZhbHVlPSJGYWxzZSIgLz4gICAgPGRpdiBpZD0iYnRucyI+DQogICAgICAgIDxidXR0b24gaWQ9ImFncmVlIiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIGZvcm09ImRpc2NsYWltZXItZm9ybSI+QWdyZWU8L2J1dHRvbj4NCiAgICAgICAgPGJ1dHRvbiBpZD0iZGlzYWdyZWUiIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4td2FybmluZyIgZm9ybT0iZGlzY2xhaW1lci1mb3JtIj5EaXNhZ3JlZTwvYnV0dG9uPg0KICAgIDwvZGl2Pg0KPC9mb3JtPg0KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KDQogICAgdmFyIGxhc3RTY3JvbGxUb3A7DQogICAgdmFyIG1heFNjcm9sbGFibGVDb250ZW50SGVpZ2h0Ow0KDQogICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkgew0KDQogICAgICAgIHVwZGF0ZUxlZnRNYXJnaW4oKTsNCiAgICAgICAgYXR0YWNoQ2xpY2tIYW5kbGVycygpOw0KDQogICAgICAgIGlmIChpc1RleHRCbG9ja092ZXJmbG93aW5nKCkpIHsNCiAgICAgICAgICAgIGxhc3RTY3JvbGxUb3AgPSAwOzsNCiAgICAgICAgICAgIHZhciB3aW5kb3dIZWlnaHQgPSAkKHdpbmRvdykuaGVpZ2h0KCk7DQoNCiAgICAgICAgICAgIHZhciBoZWFkZXJIZWlnaHQgPSAkKCcjc2Nyb2xsYWJsZUNvbnRlbnQnKS5vZmZzZXQoKS50b3A7DQogICAgICAgICAgICB2YXIgbmV3SGVpZ2h0ID0gZ2V0TmV3SGVpZ2h0KCk7DQoNCiAgICAgICAgICAgIGFkanVzdERpc2NsYWltZXJDb250ZW50Rm9yRG93blNjcm9sbChuZXdIZWlnaHQpOw0KDQogICAgICAgICAgICAkKHdpbmRvdykuc2Nyb2xsKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICB2YXIgbkhlaWdodCA9ICQod2luZG93KS5oZWlnaHQoKSAtIChoZWFkZXJIZWlnaHQgLSAkKHdpbmRvdykuc2Nyb2xsVG9wKCkgKyAkKCdmb3JtJykuaGVpZ2h0KCkgKyAxMDApOw0KDQogICAgICAgICAgICAgICAgdmFyIGJJc0Rvd25TY3JvbGwgPSBpc1Njcm9sbERvd24oKTsNCg0KICAgICAgICAgICAgICAgIGlmIChiSXNEb3duU2Nyb2xsKQ0KICAgICAgICAgICAgICAgICAgICBhZGp1c3REaXNjbGFpbWVyQ29udGVudEZvckRvd25TY3JvbGwobkhlaWdodCk7DQogICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgICAgICBhZGp1c3REaXNjbGFpbWVyQ29udGVudEZvclVwU2Nyb2xsKG5IZWlnaHQpOw0KICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIGdldE5ld0hlaWdodCgpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gJCh3aW5kb3cpLmhlaWdodCgpIC0gKGhlYWRlckhlaWdodCArICQod2luZG93KS5zY3JvbGxUb3AoKSArICQoJ2Zvcm0nKS5oZWlnaHQoKSArIDEwMCk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIGlzU2Nyb2xsRG93bigpIHsNCiAgICAgICAgICAgICAgICB2YXIgc3QgPSAkKHdpbmRvdykuc2Nyb2xsVG9wKCk7DQogICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHN0ID49IGxhc3RTY3JvbGxUb3A7CQkgIC8vIGRvd25zY3JvbGwNCg0KICAgICAgICAgICAgICAgIGxhc3RTY3JvbGxUb3AgPSBzdDsNCiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0Ow0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBmdW5jdGlvbiBoYXNTY3JvbGxCYXIoaXRlbSkgew0KICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLmdldCgwKS5zY3JvbGxIZWlnaHQgPiBpdGVtLmdldCgwKS5jbGllbnRIZWlnaHQ7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIGFkanVzdERpc2NsYWltZXJDb250ZW50Rm9yRG93blNjcm9sbChuSGVpZ2h0KSB7DQogICAgICAgICAgICAgICAgdmFyIGlzU2Nyb2xsYWJsZSA9IGhhc1Njcm9sbEJhcigkKCcjc2Nyb2xsYWJsZUNvbnRlbnQnKSk7DQogICAgICAgICAgICAgICAgaWYgKGlzU2Nyb2xsYWJsZSkgew0KICAgICAgICAgICAgICAgICAgICAkKCcjc2Nyb2xsYWJsZUNvbnRlbnQnKS5oZWlnaHQobkhlaWdodCk7DQogICAgICAgICAgICAgICAgICAgIG1heFNjcm9sbGFibGVDb250ZW50SGVpZ2h0ID0gbkhlaWdodDsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIGFkanVzdERpc2NsYWltZXJDb250ZW50Rm9yVXBTY3JvbGwobkhlaWdodCkgew0KICAgICAgICAgICAgICAgIHZhciBpc1Njcm9sbGFibGUgPSBoYXNTY3JvbGxCYXIoJCgnI3Njcm9sbGFibGVDb250ZW50JykpOw0KDQogICAgICAgICAgICAgICAgaWYgKG1heFNjcm9sbGFibGVDb250ZW50SGVpZ2h0ID4gbkhlaWdodCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICQoJyNzY3JvbGxhYmxlQ29udGVudCcpLmhlaWdodChuSGVpZ2h0KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9KTsNCg0KDQogICAgZnVuY3Rpb24gdXBkYXRlTGVmdE1hcmdpbigpIHsNCiAgICAgICAgaWYgKCQoJyNzaWRlLW1lbnUnKS5odG1sKCkpIHsNCiAgICAgICAgICAgICQoJyNwYWdlLXdyYXBwZXInKS5jc3MoeyAnbWFyZ2luLWxlZnQnOiAnMCcgfSk7DQogICAgICAgICAgICAkKCcuc2lkZWJhcicpLmhpZGUoKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KDQogICAgZnVuY3Rpb24gYXR0YWNoQ2xpY2tIYW5kbGVycygpIHsNCiAgICAgICAgJCgnI2FncmVlJykuY2xpY2soZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgJCgnI2FncmVlZCcpLnZhbCgidHJ1ZSIpOw0KICAgICAgICAgICAgJCgnI2Rpc2NsYWltZXItZm9ybScpLnN1Ym1pdCgpOw0KICAgICAgICB9KTsNCg0KICAgICAgICAkKCcjZGlzYWdyZWUnKS5jbGljayhmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAkKCcjYWdyZWVkJykudmFsKCJmYWxzZSIpOw0KICAgICAgICAgICAgJCgnI2Rpc2NsYWltZXItZm9ybScpLnN1Ym1pdCgpOw0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBpc1RleHRCbG9ja092ZXJmbG93aW5nKCkgew0KICAgICAgICByZXR1cm4gJCgiI3Njcm9sbGFibGVDb250ZW50IikucHJvcCgnc2Nyb2xsSGVpZ2h0JykgPiAkKCIjc2Nyb2xsYWJsZUNvbnRlbnQiKS5oZWlnaHQoKTsNCiAgICB9DQo8L3NjcmlwdD4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwhLS0gLy5jb250YWluZXItZmx1aWQgLS0+DQoNCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8jcGFnZS13cmFwcGVyIC0tPg0KICAgICAgICAgICAgPC9kaXY+DQoNCg0KICAgICAgICAgICAgPGRpdiBpZD0iR3JlZW5CYXIiPg0KICAgICAgICAgICAgICAgIDxhIHN0eWxlPSJjdXJzb3I6ZGVmYXVsdCI+IENvcHlyaWdodCDCqSAyMDE4IENpdmljYSB8IDwvYT4NCiAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5neW1waWUucWxkLmdvdi5hdS9kaXNjbGFpbWVyIiB0YXJnZXQ9Il9wYXJlbnQiPkNvcHlyaWdodCBhbmQgRGlzY2xhaW1lcjwvYT4NCiAgICAgICAgICAgICAgICA8YSBzdHlsZT0iY3Vyc29yOmRlZmF1bHQiPiB8IDwvYT4NCiAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5neW1waWUucWxkLmdvdi5hdS9wcml2YWN5LXN0YXRlbWVudCIgdGFyZ2V0PSJfcGFyZW50Ij5Qcml2YWN5IFN0YXRlbWVudDwvYT4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGRpdj4gPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KDQogICAgPGRpdiBpZD0idGlwdGlwX2hvbGRlciIgc3R5bGU9Im1heC13aWR0aDozMDBweDsiPjxkaXYgaWQ9InRpcHRpcF9hcnJvdyI+PGRpdiBpZD0idGlwdGlwX2Fycm93X2lubmVyIj48L2Rpdj48L2Rpdj48ZGl2IGlkPSJ0aXB0aXBfY29udGVudCI+PC9kaXY+PC9kaXY+DQo8L2JvZHk+DQoNCjxzY3JpcHQgYXN5bmMgc3JjPSJodHRwczovL3d3dy5nb29nbGV0YWdtYW5hZ2VyLmNvbS9ndGFnL2pzP2lkPVVBLTEyMTc3Mzc3Ny0xIj48L3NjcmlwdD4NCjxzY3JpcHQ+DQoJd2luZG93LmRhdGFMYXllciA9IHdpbmRvdy5kYXRhTGF5ZXIgfHwgW107DQoJZnVuY3Rpb24gZ3RhZygpe2RhdGFMYXllci5wdXNoKGFyZ3VtZW50cyk7fQ0KCWd0YWcoJ2pzJywgbmV3IERhdGUoKSk7DQoNCglndGFnKCdjb25maWcnLCAnVUEtMTIxNzczNzc3LTEnKTsNCjwvc2NyaXB0Pg0KPC9odG1sPg0K
  recorded_at: Mon, 21 Apr 2025 18:19:49 GMT
- request:
    method: post
    uri: https://daonline.gympie.qld.gov.au/Home/DisclaimerProcessing
    body:
      encoding: UTF-8
      string: agreed=true
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=2v2zqzjgoc4mnsdtfbngewe2
      Host:
      - daonline.gympie.qld.gov.au
      Referer:
      - https://daonline.gympie.qld.gov.au/Home/Disclaimer
      Content-Type:
      - application/x-www-form-urlencoded
      Content-Length:
      - '11'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Application/ApplicationDetails/007.2019.00001896.001"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      Set-Cookie:
      - User=accessAllowed-MasterView=True; path=/
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:19:48 GMT
      Content-Length:
      - '170'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Application/ApplicationDetails/007.2019.00001896.001\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:19:49 GMT
- request:
    method: get
    uri: https://daonline.gympie.qld.gov.au/Application/ApplicationDetails/007.2019.00001896.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=2v2zqzjgoc4mnsdtfbngewe2; User=accessAllowed-MasterView=True
      Host:
      - daonline.gympie.qld.gov.au
      Referer:
      - https://daonline.gympie.qld.gov.au/Home/Disclaimer
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:19:48 GMT
      Content-Length:
      - '30907'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:19:49 GMT
- request:
    method: get
    uri: https://daonline.gympie.qld.gov.au/Application/ApplicationDetails/007.2019.00001896.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=2v2zqzjgoc4mnsdtfbngewe2; User=accessAllowed-MasterView=True
      Host:
      - daonline.gympie.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:19:49 GMT
      Content-Length:
      - '30907'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:19:50 GMT
- request:
    method: get
    uri: https://daonline.gympie.qld.gov.au/Application/ApplicationDetails/008.2019.00001839.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - daonline.gympie.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 302
      message: Found
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Home/Disclaimer"
      Server:
      - Microsoft-IIS/8.5
      Set-Cookie:
      - ASP.NET_SessionId=3hky22g0fypj4s5mjytw443v; path=/; HttpOnly; SameSite=Lax
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:19:49 GMT
      Content-Length:
      - '133'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Home/Disclaimer\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:19:50 GMT
- request:
    method: get
    uri: https://daonline.gympie.qld.gov.au/Home/Disclaimer
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=3hky22g0fypj4s5mjytw443v
      Host:
      - daonline.gympie.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:19:49 GMT
      Content-Length:
      - '16047'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQo8aHRtbCBsYW5nPSJlbiI+DQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+DQogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4NCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPg0KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIj4NCiAgICA8bWV0YSBuYW1lPSJrZXl3b3JkcyIgY29udGVudD0iR3ltcGllIFJlZ2lvbmFsIENvdW5jaWwsREEgVHJhY2tlcixEZXZlbG9wbWVudCBBcHBsaWNhdGlvbixEZXZlbG9wbWVudCBBcHBsaWNhdGlvbiBUcmFja2luZywgREEgRW5xdWlyeSwgRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24gRW5xdWlyeSwgQXBwbGljYXRpb24gVHJhY2tlciI+DQogICAgPG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iIGNvbnRlbnQ9IlRoZSBvZmZpY2lhbCBHeW1waWUgUmVnaW9uYWwgQ291bmNpbCBBcHBsaWNhdGlvbiBUcmFja2VyIj4NCg0KICAgIDx0aXRsZT5HeW1waWUgUmVnaW9uYWwgQ291bmNpbCAtIEFwcGxpY2F0aW9uIFRyYWNrZXI8L3RpdGxlPg0KDQogICAgPCEtLWZhdmljb24tLT4NCiAgICA8bGluayBocmVmPSIvZmF2aWNvbi5pY28iIHJlbD0ic2hvcnRjdXQgaWNvbiIgdHlwZT0iaW1hZ2UveC1pY29uIj4NCg0KICAgIDwhLS0galF1ZXJ5IC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvU2NyaXB0cy9qcXVlcnktMS4xMS4xLmpzIj48L3NjcmlwdD4NCg0KICAgIDxzY3JpcHQgc3JjPSIvU2NyaXB0cy9qcXVlcnktdWktMS4xMS4yLmpzIj48L3NjcmlwdD4NCg0KICAgIDxsaW5rIGhyZWY9Ii9Db250ZW50L3RoZW1lcy9iYXNlL2NvcmUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9Db250ZW50L3RoZW1lcy9iYXNlL2FjY29yZGlvbi5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvdGhlbWUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPCEtLSBCb290c3RyYXAgLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2Jvb3RzdHJhcC5qcyI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9ib290c3RyYXAtdGhlbWUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9Db250ZW50L2Jvb3RzdHJhcC5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQogICAgPGxpbmsgaHJlZj0iL0NvbnRlbnQvZm9udC1hd2Vzb21lLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDwhLS0gRGF0YVRhYmxlcyAtLT4NCiAgICA8c2NyaXB0IHNyYz0iL1NjcmlwdHMvRGF0YVRhYmxlcy9qcXVlcnkuZGF0YVRhYmxlcy5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL1NjcmlwdHMvRGF0YVRhYmxlcy9kYXRhVGFibGVzLmJvb3RzdHJhcC5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL1NjcmlwdHMvRGF0YVRhYmxlcy9kYXRhVGFibGVzLnJlc3BvbnNpdmUuanMiPjwvc2NyaXB0Pg0KDQogICAgDQogICAgPGxpbmsgaHJlZj0iL0NvbnRlbnQvRGF0YVRhYmxlcy9jc3MvZGF0YVRhYmxlcy5ib290c3RyYXAuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9Db250ZW50L0RhdGFUYWJsZXMvY3NzL2RhdGFUYWJsZXMucmVzcG9uc2l2ZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvRGF0YVRhYmxlcy9jc3MvZGF0YVRhYmxlcy5yZXNwb25zaXZlLnNjc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQoNCiAgICA8IS0tIEJvb3RzdHJhcCBTQi1BZG1pbi0yIFBsdWdpbiBhbmQgb3RoZXIgY3NzIGFuZCBqcyBmaWxlcy0tPg0KICAgIDxzY3JpcHQgc3JjPSIvanMvYm9vdHN0cmFwLWNvbWJvYm94LmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvYm9vdHN0cmFwLWRhdGVwaWNrZXIuanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9qcy9ib290c3RyYXAtZGlhbG9nLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvanF1ZXJ5LmZvcm0uanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9qcy9qcXVlcnkudGFibGVzb3J0ZXIuanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9qcy9tYXN0ZXJ2aWV3LmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvbWV0aXNNZW51LmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvc2ItYWRtaW4tMi5qcyI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvY3NzL2Jvb3RzdHJhcC1jb21ib2JveC5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL2Nzcy9kYXRlcGlja2VyMy5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL2Nzcy9tYXN0ZXJ2aWV3LWN1c3RvbWlzYXRpb25zLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvY3NzL3NiLWFkbWluLTIuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPGxpbmsgaHJlZj0iL0NvdW5jaWxfVGhlbWUvZ3ltcGllL2d5bXBpZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQogICAgDQoNCiAgICA8IS0tIEhUTUw1IFNoaW0gYW5kIFJlc3BvbmQuanMgSUU4IHN1cHBvcnQgb2YgSFRNTDUgZWxlbWVudHMgYW5kIG1lZGlhIHF1ZXJpZXMgLS0+DQogICAgPCEtLSBXQVJOSU5HOiBSZXNwb25kLmpzIGRvZXNuJ3Qgd29yayBpZiB5b3UgdmlldyB0aGUgcGFnZSB2aWEgZmlsZTovLyAtLT4NCiAgICA8IS0tW2lmIGx0IElFIDldPg0KICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9vc3MubWF4Y2RuLmNvbS9saWJzL2h0bWw1c2hpdi8zLjcuMC9odG1sNXNoaXYuanMiPjwvc2NyaXB0Pg0KICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9vc3MubWF4Y2RuLmNvbS9saWJzL3Jlc3BvbmQuanMvMS40LjIvcmVzcG9uZC5taW4uanMiPjwvc2NyaXB0Pg0KICAgIDwhW2VuZGlmXS0tPg0KPC9oZWFkPg0KDQoNCg0KPGJvZHk+DQogICAgPGRpdiBjbGFzcz0icHVzaG1lbnUgY2JwLXNwbWVudS1wdXNoIj4NCiAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4NCiAgICAgICAgICAgIDxoZWFkZXIgaWQ9IkhlYWRlciI+DQogICAgICAgICAgICAgICAgPG5hdiBjbGFzcz0ibmF2YmFyIG5hdmJhci1kZWZhdWx0IiByb2xlPSJuYXZpZ2F0aW9uIiBpZD0iTmF2QmFyIj4NCiAgICAgICAgICAgICAgICAgICAgPCEtLSBCcmFuZCBhbmQgdG9nZ2xlIGdldCBncm91cGVkIGZvciBiZXR0ZXIgbW9iaWxlIGRpc3BsYXkgLS0+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZnIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idXRpbHMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly93d3cuZ3ltcGllLnFsZC5nb3YuYXUiPkhvbWU8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vd3d3Lmd5bXBpZS5xbGQuZ292LmF1L2NvbnRhY3QtdXMiPkNvbnRhY3QgVXM8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8aDEgaWQ9ImxvZ28iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmd5bXBpZS5xbGQuZ292LmF1Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9Db3VuY2lsX1RoZW1lL2d5bXBpZS9sb2dvLnBuZyIgYWx0PSJHeW1waWUgUmVnaW9uYWwgQ291bmNpbCI+PHN0cm9uZyBjbGFzcz0idmgiPkd5bXBpZSBSZWdpb25hbCBDb3VuY2lsPC9zdHJvbmc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9oMT4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9uYXY+DQogICAgICAgICAgICA8L2hlYWRlcj4NCg0KICAgICAgICAgICAgPGRpdiBpZD0iY29udGVudCI+DQogICAgICAgICAgICAgICAgPCEtLSBOYXZpZ2F0aW9uIC0tPg0KICAgICAgICAgICAgICAgIDxuYXYgY2xhc3M9Im5hdmJhciBuYXZiYXItZGVmYXVsdCBuYXZiYXItc3RhdGljLXRvcCIgcm9sZT0ibmF2aWdhdGlvbiIgc3R5bGU9Im1hcmdpbi1ib3R0b206IDAiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0ibmF2YmFyLXRvZ2dsZSIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLXRhcmdldD0iLm5hdmJhci1jb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPlRvZ2dsZSBuYXZpZ2F0aW9uPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2YmFyLWJyYW5kIiBocmVmPSIvSG9tZS9JbmRleCI+PC9hPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdmJhci1oZWFkZXIgLS0+DQogICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdmJhci10b3AtbGlua3MgbmF2YmFyLXJpZ2h0IGhpZGRlbi14cyBoaWRkZW4tc20gaGlkZGVuLW1kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48c3BhbiBpZD0icHJpbnRJY29uIiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1wcmludCIgb25jbGljaz0id2luZG93LnByaW50KCk7Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgPC91bD4NCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItZGVmYXVsdCBzaWRlYmFyIiByb2xlPSJuYXZpZ2F0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNpZGViYXItbmF2IG5hdmJhci1jb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYiIGlkPSJzaWRlLW1lbnUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLnNpZGViYXItY29sbGFwc2UgLS0+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLXN0YXRpYy1zaWRlIC0tPg0KICAgICAgICAgICAgICAgIDwvbmF2Pg0KICAgICAgICAgICAgICAgIDxkaXYgaWQ9InBhZ2Utd3JhcHBlciI+DQoNCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyLWZsdWlkIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgDQoNCg0KPGRpdiBjbGFzcz0icGFnZS1oZWFkZXIiPg0KPGgyPkRpc2NsYWltZXI8L2gyPg0KPC9kaXY+DQoNCjxkaXYgaWQ9InNjcm9sbGFibGVDb250ZW50Ij4NCjxoMz5EQXMgT25saW5lIC0gRGV2ZWxvcG1lbnQgQXBwbGljYXRpb25zPC9oMz4NCjxwPiZuYnNwOzwvcD4NCjxoND5Db3B5cmlnaHQ8L2g0Pg0KPHAgY2xhc3M9InNlY3Rpb24iPk1hc3RlcnZpZXcgc29mdHdhcmUgKHJlZmVycmVkIHRvIGluIHRoZXNlIHRlcm1zIGFuZCBjb25kaXRpb25zIGFzIERBcyBPbmxpbmUpIENvcHlyaWdodCAmIzE2OTsgMjAxNyBDaXZpY2EgUHR5IExpbWl0ZWQgd2l0aCBhIG5vbi1leGNsdXNpdmUgbGljZW5jZSB0byBHeW1waWUgUmVnaW9uYWwgQ291bmNpbC4NCkV4Y2VwdCBmb3IgdGhlIHB1cnBvc2UgZXhwcmVzc2x5IHN0YXRlZCBiZWxvdyBhbmQgZm9yIHB1cnBvc2VzIHBlcm1pdHRlZCBieSB0aGUgQ29weXJpZ2h0IEFjdCAxOTY4IChDdGgpLCByZXByb2R1Y3Rpb24sIHB1YmxpY2F0aW9uLCBjb21tdW5pY2F0aW9uIHRvIHRoZSBwdWJsaWMsIGFkYXB0YXRpb24sIHNlbGxpbmcsIHJlLXRyYW5zbWlzc2lvbiwgcmVmcmFtaW5nLCBsaW5raW5nLCBjb21tZXJjaWFsIG9yIG90aGVyIHVzZSAod2hldGhlciBmb3IgY29tcGVuc2F0aW9uIG9mIGFueSBraW5kIG9yIG5vdCkgb2YgZG9jdW1lbnRzLCBjb250ZW50IG9yIGluZm9ybWF0aW9uIG1hZGUgYXZhaWxhYmxlIHVzaW5nIERBcyBPbmxpbmUgYnkgd2hhdGV2ZXIgbWVhbnMgaXMgcHJvaGliaXRlZCB1bmxlc3MgdGhlIHdyaXR0ZW4gY29uc2VudCBvZiB0aGUgQ29weXJpZ2h0IG93bmVyIGlzIG9idGFpbmVkLg0KREFzIE9ubGluZSB1c2VycyBhcmUgZXhwcmVzc2x5IHBlcm1pdHRlZCB0byByZXByb2R1Y2UgdGhlIGNvbnRlbnRzIG9mIHRoZSBEQXMgT25saW5lIHdlYnNpdGUgaW4gdGhlaXIgd2ViIGJyb3dzZXIgKGFuZCBpbiBhbnkgY2FjaGUgZmlsZSBwcm9kdWNlZCBieSB0aGVpciB3ZWIgYnJvd3NlcikgZm9yIHRoZSBzb2xlIHB1cnBvc2Ugb2YgdGhlaXIgcGVyc29uYWwgbm9uLWNvbW1lcmNpYWwgdmlld2luZyBvZiB0aGUgY29udGVudCBhbmQgcHJpbnRpbmcgb2YgZG9jdW1lbnRhdGlvbi4NCiA8L3A+DQo8cD4mbmJzcDs8L3A+DQogPGg0PkRpc2NsYWltZXI8L2g0Pg0KDQo8cCBjbGFzcz0ic2VjdGlvbiI+VGhlIGluZm9ybWF0aW9uIHByb3ZpZGVkIGJ5IERBcyBPbmxpbmUgaXMgbWFkZSBhdmFpbGFibGUgYXMgYSBnZW5lcmFsIHJlZmVyZW5jZSBzb3VyY2Ugb25seS4NCkRBcyBPbmxpbmUgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQsIGFuZCBtdXN0IG5vdCBiZSB1c2VkLCBmb3IgZm9ybWFsIHB1cnBvc2VzIHN1Y2ggYXMgZm9yIHRoZSBwdXJwb3NlcyBvZiBwcm9wZXJ0eSB0cmFuc2FjdGlvbnMgb3Igc2V0dGxlbWVudHMuIEFjY2VzcyB0byBkb2N1bWVudHMgYW5kIGluZm9ybWF0aW9uIGZvciBmb3JtYWwgcHVycG9zZXMgbXVzdCBiZSBvYnRhaW5lZCB0aHJvdWdoIENvdW5jaWwncyBmb3JtYWwgZG9jdW1lbnQgc2VhcmNoIHByb2NlZHVyZXMsIG5vdCB0aHJvdWdoIERBcyBPbmxpbmUuRm9yIGZ1cnRoZXIgaW5mb3JtYXRpb24gb24gUHJvcGVydHkgU2VhcmNoZXMsIHBsZWFzZSByZWZlciB0byBDb3VuY2lsJ3Mgd2Vic2l0ZSBhdCA8YSBocmVmPSJodHRwczovL3d3dy5neW1waWUucWxkLmdvdi5hdS9zZWFyY2hlcyIgdGFyZ2V0PSJfYmxhbmsiPnd3dy5neW1waWUucWxkLmdvdi5hdS9zZWFyY2hlczwvYT4uPC9wPg0KDQo8cCBjbGFzcz0ic2VjdGlvbiI+Q291bmNpbCBtYWtlcyBubyByZXByZXNlbnRhdGlvbnMgYW5kIGdpdmVzIG5vIHdhcnJhbnRpZXMgKGV4cHJlc3Mgb3IgaW1wbGllZCkgYWJvdXQgdGhlIGluZm9ybWF0aW9uIChpbmNsdWRpbmcgYWNjdXJhY3ksIHJlbGlhYmlsaXR5LCBjb21wbGV0ZW5lc3MsIHF1YWxpdHksIG1lcmNoYW50YWJpbGl0eSwgZml0bmVzcyBvciBzdWl0YWJpbGl0eSkgZm9yIGFueSBwdXJwb3NlIG5vciB0aGF0IGFjY2VzcyB0byBhbmQgdXNlIG9mIHRoaXMgd2Vic2l0ZSBvciBzeXN0ZW0gaXMgZnJlZSBmcm9tIGNvbXB1dGVyIHZpcnVzZXMgb3Igb3RoZXIgaW5mZWN0aW9ucyBvciBjb250YW1pbmF0aW9ucy4gTm8gbGlhYmlsaXR5IGlzIGFjY2VwdGVkIGJ5IHRoZSBDb3VuY2lsIChpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uLCB3aGV0aGVyIGluIGFuIGFjdGlvbiBvZiBjb250cmFjdCwgbmVnbGlnZW5jZSBvciBvdGhlciB0b3J0aW91cyBhY3Rpb24pIGZvciBhbnkgbG9zcywgZGFtYWdlIG9yIGNvc3RzIChpbmNsdWRpbmcgY29uc2VxdWVudGlhbCwgc3BlY2lhbCBvciBpbmRpcmVjdCBkYW1hZ2VzKSByZWxhdGluZyB0byBhY2Nlc3MgdG8sIHVzZSBvZiwgb3IgcmVsaWFuY2UgdXBvbiB0aGUgaW5mb3JtYXRpb24gb2J0YWluZWQgdXNpbmcgREFzIE9ubGluZS48L3A+DQo8cCBjbGFzcz0ic2VjdGlvbiI+VGhlIGluZm9ybWF0aW9uIHByb3ZpZGVkIG9uIHRoaXMgd2ViIHNpdGUgaXMgdG8gYXNzaXN0IGN1c3RvbWVycyBpbiB0cmFja2luZyBwcm9ncmVzcyBvZiB0aGUgRGV2ZWxvcG1lbnQgQXBwbGljYXRpb25zLiBJdCByZXByZXNlbnRzIGtleSBtaWxlc3RvbmVzIGluIHRoZSBEZXZlbG9wbWVudCBBcHBsaWNhdGlvbiBwcm9jZXNzIGJ1dCBpcyBub3QgYSBkZXRhaWxlZCBoaXN0b3J5LiBIb3dldmVyLCBwdXJjaGFzaW5nIGRlY2lzaW9ucyBzaG91bGQgbm90IHJlbHkgb24gdGhlIGluZm9ybWF0aW9uIGNvbnRhaW5lZCBvbiB0aGlzIHdlYiBzaXRlLiBQZXJzb25zIHdpc2hpbmcgdG8gY29uZmlybSBpbmZvcm1hdGlvbiBpbiBkZXRhaWwgc2hvdWxkIGNvbnRhY3QgQ291bmNpbCB2aWEgZWl0aGVyIGVtYWlsLCBvciBpbiB3cml0aW5nIGluIG9yZGVyIHRvIG9idGFpbiBhIHdyaXR0ZW4gcmVzcG9uc2UuPC9wPg0KDQo8cCBjbGFzcz0ic2VjdGlvbiI+DQpGb3IgZGV2ZWxvcG1lbnQgYXBwbGljYXRpb25zIHJlY2VpdmVkIHByaW9yIHRvIDMgSnVseSAyMDE3LCBvbmx5IHRoZSBkZWNpc2lvbiBub3RpY2UgYW5kIGFwcHJvdmVkIHBsYW5zLCB3aGVyZSByZWxldmFudCwgd2lsbCBiZSBtYWRlIGF2YWlsYWJsZS4NCjwvcD4NCjxwIGNsYXNzPSJzZWN0aW9uIj4NCkRldmVsb3BtZW50IEFwcGxpY2F0aW9ucyByZWxhdGluZyB0byB0aGUgZm9ybWVyIFNoaXJlcyBvZiBLaWxraXZhbiBhbmQgVGlhcm8gKERpdmlzaW9uIDMpLCBwcmlvciB0byB0aGVpciBhbWFsZ2FtYXRpb24gaW50byBHeW1waWUgUmVnaW9uYWwgQ291bmNpbCBvbiAxNSBNYXJjaCAyMDA4LCBhcmUgbm90IGRpc3BsYXllZC4NCjwvcD4NCjxwIGNsYXNzPSJzZWN0aW9uIj4NCk5vdGU6IEFwcGxpY2F0aW9ucyBmb3IgQnVpbGRpbmcgV29yayBvciBQbHVtYmluZyBhbmQgRHJhaW5hZ2UgV29yayBhcmUgbm90IGluY2x1ZGVkLiANCjwvcD4NCjxwIGNsYXNzPSJzZWN0aW9uIj4NClRoZXJlIGlzIG5vIG9ubGluZSBsb2RnZW1lbnQgc2VydmljZSBwcm92aWRlZCBieSB0aGlzIGZhY2lsaXR5Lg0KPC9wPg0KPHA+Jm5ic3A7PC9wPg0KIDxoND5JbmZvcm1hdGlvbiBwcml2YWN5PC9oND4NCg0KPHAgY2xhc3M9InNlY3Rpb24iPkRBcyBPbmxpbmUgbWF5IHJlY29yZCBzb21lIGluZm9ybWF0aW9uIGFib3V0IGVhY2ggYWNjZXNzIHRvIERBcyBPbmxpbmUgKGZvciBleGFtcGxlLCB0aGUgbFAgYWRkcmVzcyBvZiB0aGUgY29tcHV0ZXIgZnJvbSB3aGljaCBEQXMgT25saW5lIGlzIGFjY2Vzc2VkLCB0aGUgZGF0ZSBhbmQgdGltZSBvZiBhY2Nlc3MsIGFuZCB0aGUgcGFnZXMsIGRvY3VtZW50cyBvciBpbmZvcm1hdGlvbiBhY2Nlc3NlZCkuIFRoaXMgaW5mb3JtYXRpb24gaXMgdXNlZCBmb3Igc3RhdGlzdGljYWwgYW5kIHNpdGUgZGV2ZWxvcG1lbnQgcHVycG9zZXMuPC9wPg0KPHAgY2xhc3M9InNlY3Rpb24iPkV4Y2VwdCBmb3IgaW5mb3JtYXRpb24gc3BlY2lmaWNhbGx5IHByb3ZpZGVkIGJ5IHVzZXJzLCB0aGUgQ291bmNpbCBkb2VzIG5vdCBjb2xsZWN0IGFueSBvdGhlciBwZXJzb25hbCBpbmZvcm1hdGlvbiBkdXJpbmcgdXNlIG9mIERBcyBPbmxpbmUuIEFueSBwZXJzb25hbCBpbmZvcm1hdGlvbiBzcGVjaWZpY2FsbHkgcHJvdmlkZWQgd2lsbCBub3QgYmUgZGlzY2xvc2VkIHRvIHRoaXJkIHBhcnRpZXMgZXhjZXB0IHdpdGggdGhlIGNvbnNlbnQgb2YgdGhlIHN1YmplY3QgdXNlciwgb3Igd2hlcmUgcmVxdWlyZWQgYnkgbGF3LjwvcD4NCjxwIGNsYXNzPSJzZWN0aW9uIj5UaGUgQ291bmNpbCB0YWtlcyBzdGVwcyB0byBtYWludGFpbiB0aGUgY3VycmVuY3kgYW5kIGFjY3VyYWN5IG9mIHRoZSBwZXJzb25hbCBpbmZvcm1hdGlvbiBpdCBob2xkcy4gSWYgdXNlcnMgcmVxdWlyZSBhY2Nlc3MgdG8gYW55IHBlcnNvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZW0gdGhhdCBtYXkgaGVsZCBieSB0aGUgQ291bmNpbCwgb3IgaWYgdXNlcnMgaGF2ZSBhbnkgb3RoZXIgcXVlc3Rpb25zIGFib3V0IGluZm9ybWF0aW9uIHByaXZhY3ksIGVtYWlsIENvdW5jaWwuIDwvcD4NCjxwIGNsYXNzPSJzZWN0aW9uIj5Gb3IgZnVydGhlciBpbmZvcm1hdGlvbiBvbiBDb3VuY2lsJ3MgUHJpdmFjeSBTdGF0ZW1lbnQgYW5kIEluZm9ybWF0aW9uIFByaXZhY3kgUG9saWN5IHJlZmVyIHRvIENvdW5jaWwncyB3ZWJzaXRlIGF0IDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmd5bXBpZS5xbGQuZ292LmF1L3ByaXZhY3ktc3RhdGVtZW50IiB0YXJnZXQ9Il9ibGFuayI+d3d3Lmd5bXBpZS5xbGQuZ292LmF1L3ByaXZhY3ktc3RhdGVtZW50PC9hPi48L3A+DQo8cD4mbmJzcDs8L3A+DQo8aDQ+UmlnaHQgdG8gZ3JhbnQgb3IgcmVmdXNlIGFjY2VzczwvaDQ+DQoNCjxwIGNsYXNzPSJzZWN0aW9uIj5BY2Nlc3MgdG8gdGhlIFBsYW5uaW5nIGFuZCBEZXZlbG9wbWVudCBPbmxpbmUgc3lzdGVtIGlzIGF0IHRoZSBkaXNjcmV0aW9uIG9mIENvdW5jaWwuIENvdW5jaWwgcmVzZXJ2ZXMgdGhlIHJpZ2h0IHRvIHJlZnVzZSB0byBhbGxvdyBhY2Nlc3MgdG8gYW55IHBhcnQgb2YgdGhlIFBsYW5uaW5nIGFuZCBEZXZlbG9wbWVudCBPbmxpbmUgc3lzdGVtIHdpdGhvdXQgcHJpb3Igbm90aWNlLCBhbmQgd2l0aG91dCB0aGUgbmVlZCB0byBnaXZlIGFueSByZWFzb24gZm9yIGRvaW5nIHNvLjwvcD4NCjxwPiZuYnNwOzwvcD4NCjxoND5TeXN0ZW0gUmVxdWlyZW1lbnRzPC9oND4NCg0KPHAgY2xhc3M9InNlY3Rpb24iPlRoZSBEQXMgT25saW5lIHRvb2wgaGFzIGJlZW4gdGVzdGVkIGFuZCBjZXJ0aWZpZWQgdG8gZnVuY3Rpb24gY29ycmVjdGx5IGluIGFsbCBtb2Rlcm4gYnJvd3NlcnMuIFNvbWUgZnVuY3Rpb25hbGl0eSwgZS5nLiBtYXBwaW5nLCB2aWV3aW5nIG9mIGRvY3VtZW50cywgbWF5IHJlcXVpcmUgYWRkaXRpb25hbCBzb2Z0d2FyZSB0byBiZSBpbnN0YWxsZWQuIENvdW5jaWwgaXMgbm90IGluIGEgcG9zaXRpb24gdG8gcHJvdmlkZSBzb2Z0d2FyZSBjb21wYXRpYmlsaXR5IHN1cHBvcnQuPC9wPg0KDQo8cCBjbGFzcz0ic2VjdGlvbiI+SWYgeW91IGRvIG5vdCBoYXZlIE1pY3Jvc29mdCBPZmZpY2Ugb3IgYXJlIHVzaW5nIGFuIEFwcGxlIE1hYyBhbmQgYXJlIHVuYWJsZSB0byBvcGVuIE1TRyBmaWxlcywgcGxlYXNlIHVzZSBhIHZpZXdlciBzdWNoIGFzIDxhIGhyZWY9Imh0dHBzOi8vc291cmNlZm9yZ2UubmV0L3Byb2plY3RzL21zZ3ZpZXdlci8iIHRhcmdldD0iX2JsYW5rIj5Nc2dWaWV3ZXI8L2E+IG9yIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmNvb2x1dGlscy5jb20vTWFpbFZpZXdlciIgdGFyZ2V0PSJfYmxhbmsiPk1haWwgVmlld2VyPC9hPiBJcGFkIHVzZXJzIHNlYXJjaCB0aGUgYXBwIHN0b3JlIGZvciBNU0cgdmlld2VycyBzdWNoIGFzIEtsYW1tZXIuPC9wPg0KDQo8cD4mbmJzcDs8L3A+DQo8L2Rpdj4NCg0KPHAgY2xhc3M9InNlY3Rpb24iPg0KPC9icj4NCjxiPkkgaGF2ZSByZWFkIGFuZCB1bmRlcnN0b29kIHRoZSBwcm92aXNpb25zIHNldCBvdXQgYWJvdmUuPC9iPg0KPC9wPg0KPC9icj4NCg0KDQoNCg0KPGZvcm0gYWN0aW9uPSIvSG9tZS9EaXNjbGFpbWVyUHJvY2Vzc2luZyIgaWQ9ImRpc2NsYWltZXItZm9ybSIgbWV0aG9kPSJwb3N0Ij48aW5wdXQgaWQ9ImFncmVlZCIgbmFtZT0iYWdyZWVkIiB0eXBlPSJoaWRkZW4iIHZhbHVlPSJGYWxzZSIgLz4gICAgPGRpdiBpZD0iYnRucyI+DQogICAgICAgIDxidXR0b24gaWQ9ImFncmVlIiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIGZvcm09ImRpc2NsYWltZXItZm9ybSI+QWdyZWU8L2J1dHRvbj4NCiAgICAgICAgPGJ1dHRvbiBpZD0iZGlzYWdyZWUiIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4td2FybmluZyIgZm9ybT0iZGlzY2xhaW1lci1mb3JtIj5EaXNhZ3JlZTwvYnV0dG9uPg0KICAgIDwvZGl2Pg0KPC9mb3JtPg0KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KDQogICAgdmFyIGxhc3RTY3JvbGxUb3A7DQogICAgdmFyIG1heFNjcm9sbGFibGVDb250ZW50SGVpZ2h0Ow0KDQogICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkgew0KDQogICAgICAgIHVwZGF0ZUxlZnRNYXJnaW4oKTsNCiAgICAgICAgYXR0YWNoQ2xpY2tIYW5kbGVycygpOw0KDQogICAgICAgIGlmIChpc1RleHRCbG9ja092ZXJmbG93aW5nKCkpIHsNCiAgICAgICAgICAgIGxhc3RTY3JvbGxUb3AgPSAwOzsNCiAgICAgICAgICAgIHZhciB3aW5kb3dIZWlnaHQgPSAkKHdpbmRvdykuaGVpZ2h0KCk7DQoNCiAgICAgICAgICAgIHZhciBoZWFkZXJIZWlnaHQgPSAkKCcjc2Nyb2xsYWJsZUNvbnRlbnQnKS5vZmZzZXQoKS50b3A7DQogICAgICAgICAgICB2YXIgbmV3SGVpZ2h0ID0gZ2V0TmV3SGVpZ2h0KCk7DQoNCiAgICAgICAgICAgIGFkanVzdERpc2NsYWltZXJDb250ZW50Rm9yRG93blNjcm9sbChuZXdIZWlnaHQpOw0KDQogICAgICAgICAgICAkKHdpbmRvdykuc2Nyb2xsKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICB2YXIgbkhlaWdodCA9ICQod2luZG93KS5oZWlnaHQoKSAtIChoZWFkZXJIZWlnaHQgLSAkKHdpbmRvdykuc2Nyb2xsVG9wKCkgKyAkKCdmb3JtJykuaGVpZ2h0KCkgKyAxMDApOw0KDQogICAgICAgICAgICAgICAgdmFyIGJJc0Rvd25TY3JvbGwgPSBpc1Njcm9sbERvd24oKTsNCg0KICAgICAgICAgICAgICAgIGlmIChiSXNEb3duU2Nyb2xsKQ0KICAgICAgICAgICAgICAgICAgICBhZGp1c3REaXNjbGFpbWVyQ29udGVudEZvckRvd25TY3JvbGwobkhlaWdodCk7DQogICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgICAgICBhZGp1c3REaXNjbGFpbWVyQ29udGVudEZvclVwU2Nyb2xsKG5IZWlnaHQpOw0KICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIGdldE5ld0hlaWdodCgpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gJCh3aW5kb3cpLmhlaWdodCgpIC0gKGhlYWRlckhlaWdodCArICQod2luZG93KS5zY3JvbGxUb3AoKSArICQoJ2Zvcm0nKS5oZWlnaHQoKSArIDEwMCk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIGlzU2Nyb2xsRG93bigpIHsNCiAgICAgICAgICAgICAgICB2YXIgc3QgPSAkKHdpbmRvdykuc2Nyb2xsVG9wKCk7DQogICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHN0ID49IGxhc3RTY3JvbGxUb3A7CQkgIC8vIGRvd25zY3JvbGwNCg0KICAgICAgICAgICAgICAgIGxhc3RTY3JvbGxUb3AgPSBzdDsNCiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0Ow0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBmdW5jdGlvbiBoYXNTY3JvbGxCYXIoaXRlbSkgew0KICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLmdldCgwKS5zY3JvbGxIZWlnaHQgPiBpdGVtLmdldCgwKS5jbGllbnRIZWlnaHQ7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIGFkanVzdERpc2NsYWltZXJDb250ZW50Rm9yRG93blNjcm9sbChuSGVpZ2h0KSB7DQogICAgICAgICAgICAgICAgdmFyIGlzU2Nyb2xsYWJsZSA9IGhhc1Njcm9sbEJhcigkKCcjc2Nyb2xsYWJsZUNvbnRlbnQnKSk7DQogICAgICAgICAgICAgICAgaWYgKGlzU2Nyb2xsYWJsZSkgew0KICAgICAgICAgICAgICAgICAgICAkKCcjc2Nyb2xsYWJsZUNvbnRlbnQnKS5oZWlnaHQobkhlaWdodCk7DQogICAgICAgICAgICAgICAgICAgIG1heFNjcm9sbGFibGVDb250ZW50SGVpZ2h0ID0gbkhlaWdodDsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIGFkanVzdERpc2NsYWltZXJDb250ZW50Rm9yVXBTY3JvbGwobkhlaWdodCkgew0KICAgICAgICAgICAgICAgIHZhciBpc1Njcm9sbGFibGUgPSBoYXNTY3JvbGxCYXIoJCgnI3Njcm9sbGFibGVDb250ZW50JykpOw0KDQogICAgICAgICAgICAgICAgaWYgKG1heFNjcm9sbGFibGVDb250ZW50SGVpZ2h0ID4gbkhlaWdodCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICQoJyNzY3JvbGxhYmxlQ29udGVudCcpLmhlaWdodChuSGVpZ2h0KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9KTsNCg0KDQogICAgZnVuY3Rpb24gdXBkYXRlTGVmdE1hcmdpbigpIHsNCiAgICAgICAgaWYgKCQoJyNzaWRlLW1lbnUnKS5odG1sKCkpIHsNCiAgICAgICAgICAgICQoJyNwYWdlLXdyYXBwZXInKS5jc3MoeyAnbWFyZ2luLWxlZnQnOiAnMCcgfSk7DQogICAgICAgICAgICAkKCcuc2lkZWJhcicpLmhpZGUoKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KDQogICAgZnVuY3Rpb24gYXR0YWNoQ2xpY2tIYW5kbGVycygpIHsNCiAgICAgICAgJCgnI2FncmVlJykuY2xpY2soZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgJCgnI2FncmVlZCcpLnZhbCgidHJ1ZSIpOw0KICAgICAgICAgICAgJCgnI2Rpc2NsYWltZXItZm9ybScpLnN1Ym1pdCgpOw0KICAgICAgICB9KTsNCg0KICAgICAgICAkKCcjZGlzYWdyZWUnKS5jbGljayhmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAkKCcjYWdyZWVkJykudmFsKCJmYWxzZSIpOw0KICAgICAgICAgICAgJCgnI2Rpc2NsYWltZXItZm9ybScpLnN1Ym1pdCgpOw0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBpc1RleHRCbG9ja092ZXJmbG93aW5nKCkgew0KICAgICAgICByZXR1cm4gJCgiI3Njcm9sbGFibGVDb250ZW50IikucHJvcCgnc2Nyb2xsSGVpZ2h0JykgPiAkKCIjc2Nyb2xsYWJsZUNvbnRlbnQiKS5oZWlnaHQoKTsNCiAgICB9DQo8L3NjcmlwdD4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwhLS0gLy5jb250YWluZXItZmx1aWQgLS0+DQoNCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8jcGFnZS13cmFwcGVyIC0tPg0KICAgICAgICAgICAgPC9kaXY+DQoNCg0KICAgICAgICAgICAgPGRpdiBpZD0iR3JlZW5CYXIiPg0KICAgICAgICAgICAgICAgIDxhIHN0eWxlPSJjdXJzb3I6ZGVmYXVsdCI+IENvcHlyaWdodCDCqSAyMDE4IENpdmljYSB8IDwvYT4NCiAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5neW1waWUucWxkLmdvdi5hdS9kaXNjbGFpbWVyIiB0YXJnZXQ9Il9wYXJlbnQiPkNvcHlyaWdodCBhbmQgRGlzY2xhaW1lcjwvYT4NCiAgICAgICAgICAgICAgICA8YSBzdHlsZT0iY3Vyc29yOmRlZmF1bHQiPiB8IDwvYT4NCiAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5neW1waWUucWxkLmdvdi5hdS9wcml2YWN5LXN0YXRlbWVudCIgdGFyZ2V0PSJfcGFyZW50Ij5Qcml2YWN5IFN0YXRlbWVudDwvYT4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGRpdj4gPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KDQogICAgPGRpdiBpZD0idGlwdGlwX2hvbGRlciIgc3R5bGU9Im1heC13aWR0aDozMDBweDsiPjxkaXYgaWQ9InRpcHRpcF9hcnJvdyI+PGRpdiBpZD0idGlwdGlwX2Fycm93X2lubmVyIj48L2Rpdj48L2Rpdj48ZGl2IGlkPSJ0aXB0aXBfY29udGVudCI+PC9kaXY+PC9kaXY+DQo8L2JvZHk+DQoNCjxzY3JpcHQgYXN5bmMgc3JjPSJodHRwczovL3d3dy5nb29nbGV0YWdtYW5hZ2VyLmNvbS9ndGFnL2pzP2lkPVVBLTEyMTc3Mzc3Ny0xIj48L3NjcmlwdD4NCjxzY3JpcHQ+DQoJd2luZG93LmRhdGFMYXllciA9IHdpbmRvdy5kYXRhTGF5ZXIgfHwgW107DQoJZnVuY3Rpb24gZ3RhZygpe2RhdGFMYXllci5wdXNoKGFyZ3VtZW50cyk7fQ0KCWd0YWcoJ2pzJywgbmV3IERhdGUoKSk7DQoNCglndGFnKCdjb25maWcnLCAnVUEtMTIxNzczNzc3LTEnKTsNCjwvc2NyaXB0Pg0KPC9odG1sPg0K
  recorded_at: Mon, 21 Apr 2025 18:19:50 GMT
- request:
    method: post
    uri: https://daonline.gympie.qld.gov.au/Home/DisclaimerProcessing
    body:
      encoding: UTF-8
      string: agreed=true
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=3hky22g0fypj4s5mjytw443v
      Host:
      - daonline.gympie.qld.gov.au
      Referer:
      - https://daonline.gympie.qld.gov.au/Home/Disclaimer
      Content-Type:
      - application/x-www-form-urlencoded
      Content-Length:
      - '11'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Application/ApplicationDetails/008.2019.00001839.001"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      Set-Cookie:
      - User=accessAllowed-MasterView=True; path=/
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:19:49 GMT
      Content-Length:
      - '170'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Application/ApplicationDetails/008.2019.00001839.001\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:19:51 GMT
- request:
    method: get
    uri: https://daonline.gympie.qld.gov.au/Application/ApplicationDetails/008.2019.00001839.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=3hky22g0fypj4s5mjytw443v; User=accessAllowed-MasterView=True
      Host:
      - daonline.gympie.qld.gov.au
      Referer:
      - https://daonline.gympie.qld.gov.au/Home/Disclaimer
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:19:50 GMT
      Content-Length:
      - '30715'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:19:51 GMT
- request:
    method: get
    uri: https://daonline.gympie.qld.gov.au/Application/ApplicationDetails/008.2019.00001839.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=3hky22g0fypj4s5mjytw443v; User=accessAllowed-MasterView=True
      Host:
      - daonline.gympie.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:19:50 GMT
      Content-Length:
      - '30715'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:19:52 GMT
recorded_with: VCR 6.0.0
