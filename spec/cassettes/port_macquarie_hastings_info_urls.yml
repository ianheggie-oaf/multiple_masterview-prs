---
http_interactions:
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Application/ApplicationDetails/010.2004.00000859.005
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - datracker.pmhc.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 302
      message: Found
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Home/Disclaimer"
      Server:
      - Microsoft-IIS/8.5
      Set-Cookie:
      - ASP.NET_SessionId=4kv0324tk3fwowyhd4x5vqmn; path=/; HttpOnly; SameSite=Lax
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:24:10 GMT
      Content-Length:
      - '133'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Home/Disclaimer\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:24:10 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Home/Disclaimer
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=4kv0324tk3fwowyhd4x5vqmn
      Host:
      - datracker.pmhc.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:24:10 GMT
      Content-Length:
      - '19685'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:24:10 GMT
- request:
    method: post
    uri: https://datracker.pmhc.nsw.gov.au/home/disclaimerprocessing
    body:
      encoding: UTF-8
      string: agreed=true
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=4kv0324tk3fwowyhd4x5vqmn
      Host:
      - datracker.pmhc.nsw.gov.au
      Referer:
      - https://datracker.pmhc.nsw.gov.au/Home/Disclaimer
      Content-Type:
      - application/x-www-form-urlencoded
      Content-Length:
      - '11'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Application/ApplicationDetails/010.2004.00000859.005"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      Set-Cookie:
      - User=accessAllowed-MasterView=True; path=/
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:24:10 GMT
      Content-Length:
      - '170'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Application/ApplicationDetails/010.2004.00000859.005\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:24:10 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Application/ApplicationDetails/010.2004.00000859.005
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=4kv0324tk3fwowyhd4x5vqmn; User=accessAllowed-MasterView=True
      Host:
      - datracker.pmhc.nsw.gov.au
      Referer:
      - https://datracker.pmhc.nsw.gov.au/Home/Disclaimer
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:24:29 GMT
      Content-Length:
      - '35033'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:24:29 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Application/ApplicationDetails/010.2004.00000859.005
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=4kv0324tk3fwowyhd4x5vqmn; User=accessAllowed-MasterView=True
      Host:
      - datracker.pmhc.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:24:39 GMT
      Content-Length:
      - '35033'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQo8aHRtbCB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCIgeG1sOmxhbmc9ImVuIiBsYW5nPSJlbiI+DQoNCg0KDQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCIgLz4NCiAgICA8bWV0YSBodHRwLWVxdWl2PSJYLVVBLUNvbXBhdGlibGUiIGNvbnRlbnQ9IklFPWVkZ2UiIC8+DQogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xIiAvPg0KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIiAvPg0KICAgIDxtZXRhIG5hbWU9ImtleXdvcmRzIiBjb250ZW50PSJQb3J0IE1hY3F1YXJpZSBDb3VuY2lsLCBEQSBUcmFja2VyLEFwcGxpY2F0aW9uIFRyYWNrZXIsRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24sRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24gVHJhY2tpbmcsIERBIEVucXVpcnksIERldmVsb3BtZW50IEFwcGxpY2F0aW9uIEVucXVpcnksIEFwcGxpY2F0aW9uIFRyYWNrZXIiPg0KICAgIDxtZXRhIG5hbWU9ImRlc2NyaXB0aW9uIiBjb250ZW50PSJUaGUgb2ZmaWNpYWwgUG9ydCBNYWNxdWFyaWUgQ291bmNpbCBBcHBsaWNhdGlvbiBUcmFja2VyIj4NCg0KICAgIDwhLS1mYXZpY29uLS0+DQogICAgPGxpbmsgaHJlZj0iL0NvdW5jaWxfVGhlbWUvUG9ydF9NYWNxdWFyaWUvZmF2aWNvbi5pY28iICkiIHJlbD0ic2hvcnRjdXQgaWNvbiIgdHlwZT0iaW1hZ2UveC1pY29uIiAvPg0KDQogICAgPCEtLSBqUXVlcnkgLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS0xLjExLjEuanMiPjwvc2NyaXB0Pg0KDQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS11aS0xLjExLjIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvY29yZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvYWNjb3JkaW9uLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC90aGVtZXMvYmFzZS90aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQoNCiAgICA8IS0tIEJvb3RzdHJhcCAtLT4NCiAgICA8c2NyaXB0IHNyYz0iL1NjcmlwdHMvYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCg0KICAgIDxsaW5rIGhyZWY9Ii9Db250ZW50L2Jvb3RzdHJhcC10aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvYm9vdHN0cmFwLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9mb250LWF3ZXNvbWUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPCEtLSBEYXRhVGFibGVzIC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2pxdWVyeS5kYXRhVGFibGVzLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMuYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMucmVzcG9uc2l2ZS5qcyI+PC9zY3JpcHQ+DQoNCiAgICANCiAgICA8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLmJvb3RzdHJhcC5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvRGF0YVRhYmxlcy9jc3MvZGF0YVRhYmxlcy5yZXNwb25zaXZlLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLnJlc3BvbnNpdmUuc2NzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KDQogICAgPCEtLSBCb290c3RyYXAgU0ItQWRtaW4tMiBQbHVnaW4gYW5kIG90aGVyIGNzcyBhbmQganMgZmlsZXMtLT4NCiAgICA8c2NyaXB0IHNyYz0iL2pzL2Jvb3RzdHJhcC1jb21ib2JveC5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL2Jvb3RzdHJhcC1kYXRlcGlja2VyLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvYm9vdHN0cmFwLWRpYWxvZy5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL2pxdWVyeS5mb3JtLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvanF1ZXJ5LnRhYmxlc29ydGVyLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvbWFzdGVydmlldy5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL21ldGlzTWVudS5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL3NiLWFkbWluLTIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL2Nzcy9ib290c3RyYXAtY29tYm9ib3guY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvZGF0ZXBpY2tlcjMuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvbWFzdGVydmlldy1jdXN0b21pc2F0aW9ucy5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL2Nzcy9zYi1hZG1pbi0yLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDxsaW5rIGhyZWY9Ii9Db3VuY2lsX1RoZW1lL1BvcnRfTWFjcXVhcmllL1BvcnRfTWFjcXVhcmllLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ291bmNpbF9UaGVtZS9Qb3J0X01hY3F1YXJpZS9Qb3J0X01hY3F1YXJpZV9Nb2JpbGVWaWV3LmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICANCg0KICAgIDwhLS1pbmNsdWRlIGdvb2dsZSBhbmFseXRpY3MgY29kZS0tPg0KICAgIDxzY3JpcHQ+DQogICAgICAgIChmdW5jdGlvbiAoaSwgcywgbywgZywgciwgYSwgbSkgew0KICAgICAgICAgICAgaVsnR29vZ2xlQW5hbHl0aWNzT2JqZWN0J10gPSByOyBpW3JdID0gaVtyXSB8fCBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgKGlbcl0ucSA9IGlbcl0ucSB8fCBbXSkucHVzaChhcmd1bWVudHMpDQogICAgICAgICAgICB9LCBpW3JdLmwgPSAxICogbmV3IERhdGUoKTsgYSA9IHMuY3JlYXRlRWxlbWVudChvKSwNCiAgICAgICAgICAgICAgICBtID0gcy5nZXRFbGVtZW50c0J5VGFnTmFtZShvKVswXTsgYS5hc3luYyA9IDE7IGEuc3JjID0gZzsgbS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLCBtKQ0KICAgICAgICB9KSh3aW5kb3csIGRvY3VtZW50LCAnc2NyaXB0JywgJy8vd3d3Lmdvb2dsZS1hbmFseXRpY3MuY29tL2FuYWx5dGljcy5qcycsICdnYScpOw0KDQogICAgICAgIGdhKCdjcmVhdGUnLCAnVUEtNzI5MTg1Mi00JywgJ2F1dG8nKTsNCiAgICAgICAgZ2EoJ3NlbmQnLCAncGFnZXZpZXcnKTsNCg0KICAgIDwvc2NyaXB0Pg0KDQoNCiAgICA8dGl0bGU+UG9ydCBNYWNxdWFyaWUtSGFzdGluZ3MgQ291bmNpbCAtIEFwcGxpY2F0aW9uIFRyYWNrZXI8L3RpdGxlPg0KDQogICAgPCEtLSBDdXN0b20gRm9udHMNCiAgICAgICAgPGxpbmsgaHJlZj0iL2ZvbnQtYXdlc29tZS9jc3MvZm9udC1hd2Vzb21lLm1pbi5jc3MiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPg0KICAgIC0tPg0KICAgIDwhLS0gSFRNTDUgU2hpbSBhbmQgUmVzcG9uZC5qcyBJRTggc3VwcG9ydCBvZiBIVE1MNSBlbGVtZW50cyBhbmQgbWVkaWEgcXVlcmllcyAtLT4NCiAgICA8IS0tIFdBUk5JTkc6IFJlc3BvbmQuanMgZG9lc24ndCB3b3JrIGlmIHlvdSB2aWV3IHRoZSBwYWdlIHZpYSBmaWxlOi8vIC0tPg0KICAgIDwhLS1baWYgbHQgSUUgOV0+DQogICAgICAgIDxzY3JpcHQgc3JjPSJodHRwczovL29zcy5tYXhjZG4uY29tL2xpYnMvaHRtbDVzaGl2LzMuNy4wL2h0bWw1c2hpdi5qcyI+PC9zY3JpcHQ+DQogICAgICAgIDxzY3JpcHQgc3JjPSJodHRwczovL29zcy5tYXhjZG4uY29tL2xpYnMvcmVzcG9uZC5qcy8xLjQuMi9yZXNwb25kLm1pbi5qcyI+PC9zY3JpcHQ+DQogICAgPCFbZW5kaWZdLS0+DQoNCiAgICA8bGluayBocmVmPSIvL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9Q2Fycm9pcytHb3RoaWMiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPg0KPC9oZWFkPg0KPGJvZHkgY2xhc3M9InN0YW5kYXJkIj4NCiAgICA8aGVhZGVyIGNsYXNzPSJjbGVhcmZpeCI+DQogICAgICAgIDxkaXYgc3R5bGU9IndpZHRoOiAxMDAlOyBiYWNrZ3JvdW5kLWNvbG9yOiAjNUQ5NzRDO2hlaWdodDoyMHB4ICI+PC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9nbyI+DQogICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvIj4NCiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9Db3VuY2lsX1RoZW1lL1BvcnRfTWFjcXVhcmllL2xvZ28ucG5nIiBhbHQ9IlBvcnQgTWFjcXVhcmllIEhhc3RpbmdzIExvZ28iIGlkPSJkaXNwbGF5LWxvZ28iIC8+DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InB1bGwtcmlnaHQiPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvaGVhZGVyPg0KICAgIDxkaXYgaWQ9ImNvbnRlbnQiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPg0KICAgICAgICAgICAgPGRpdiBpZD0ibmF2LWNvbnRhaW5lciIgc3R5bGU9ImRpc3BsYXk6bm9uZSI+DQogICAgICAgICAgICAgICAgPG5hdj48L25hdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJuYXZpZ2F0aW9uIiBjbGFzcz0iY29udGFpbmVyMSI+DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJob21lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cucG1oYy5uc3cuZ292LmF1L0hvbWUiPkhvbWU8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtMW5hdi1oYXMtY2hpbGRyZW4gbmF2LXNlY3Rpb24tdGhpcmRzLTEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvUmVzaWRlbnQtU2VydmljZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlc2lkZW50IFNlcnZpY2VzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtMiBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0xIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQWJvdXQtVXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFib3V0IFVzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtMyBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0xIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQnVzaW5lc3MiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJ1c2luZXNzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNCBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0yIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQnVpbGRpbmctUGxhbm5pbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJ1aWxkaW5nICZhbXA7IFBsYW5uaW5nDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNSBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0yIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQ29tbXVuaXR5LUZhY2lsaXRpZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvbW11bml0eSBGYWNpbGl0aWVzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNiBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0yIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQ3VsdHVyZS1TcG9ydC1MZWlzdXJlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdWx0dXJlLCBTcG9ydCAmYW1wOyBMZWlzdXJlDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNyBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0zIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvRm9ybXMtUGVybWl0cyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRm9ybXMgJmFtcDsgUGVybWl0cw0KICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxuYXYgY2xhc3M9Im5hdmJhciBuYXZiYXItZGVmYXVsdCBuYXZiYXItc3RhdGljLXRvcCIgcm9sZT0ibmF2aWdhdGlvbiIgc3R5bGU9Im1hcmdpbi1ib3R0b206IDAiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9Im5hdmJhci10b2dnbGUiIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgZGF0YS10YXJnZXQ9Ii5uYXZiYXItY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPlRvZ2dsZSBuYXZpZ2F0aW9uPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tYmFyIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1iYXIiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLWhlYWRlciAtLT4NCiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXZiYXItdG9wLWxpbmtzIG5hdmJhci1yaWdodCBoaWRkZW4teHMgaGlkZGVuLXNtIGhpZGRlbi1tZCI+DQogICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxzcGFuIGlkPSJwcmludEljb24iIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXByaW50IiBvbmNsaWNrPSJ3aW5kb3cucHJpbnQoKTsiPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItZGVmYXVsdCBzaWRlYmFyIiByb2xlPSJuYXZpZ2F0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2lkZWJhci1uYXYgbmF2YmFyLWNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IiBpZD0ic2lkZS1tZW51Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48aSBjbGFzcz0iZmEgZmEtbGlzdC11bCBmYS1mdyI+PC9pPkFwcGxpY2F0aW9uIFRyYWNrZXI8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9BYm91dCB0YXJnZXQ9X3NlbGY+V2hhdCBpcyBBcHBsaWNhdGlvbiBUcmFja2VyPzwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9EaXNjbGFpbWVyIHRhcmdldD1fc2VsZj5EaXNjbGFpbWVyPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gLy5uYXYtc2Vjb25kLWxldmVsIC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48aSBjbGFzcz0iZmEgZmEtbGlzdC11bCBmYS1mdyI+PC9pPkFwcGxpY2F0aW9uczxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXYtc2Vjb25kLWxldmVsIGNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL0luZGV4IHRhcmdldD0+QXBwbGljYXRpb24gVHJhY2tlciBIb21lPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL1NlYXJjaCBpZD1zZWFyY2ggdGFyZ2V0PV9zZWxmPlNlYXJjaDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/UmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1UcnVlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSBpZD1vdXRzdGFuZGluZy1hcHBzIHRhcmdldD1fc2VsZj5VbmRldGVybWluZWQgQXBwbGljYXRpb25zPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9SZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9VHJ1ZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIGlkPWV4aGliaXRlZC1hcHBzIHRhcmdldD1fc2VsZj5BcHBsaWNhdGlvbnMgT24gRXhoaWJpdGlvbjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjdGl2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbnMgU3VibWl0dGVkPHNwYW4gY2xhc3M9ImZhIGFycm93Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdi1zZWNvbmQtbGV2ZWwgY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTIxJTJmMDQlMmYyMDI1JkRhdGVUbz0yMiUyZjA0JTJmMjAyNSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPlRoaXMgV2VlazwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MTMlMmYwNCUyZjIwMjUmRGF0ZVRvPTE5JTJmMDQlMmYyMDI1JkRhdGVUeXBlPTEmUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBXZWVrPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDQlMmYyMDI1JkRhdGVUbz0yMiUyZjA0JTJmMjAyNSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPlRoaXMgTW9udGg8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTElMmYwMyUyZjIwMjUmRGF0ZVRvPTMxJTJmMDMlMmYyMDI1JkRhdGVUeXBlPTEmUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjdGl2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbnMgRGV0ZXJtaW5lZDxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXYtc2Vjb25kLWxldmVsIGNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0yMSUyZjA0JTJmMjAyNSZEYXRlVG89MjIlMmYwNCUyZjIwMjUmRGF0ZVR5cGU9MiZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9VHJ1ZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPlRoaXMgV2VlazwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MTMlMmYwNCUyZjIwMjUmRGF0ZVRvPTE5JTJmMDQlMmYyMDI1JkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5MYXN0IFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTElMmYwNCUyZjIwMjUmRGF0ZVRvPTIyJTJmMDQlMmYyMDI1JkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIE1vbnRoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDMlMmYyMDI1JkRhdGVUbz0zMSUyZjAzJTJmMjAyNSZEYXRlVHlwZT0yJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1UcnVlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8IS0tIC8uc2lkZWJhci1jb2xsYXBzZSAtLT4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLXN0YXRpYy1zaWRlIC0tPg0KICAgICAgICAgICAgPC9uYXY+DQogICAgICAgICAgICA8ZGl2IGlkPSJwYWdlLXdyYXBwZXIiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+DQogICAgICAgICAgICAgICAgICAgIA0KDQoNCiAgICA8ZGl2IGNsYXNzPSJwYWdlLWhlYWRlciI+DQogICAgICAgIDxoMj5BcHBsaWNhdGlvbjogUzk2ICgxMC4yMDA0Ljg1OS41KTwvaDI+DQogICAgPC9kaXY+DQogICAgPGg0PkRldGFpbGVkIGluZm9ybWF0aW9uIHJlbGF0ZWQgdG8gdGhlIGFwcGxpY2F0aW9uOjwvaDQ+DQogICAgPGJyIC8+DQogICAgPGRpdj4NCiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDpzaG93QWxsKCk7Ij5TaG93IEFsbDwvYT4gLw0KICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OmhpZGVBbGwoKTsiPkhpZGUgQWxsPC9hPg0KICAgIDwvZGl2Pg0KICAgIDxkaXYgaWQ9ImFwcGxpY2F0aW9uIj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJkZXRhaWxzIj48YSBocmVmPSIjIj5EZXRhaWxzPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5EZXNjcmlwdGlvbjogPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9ImRlc2NyaXB0aW9uIj5UbyBNb2RpZnkgUm9vZmxpbmUgYW5kIFVwcGVyIERlY2s8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+U3VibWl0dGVkIERhdGU6IDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMzAvMDQvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+QXBwbGljYXRpb24gVHlwZTogPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+Uzk2PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9InByb3BlcnRpZXMiPjxhIGhyZWY9IiMiPlByb3BlcnRpZXM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJwcm9wZXJ0eS1saXN0Ij41IEdsZW4gU3QsIFBvcnQgTWFjcXVhcmllIE5TVyAyNDQ0ICAoTE9UOiA4OCBEUDogMjMyODg1KTwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJwZW9wbGUiPjxhIGhyZWY9IiMiPlBlb3BsZTwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFwcGxpY2FudDogQiBSIERldmVsb3BtZW50IENvbnN1bHRpbmcgUHR5IEx0ZCANCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPd25lciBhdCBMb2RnZW1lbnQ6IEFubmEgRGF2aWRzb24NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPd25lciBhdCBMb2RnZW1lbnQ6IFBoaWxsaXAgRGF2aWRzb24NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQQ0EgUHJpbmNpcGFsIENlcnRpZnlpbmcgQXV0aG9yaXR5OiBQb3J0IE1hY3F1YXJpZS1IYXN0aW5ncyBDb3VuY2lsIA0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0ib2ZmaWNlciI+PGEgaHJlZj0iIyI+T2ZmaWNlcjwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9Im9mZmljZXJOYW1lIj5GaW9uYSBUaWVybmV5PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9ImRlY2lzaW9uIj48YSBocmVmPSIjIj5EZWNpc2lvbjwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+QXBwbGljYXRpb24gU3RhdHVzOiBEZXRlcm1pbmVkPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZXRlcm1pbmF0aW9uIERhdGU6DQoyOS8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRldGVybWluYXRpb24gVHlwZTogQXBwcm92ZWQgLSBDb3VuY2lsIFN0YWZmPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9ImVzdGltYXRlZENvc3QiPjxhIGhyZWY9IiMiPkVzdGltYXRlZCBDb3N0PC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4kMC4wMDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJ0cmFja2luZyI+PGEgaHJlZj0iIyI+VHJhY2tpbmc8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24td3JhcCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5zd2lwZSB0YWJsZSB0byB0aGUgbGVmdCB0byByZXZlYWwgbW9yZSBkYXRhPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tYXJyb3ctcmlnaHQiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtYm9yZGVyZWQgbm8tZm9vdGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5EZXNjcmlwdGlvbjwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Db21tZW5jZWQgRGF0ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Db21wbGV0ZWQgRGF0ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5BbGxvY2F0ZWQgdG8gQXNzZXNzaW5nIE9mZmljZXI8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMDkvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjA5LzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+U2VjdGlvbiA5NiBNb2QgQXNzZXNzbWVudDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQowOS8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjkvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Ob3RpZmljYXRpb24tTmVpZ2hib3VyaW5nPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjE0LzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyNy8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkV4aGliaXRpb24gY29weSB0byBQTVE8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMTQvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI3LzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+RGV0ZXJtaW5hdGlvbiBJc3N1ZWQgKHRvIEFkbW4pPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI5LzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyOS8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlBvc3RpbmctRGV0ZXJtaW5hdGlvbiBJc3N1ZWQ8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjkvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI5LzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQoNCg0KDQoNCiAgICAgICAgICAgIDxoMyBpZD0icmVsYXRlZEFwcGxpY2F0aW9ucyI+PGEgaHJlZj0iIyI+UmVsYXRlZCBBcHBsaWNhdGlvbnM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24td3JhcCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5zd2lwZSB0YWJsZSB0byB0aGUgbGVmdCB0byByZXZlYWwgbW9yZSBkYXRhPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tYXJyb3ctcmlnaHQiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtYm9yZGVyZWQgbm8tZm9vdGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5BcHBsaWNhdGlvbiBUeXBlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkFwcGxpY2F0aW9uIE51bWJlcjwvdGg+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERldmVsb3BtZW50IEFwcGxpY2F0aW9uDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZGF0cmFja2VyLnBtaGMubnN3Lmdvdi5hdS9BcHBsaWNhdGlvbi9BcHBsaWNhdGlvbkRldGFpbHMvMDEwLjIwMDQuMDAwMDA4NTkuMDAxLyI+MTAuMjAwNC44NTkuMTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFM5Ng0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2RhdHJhY2tlci5wbWhjLm5zdy5nb3YuYXUvQXBwbGljYXRpb24vQXBwbGljYXRpb25EZXRhaWxzLzAxMC4yMDA0LjAwMDAwODU5LjAwMi8iPjEwLjIwMDQuODU5LjI8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTOTYNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9kYXRyYWNrZXIucG1oYy5uc3cuZ292LmF1L0FwcGxpY2F0aW9uL0FwcGxpY2F0aW9uRGV0YWlscy8wMTAuMjAwNC4wMDAwMDg1OS4wMDMvIj4xMC4yMDA0Ljg1OS4zPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUzk2DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZGF0cmFja2VyLnBtaGMubnN3Lmdvdi5hdS9BcHBsaWNhdGlvbi9BcHBsaWNhdGlvbkRldGFpbHMvMDEwLjIwMDQuMDAwMDA4NTkuMDA0LyI+MTAuMjAwNC44NTkuNDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQoNCiAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQoNCg0KDQoNCg0KDQo8aDMgaWQ9ImRvY3VtZW50cyI+PGEgaHJlZj0iIyI+RG9jdW1lbnRzPC9hPjwvaDM+DQo8ZGl2Pg0KDQogICAgICAgIDxkaXYgY2xhc3M9Imljb24td3JhcCI+DQogICAgICAgICAgICA8c3Bhbj5zd2lwZSB0YWJsZSB0byB0aGUgbGVmdCB0byByZXZlYWwgbW9yZSBkYXRhPC9zcGFuPg0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tYXJyb3ctcmlnaHQiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L3NwYW4+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8ZGl2IGlkPSJkb2MtY291bnQiPlRvdGFsIG51bWJlciBvZiBkb2N1bWVudHM6IDM8L2Rpdj4NCiAgICAgICAgPHRhYmxlIGlkPSJkb2MtdGFibGUiIGNsYXNzPSJ0YWJsZSB0YWJsZS1zdHJpcGVkIHRhYmxlLWJvcmRlcmVkIG5vLWZvb3RlciI+DQogICAgICAgICAgICA8dGhlYWQ+DQogICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICA8dGg+UmVjb3JkIE51bWJlcjwvdGg+DQogICAgICAgICAgICAgICAgICAgIDx0aD5EZXNjcmlwdGlvbjwvdGg+DQogICAgICAgICAgICAgICAgICAgIDx0aD5Eb2N1bWVudCBUeXBlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgPHRoPlNpemU8L3RoPg0KICAgICAgICAgICAgICAgICAgICA8dGg+VmlldyBMaW5rPC90aD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgPC90aGVhZD4NCiAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCkQyMDE5LzI0NjYwMiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjIwMDQgLSA4NTkuNSBQdWJsaWMgUGxhbnMgYW5kIERvY3VtZW50czwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIFBERg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgMC41OCBNQg0KDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD48YSBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiByb2xlPSJidXR0b24iIGhyZWY9Imh0dHBzOi8vZGF0cmFja2VyLnBtaGMubnN3Lmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9NU9jUDk5c2hrYUU9JmFtcDtmaWxlTmFtZT0yMDA0Ky0rODU5LjUrUHVibGljK1BsYW5zK2FuZCtEb2N1bWVudHMuUERGIiB0YXJnZXQ9Il9ibGFuayI+VmlldzwvYT48L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQpEMjAxOS8yNjM2MTIgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD5EQTIwMDQgLSA4NTkgU1RBTVBFRCBQTEFOUzwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIFBERg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgMC4xOCBNQg0KDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD48YSBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiByb2xlPSJidXR0b24iIGhyZWY9Imh0dHBzOi8vZGF0cmFja2VyLnBtaGMubnN3Lmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9UmVaM0JhOEJEdUE9JmFtcDtmaWxlTmFtZT1EQTIwMDQrLSs4NTkrU1RBTVBFRCtQTEFOUy5QREYiIHRhcmdldD0iX2JsYW5rIj5WaWV3PC9hPjwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCkQyMDE5LzI2NDE4OSAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPk1vZGlmaWNhdGlvbiBvZiBDb25zZW50IC0gNSBHbGVuIFN0cmVldCBQT1JUIE1BQ1FVQVJJRSAtIEIgUiBEZXZlbG9wbWVudCBDb25zdWx0aW5nIFB0eSBMdGQgNzA4MjwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIFBERg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgMC4yMCBNQg0KDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD48YSBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiByb2xlPSJidXR0b24iIGhyZWY9Imh0dHBzOi8vZGF0cmFja2VyLnBtaGMubnN3Lmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9cmZ4ZWRVbC9MZWs9JmFtcDtmaWxlTmFtZT1Nb2RpZmljYXRpb24rb2YrQ29uc2VudCstKzUrR2xlbitTdHJlZXQrUE9SVCtNQUNRVUFSSUUrLStCK1IrRGV2ZWxvcG1lbnQrQ29uc3VsdGluZytQdHkrTHRkKzcwODIuUERGIiB0YXJnZXQ9Il9ibGFuayI+VmlldzwvYT48L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQoNCiAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgIDwvdGFibGU+DQo8L2Rpdj4NCg0KDQogICAgICAgICAgICA8aDMgaWQ9ImNvbnRhY3RVcyI+PGEgaHJlZj0iIyI+Q29udGFjdCBVczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQo8cD5UbyBtYWtlIGVucXVpcmllcyByZWdhcmRpbmcgYXBwbGljYXRpb25zIGRpc3BsYXllZCBoZXJlLCBjb250YWN0IHVzIGJ5IG9uZSBvZiB0aGUgZm9sbG93aW5nIG1ldGhvZHM6PC9wPg0KDQo8dWw+DQoJPGxpPmJ5IGVtYWlsIDxhIHN0eWxlPSJjb2xvcjogYmx1ZSIgaHJlZj0ibWFpbHRvOmNvdW5jaWxAcG1oYy5uc3cuZ292LmF1P3N1YmplY3Q9RW5xdWlyeSBmb3IgYXBwbGljYXRpb24gMTAuMjAwNC44NTkuNSI+Y291bmNpbEBwbWhjLm5zdy5nb3YuYXU8L2E+LCA8L2xpPg0KCTxsaT5pbiB3cml0aW5nIHRvIFBPIEJveCA4NCBQb3J0IE1hY3F1YXJpZSBOU1cgMjQ0NC4gQWxsIGNvcnJlc3BvbmRlbmNlIHNob3VsZCBiZSBhZGRyZXNzZWQgdG8gdGhlIENoaWVmIEV4ZWN1dGl2ZSBPZmZpY2VyIChDRU8pIGFuZCBxdW90ZSB0aGUgcmVsZXZhbnQgYXBwbGljYXRpb24gcmVmZXJlbmNlIG51bWJlci48L2xpPg0KCTxsaT5ieSBjb250YWN0aW5nIHRoZSBhc3Nlc3Npbmcgb2ZmaWNlciAobm90ZWQgaW4gdGhlIG9mZmljZXIgc2VjdGlvbiBhYm92ZSkgYnkgcGhvbmluZyBDdXN0b21lciBTZXJ2aWNlIENlbnRyZSBvbiAoMDIpIDY1ODEgODExMSBkdXJpbmcgbm9ybWFsIG9mZmljZSBob3VycyAoTW9uZGF5IHRvIEZyaWRheSwgOC4zMGFtIHRvIDQuMzBwbSkuPC9saT4NCjwvdWw+DQo8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0ibm90aWZpZWRBZGRyZXNzZXMiPjxhIGhyZWY9IiMiPk5vdGlmaWVkIEFkZHJlc3NlczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgPG9sPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjEwIERlbnQgQ3IsIFBvcnQgTWFjcXVhcmllIE5TVyAyNDQ0IDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+MTIgRGVudCBDciwgUG9ydCBNYWNxdWFyaWUgTlNXIDI0NDQgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4xNCBEZW50IENyLCBQb3J0IE1hY3F1YXJpZSBOU1cgMjQ0NCA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjIgR2xlbiBTdCwgUG9ydCBNYWNxdWFyaWUgTlNXIDI0NDQgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4zIEdsZW4gU3QsIFBvcnQgTWFjcXVhcmllIE5TVyAyNDQ0IDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+NyBHbGVuIFN0LCBQb3J0IE1hY3F1YXJpZSBOU1cgMjQ0NCA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjQ5IE1hdHRoZXcgRmxpbmRlcnMgRHIsIFBvcnQgTWFjcXVhcmllIE5TVyAyNDQ0IDwvbGk+DQoNCiAgICAgICAgICAgICAgICAgICAgPC9vbD4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQo8aDMgaWQ9Imdvb2dsZW1hcHMiPjxhIGhyZWY9IiMiPkdvb2dsZSBNYXBzPC9hPjwvaDM+DQo8ZGl2IGlkPSJtYXBfY29udGFpbmVyIj4NCiAgICA8ZGl2IGlkPSJtYXBfY2FudmFzIiBjbGFzcz0iaWZyYW1lLXJ3ZCI+DQogICAgPC9kaXY+DQo8L2Rpdj4NCg0KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KDQogICAgd2luZG93Lm9ubG9hZCA9IGxvYWRHb29nbGVNYXBzU2NyaXB0Ow0KDQogICAgdmFyIGdlb2NvZGVyOw0KICAgIHZhciBtYXA7DQogICAgdmFyIHRpbWVvdXQgPSAzMDA7DQogICAgdmFyIHByb3BlcnRpZXMgPSBbIjUgR2xlbiBTdCwgUG9ydCBNYWNxdWFyaWUgTlNXIDI0NDQgIl07DQogICAgdmFyIGxhdExuZ0FyciA9IFtdOw0KDQogICAgZnVuY3Rpb24gbG9hZEdvb2dsZU1hcHNTY3JpcHQoKSB7DQogICAgICAgIHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzY3JpcHQiKTsNCiAgICAgICAgc2NyaXB0LnR5cGUgPSAidGV4dC9qYXZhc2NyaXB0IjsNCiAgICAgICAgc2NyaXB0LnNyYyA9ICIvL21hcHMuZ29vZ2xlYXBpcy5jb20vbWFwcy9hcGkvanM/a2V5PUFJemFTeUJWdGFHNFlqWHdmZ05qdENsenFOY1N5R1BPX2NLTUVSTSZjYWxsYmFjaz1sb2FkR29vZ2xlTWFwcyI7DQogICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2NyaXB0KTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiByZW5kZXJHb29nbGVNYXBzKCkNCiAgICB7DQogICAgICAgIHZhciBtYXBPcHRpb25zID0gew0KICAgICAgICAgICAgY2VudGVyOiBsYXRMbmdBcnJbMF0sDQogICAgICAgICAgICB6b29tOiAxNiwNCiAgICAgICAgICAgIG1hcFR5cGVJZDogZ29vZ2xlLm1hcHMuTWFwVHlwZUlkLlJPQURNQVAsDQogICAgICAgICAgICBtYXBUeXBlQ29udHJvbDogZmFsc2UNCiAgICAgICAgfQ0KDQogICAgICAgIG1hcCA9IG5ldyBnb29nbGUubWFwcy5NYXAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm1hcF9jYW52YXMiKSwgbWFwT3B0aW9ucyk7DQoNCiAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkRG9tTGlzdGVuZXIod2luZG93LCAncmVzaXplJywgZnVuY3Rpb24oKSB7DQogICAgICAgICAgICB2YXIgY2VudGVyID0gbWFwLmdldENlbnRlcigpOw0KICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQudHJpZ2dlcihtYXAsICdyZXNpemUnKTsNCiAgICAgICAgICAgIG1hcC5zZXRDZW50ZXIoY2VudGVyKTsNCiAgICAgICAgfSk7DQoNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBsb2FkR29vZ2xlTWFwcygpIHsNCiAgICAgICAgZ2VvY29kZXIgPSBuZXcgZ29vZ2xlLm1hcHMuR2VvY29kZXIoKTsNCiAgICAgICAgdmFyIG5vT2ZGYWlsZWRMb2NhdGlvblNlYXJjaCA9IDA7DQoNCiAgICAgICAgJChwcm9wZXJ0aWVzKS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkgew0KICAgICAgICAgICAgdmFyIHByb3BlcnR5QWRkcmVzcyA9IGVsZW1lbnQ7DQoNCiAgICAgICAgICAgIC8vR2V0IGdlb2NvZGUNCiAgICAgICAgICAgIGdlb2NvZGVyLmdlb2NvZGUoeyAnYWRkcmVzcyc6IHByb3BlcnR5QWRkcmVzcyB9LCBmdW5jdGlvbiAocmVzdWx0cywgc3RhdHVzKSB7DQogICAgICAgICAgICAgICAgaWYgKHN0YXR1cyA9PSBnb29nbGUubWFwcy5HZW9jb2RlclN0YXR1cy5PSykgew0KDQogICAgICAgICAgICAgICAgICAgIHZhciBsb2NhdGlvbiA9IHJlc3VsdHNbMF0uZ2VvbWV0cnkubG9jYXRpb247DQogICAgICAgICAgICAgICAgICAgIHZhciBsYXRMbmcgPSBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKGxvY2F0aW9uLmxhdCgpLCBsb2NhdGlvbi5sbmcoKSk7DQoNCiAgICAgICAgICAgICAgICAgICAgbGF0TG5nQXJyLnB1c2gobGF0TG5nKTsNCg0KICAgICAgICAgICAgICAgICAgICBpZihsYXRMbmdBcnIubGVuZ3RoID09IDEpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckdvb2dsZU1hcHMoKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgIC8vQ3JlYXRlIG1hcmtlciBmb3IgbWFwIGFuZCBwbGFjZSBpdCBvbiB0aGUgbWFwDQogICAgICAgICAgICAgICAgICAgIHZhciBtYXJrZXIgPSBuZXcgZ29vZ2xlLm1hcHMuTWFya2VyKHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBsYXRMbmcsDQogICAgICAgICAgICAgICAgICAgICAgICBtYXA6IG1hcA0KICAgICAgICAgICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgICAgICAgICB2YXIgY29udGVudFN0cmluZyA9ICc8ZGl2PjxzcGFuPicgKyBwcm9wZXJ0eUFkZHJlc3MgKyAnPC9zcGFuPjwvZGl2Pic7DQogICAgICAgICAgICAgICAgICAgIHZhciBpbmZvd2luZG93ID0gbmV3IGdvb2dsZS5tYXBzLkluZm9XaW5kb3coeyAgIC8vQ3JlYXRlIGluZm8gd2luZG93DQogICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBjb250ZW50U3RyaW5nDQogICAgICAgICAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKG1hcmtlciwgJ2NsaWNrJywgZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpbmZvd2luZG93Lm9wZW4obWFwLCBtYXJrZXIpOw0KICAgICAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgLy9pZiBubyBsb2NhdGlvbiBmb3VuZCBieSBnb29nbGUgZm9yIGEgcHJvcGVydHkNCiAgICAgICAgICAgICAgICBlbHNlIGlmIChzdGF0dXMgPT0gIlpFUk9fUkVTVUxUUyIpIHsNCiAgICAgICAgICAgICAgICAgICAgbm9PZkZhaWxlZExvY2F0aW9uU2VhcmNoKys7DQoNCiAgICAgICAgICAgICAgICAgICAgaWYobm9PZkZhaWxlZExvY2F0aW9uU2VhcmNoID09ICQocHJvcGVydGllcykubGVuZ3RoKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlR29vZ2xlTWFwc0NvbnRlbnQoKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0dXMgPT0gZ29vZ2xlLm1hcHMuR2VvY29kZXJTdGF0dXMuT1ZFUl9RVUVSWV9MSU1JVCkgew0KICAgICAgICAgICAgICAgICAgICAvL3NldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyBnZXRHZW9Db2RlRm9yQWRkcmVzcyhpZCwgYWRkcmVzcyk7IH0sICh0aW1lb3V0KSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSk7DQogICAgICAgIH0pOw0KICAgIH0NCg0KICAgIC8vUmVwbGFjZXMgZ29vZ2xlIG1hcHMgY29udGVudCB3aXRoIGEgbmV3IGRpdiBibG9jayB0aGF0IGhhcyBpbmZvIG1lc3NhZ2UNCiAgICBmdW5jdGlvbiByZXBsYWNlR29vZ2xlTWFwc0NvbnRlbnQoKSB7DQogICAgICAgIHZhciBuZXdDb250ZW50ID0gJzxkaXYgY2xhc3M9InVpLWFjY29yZGlvbi1jb250ZW50IHVpLWhlbHBlci1yZXNldCB1aS13aWRnZXQtY29udGVudCB1aS1jb3JuZXItYm90dG9tIj4nICsNCiAgICAgICAgICAgICc8cD5Db3VsZG5cJ3QgZmluZCB0aGUgcHJvcGVydHkgYWRkcmVzcyhlcykgb24gR29vZ2xlIE1hcHMuIDxwPicgKw0KICAgICAgICAgICAgJzwvZGl2Pic7DQoNCiAgICAgICAgJCgnI21hcF9jb250YWluZXInKS5yZXBsYWNlV2l0aChuZXdDb250ZW50KTsNCiAgICB9DQoNCjwvc2NyaXB0Pg0KDQogICAgPC9kaXY+DQogICAgPGRpdiBjbGFzcz0ibW9kYWwgZmFkZSIgaWQ9InN1Ym1pc3Npb24tbW9kYWwiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2ciPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3Bpbm5lciI+PC9kaXY+IDwhLS0gVGhpcyBkaXYgaG9zdHMgdGhlIHNwaW5uZXIgLS0+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImNsb3NlIiBkYXRhLWRpc21pc3M9Im1vZGFsIiBhcmlhLWxhYmVsPSJDbG9zZSI+PHNwYW4gYXJpYS1oaWRkZW49InRydWUiPiZ0aW1lczs8L3NwYW4+PC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0ibW9kYWwtdGl0bGUiPlN1Ym1pc3Npb24gZm9yIDEwLjIwMDQuODU5LjU8L2gyPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCg0KICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHsNCg0KICAgICAgICAkKCcjYXBwbGljYXRpb24nKS50b2dnbGVwYW5lbHMoKTsNCg0KICAgICAgICAgICAgJCgnI3Byb3BlcnRpZXMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI2RldGFpbHMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI3RyYWNraW5nJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNkb2N1bWVudHMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI3JlbGF0ZWRBcHBsaWNhdGlvbnMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI2dvb2dsZW1hcHMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI2NvbnRhY3RVcycpLmNsaWNrKCk7DQoNCiAgICAgICAgDQoNCg0KICAgICAgICAkKCcjc3VibWlzc2lvbi1idG4nKS5jbGljayhmdW5jdGlvbiAoKSB7ICAgICAgICANCg0KDQogICAgICAgICAgICB2YXIgdXJsID0gImh0dHBzOi8vZGF0cmFja2VyLnBtaGMubnN3Lmdvdi5hdS8vQXBwbGljYXRpb24vU3VibWlzc2lvbi8iICsgZW5jb2RlVVJJKCIxMC4yMDA0Ljg1OS41Iik7DQoNCiAgICAgICAgICAgICQoJyNzdWJtaXNzaW9uLW1vZGFsJykubW9kYWwoJ3Nob3cnKS5maW5kKCcubW9kYWwtYm9keScpLmxvYWQodXJsKTsNCiAgICAgICAgfSk7DQogICAgfSk7DQoNCg0KICAgIC8qIFNob3dzIGFsbCB0aGUgcGFuZWxzICovDQogICAgZnVuY3Rpb24gc2hvd0FsbCgpIHsNCiAgICAgICAgJCgnI2FwcGxpY2F0aW9uJykuY2hpbGRyZW4oImgzIikuZWFjaChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcygidWktc3RhdGUtZGVmYXVsdCIpKSB7DQogICAgICAgICAgICAgICAgJCh0aGlzKS5jbGljaygpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9KTsNCiAgICB9DQoNCg0KICAgIC8qIEhpZGUgYWxsIHRoZSBwYW5lbHMgKi8NCiAgICBmdW5jdGlvbiBoaWRlQWxsKCkgew0KICAgICAgICAkKCcjYXBwbGljYXRpb24nKS5jaGlsZHJlbigiaDMiKS5lYWNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKCJ1aS1zdGF0ZS1hY3RpdmUiKSkgew0KICAgICAgICAgICAgICAgICQodGhpcykuY2xpY2soKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSk7DQogICAgfQ0KDQogICAgPC9zY3JpcHQ+DQoNCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8uY29udGFpbmVyLWZsdWlkIC0tPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8Zm9vdGVyIGNsYXNzPSJmb290ZXIgZ3JpZCI+DQogICAgICAgICAgICA8ZGl2ID4NCiAgICAgICAgICAgICAgICDCqSBQb3J0IE1hY3F1YXJpZSBIYXN0aW5ncyBDb3VuY2lsDQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9mb290ZXI+DQogICAgPC9kaXY+DQo8L2JvZHk+DQo8L2h0bWw+DQo=
  recorded_at: Mon, 21 Apr 2025 18:24:40 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Application/ApplicationDetails/010.2014.00000430.003
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - datracker.pmhc.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 302
      message: Found
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Home/Disclaimer"
      Server:
      - Microsoft-IIS/8.5
      Set-Cookie:
      - ASP.NET_SessionId=lu3ya4iwj3gf1zwvmg33gt2z; path=/; HttpOnly; SameSite=Lax
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:24:39 GMT
      Content-Length:
      - '133'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Home/Disclaimer\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:24:40 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Home/Disclaimer
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=lu3ya4iwj3gf1zwvmg33gt2z
      Host:
      - datracker.pmhc.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:24:39 GMT
      Content-Length:
      - '19685'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQo8aHRtbCB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCIgeG1sOmxhbmc9ImVuIiBsYW5nPSJlbiI+DQoNCg0KDQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCIgLz4NCiAgICA8bWV0YSBodHRwLWVxdWl2PSJYLVVBLUNvbXBhdGlibGUiIGNvbnRlbnQ9IklFPWVkZ2UiIC8+DQogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xIiAvPg0KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIiAvPg0KICAgIDxtZXRhIG5hbWU9ImtleXdvcmRzIiBjb250ZW50PSJQb3J0IE1hY3F1YXJpZSBDb3VuY2lsLCBEQSBUcmFja2VyLEFwcGxpY2F0aW9uIFRyYWNrZXIsRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24sRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24gVHJhY2tpbmcsIERBIEVucXVpcnksIERldmVsb3BtZW50IEFwcGxpY2F0aW9uIEVucXVpcnksIEFwcGxpY2F0aW9uIFRyYWNrZXIiPg0KICAgIDxtZXRhIG5hbWU9ImRlc2NyaXB0aW9uIiBjb250ZW50PSJUaGUgb2ZmaWNpYWwgUG9ydCBNYWNxdWFyaWUgQ291bmNpbCBBcHBsaWNhdGlvbiBUcmFja2VyIj4NCg0KICAgIDwhLS1mYXZpY29uLS0+DQogICAgPGxpbmsgaHJlZj0iL0NvdW5jaWxfVGhlbWUvUG9ydF9NYWNxdWFyaWUvZmF2aWNvbi5pY28iICkiIHJlbD0ic2hvcnRjdXQgaWNvbiIgdHlwZT0iaW1hZ2UveC1pY29uIiAvPg0KDQogICAgPCEtLSBqUXVlcnkgLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS0xLjExLjEuanMiPjwvc2NyaXB0Pg0KDQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS11aS0xLjExLjIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvY29yZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvYWNjb3JkaW9uLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC90aGVtZXMvYmFzZS90aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQoNCiAgICA8IS0tIEJvb3RzdHJhcCAtLT4NCiAgICA8c2NyaXB0IHNyYz0iL1NjcmlwdHMvYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCg0KICAgIDxsaW5rIGhyZWY9Ii9Db250ZW50L2Jvb3RzdHJhcC10aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvYm9vdHN0cmFwLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9mb250LWF3ZXNvbWUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPCEtLSBEYXRhVGFibGVzIC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2pxdWVyeS5kYXRhVGFibGVzLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMuYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMucmVzcG9uc2l2ZS5qcyI+PC9zY3JpcHQ+DQoNCiAgICANCiAgICA8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLmJvb3RzdHJhcC5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvRGF0YVRhYmxlcy9jc3MvZGF0YVRhYmxlcy5yZXNwb25zaXZlLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLnJlc3BvbnNpdmUuc2NzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KDQogICAgPCEtLSBCb290c3RyYXAgU0ItQWRtaW4tMiBQbHVnaW4gYW5kIG90aGVyIGNzcyBhbmQganMgZmlsZXMtLT4NCiAgICA8c2NyaXB0IHNyYz0iL2pzL2Jvb3RzdHJhcC1jb21ib2JveC5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL2Jvb3RzdHJhcC1kYXRlcGlja2VyLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvYm9vdHN0cmFwLWRpYWxvZy5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL2pxdWVyeS5mb3JtLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvanF1ZXJ5LnRhYmxlc29ydGVyLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvbWFzdGVydmlldy5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL21ldGlzTWVudS5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL3NiLWFkbWluLTIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL2Nzcy9ib290c3RyYXAtY29tYm9ib3guY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvZGF0ZXBpY2tlcjMuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvbWFzdGVydmlldy1jdXN0b21pc2F0aW9ucy5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL2Nzcy9zYi1hZG1pbi0yLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDxsaW5rIGhyZWY9Ii9Db3VuY2lsX1RoZW1lL1BvcnRfTWFjcXVhcmllL1BvcnRfTWFjcXVhcmllLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ291bmNpbF9UaGVtZS9Qb3J0X01hY3F1YXJpZS9Qb3J0X01hY3F1YXJpZV9Nb2JpbGVWaWV3LmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICANCg0KICAgIDwhLS1pbmNsdWRlIGdvb2dsZSBhbmFseXRpY3MgY29kZS0tPg0KICAgIDxzY3JpcHQ+DQogICAgICAgIChmdW5jdGlvbiAoaSwgcywgbywgZywgciwgYSwgbSkgew0KICAgICAgICAgICAgaVsnR29vZ2xlQW5hbHl0aWNzT2JqZWN0J10gPSByOyBpW3JdID0gaVtyXSB8fCBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgKGlbcl0ucSA9IGlbcl0ucSB8fCBbXSkucHVzaChhcmd1bWVudHMpDQogICAgICAgICAgICB9LCBpW3JdLmwgPSAxICogbmV3IERhdGUoKTsgYSA9IHMuY3JlYXRlRWxlbWVudChvKSwNCiAgICAgICAgICAgICAgICBtID0gcy5nZXRFbGVtZW50c0J5VGFnTmFtZShvKVswXTsgYS5hc3luYyA9IDE7IGEuc3JjID0gZzsgbS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLCBtKQ0KICAgICAgICB9KSh3aW5kb3csIGRvY3VtZW50LCAnc2NyaXB0JywgJy8vd3d3Lmdvb2dsZS1hbmFseXRpY3MuY29tL2FuYWx5dGljcy5qcycsICdnYScpOw0KDQogICAgICAgIGdhKCdjcmVhdGUnLCAnVUEtNzI5MTg1Mi00JywgJ2F1dG8nKTsNCiAgICAgICAgZ2EoJ3NlbmQnLCAncGFnZXZpZXcnKTsNCg0KICAgIDwvc2NyaXB0Pg0KDQoNCiAgICA8dGl0bGU+UG9ydCBNYWNxdWFyaWUtSGFzdGluZ3MgQ291bmNpbCAtIEFwcGxpY2F0aW9uIFRyYWNrZXI8L3RpdGxlPg0KDQogICAgPCEtLSBDdXN0b20gRm9udHMNCiAgICAgICAgPGxpbmsgaHJlZj0iL2ZvbnQtYXdlc29tZS9jc3MvZm9udC1hd2Vzb21lLm1pbi5jc3MiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPg0KICAgIC0tPg0KICAgIDwhLS0gSFRNTDUgU2hpbSBhbmQgUmVzcG9uZC5qcyBJRTggc3VwcG9ydCBvZiBIVE1MNSBlbGVtZW50cyBhbmQgbWVkaWEgcXVlcmllcyAtLT4NCiAgICA8IS0tIFdBUk5JTkc6IFJlc3BvbmQuanMgZG9lc24ndCB3b3JrIGlmIHlvdSB2aWV3IHRoZSBwYWdlIHZpYSBmaWxlOi8vIC0tPg0KICAgIDwhLS1baWYgbHQgSUUgOV0+DQogICAgICAgIDxzY3JpcHQgc3JjPSJodHRwczovL29zcy5tYXhjZG4uY29tL2xpYnMvaHRtbDVzaGl2LzMuNy4wL2h0bWw1c2hpdi5qcyI+PC9zY3JpcHQ+DQogICAgICAgIDxzY3JpcHQgc3JjPSJodHRwczovL29zcy5tYXhjZG4uY29tL2xpYnMvcmVzcG9uZC5qcy8xLjQuMi9yZXNwb25kLm1pbi5qcyI+PC9zY3JpcHQ+DQogICAgPCFbZW5kaWZdLS0+DQoNCiAgICA8bGluayBocmVmPSIvL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9Q2Fycm9pcytHb3RoaWMiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPg0KPC9oZWFkPg0KPGJvZHkgY2xhc3M9InN0YW5kYXJkIj4NCiAgICA8aGVhZGVyIGNsYXNzPSJjbGVhcmZpeCI+DQogICAgICAgIDxkaXYgc3R5bGU9IndpZHRoOiAxMDAlOyBiYWNrZ3JvdW5kLWNvbG9yOiAjNUQ5NzRDO2hlaWdodDoyMHB4ICI+PC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9nbyI+DQogICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvIj4NCiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9Db3VuY2lsX1RoZW1lL1BvcnRfTWFjcXVhcmllL2xvZ28ucG5nIiBhbHQ9IlBvcnQgTWFjcXVhcmllIEhhc3RpbmdzIExvZ28iIGlkPSJkaXNwbGF5LWxvZ28iIC8+DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InB1bGwtcmlnaHQiPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvaGVhZGVyPg0KICAgIDxkaXYgaWQ9ImNvbnRlbnQiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPg0KICAgICAgICAgICAgPGRpdiBpZD0ibmF2LWNvbnRhaW5lciIgc3R5bGU9ImRpc3BsYXk6bm9uZSI+DQogICAgICAgICAgICAgICAgPG5hdj48L25hdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJuYXZpZ2F0aW9uIiBjbGFzcz0iY29udGFpbmVyMSI+DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJob21lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cucG1oYy5uc3cuZ292LmF1L0hvbWUiPkhvbWU8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtMW5hdi1oYXMtY2hpbGRyZW4gbmF2LXNlY3Rpb24tdGhpcmRzLTEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvUmVzaWRlbnQtU2VydmljZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlc2lkZW50IFNlcnZpY2VzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtMiBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0xIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQWJvdXQtVXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFib3V0IFVzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtMyBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0xIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQnVzaW5lc3MiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJ1c2luZXNzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNCBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0yIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQnVpbGRpbmctUGxhbm5pbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJ1aWxkaW5nICZhbXA7IFBsYW5uaW5nDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNSBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0yIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQ29tbXVuaXR5LUZhY2lsaXRpZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvbW11bml0eSBGYWNpbGl0aWVzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNiBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0yIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQ3VsdHVyZS1TcG9ydC1MZWlzdXJlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdWx0dXJlLCBTcG9ydCAmYW1wOyBMZWlzdXJlDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNyBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0zIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvRm9ybXMtUGVybWl0cyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRm9ybXMgJmFtcDsgUGVybWl0cw0KICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxuYXYgY2xhc3M9Im5hdmJhciBuYXZiYXItZGVmYXVsdCBuYXZiYXItc3RhdGljLXRvcCIgcm9sZT0ibmF2aWdhdGlvbiIgc3R5bGU9Im1hcmdpbi1ib3R0b206IDAiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9Im5hdmJhci10b2dnbGUiIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgZGF0YS10YXJnZXQ9Ii5uYXZiYXItY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPlRvZ2dsZSBuYXZpZ2F0aW9uPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tYmFyIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1iYXIiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLWhlYWRlciAtLT4NCiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXZiYXItdG9wLWxpbmtzIG5hdmJhci1yaWdodCBoaWRkZW4teHMgaGlkZGVuLXNtIGhpZGRlbi1tZCI+DQogICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxzcGFuIGlkPSJwcmludEljb24iIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXByaW50IiBvbmNsaWNrPSJ3aW5kb3cucHJpbnQoKTsiPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItZGVmYXVsdCBzaWRlYmFyIiByb2xlPSJuYXZpZ2F0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2lkZWJhci1uYXYgbmF2YmFyLWNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IiBpZD0ic2lkZS1tZW51Ij4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwhLS0gLy5zaWRlYmFyLWNvbGxhcHNlIC0tPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwhLS0gLy5uYXZiYXItc3RhdGljLXNpZGUgLS0+DQogICAgICAgICAgICA8L25hdj4NCiAgICAgICAgICAgIDxkaXYgaWQ9InBhZ2Utd3JhcHBlciI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyLWZsdWlkIj4NCiAgICAgICAgICAgICAgICAgICAgDQoNCg0KDQo8ZGl2IGNsYXNzPSJwYWdlLWhlYWRlciI+DQogICAgPGgyPkRpc2NsYWltZXI8L2gyPg0KPC9kaXY+DQoNCjxkaXYgaWQ9InNjcm9sbGFibGVDb250ZW50Ij4NCjxwIGNsYXNzPSJzZWN0aW9uIj4NClRoZSBBcHBsaWNhdGlvbiBUcmFja2VyIHRvb2wgc2hvd3Mga2V5IG1pbGVzdG9uZXMgaW4gdGhlIGFwcGxpY2F0aW9uIHByb2Nlc3MgZm9yIGRldmVsb3BtZW50IGFuZCBvdGhlciBhc3NvY2lhdGVkIGFwcHJvdmFscy4gSXQgaXMgbm90IGludGVuZGVkIHRvIHByb3ZpZGUgYSBkZXRhaWxlZCBoaXN0b3J5LCBidXQgYSBzdW1tYXJ5IG9mIHRoZSBzdGFnZXMgdGhhdCB0aGUgYXBwbGljYXRpb24gaGFzIGdvbmUgdGhyb3VnaC4gIA0KQW55IGluZm9ybWF0aW9uIGFib3V0IHRoZSBwcm9jZXNzaW5nIG9mIGFuIGFwcGxpY2F0aW9uIG9idGFpbmVkIHRocm91Z2ggQ291bmNpbOKAmXMgQXBwbGljYXRpb24gVHJhY2tlciB0b29sIGlzIGludGVuZGVkIGFzIGEgZ3VpZGUgb25seS4gQ291bmNpbCBkb2VzIG5vdCBhY2NlcHQgYW55IHJlc3BvbnNpYmlsaXR5IGZvciBsb3NzIG9yIGhhcm0gYXMgYSByZXN1bHQgb2YgaW5mb3JtYXRpb24gb2J0YWluZWQgYW5kIHJlbGllZCBvbiBmcm9tIHRoaXMgZmFjaWxpdHkuDQo8L3A+DQo8cCBjbGFzcz0ic2VjdGlvbiI+DQpUaGlzIHNlcnZpY2UgYXBwbGllcyB0byBhbGwgZGV2ZWxvcG1lbnQgYXBwbGljYXRpb25zIGFuZCBhc3NvY2lhdGVkIGFwcGxpY2F0aW9ucyAgZnJvbSAxIEphbnVhcnkgMjAwMiBvbndhcmRzLiBJZiB5b3UgZG9u4oCZdCBmaW5kIHRoZSBkb2N1bWVudCB5b3UgYXJlIGFmdGVyIHBsZWFzZSBjb250YWN0IENvdW5jaWwgZm9yIGEgY29weSB2aWEgPGEgaHJlZj0ibWFpbHRvOmNvdW5jaWxAcG1oYy5uc3cuZ292LmF1Ij5jb3VuY2lsQHBtaGMubnN3Lmdvdi5hdTwvYT4uDQo8L3A+DQoNCjxwIGNsYXNzPSJzZWN0aW9uIj48aDM+VGVybXMgYW5kIENvbmRpdGlvbnM8L2gzPjwvcD4NCjxwIGNsYXNzPSJzZWN0aW9uIj4NCjx1bD4NCgk8bGk+VXNlIG9mIHRoZSBBcHBsaWNhdGlvbiBUcmFja2VyIGlzIHN1YmplY3QgdG8geW91ciBhZ3JlZW1lbnQgdG8gdGhlIHRlcm1zIGFuZCBjb25kaXRpb25zLCBwcml2YWN5IGFuZCBjb3B5cmlnaHQgbGF3cy48L2xpPg0KCTxsaT5JIGFjY2VwdCB0aGF0IHVzZSBvZiB0aGUgZGF0YSBieSBtZSBzaGFsbCBiZSBsaW1pdGVkIHRvIG15IG93biBwZXJzb25hbCB1c2Ugb3IgZm9yIHRoZSB1c2UgaW4gdGhlIG9yZGluYXJ5IGNvdXJzZSBvZiBteSBidXNpbmVzcy4gSSBzaGFsbCBub3Qgb24tc2VsbCBvciBkaXN0cmlidXRlIHRoZSBkYXRhIGZvciByZXdhcmQgdG8gYW55IG90aGVyIHRoaXJkIHBhcnR5LCBub3Igc2hhbGwgSSBwcm9kdWNlIGFueSBoYXJkY29weSBwcm9kdWN0cywgaW5jb3Jwb3JhdGluZyB0aGUgZGF0YSBmb3IgY29tbWVyY2lhbCB1c2UuIDwvbGk+DQoJPGxpPkkgYWNjZXB0IHRoYXQgZGF0YSBtdXN0IG5vdCBiZSB1c2VkIGZvciBkaXJlY3QgbWFya2V0aW5nIG9yIGJlIHVzZWQgaW4gYnJlYWNoIG9mIHRoZSBQcml2YWN5IExhd3MuPC9saT4NCgk8bGk+VG8gdGhlIG1heGltdW0gZXh0ZW50IHBlcm1pdHRlZCBieSBsYXcsIENvdW5jaWwgZXhjbHVkZXMgYWxsIGxpYWJpbGl0eSB0byB5b3UgZm9yIGxvc3Mgb3IgZGFtYWdlIG9mIGFueSBraW5kIChob3dldmVyIGNhdXNlZCwgaW5jbHVkaW5nIGJ5IG5lZ2xpZ2VuY2UpIGFyaXNpbmcgZnJvbSBvciByZWxhdGluZyBpbiBhbnkgd2F5IHRvIHRoZSBjb250ZW50cyBvZiB0aGlzIHdlYnNpdGUgYW5kL29yIHlvdXIgdXNlIG9mIGl0LjwvbGk+DQoJPGxpPkFsbCBtYXR0ZXJzIHJlbGF0aW5nIHRvIHRoaXMgd2Vic2l0ZSBhcmUgZ292ZXJuZWQgYnkgdGhlIGxhd3Mgb2YgdGhlIFN0YXRlIG9mIE5ldyBTb3V0aCBXYWxlcywgQXVzdHJhbGlhLjwvbGk+DQoJPGxpPkJ5IGFjY2Vzc2luZyB0aGlzIGluZm9ybWF0aW9uIHlvdSByZXF1ZXN0IHRvIGRvIHNvIHVuZGVyIHRoZSA8aT5FbnZpcm9ubWVudGFsIFBsYW5uaW5nIGFuZCBBc3Nlc3NtZW50IEFjdCAxOTc5PC9pPiAoTlNXKSwgPGk+R292ZXJubWVudCBJbmZvcm1hdGlvbiAoUHVibGljIEFjY2VzcykgQWN0IDIwMDk8L2k+IChOU1cpIFtHSVBBXSBhbmQgeW91IHVuZGVyc3RhbmQgdGhhdCBDb3VuY2lsIGlzIG1ha2luZyB0aGUgaW5mb3JtYXRpb24gYXZhaWxhYmxlIHVuZGVyIHRoZSBwcm92aXNpb25zIG9mIEdvdmVybm1lbnQgSW5mb3JtYXRpb24gKFB1YmxpYyBBY2Nlc3MpIEFjdCwgMjAwOS48L2xpPg0KCTxsaT5Zb3UgbXVzdCBub3QgbW9kaWZ5LCBjb3B5LCByZXByb2R1Y2UsIHJlcHVibGlzaCwgdXBsb2FkIHRvIGEgdGhpcmQgcGFydHksIHRyYW5zbWl0IG9yIGRpc3RyaWJ1dGUgaW4gYW55IHdheSB0aGUgY29udGVudCBvZiB0aGlzIHdlYnNpdGUgZXhjZXB0IGFzIGV4cHJlc3NseSBwcm92aWRlZCBpbiB0aGVzZSBUZXJtcyBhbmQgQ29uZGl0aW9ucyBvciBhcyBwZXJtaXR0ZWQgYnkgdGhlIENvcHlyaWdodCBBY3QsIDE5NjggKENUSCkuPC9saT4NCgk8bGk+VGhlIFdvcmxkIFdpZGUgV2ViIGV4aXN0cyBhY3Jvc3Mgb3BlbiBwdWJsaWMgbmV0d29ya3MgdGhhdCBhcmUgbmVpdGhlciBzZWN1cmUgbm9yIHByaXZhdGUuIEFjY29yZGluZ2x5LCB0aGUgdXNlciBhY2tub3dsZWRnZXMgYW5kIGFjY2VwdHMgdGhlIHJpc2sgdGhhdCBhbnkgY29tbXVuaWNhdGlvbiB0byBvciBmcm9tIHRoaXMgd2Vic2l0ZSBtYXkgYmUgaW50ZXJjZXB0ZWQsIHVzZWQgb3IgbW9kaWZpZWQgYnkgdGhpcmQgcGFydGllcy48L2xpPg0KCTxsaT5Db3VuY2lsIGhhcyBtYWRlIGV2ZXJ5IGVmZm9ydCB0byBwcm92aWRlIGluZm9ybWF0aW9uIHRoYXQgaXMgYWNjdXJhdGUgYW5kIGVhc3kgdG8gdW5kZXJzdGFuZCwgYWx0aG91Z2gsIHRoZSBhY2N1cmFjeSBvZiB0aGUgaW5mb3JtYXRpb24gY2Fubm90IGJlIGd1YXJhbnRlZWQgYW5kIHNob3VsZCBub3QgYmUgcmVsaWVkIG9uIG90aGVyIHRoYW4gYXMgYSBnZW5lcmFsIGd1aWRlLiBJZiB5b3UgcmVxdWlyZSBtb3JlIHNwZWNpZmljIGluZm9ybWF0aW9uIHBsZWFzZSBjb250YWN0IENvdW5jaWwgYnkgb25lIG9mIHRoZSBmb2xsb3dpbmcgbWV0aG9kczogPC9saT4NCjwvdWw+PC9wPg0KDQoJPHAgY2xhc3M9InNlY3Rpb24iPg0KPHRhYmxlPg0KPHRyPg0KCQk8dGQ+UGhvbmU6IAkJPC90ZD4NCgkJPHRkPigwMikgNjU4MSA4MTExPC90ZD4NCgk8L3RyPg0KCTx0cj4NCgkJPHRkPkVtYWlsOiAJPC90ZD4NCgkJPHRkPjxhIGhyZWY9Im1haWx0bzpjb3VuY2lsQHBtaGMubnN3Lmdvdi5hdSI+Y291bmNpbEBwbWhjLm5zdy5nb3YuYXU8L2E+PC90ZD4NCgk8L3RyPg0KCTx0cj4NCgkJPHRkPlBvc3Q6IDwvdGQ+DQoJCTx0ZD5Qb3J0IE1hY3F1YXJpZS1IYXN0aW5ncyBDb3VuY2lsIDxicj4NCgkJUE8gQm94IDg0IDxicj4NCgkJCVBPUlQgTUFDUVVBUklFICBOU1cgIDI0NDQgPGJyPg0KPC90ZD4NCgk8L3RyPg0KPC90YWJsZT4NCjwvcD4NCg0KPHAgY2xhc3M9InNlY3Rpb24iPjxoMz5Qcml2YWN5ICYgUGVyc29uYWwgSW5mb3JtYXRpb248L2gzPjwvcD4NCjxwIGNsYXNzPSJzZWN0aW9uIj5Qb3J0IE1hY3F1YXJpZS1IYXN0aW5ncyBDb3VuY2lsIGhhcyBjZXJ0YWluIG9ibGlnYXRpb25zIGluIHJlbGF0aW9uIHRvIHRoZSBwZXJzb25hbCBpbmZvcm1hdGlvbiB0aGF0IGl0IG9idGFpbnMgZnJvbSBwZW9wbGUgd2hvIHVzZSBvdXIgd2Vic2l0ZS4gUGxlYXNlIHJlYWQgdGhpcyBzdGF0ZW1lbnQgdG8gZmluZCBvdXQgd2hhdCBpbmZvcm1hdGlvbiBDb3VuY2lsIGNvbGxlY3RzIGFib3V0IHlvdSwgd2h5IGl0IGlzIGNvbGxlY3RlZCBhbmQgd2hhdCBpcyBkb25lIHdpdGggaXQuPC9wPg0KDQoNCjxwIGNsYXNzPSJzZWN0aW9uIj48Yj5QZXJzb25hbCBJbmZvcm1hdGlvbjwvYj48L3A+DQo8cCBjbGFzcz0ic2VjdGlvbiI+SW4gY29tcGxldGluZyBhbnkgb2YgdGhlIGZvcm1zIGF2YWlsYWJsZSBvbiB0aGlzIHNpdGUgeW91IHdpbGwgcHJvdmlkZSBDb3VuY2lsIHdpdGggInBlcnNvbmFsIGluZm9ybWF0aW9uIi4gVGhpcyBpcyBkZWZpbmVkIGluIHRoZSBQcml2YWN5IGFuZCBQZXJzb25hbCBJbmZvcm1hdGlvbiBQcm90ZWN0aW9uIEFjdCAxOTk4ICgiUFBJUEEiKSB0byBiZSAiaW5mb3JtYXRpb24gb3IgYW4gb3BpbmlvbiBhYm91dCBhbiBpbmRpdmlkdWFsIHdob3NlIGlkZW50aXR5IGlzIGFwcGFyZW50IG9yIGNhbiByZWFzb25hYmx5IGJlIGFzY2VydGFpbmVkIGZyb20gdGhlIGluZm9ybWF0aW9uIG9yIG9waW5pb24iLiAgPC9wPg0KPHAgY2xhc3M9InNlY3Rpb24iPlBlcnNvbmFsIGluZm9ybWF0aW9uIGNvbGxlY3RlZCBieSBDb3VuY2lsIHdpbGwgaW5jbHVkZSB5b3VyIG5hbWUgYW5kIGFueSBvdGhlciBpbmZvcm1hdGlvbiBpbmNsdWRlZCBpbiB0aGUgZm9ybXMuIEZ1cnRoZXIsIHdoZW4geW91IHZpc2l0IENvdW5jaWwncyB3ZWJzaXRlIHRoZSBmb2xsb3dpbmcgaW5mb3JtYXRpb24gaXMgcmVjb3JkZWQgZm9yIHN0YXRpc3RpY2FsIHB1cnBvc2VzOjwvcD4NCg0KPHAgY2xhc3M9InNlY3Rpb24iPg0KCTx1bD4NCgkJPGxpPlRoZSBhZGRyZXNzIG9mIHlvdXIgc2VydmVyPC9saT4NCgkJPGxpPlRoZSB0b3AtbGV2ZWwgZG9tYWluIGZyb20gd2hpY2ggeW91IGFjY2Vzc2VkIHRoZSBJbnRlcm5ldCAoc3VjaCBhcyAuY29tLC5vcmcsLiBnb3YsIC5lZHUsIC5hdSwgLm56LCBldGMuKTwvbGk+DQoJCTxsaT5UaGUgdHlwZSBvZiBicm93c2VyIHVzZWQ8L2xpPg0KCQk8bGk+VGhlIGRhdGUgYW5kIHRpbWUgb2YgeW91ciB2aXNpdCB0byB0aGUgc2l0ZTwvbGk+DQoJCTxsaT5UaGUgcGFnZXMgeW91IHZpc2l0ZWQgYW5kIHRoZSBkb2N1bWVudHMgeW91IGRvd25sb2FkZWQ8L2xpPg0KCQk8bGk+VGhlIGxpbmtzIHlvdSBmb2xsb3dlZCB0byBjb21lIHRvIGFuZCBsZWF2ZSB0aGUgc2l0ZTwvbGk+DQoJCTxsaT5Bbnkgb3RoZXIgaW5mb3JtYXRpb24gdGhhdCBpcyByZWNvcmRlZC48L2xpPg0KCTwvdWw+DQo8L3A+DQoNCjxwIGNsYXNzPSJzZWN0aW9uIj5UaGlzIGluZm9ybWF0aW9uIGlzIHVzZWQgdG8gY3JlYXRlIHJlcG9ydHMgdG8gdGVsbCBDb3VuY2lsIHRoZSBudW1iZXIgb2YgdmlzaXRvcnMgdG8gdGhlIHNpdGUsIGFyZWFzIHZpc2l0ZWQgYW5kIHRlY2huaWNhbCBpbmZvcm1hdGlvbiBzdWNoIGFzIGJyb2tlbiBsaW5rcy4gPC9wPg0KPHAgY2xhc3M9InNlY3Rpb24iPlBlcnNvbmFsIGluZm9ybWF0aW9uIGNvbGxlY3RlZCBmcm9tIHlvdSBpcyBoZWxkIGFuZCB1c2VkIGJ5IENvdW5jaWwgYXMgcGVybWl0dGVkIGJ5IFByaXZhY3kgYW5kIFBlcnNvbmFsIEluZm9ybWF0aW9uIFByb3RlY3Rpb24gQWN0IDE5OTggKCJQUElQQSIpLiBVbmRlciBQUElQQSB5b3UgYXJlIGVudGl0bGVkIHRvIGJlIGluZm9ybWVkIG9mOjwvcD4NCg0KPHAgY2xhc3M9InNlY3Rpb24iPg0KCTx1bD4NCgkJPGxpPnRoZSBmYWN0IHRoYXQgcGVyc29uYWwgaW5mb3JtYXRpb24gaXMgYmVpbmcgY29sbGVjdGVkPC9saT4NCgkJPGxpPnRoZSBuYW1lIGFuZCBhZGRyZXNzIG9mIHRoZSBhZ2VuY3kgY29sbGVjdGluZyBhbmQgaG9sZGluZyB0aGUgaW5mb3JtYXRpb248L2xpPg0KCQk8bGk+dGhlIHB1cnBvc2VzIGZvciB3aGljaCB0aGUgaW5mb3JtYXRpb24gaXMgYmVpbmcgY29sbGVjdGVkPC9saT4NCgkJPGxpPnRoZSBwZXJzb25zIGFuZCBib2RpZXMgdG8gd2hvbSB0aGUgaW5mb3JtYXRpb24gd2lsbCBiZSBkaXNjbG9zZWQ8L2xpPg0KCQk8bGk+d2hldGhlciB0aGUgcHJvdmlzaW9uIG9mIHRoZSBpbmZvcm1hdGlvbiBpcyBtYW5kYXRvcnkgb3Igdm9sdW50YXJ5PC9saT4NCgkJPGxpPnRoZSBjb25zZXF1ZW5jZXMgKGlmIGFueSkgb2Ygbm90IHByb3ZpZGluZyB0aGUgaW5mb3JtYXRpb248L2xpPg0KCQk8bGk+eW91ciByaWdodCB1bmRlciBQUElQQSB0byBhcHBseSB0byBoYXZlIGFjY2VzcyB0byB5b3VyIGluZm9ybWF0aW9uIG9yIHRvIGhhdmUgaXQgY29ycmVjdGVkLjwvbGk+DQoJPC91bD4NCjwvcD4NCg0KPHAgY2xhc3M9InNlY3Rpb24iPkNvdW5jaWwgaGFzIHZhcmlvdXMgZnVuY3Rpb25zIHVuZGVyIHRoZSBFbnZpcm9ubWVudGFsIFBsYW5uaW5nIGFuZCBBc3Nlc3NtZW50IEFjdCwgMTk3OSwgdGhlIExvY2FsIEdvdmVybm1lbnQgQWN0IDE5OTMgYW5kIG90aGVyIGxlZ2lzbGF0aW9uLiBQZXJzb25hbCBpbmZvcm1hdGlvbiBpcyBjb2xsZWN0ZWQgdG8gZW5hYmxlIENvdW5jaWwgdG8gcGVyZm9ybSB0aGUgZnVuY3Rpb25zIHVuZGVyIHRoZXNlIEFjdHMuIDwvcD4NCjxwIGNsYXNzPSJzZWN0aW9uIj5VbmRlciBQUElQQSwgb3RoZXIgYWdlbmNpZXMgKHBhcnRpY3VsYXJseSBsYXcgZW5mb3JjZW1lbnQgYWdlbmNpZXMpIG1heSBoYXZlIHRoZSByaWdodCB0byBnYWluIGFjY2VzcyB0byBwZXJzb25hbCBpbmZvcm1hdGlvbiBhYm91dCB5b3UgdGhhdCBDb3VuY2lsIGhvbGRzLiBJbmRlZWQsIHNvbWUgYWdlbmNpZXMgKHBhcnRpY3VsYXJseSBsYXcgZW5mb3JjZW1lbnQgYWdlbmNpZXMpIGhhdmUgbGVnYWwgYXV0aG9yaXR5IHRvIGluc3BlY3Qgb3VyIEludGVybmV0IFNlcnZpY2UgUHJvdmlkZXJzJyBsb2dzIGFuZCBvYnRhaW4geW91ciBhZGRyZXNzIGlmIHJlcXVpcmVkIGZvciBhbiBvZmZpY2lhbCBpbnZlc3RpZ2F0aW9uLiA8L3A+DQo8cCBjbGFzcz0ic2VjdGlvbiI+Q291bmNpbCByZWNvcmRzIG1heSBiZSBhdmFpbGFibGUgZm9yIHB1YmxpYyBpbnNwZWN0aW9uIGFuZCBjb3B5aW5nLCBpbmNsdWRpbmcgdW5kZXIgdGhlIEdvdmVybm1lbnQgSW5mb3JtYXRpb24gKFB1YmxpYyBBY2Nlc3MpIEFjdCAyMDA5LjwvcD4NCjxwIGNsYXNzPSJzZWN0aW9uIj48L3A+DQoNCjxwIGNsYXNzPSJzZWN0aW9uIj48aDM+Q29weXJpZ2h0PC9oMz48L3A+DQo8cCBjbGFzcz0ic2VjdGlvbiI+VGhlIGNvbnRlbnRzIG9mIHRoaXMgd2Vic2l0ZSAod2hpY2ggaW5jbHVkZXMgZG93bmxvYWRhYmxlIG1hdGVyaWFsKSBhcmUgc3ViamVjdCB0byBjb3B5cmlnaHQgYW5kIGFyZSBwcm90ZWN0ZWQgYnkgbGF3cyBvZiBBdXN0cmFsaWEgYW5kIG90aGVyIGNvdW50cmllcyB0aHJvdWdoIGludGVybmF0aW9uYWwgdHJlYXRpZXMuPC9wPg0KPHAgY2xhc3M9InNlY3Rpb24iPlBvcnQgTWFjcXVhcmllLUhhc3RpbmdzIENvdW5jaWwgZ3JhbnRzIHlvdSBhIG5vbi1leGNsdXNpdmUgbGljZW5jZSB0byByZXByb2R1Y2UgdGhlIGNvbnRlbnRzIG9mIHRoaXMgd2Vic2l0ZSBpbiB5b3VyIHdlYiBicm93c2VyIChhbmQgaW4gYW55IGNhY2hlIGZpbGUgcHJvZHVjZWQgYnkgeW91ciB3ZWIgYnJvd3NlcikgZm9yIHRoZSBzb2xlIHB1cnBvc2Ugb2Ygdmlld2luZyB0aGUgY29udGVudC4gQ291bmNpbCByZXNlcnZlcyBhbGwgb3RoZXIgcmlnaHRzLjwvcD4NCjxwIGNsYXNzPSJzZWN0aW9uIj5CeSBhZ3JlZWluZyB0byB1c2UgdGhpcyBzeXN0ZW0geW91IGFncmVlIHRvIGluZGVtbmlmeSBDb3VuY2lsIGFnYWluc3QgYW55IGluZnJpbmdlbWVudCBieSB5b3Ugb2YgYW55IHRoaXJkIHBhcnR5IEludGVsbGVjdHVhbCBQcm9wZXJ0eSByaWdodHMsIGluY2x1ZGluZyBDb3B5cmlnaHQuPC9wPg0KDQo8L2Rpdj4NCg0KPHAgY2xhc3M9InNlY3Rpb24iPg0KPC9icj4NCjxiPkkgaGF2ZSByZWFkIGFuZCB1bmRlcnN0b29kIHRoZSBwcm92aXNpb25zIHNldCBvdXQgYWJvdmUuPC9iPg0KPC9wPg0KPC9icj4NCg0KDQoNCg0KPGZvcm0gYWN0aW9uPSIvaG9tZS9kaXNjbGFpbWVycHJvY2Vzc2luZyIgaWQ9ImRpc2NsYWltZXItZm9ybSIgbWV0aG9kPSJwb3N0Ij48aW5wdXQgaWQ9ImFncmVlZCIgbmFtZT0iYWdyZWVkIiB0eXBlPSJoaWRkZW4iIHZhbHVlPSJGYWxzZSIgLz4gICAgPGRpdiBpZD0iYnRucyI+DQogICAgICAgIDxidXR0b24gaWQ9ImFncmVlIiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIGZvcm09ImRpc2NsYWltZXItZm9ybSI+QWdyZWU8L2J1dHRvbj4NCiAgICAgICAgPGJ1dHRvbiBpZD0iZGlzYWdyZWUiIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4td2FybmluZyIgZm9ybT0iZGlzY2xhaW1lci1mb3JtIj5EaXNhZ3JlZTwvYnV0dG9uPg0KICAgIDwvZGl2Pg0KPC9mb3JtPg0KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KDQogICAgdmFyIGxhc3RTY3JvbGxUb3A7DQogICAgdmFyIG1heFNjcm9sbGFibGVDb250ZW50SGVpZ2h0Ow0KDQogICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkgew0KDQogICAgICAgIHVwZGF0ZUxlZnRNYXJnaW4oKTsNCiAgICAgICAgYXR0YWNoQ2xpY2tIYW5kbGVycygpOw0KDQogICAgICAgIGlmIChpc1RleHRCbG9ja092ZXJmbG93aW5nKCkpIHsNCiAgICAgICAgICAgIGxhc3RTY3JvbGxUb3AgPSAwOzsNCiAgICAgICAgICAgIHZhciB3aW5kb3dIZWlnaHQgPSAkKHdpbmRvdykuaGVpZ2h0KCk7DQoNCiAgICAgICAgICAgIHZhciBoZWFkZXJIZWlnaHQgPSAkKCcjc2Nyb2xsYWJsZUNvbnRlbnQnKS5vZmZzZXQoKS50b3A7DQogICAgICAgICAgICB2YXIgbmV3SGVpZ2h0ID0gZ2V0TmV3SGVpZ2h0KCk7DQoNCiAgICAgICAgICAgIGFkanVzdERpc2NsYWltZXJDb250ZW50Rm9yRG93blNjcm9sbChuZXdIZWlnaHQpOw0KDQogICAgICAgICAgICAkKHdpbmRvdykuc2Nyb2xsKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICB2YXIgbkhlaWdodCA9ICQod2luZG93KS5oZWlnaHQoKSAtIChoZWFkZXJIZWlnaHQgLSAkKHdpbmRvdykuc2Nyb2xsVG9wKCkgKyAkKCdmb3JtJykuaGVpZ2h0KCkgKyAxMDApOw0KDQogICAgICAgICAgICAgICAgdmFyIGJJc0Rvd25TY3JvbGwgPSBpc1Njcm9sbERvd24oKTsNCg0KICAgICAgICAgICAgICAgIGlmIChiSXNEb3duU2Nyb2xsKQ0KICAgICAgICAgICAgICAgICAgICBhZGp1c3REaXNjbGFpbWVyQ29udGVudEZvckRvd25TY3JvbGwobkhlaWdodCk7DQogICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgICAgICBhZGp1c3REaXNjbGFpbWVyQ29udGVudEZvclVwU2Nyb2xsKG5IZWlnaHQpOw0KICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIGdldE5ld0hlaWdodCgpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gJCh3aW5kb3cpLmhlaWdodCgpIC0gKGhlYWRlckhlaWdodCArICQod2luZG93KS5zY3JvbGxUb3AoKSArICQoJ2Zvcm0nKS5oZWlnaHQoKSArIDEwMCk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIGlzU2Nyb2xsRG93bigpIHsNCiAgICAgICAgICAgICAgICB2YXIgc3QgPSAkKHdpbmRvdykuc2Nyb2xsVG9wKCk7DQogICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHN0ID49IGxhc3RTY3JvbGxUb3A7CQkgIC8vIGRvd25zY3JvbGwNCg0KICAgICAgICAgICAgICAgIGxhc3RTY3JvbGxUb3AgPSBzdDsNCiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0Ow0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBmdW5jdGlvbiBoYXNTY3JvbGxCYXIoaXRlbSkgew0KICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLmdldCgwKS5zY3JvbGxIZWlnaHQgPiBpdGVtLmdldCgwKS5jbGllbnRIZWlnaHQ7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIGFkanVzdERpc2NsYWltZXJDb250ZW50Rm9yRG93blNjcm9sbChuSGVpZ2h0KSB7DQogICAgICAgICAgICAgICAgdmFyIGlzU2Nyb2xsYWJsZSA9IGhhc1Njcm9sbEJhcigkKCcjc2Nyb2xsYWJsZUNvbnRlbnQnKSk7DQogICAgICAgICAgICAgICAgaWYgKGlzU2Nyb2xsYWJsZSkgew0KICAgICAgICAgICAgICAgICAgICAkKCcjc2Nyb2xsYWJsZUNvbnRlbnQnKS5oZWlnaHQobkhlaWdodCk7DQogICAgICAgICAgICAgICAgICAgIG1heFNjcm9sbGFibGVDb250ZW50SGVpZ2h0ID0gbkhlaWdodDsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIGFkanVzdERpc2NsYWltZXJDb250ZW50Rm9yVXBTY3JvbGwobkhlaWdodCkgew0KICAgICAgICAgICAgICAgIHZhciBpc1Njcm9sbGFibGUgPSBoYXNTY3JvbGxCYXIoJCgnI3Njcm9sbGFibGVDb250ZW50JykpOw0KDQogICAgICAgICAgICAgICAgaWYgKG1heFNjcm9sbGFibGVDb250ZW50SGVpZ2h0ID4gbkhlaWdodCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICQoJyNzY3JvbGxhYmxlQ29udGVudCcpLmhlaWdodChuSGVpZ2h0KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9KTsNCg0KDQogICAgZnVuY3Rpb24gdXBkYXRlTGVmdE1hcmdpbigpIHsNCiAgICAgICAgaWYgKCQoJyNzaWRlLW1lbnUnKS5odG1sKCkpIHsNCiAgICAgICAgICAgICQoJyNwYWdlLXdyYXBwZXInKS5jc3MoeyAnbWFyZ2luLWxlZnQnOiAnMCcgfSk7DQogICAgICAgICAgICAkKCcuc2lkZWJhcicpLmhpZGUoKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KDQogICAgZnVuY3Rpb24gYXR0YWNoQ2xpY2tIYW5kbGVycygpIHsNCiAgICAgICAgJCgnI2FncmVlJykuY2xpY2soZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgJCgnI2FncmVlZCcpLnZhbCgidHJ1ZSIpOw0KICAgICAgICAgICAgJCgnI2Rpc2NsYWltZXItZm9ybScpLnN1Ym1pdCgpOw0KICAgICAgICB9KTsNCg0KICAgICAgICAkKCcjZGlzYWdyZWUnKS5jbGljayhmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAkKCcjYWdyZWVkJykudmFsKCJmYWxzZSIpOw0KICAgICAgICAgICAgJCgnI2Rpc2NsYWltZXItZm9ybScpLnN1Ym1pdCgpOw0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBpc1RleHRCbG9ja092ZXJmbG93aW5nKCkgew0KICAgICAgICByZXR1cm4gJCgiI3Njcm9sbGFibGVDb250ZW50IikucHJvcCgnc2Nyb2xsSGVpZ2h0JykgPiAkKCIjc2Nyb2xsYWJsZUNvbnRlbnQiKS5oZWlnaHQoKTsNCiAgICB9DQo8L3NjcmlwdD4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8uY29udGFpbmVyLWZsdWlkIC0tPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8Zm9vdGVyIGNsYXNzPSJmb290ZXIgZ3JpZCI+DQogICAgICAgICAgICA8ZGl2ID4NCiAgICAgICAgICAgICAgICDCqSBQb3J0IE1hY3F1YXJpZSBIYXN0aW5ncyBDb3VuY2lsDQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9mb290ZXI+DQogICAgPC9kaXY+DQo8L2JvZHk+DQo8L2h0bWw+DQo=
  recorded_at: Mon, 21 Apr 2025 18:24:40 GMT
- request:
    method: post
    uri: https://datracker.pmhc.nsw.gov.au/home/disclaimerprocessing
    body:
      encoding: UTF-8
      string: agreed=true
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=lu3ya4iwj3gf1zwvmg33gt2z
      Host:
      - datracker.pmhc.nsw.gov.au
      Referer:
      - https://datracker.pmhc.nsw.gov.au/Home/Disclaimer
      Content-Type:
      - application/x-www-form-urlencoded
      Content-Length:
      - '11'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Application/ApplicationDetails/010.2014.00000430.003"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      Set-Cookie:
      - User=accessAllowed-MasterView=True; path=/
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:24:39 GMT
      Content-Length:
      - '170'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Application/ApplicationDetails/010.2014.00000430.003\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:24:40 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Application/ApplicationDetails/010.2014.00000430.003
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=lu3ya4iwj3gf1zwvmg33gt2z; User=accessAllowed-MasterView=True
      Host:
      - datracker.pmhc.nsw.gov.au
      Referer:
      - https://datracker.pmhc.nsw.gov.au/Home/Disclaimer
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:24:50 GMT
      Content-Length:
      - '35484'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQo8aHRtbCB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCIgeG1sOmxhbmc9ImVuIiBsYW5nPSJlbiI+DQoNCg0KDQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCIgLz4NCiAgICA8bWV0YSBodHRwLWVxdWl2PSJYLVVBLUNvbXBhdGlibGUiIGNvbnRlbnQ9IklFPWVkZ2UiIC8+DQogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xIiAvPg0KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIiAvPg0KICAgIDxtZXRhIG5hbWU9ImtleXdvcmRzIiBjb250ZW50PSJQb3J0IE1hY3F1YXJpZSBDb3VuY2lsLCBEQSBUcmFja2VyLEFwcGxpY2F0aW9uIFRyYWNrZXIsRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24sRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24gVHJhY2tpbmcsIERBIEVucXVpcnksIERldmVsb3BtZW50IEFwcGxpY2F0aW9uIEVucXVpcnksIEFwcGxpY2F0aW9uIFRyYWNrZXIiPg0KICAgIDxtZXRhIG5hbWU9ImRlc2NyaXB0aW9uIiBjb250ZW50PSJUaGUgb2ZmaWNpYWwgUG9ydCBNYWNxdWFyaWUgQ291bmNpbCBBcHBsaWNhdGlvbiBUcmFja2VyIj4NCg0KICAgIDwhLS1mYXZpY29uLS0+DQogICAgPGxpbmsgaHJlZj0iL0NvdW5jaWxfVGhlbWUvUG9ydF9NYWNxdWFyaWUvZmF2aWNvbi5pY28iICkiIHJlbD0ic2hvcnRjdXQgaWNvbiIgdHlwZT0iaW1hZ2UveC1pY29uIiAvPg0KDQogICAgPCEtLSBqUXVlcnkgLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS0xLjExLjEuanMiPjwvc2NyaXB0Pg0KDQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS11aS0xLjExLjIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvY29yZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvYWNjb3JkaW9uLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC90aGVtZXMvYmFzZS90aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQoNCiAgICA8IS0tIEJvb3RzdHJhcCAtLT4NCiAgICA8c2NyaXB0IHNyYz0iL1NjcmlwdHMvYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCg0KICAgIDxsaW5rIGhyZWY9Ii9Db250ZW50L2Jvb3RzdHJhcC10aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvYm9vdHN0cmFwLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9mb250LWF3ZXNvbWUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPCEtLSBEYXRhVGFibGVzIC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2pxdWVyeS5kYXRhVGFibGVzLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMuYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMucmVzcG9uc2l2ZS5qcyI+PC9zY3JpcHQ+DQoNCiAgICANCiAgICA8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLmJvb3RzdHJhcC5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvRGF0YVRhYmxlcy9jc3MvZGF0YVRhYmxlcy5yZXNwb25zaXZlLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLnJlc3BvbnNpdmUuc2NzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KDQogICAgPCEtLSBCb290c3RyYXAgU0ItQWRtaW4tMiBQbHVnaW4gYW5kIG90aGVyIGNzcyBhbmQganMgZmlsZXMtLT4NCiAgICA8c2NyaXB0IHNyYz0iL2pzL2Jvb3RzdHJhcC1jb21ib2JveC5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL2Jvb3RzdHJhcC1kYXRlcGlja2VyLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvYm9vdHN0cmFwLWRpYWxvZy5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL2pxdWVyeS5mb3JtLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvanF1ZXJ5LnRhYmxlc29ydGVyLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvbWFzdGVydmlldy5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL21ldGlzTWVudS5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL3NiLWFkbWluLTIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL2Nzcy9ib290c3RyYXAtY29tYm9ib3guY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvZGF0ZXBpY2tlcjMuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvbWFzdGVydmlldy1jdXN0b21pc2F0aW9ucy5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL2Nzcy9zYi1hZG1pbi0yLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDxsaW5rIGhyZWY9Ii9Db3VuY2lsX1RoZW1lL1BvcnRfTWFjcXVhcmllL1BvcnRfTWFjcXVhcmllLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ291bmNpbF9UaGVtZS9Qb3J0X01hY3F1YXJpZS9Qb3J0X01hY3F1YXJpZV9Nb2JpbGVWaWV3LmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICANCg0KICAgIDwhLS1pbmNsdWRlIGdvb2dsZSBhbmFseXRpY3MgY29kZS0tPg0KICAgIDxzY3JpcHQ+DQogICAgICAgIChmdW5jdGlvbiAoaSwgcywgbywgZywgciwgYSwgbSkgew0KICAgICAgICAgICAgaVsnR29vZ2xlQW5hbHl0aWNzT2JqZWN0J10gPSByOyBpW3JdID0gaVtyXSB8fCBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgKGlbcl0ucSA9IGlbcl0ucSB8fCBbXSkucHVzaChhcmd1bWVudHMpDQogICAgICAgICAgICB9LCBpW3JdLmwgPSAxICogbmV3IERhdGUoKTsgYSA9IHMuY3JlYXRlRWxlbWVudChvKSwNCiAgICAgICAgICAgICAgICBtID0gcy5nZXRFbGVtZW50c0J5VGFnTmFtZShvKVswXTsgYS5hc3luYyA9IDE7IGEuc3JjID0gZzsgbS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLCBtKQ0KICAgICAgICB9KSh3aW5kb3csIGRvY3VtZW50LCAnc2NyaXB0JywgJy8vd3d3Lmdvb2dsZS1hbmFseXRpY3MuY29tL2FuYWx5dGljcy5qcycsICdnYScpOw0KDQogICAgICAgIGdhKCdjcmVhdGUnLCAnVUEtNzI5MTg1Mi00JywgJ2F1dG8nKTsNCiAgICAgICAgZ2EoJ3NlbmQnLCAncGFnZXZpZXcnKTsNCg0KICAgIDwvc2NyaXB0Pg0KDQoNCiAgICA8dGl0bGU+UG9ydCBNYWNxdWFyaWUtSGFzdGluZ3MgQ291bmNpbCAtIEFwcGxpY2F0aW9uIFRyYWNrZXI8L3RpdGxlPg0KDQogICAgPCEtLSBDdXN0b20gRm9udHMNCiAgICAgICAgPGxpbmsgaHJlZj0iL2ZvbnQtYXdlc29tZS9jc3MvZm9udC1hd2Vzb21lLm1pbi5jc3MiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPg0KICAgIC0tPg0KICAgIDwhLS0gSFRNTDUgU2hpbSBhbmQgUmVzcG9uZC5qcyBJRTggc3VwcG9ydCBvZiBIVE1MNSBlbGVtZW50cyBhbmQgbWVkaWEgcXVlcmllcyAtLT4NCiAgICA8IS0tIFdBUk5JTkc6IFJlc3BvbmQuanMgZG9lc24ndCB3b3JrIGlmIHlvdSB2aWV3IHRoZSBwYWdlIHZpYSBmaWxlOi8vIC0tPg0KICAgIDwhLS1baWYgbHQgSUUgOV0+DQogICAgICAgIDxzY3JpcHQgc3JjPSJodHRwczovL29zcy5tYXhjZG4uY29tL2xpYnMvaHRtbDVzaGl2LzMuNy4wL2h0bWw1c2hpdi5qcyI+PC9zY3JpcHQ+DQogICAgICAgIDxzY3JpcHQgc3JjPSJodHRwczovL29zcy5tYXhjZG4uY29tL2xpYnMvcmVzcG9uZC5qcy8xLjQuMi9yZXNwb25kLm1pbi5qcyI+PC9zY3JpcHQ+DQogICAgPCFbZW5kaWZdLS0+DQoNCiAgICA8bGluayBocmVmPSIvL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9Q2Fycm9pcytHb3RoaWMiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPg0KPC9oZWFkPg0KPGJvZHkgY2xhc3M9InN0YW5kYXJkIj4NCiAgICA8aGVhZGVyIGNsYXNzPSJjbGVhcmZpeCI+DQogICAgICAgIDxkaXYgc3R5bGU9IndpZHRoOiAxMDAlOyBiYWNrZ3JvdW5kLWNvbG9yOiAjNUQ5NzRDO2hlaWdodDoyMHB4ICI+PC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9nbyI+DQogICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvIj4NCiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9Db3VuY2lsX1RoZW1lL1BvcnRfTWFjcXVhcmllL2xvZ28ucG5nIiBhbHQ9IlBvcnQgTWFjcXVhcmllIEhhc3RpbmdzIExvZ28iIGlkPSJkaXNwbGF5LWxvZ28iIC8+DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InB1bGwtcmlnaHQiPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvaGVhZGVyPg0KICAgIDxkaXYgaWQ9ImNvbnRlbnQiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPg0KICAgICAgICAgICAgPGRpdiBpZD0ibmF2LWNvbnRhaW5lciIgc3R5bGU9ImRpc3BsYXk6bm9uZSI+DQogICAgICAgICAgICAgICAgPG5hdj48L25hdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJuYXZpZ2F0aW9uIiBjbGFzcz0iY29udGFpbmVyMSI+DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJob21lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cucG1oYy5uc3cuZ292LmF1L0hvbWUiPkhvbWU8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtMW5hdi1oYXMtY2hpbGRyZW4gbmF2LXNlY3Rpb24tdGhpcmRzLTEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvUmVzaWRlbnQtU2VydmljZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlc2lkZW50IFNlcnZpY2VzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtMiBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0xIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQWJvdXQtVXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFib3V0IFVzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtMyBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0xIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQnVzaW5lc3MiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJ1c2luZXNzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNCBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0yIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQnVpbGRpbmctUGxhbm5pbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJ1aWxkaW5nICZhbXA7IFBsYW5uaW5nDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNSBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0yIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQ29tbXVuaXR5LUZhY2lsaXRpZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvbW11bml0eSBGYWNpbGl0aWVzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNiBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0yIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQ3VsdHVyZS1TcG9ydC1MZWlzdXJlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdWx0dXJlLCBTcG9ydCAmYW1wOyBMZWlzdXJlDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNyBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0zIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvRm9ybXMtUGVybWl0cyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRm9ybXMgJmFtcDsgUGVybWl0cw0KICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxuYXYgY2xhc3M9Im5hdmJhciBuYXZiYXItZGVmYXVsdCBuYXZiYXItc3RhdGljLXRvcCIgcm9sZT0ibmF2aWdhdGlvbiIgc3R5bGU9Im1hcmdpbi1ib3R0b206IDAiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9Im5hdmJhci10b2dnbGUiIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgZGF0YS10YXJnZXQ9Ii5uYXZiYXItY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPlRvZ2dsZSBuYXZpZ2F0aW9uPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tYmFyIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1iYXIiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLWhlYWRlciAtLT4NCiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXZiYXItdG9wLWxpbmtzIG5hdmJhci1yaWdodCBoaWRkZW4teHMgaGlkZGVuLXNtIGhpZGRlbi1tZCI+DQogICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxzcGFuIGlkPSJwcmludEljb24iIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXByaW50IiBvbmNsaWNrPSJ3aW5kb3cucHJpbnQoKTsiPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItZGVmYXVsdCBzaWRlYmFyIiByb2xlPSJuYXZpZ2F0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2lkZWJhci1uYXYgbmF2YmFyLWNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IiBpZD0ic2lkZS1tZW51Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48aSBjbGFzcz0iZmEgZmEtbGlzdC11bCBmYS1mdyI+PC9pPkFwcGxpY2F0aW9uIFRyYWNrZXI8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9BYm91dCB0YXJnZXQ9X3NlbGY+V2hhdCBpcyBBcHBsaWNhdGlvbiBUcmFja2VyPzwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9EaXNjbGFpbWVyIHRhcmdldD1fc2VsZj5EaXNjbGFpbWVyPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gLy5uYXYtc2Vjb25kLWxldmVsIC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48aSBjbGFzcz0iZmEgZmEtbGlzdC11bCBmYS1mdyI+PC9pPkFwcGxpY2F0aW9uczxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXYtc2Vjb25kLWxldmVsIGNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL0luZGV4IHRhcmdldD0+QXBwbGljYXRpb24gVHJhY2tlciBIb21lPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL1NlYXJjaCBpZD1zZWFyY2ggdGFyZ2V0PV9zZWxmPlNlYXJjaDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/UmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1UcnVlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSBpZD1vdXRzdGFuZGluZy1hcHBzIHRhcmdldD1fc2VsZj5VbmRldGVybWluZWQgQXBwbGljYXRpb25zPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9SZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9VHJ1ZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIGlkPWV4aGliaXRlZC1hcHBzIHRhcmdldD1fc2VsZj5BcHBsaWNhdGlvbnMgT24gRXhoaWJpdGlvbjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjdGl2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbnMgU3VibWl0dGVkPHNwYW4gY2xhc3M9ImZhIGFycm93Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdi1zZWNvbmQtbGV2ZWwgY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTIxJTJmMDQlMmYyMDI1JkRhdGVUbz0yMiUyZjA0JTJmMjAyNSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPlRoaXMgV2VlazwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MTMlMmYwNCUyZjIwMjUmRGF0ZVRvPTE5JTJmMDQlMmYyMDI1JkRhdGVUeXBlPTEmUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBXZWVrPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDQlMmYyMDI1JkRhdGVUbz0yMiUyZjA0JTJmMjAyNSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPlRoaXMgTW9udGg8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTElMmYwMyUyZjIwMjUmRGF0ZVRvPTMxJTJmMDMlMmYyMDI1JkRhdGVUeXBlPTEmUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjdGl2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbnMgRGV0ZXJtaW5lZDxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXYtc2Vjb25kLWxldmVsIGNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0yMSUyZjA0JTJmMjAyNSZEYXRlVG89MjIlMmYwNCUyZjIwMjUmRGF0ZVR5cGU9MiZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9VHJ1ZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPlRoaXMgV2VlazwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MTMlMmYwNCUyZjIwMjUmRGF0ZVRvPTE5JTJmMDQlMmYyMDI1JkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5MYXN0IFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTElMmYwNCUyZjIwMjUmRGF0ZVRvPTIyJTJmMDQlMmYyMDI1JkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIE1vbnRoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDMlMmYyMDI1JkRhdGVUbz0zMSUyZjAzJTJmMjAyNSZEYXRlVHlwZT0yJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1UcnVlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8IS0tIC8uc2lkZWJhci1jb2xsYXBzZSAtLT4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLXN0YXRpYy1zaWRlIC0tPg0KICAgICAgICAgICAgPC9uYXY+DQogICAgICAgICAgICA8ZGl2IGlkPSJwYWdlLXdyYXBwZXIiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+DQogICAgICAgICAgICAgICAgICAgIA0KDQoNCiAgICA8ZGl2IGNsYXNzPSJwYWdlLWhlYWRlciI+DQogICAgICAgIDxoMj5BcHBsaWNhdGlvbjogUzk2ICgxMC4yMDE0LjQzMC4zKTwvaDI+DQogICAgPC9kaXY+DQogICAgPGg0PkRldGFpbGVkIGluZm9ybWF0aW9uIHJlbGF0ZWQgdG8gdGhlIGFwcGxpY2F0aW9uOjwvaDQ+DQogICAgPGJyIC8+DQogICAgPGRpdj4NCiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDpzaG93QWxsKCk7Ij5TaG93IEFsbDwvYT4gLw0KICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OmhpZGVBbGwoKTsiPkhpZGUgQWxsPC9hPg0KICAgIDwvZGl2Pg0KICAgIDxkaXYgaWQ9ImFwcGxpY2F0aW9uIj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJkZXRhaWxzIj48YSBocmVmPSIjIj5EZXRhaWxzPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5EZXNjcmlwdGlvbjogPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9ImRlc2NyaXB0aW9uIj5Nb2RpZnkgU2l0ZSBMYXlvdXQgYW5kIENvbnNlbnQgQ29uZGl0aW9ucyBSZWxhdGluZyB0byBQcmV2aW91cyBBcHByb3ZlZCBBbHRlcmF0aW9ucyB0byBDYXJhdmFuIFBhcms8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+U3VibWl0dGVkIERhdGU6IDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMDIvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+QXBwbGljYXRpb24gVHlwZTogPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+Uzk2PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9InByb3BlcnRpZXMiPjxhIGhyZWY9IiMiPlByb3BlcnRpZXM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJwcm9wZXJ0eS1saXN0Ij4zNDAgQmxhY2ttYW5zIFBvaW50IFJkLCBCbGFja21hbnMgUG9pbnQgTlNXIDI0NDQgIChMT1Q6IDQgRFA6IDIzOTMyNyk8YnIvPjM0MEEgQmxhY2ttYW5zIFBvaW50IFJkLCBCbGFja21hbnMgUG9pbnQgTlNXIDI0NDQgIChMT1Q6IDQgRFA6IDIzOTMyNyk8YnIvPjM0MEIgQmxhY2ttYW5zIFBvaW50IFJkLCBCbGFja21hbnMgUG9pbnQgTlNXIDI0NDQgIChMT1Q6IDQgRFA6IDIzOTMyNyk8YnIvPjM0MEMgQmxhY2ttYW5zIFBvaW50IFJkLCBCbGFja21hbnMgUG9pbnQgTlNXIDI0NDQgIChMT1Q6IDQgRFA6IDIzOTMyNyk8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0icGVvcGxlIj48YSBocmVmPSIjIj5QZW9wbGU8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcHBsaWNhbnQ6IFRBSEMgUHR5IEx0ZCANCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPd25lciBhdCBMb2RnZW1lbnQ6IFRBSEMgUHR5IEx0ZCANCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQQ0EgUHJpbmNpcGFsIENlcnRpZnlpbmcgQXV0aG9yaXR5OiBQb3J0IE1hY3F1YXJpZS1IYXN0aW5ncyBDb3VuY2lsIA0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0ib2ZmaWNlciI+PGEgaHJlZj0iIyI+T2ZmaWNlcjwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9Im9mZmljZXJOYW1lIj5GaW9uYSBUaWVybmV5PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9ImRlY2lzaW9uIj48YSBocmVmPSIjIj5EZWNpc2lvbjwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+QXBwbGljYXRpb24gU3RhdHVzOiBEZXRlcm1pbmVkPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZXRlcm1pbmF0aW9uIERhdGU6DQowNC8xMi8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRldGVybWluYXRpb24gVHlwZTogQXBwcm92ZWQgLSBDb3VuY2lsIFN0YWZmPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9ImVzdGltYXRlZENvc3QiPjxhIGhyZWY9IiMiPkVzdGltYXRlZCBDb3N0PC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4kMC4wMDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJ0cmFja2luZyI+PGEgaHJlZj0iIyI+VHJhY2tpbmc8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24td3JhcCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5zd2lwZSB0YWJsZSB0byB0aGUgbGVmdCB0byByZXZlYWwgbW9yZSBkYXRhPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tYXJyb3ctcmlnaHQiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtYm9yZGVyZWQgbm8tZm9vdGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5EZXNjcmlwdGlvbjwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Db21tZW5jZWQgRGF0ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Db21wbGV0ZWQgRGF0ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5BbGxvY2F0ZWQgdG8gQXNzZXNzaW5nIE9mZmljZXI8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMTAvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjEwLzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+U2VjdGlvbiA5NiBNb2QgQXNzZXNzbWVudDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoxMC8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMDQvMTIvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5CdWlsZGluZyBTdXJ2ZXlvciBSZWZlcnJhbDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoxMC8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMDQvMTIvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Ob3RpZmljYXRpb24tTmVpZ2hib3VyaW5nPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjE1LzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyOC8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkV4aGliaXRpb24gY29weSB0byBQTVE8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMTUvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI4LzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+QWRkaXRpb25hbCBJbmZvcm1hdGlvbiBSZXF1ZXN0PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjAxLzA4LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQowNC8xMi8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRldGVybWluYXRpb24gSXNzdWVkICh0byBBZG1uKTwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQowNC8xMi8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMDUvMTIvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Qb3N0aW5nLURldGVybWluYXRpb24gSXNzdWVkPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjA1LzEyLzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQowNS8xMi8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KDQoNCg0KDQogICAgICAgICAgICA8aDMgaWQ9InJlbGF0ZWRBcHBsaWNhdGlvbnMiPjxhIGhyZWY9IiMiPlJlbGF0ZWQgQXBwbGljYXRpb25zPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpY29uLXdyYXAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+c3dpcGUgdGFibGUgdG8gdGhlIGxlZnQgdG8gcmV2ZWFsIG1vcmUgZGF0YTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWFycm93LXJpZ2h0IiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSB0YWJsZS1zdHJpcGVkIHRhYmxlLWJvcmRlcmVkIG5vLWZvb3RlciI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+QXBwbGljYXRpb24gVHlwZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5BcHBsaWNhdGlvbiBOdW1iZXI8L3RoPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZXZlbG9wbWVudCBBcHBsaWNhdGlvbg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2RhdHJhY2tlci5wbWhjLm5zdy5nb3YuYXUvQXBwbGljYXRpb24vQXBwbGljYXRpb25EZXRhaWxzLzAxMC4yMDE0LjAwMDAwNDMwLjAwMS8iPjEwLjIwMTQuNDMwLjE8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTOTYNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9kYXRyYWNrZXIucG1oYy5uc3cuZ292LmF1L0FwcGxpY2F0aW9uL0FwcGxpY2F0aW9uRGV0YWlscy8wMTAuMjAxNC4wMDAwMDQzMC4wMDIvIj4xMC4yMDE0LjQzMC4yPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUzk2DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZGF0cmFja2VyLnBtaGMubnN3Lmdvdi5hdS9BcHBsaWNhdGlvbi9BcHBsaWNhdGlvbkRldGFpbHMvMDEwLjIwMTQuMDAwMDA0MzAuMDA0LyI+MTAuMjAxNC40MzAuNDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQoNCiAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQoNCg0KDQoNCg0KDQo8aDMgaWQ9ImRvY3VtZW50cyI+PGEgaHJlZj0iIyI+RG9jdW1lbnRzPC9hPjwvaDM+DQo8ZGl2Pg0KDQogICAgICAgIDxkaXYgY2xhc3M9Imljb24td3JhcCI+DQogICAgICAgICAgICA8c3Bhbj5zd2lwZSB0YWJsZSB0byB0aGUgbGVmdCB0byByZXZlYWwgbW9yZSBkYXRhPC9zcGFuPg0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tYXJyb3ctcmlnaHQiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L3NwYW4+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8ZGl2IGlkPSJkb2MtY291bnQiPlRvdGFsIG51bWJlciBvZiBkb2N1bWVudHM6IDM8L2Rpdj4NCiAgICAgICAgPHRhYmxlIGlkPSJkb2MtdGFibGUiIGNsYXNzPSJ0YWJsZSB0YWJsZS1zdHJpcGVkIHRhYmxlLWJvcmRlcmVkIG5vLWZvb3RlciI+DQogICAgICAgICAgICA8dGhlYWQ+DQogICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICA8dGg+UmVjb3JkIE51bWJlcjwvdGg+DQogICAgICAgICAgICAgICAgICAgIDx0aD5EZXNjcmlwdGlvbjwvdGg+DQogICAgICAgICAgICAgICAgICAgIDx0aD5Eb2N1bWVudCBUeXBlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgPHRoPlNpemU8L3RoPg0KICAgICAgICAgICAgICAgICAgICA8dGg+VmlldyBMaW5rPC90aD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgPC90aGVhZD4NCiAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCkQyMDE5LzQxNjg0MSAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPkRBMjAxOSAtIDQzMCBTVEFNUEVEIFNPRUU8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICBQREYNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIuNTUgTUINCg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+PGEgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgcm9sZT0iYnV0dG9uIiBocmVmPSJodHRwczovL2RhdHJhY2tlci5wbWhjLm5zdy5nb3YuYXUvRG9jdW1lbnQvRG93bmxvYWQ/a2V5PWowWVhSd2JwaHNZPSZhbXA7ZmlsZU5hbWU9REEyMDE5Ky0rNDMwK1NUQU1QRUQrU09FRS5QREYiIHRhcmdldD0iX2JsYW5rIj5WaWV3PC9hPjwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCkQyMDE5LzQxNjg0MiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPkRBMjAxNCAtIDQzMC4zIFNUQU1QRUQgU0lURSBQTEFOPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgUERGDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLjc4IE1CDQoNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHJvbGU9ImJ1dHRvbiIgaHJlZj0iaHR0cHM6Ly9kYXRyYWNrZXIucG1oYy5uc3cuZ292LmF1L0RvY3VtZW50L0Rvd25sb2FkP2tleT1Za3hWTEtTR29WZz0mYW1wO2ZpbGVOYW1lPURBMjAxNCstKzQzMC4zK1NUQU1QRUQrU0lURStQTEFOLlBERiIgdGFyZ2V0PSJfYmxhbmsiPlZpZXc8L2E+PC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KRDIwMTkvNDE3NjIyICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+REEgMjAxNCAtIDQzMC4zIE1vZGlmaWNhdGlvbiBvZiBDb25zZW50IC0gMzQwIEJsYWNrbWFucyBQb2ludCBSb2FkIEJMQUNLTUFOUyBQT0lOVCAtIFRBSEMgUHR5IEx0ZCAxNjcxMDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIFBERg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgMC4xNyBNQg0KDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD48YSBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiByb2xlPSJidXR0b24iIGhyZWY9Imh0dHBzOi8vZGF0cmFja2VyLnBtaGMubnN3Lmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9SUFFLzg5eEtVMTA9JmFtcDtmaWxlTmFtZT1EQSsyMDE0Ky0rNDMwLjMrTW9kaWZpY2F0aW9uK29mK0NvbnNlbnQrLSszNDArQmxhY2ttYW5zK1BvaW50K1JvYWQrQkxBQ0tNQU5TK1BPSU5UKy0rVEFIQytQdHkrTHRkKzE2NzEwLlBERiIgdGFyZ2V0PSJfYmxhbmsiPlZpZXc8L2E+PC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KDQogICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICA8L3RhYmxlPg0KPC9kaXY+DQoNCg0KICAgICAgICAgICAgPGgzIGlkPSJjb250YWN0VXMiPjxhIGhyZWY9IiMiPkNvbnRhY3QgVXM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KPHA+VG8gbWFrZSBlbnF1aXJpZXMgcmVnYXJkaW5nIGFwcGxpY2F0aW9ucyBkaXNwbGF5ZWQgaGVyZSwgY29udGFjdCB1cyBieSBvbmUgb2YgdGhlIGZvbGxvd2luZyBtZXRob2RzOjwvcD4NCg0KPHVsPg0KCTxsaT5ieSBlbWFpbCA8YSBzdHlsZT0iY29sb3I6IGJsdWUiIGhyZWY9Im1haWx0bzpjb3VuY2lsQHBtaGMubnN3Lmdvdi5hdT9zdWJqZWN0PUVucXVpcnkgZm9yIGFwcGxpY2F0aW9uIDEwLjIwMTQuNDMwLjMiPmNvdW5jaWxAcG1oYy5uc3cuZ292LmF1PC9hPiwgPC9saT4NCgk8bGk+aW4gd3JpdGluZyB0byBQTyBCb3ggODQgUG9ydCBNYWNxdWFyaWUgTlNXIDI0NDQuIEFsbCBjb3JyZXNwb25kZW5jZSBzaG91bGQgYmUgYWRkcmVzc2VkIHRvIHRoZSBDaGllZiBFeGVjdXRpdmUgT2ZmaWNlciAoQ0VPKSBhbmQgcXVvdGUgdGhlIHJlbGV2YW50IGFwcGxpY2F0aW9uIHJlZmVyZW5jZSBudW1iZXIuPC9saT4NCgk8bGk+YnkgY29udGFjdGluZyB0aGUgYXNzZXNzaW5nIG9mZmljZXIgKG5vdGVkIGluIHRoZSBvZmZpY2VyIHNlY3Rpb24gYWJvdmUpIGJ5IHBob25pbmcgQ3VzdG9tZXIgU2VydmljZSBDZW50cmUgb24gKDAyKSA2NTgxIDgxMTEgZHVyaW5nIG5vcm1hbCBvZmZpY2UgaG91cnMgKE1vbmRheSB0byBGcmlkYXksIDguMzBhbSB0byA0LjMwcG0pLjwvbGk+DQo8L3VsPg0KPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9Im5vdGlmaWVkQWRkcmVzc2VzIj48YSBocmVmPSIjIj5Ob3RpZmllZCBBZGRyZXNzZXM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgIDxvbD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5CbGFja21hbnMgUG9pbnQgUmQsIEJsYWNrbWFucyBQb2ludCBOU1cgMjQ0NCA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjMzNCBCbGFja21hbnMgUG9pbnQgUmQsIEJsYWNrbWFucyBQb2ludCBOU1cgMjQ0NCA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjMzNSBCbGFja21hbnMgUG9pbnQgUmQsIEJsYWNrbWFucyBQb2ludCBOU1cgMjQ0NCA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjM1MyBCbGFja21hbnMgUG9pbnQgUmQsIEJsYWNrbWFucyBQb2ludCBOU1cgMjQ0NCA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjM1NiBCbGFja21hbnMgUG9pbnQgUmQsIEJsYWNrbWFucyBQb2ludCBOU1cgMjQ0NCA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1jbWlsbGFuIERyLCBCbGFja21hbnMgUG9pbnQgTlNXIDI0NDQgPC9saT4NCg0KICAgICAgICAgICAgICAgICAgICA8L29sPg0KICAgICAgICAgICAgPC9kaXY+DQoNCjxoMyBpZD0iZ29vZ2xlbWFwcyI+PGEgaHJlZj0iIyI+R29vZ2xlIE1hcHM8L2E+PC9oMz4NCjxkaXYgaWQ9Im1hcF9jb250YWluZXIiPg0KICAgIDxkaXYgaWQ9Im1hcF9jYW52YXMiIGNsYXNzPSJpZnJhbWUtcndkIj4NCiAgICA8L2Rpdj4NCjwvZGl2Pg0KDQo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+DQoNCiAgICB3aW5kb3cub25sb2FkID0gbG9hZEdvb2dsZU1hcHNTY3JpcHQ7DQoNCiAgICB2YXIgZ2VvY29kZXI7DQogICAgdmFyIG1hcDsNCiAgICB2YXIgdGltZW91dCA9IDMwMDsNCiAgICB2YXIgcHJvcGVydGllcyA9IFsiMzQwIEJsYWNrbWFucyBQb2ludCBSZCwgQmxhY2ttYW5zIFBvaW50IE5TVyAyNDQ0ICIsIjM0MEEgQmxhY2ttYW5zIFBvaW50IFJkLCBCbGFja21hbnMgUG9pbnQgTlNXIDI0NDQgIiwiMzQwQiBCbGFja21hbnMgUG9pbnQgUmQsIEJsYWNrbWFucyBQb2ludCBOU1cgMjQ0NCAiLCIzNDBDIEJsYWNrbWFucyBQb2ludCBSZCwgQmxhY2ttYW5zIFBvaW50IE5TVyAyNDQ0ICJdOw0KICAgIHZhciBsYXRMbmdBcnIgPSBbXTsNCg0KICAgIGZ1bmN0aW9uIGxvYWRHb29nbGVNYXBzU2NyaXB0KCkgew0KICAgICAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7DQogICAgICAgIHNjcmlwdC50eXBlID0gInRleHQvamF2YXNjcmlwdCI7DQogICAgICAgIHNjcmlwdC5zcmMgPSAiLy9tYXBzLmdvb2dsZWFwaXMuY29tL21hcHMvYXBpL2pzP2tleT1BSXphU3lCVnRhRzRZalh3ZmdOanRDbHpxTmNTeUdQT19jS01FUk0mY2FsbGJhY2s9bG9hZEdvb2dsZU1hcHMiOw0KICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gcmVuZGVyR29vZ2xlTWFwcygpDQogICAgew0KICAgICAgICB2YXIgbWFwT3B0aW9ucyA9IHsNCiAgICAgICAgICAgIGNlbnRlcjogbGF0TG5nQXJyWzBdLA0KICAgICAgICAgICAgem9vbTogMTYsDQogICAgICAgICAgICBtYXBUeXBlSWQ6IGdvb2dsZS5tYXBzLk1hcFR5cGVJZC5ST0FETUFQLA0KICAgICAgICAgICAgbWFwVHlwZUNvbnRyb2w6IGZhbHNlDQogICAgICAgIH0NCg0KICAgICAgICBtYXAgPSBuZXcgZ29vZ2xlLm1hcHMuTWFwKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtYXBfY2FudmFzIiksIG1hcE9wdGlvbnMpOw0KDQogICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZERvbUxpc3RlbmVyKHdpbmRvdywgJ3Jlc2l6ZScsIGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgdmFyIGNlbnRlciA9IG1hcC5nZXRDZW50ZXIoKTsNCiAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LnRyaWdnZXIobWFwLCAncmVzaXplJyk7DQogICAgICAgICAgICBtYXAuc2V0Q2VudGVyKGNlbnRlcik7DQogICAgICAgIH0pOw0KDQogICAgfQ0KDQogICAgZnVuY3Rpb24gbG9hZEdvb2dsZU1hcHMoKSB7DQogICAgICAgIGdlb2NvZGVyID0gbmV3IGdvb2dsZS5tYXBzLkdlb2NvZGVyKCk7DQogICAgICAgIHZhciBub09mRmFpbGVkTG9jYXRpb25TZWFyY2ggPSAwOw0KDQogICAgICAgICQocHJvcGVydGllcykuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHsNCiAgICAgICAgICAgIHZhciBwcm9wZXJ0eUFkZHJlc3MgPSBlbGVtZW50Ow0KDQogICAgICAgICAgICAvL0dldCBnZW9jb2RlDQogICAgICAgICAgICBnZW9jb2Rlci5nZW9jb2RlKHsgJ2FkZHJlc3MnOiBwcm9wZXJ0eUFkZHJlc3MgfSwgZnVuY3Rpb24gKHJlc3VsdHMsIHN0YXR1cykgew0KICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgPT0gZ29vZ2xlLm1hcHMuR2VvY29kZXJTdGF0dXMuT0spIHsNCg0KICAgICAgICAgICAgICAgICAgICB2YXIgbG9jYXRpb24gPSByZXN1bHRzWzBdLmdlb21ldHJ5LmxvY2F0aW9uOw0KICAgICAgICAgICAgICAgICAgICB2YXIgbGF0TG5nID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhsb2NhdGlvbi5sYXQoKSwgbG9jYXRpb24ubG5nKCkpOw0KDQogICAgICAgICAgICAgICAgICAgIGxhdExuZ0Fyci5wdXNoKGxhdExuZyk7DQoNCiAgICAgICAgICAgICAgICAgICAgaWYobGF0TG5nQXJyLmxlbmd0aCA9PSAxKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJHb29nbGVNYXBzKCk7DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAvL0NyZWF0ZSBtYXJrZXIgZm9yIG1hcCBhbmQgcGxhY2UgaXQgb24gdGhlIG1hcA0KICAgICAgICAgICAgICAgICAgICB2YXIgbWFya2VyID0gbmV3IGdvb2dsZS5tYXBzLk1hcmtlcih7DQogICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogbGF0TG5nLA0KICAgICAgICAgICAgICAgICAgICAgICAgbWFwOiBtYXANCiAgICAgICAgICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRlbnRTdHJpbmcgPSAnPGRpdj48c3Bhbj4nICsgcHJvcGVydHlBZGRyZXNzICsgJzwvc3Bhbj48L2Rpdj4nOw0KICAgICAgICAgICAgICAgICAgICB2YXIgaW5mb3dpbmRvdyA9IG5ldyBnb29nbGUubWFwcy5JbmZvV2luZG93KHsgICAvL0NyZWF0ZSBpbmZvIHdpbmRvdw0KICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogY29udGVudFN0cmluZw0KICAgICAgICAgICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcihtYXJrZXIsICdjbGljaycsIGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgaW5mb3dpbmRvdy5vcGVuKG1hcCwgbWFya2VyKTsNCiAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIC8vaWYgbm8gbG9jYXRpb24gZm91bmQgYnkgZ29vZ2xlIGZvciBhIHByb3BlcnR5DQogICAgICAgICAgICAgICAgZWxzZSBpZiAoc3RhdHVzID09ICJaRVJPX1JFU1VMVFMiKSB7DQogICAgICAgICAgICAgICAgICAgIG5vT2ZGYWlsZWRMb2NhdGlvblNlYXJjaCsrOw0KDQogICAgICAgICAgICAgICAgICAgIGlmKG5vT2ZGYWlsZWRMb2NhdGlvblNlYXJjaCA9PSAkKHByb3BlcnRpZXMpLmxlbmd0aCkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZUdvb2dsZU1hcHNDb250ZW50KCk7DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdHVzID09IGdvb2dsZS5tYXBzLkdlb2NvZGVyU3RhdHVzLk9WRVJfUVVFUllfTElNSVQpIHsNCiAgICAgICAgICAgICAgICAgICAgLy9zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgZ2V0R2VvQ29kZUZvckFkZHJlc3MoaWQsIGFkZHJlc3MpOyB9LCAodGltZW91dCkpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICAvL1JlcGxhY2VzIGdvb2dsZSBtYXBzIGNvbnRlbnQgd2l0aCBhIG5ldyBkaXYgYmxvY2sgdGhhdCBoYXMgaW5mbyBtZXNzYWdlDQogICAgZnVuY3Rpb24gcmVwbGFjZUdvb2dsZU1hcHNDb250ZW50KCkgew0KICAgICAgICB2YXIgbmV3Q29udGVudCA9ICc8ZGl2IGNsYXNzPSJ1aS1hY2NvcmRpb24tY29udGVudCB1aS1oZWxwZXItcmVzZXQgdWktd2lkZ2V0LWNvbnRlbnQgdWktY29ybmVyLWJvdHRvbSI+JyArDQogICAgICAgICAgICAnPHA+Q291bGRuXCd0IGZpbmQgdGhlIHByb3BlcnR5IGFkZHJlc3MoZXMpIG9uIEdvb2dsZSBNYXBzLiA8cD4nICsNCiAgICAgICAgICAgICc8L2Rpdj4nOw0KDQogICAgICAgICQoJyNtYXBfY29udGFpbmVyJykucmVwbGFjZVdpdGgobmV3Q29udGVudCk7DQogICAgfQ0KDQo8L3NjcmlwdD4NCg0KICAgIDwvZGl2Pg0KICAgIDxkaXYgY2xhc3M9Im1vZGFsIGZhZGUiIGlkPSJzdWJtaXNzaW9uLW1vZGFsIj4NCiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InNwaW5uZXIiPjwvZGl2PiA8IS0tIFRoaXMgZGl2IGhvc3RzIHRoZSBzcGlubmVyIC0tPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgZGF0YS1kaXNtaXNzPSJtb2RhbCIgYXJpYS1sYWJlbD0iQ2xvc2UiPjxzcGFuIGFyaWEtaGlkZGVuPSJ0cnVlIj4mdGltZXM7PC9zcGFuPjwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9Im1vZGFsLXRpdGxlIj5TdWJtaXNzaW9uIGZvciAxMC4yMDE0LjQzMC4zPC9oMj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+DQoNCiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7DQoNCiAgICAgICAgJCgnI2FwcGxpY2F0aW9uJykudG9nZ2xlcGFuZWxzKCk7DQoNCiAgICAgICAgICAgICQoJyNwcm9wZXJ0aWVzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNkZXRhaWxzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyN0cmFja2luZycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjZG9jdW1lbnRzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNyZWxhdGVkQXBwbGljYXRpb25zJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNnb29nbGVtYXBzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNjb250YWN0VXMnKS5jbGljaygpOw0KDQogICAgICAgIA0KDQoNCiAgICAgICAgJCgnI3N1Ym1pc3Npb24tYnRuJykuY2xpY2soZnVuY3Rpb24gKCkgeyAgICAgICAgDQoNCg0KICAgICAgICAgICAgdmFyIHVybCA9ICJodHRwczovL2RhdHJhY2tlci5wbWhjLm5zdy5nb3YuYXUvL0FwcGxpY2F0aW9uL1N1Ym1pc3Npb24vIiArIGVuY29kZVVSSSgiMTAuMjAxNC40MzAuMyIpOw0KDQogICAgICAgICAgICAkKCcjc3VibWlzc2lvbi1tb2RhbCcpLm1vZGFsKCdzaG93JykuZmluZCgnLm1vZGFsLWJvZHknKS5sb2FkKHVybCk7DQogICAgICAgIH0pOw0KICAgIH0pOw0KDQoNCiAgICAvKiBTaG93cyBhbGwgdGhlIHBhbmVscyAqLw0KICAgIGZ1bmN0aW9uIHNob3dBbGwoKSB7DQogICAgICAgICQoJyNhcHBsaWNhdGlvbicpLmNoaWxkcmVuKCJoMyIpLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoInVpLXN0YXRlLWRlZmF1bHQiKSkgew0KICAgICAgICAgICAgICAgICQodGhpcykuY2xpY2soKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSk7DQogICAgfQ0KDQoNCiAgICAvKiBIaWRlIGFsbCB0aGUgcGFuZWxzICovDQogICAgZnVuY3Rpb24gaGlkZUFsbCgpIHsNCiAgICAgICAgJCgnI2FwcGxpY2F0aW9uJykuY2hpbGRyZW4oImgzIikuZWFjaChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcygidWktc3RhdGUtYWN0aXZlIikpIHsNCiAgICAgICAgICAgICAgICAkKHRoaXMpLmNsaWNrKCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0pOw0KICAgIH0NCg0KICAgIDwvc2NyaXB0Pg0KDQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPCEtLSAvLmNvbnRhaW5lci1mbHVpZCAtLT4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGZvb3RlciBjbGFzcz0iZm9vdGVyIGdyaWQiPg0KICAgICAgICAgICAgPGRpdiA+DQogICAgICAgICAgICAgICAgwqkgUG9ydCBNYWNxdWFyaWUgSGFzdGluZ3MgQ291bmNpbA0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZm9vdGVyPg0KICAgIDwvZGl2Pg0KPC9ib2R5Pg0KPC9odG1sPg0K
  recorded_at: Mon, 21 Apr 2025 18:24:50 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Application/ApplicationDetails/010.2014.00000430.003
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=lu3ya4iwj3gf1zwvmg33gt2z; User=accessAllowed-MasterView=True
      Host:
      - datracker.pmhc.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:25:01 GMT
      Content-Length:
      - '35484'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQo8aHRtbCB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCIgeG1sOmxhbmc9ImVuIiBsYW5nPSJlbiI+DQoNCg0KDQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCIgLz4NCiAgICA8bWV0YSBodHRwLWVxdWl2PSJYLVVBLUNvbXBhdGlibGUiIGNvbnRlbnQ9IklFPWVkZ2UiIC8+DQogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xIiAvPg0KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIiAvPg0KICAgIDxtZXRhIG5hbWU9ImtleXdvcmRzIiBjb250ZW50PSJQb3J0IE1hY3F1YXJpZSBDb3VuY2lsLCBEQSBUcmFja2VyLEFwcGxpY2F0aW9uIFRyYWNrZXIsRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24sRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24gVHJhY2tpbmcsIERBIEVucXVpcnksIERldmVsb3BtZW50IEFwcGxpY2F0aW9uIEVucXVpcnksIEFwcGxpY2F0aW9uIFRyYWNrZXIiPg0KICAgIDxtZXRhIG5hbWU9ImRlc2NyaXB0aW9uIiBjb250ZW50PSJUaGUgb2ZmaWNpYWwgUG9ydCBNYWNxdWFyaWUgQ291bmNpbCBBcHBsaWNhdGlvbiBUcmFja2VyIj4NCg0KICAgIDwhLS1mYXZpY29uLS0+DQogICAgPGxpbmsgaHJlZj0iL0NvdW5jaWxfVGhlbWUvUG9ydF9NYWNxdWFyaWUvZmF2aWNvbi5pY28iICkiIHJlbD0ic2hvcnRjdXQgaWNvbiIgdHlwZT0iaW1hZ2UveC1pY29uIiAvPg0KDQogICAgPCEtLSBqUXVlcnkgLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS0xLjExLjEuanMiPjwvc2NyaXB0Pg0KDQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS11aS0xLjExLjIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvY29yZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvYWNjb3JkaW9uLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC90aGVtZXMvYmFzZS90aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQoNCiAgICA8IS0tIEJvb3RzdHJhcCAtLT4NCiAgICA8c2NyaXB0IHNyYz0iL1NjcmlwdHMvYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCg0KICAgIDxsaW5rIGhyZWY9Ii9Db250ZW50L2Jvb3RzdHJhcC10aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvYm9vdHN0cmFwLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9mb250LWF3ZXNvbWUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPCEtLSBEYXRhVGFibGVzIC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2pxdWVyeS5kYXRhVGFibGVzLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMuYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMucmVzcG9uc2l2ZS5qcyI+PC9zY3JpcHQ+DQoNCiAgICANCiAgICA8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLmJvb3RzdHJhcC5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvRGF0YVRhYmxlcy9jc3MvZGF0YVRhYmxlcy5yZXNwb25zaXZlLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLnJlc3BvbnNpdmUuc2NzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KDQogICAgPCEtLSBCb290c3RyYXAgU0ItQWRtaW4tMiBQbHVnaW4gYW5kIG90aGVyIGNzcyBhbmQganMgZmlsZXMtLT4NCiAgICA8c2NyaXB0IHNyYz0iL2pzL2Jvb3RzdHJhcC1jb21ib2JveC5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL2Jvb3RzdHJhcC1kYXRlcGlja2VyLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvYm9vdHN0cmFwLWRpYWxvZy5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL2pxdWVyeS5mb3JtLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvanF1ZXJ5LnRhYmxlc29ydGVyLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvbWFzdGVydmlldy5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL21ldGlzTWVudS5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL3NiLWFkbWluLTIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL2Nzcy9ib290c3RyYXAtY29tYm9ib3guY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvZGF0ZXBpY2tlcjMuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvbWFzdGVydmlldy1jdXN0b21pc2F0aW9ucy5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL2Nzcy9zYi1hZG1pbi0yLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDxsaW5rIGhyZWY9Ii9Db3VuY2lsX1RoZW1lL1BvcnRfTWFjcXVhcmllL1BvcnRfTWFjcXVhcmllLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ291bmNpbF9UaGVtZS9Qb3J0X01hY3F1YXJpZS9Qb3J0X01hY3F1YXJpZV9Nb2JpbGVWaWV3LmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICANCg0KICAgIDwhLS1pbmNsdWRlIGdvb2dsZSBhbmFseXRpY3MgY29kZS0tPg0KICAgIDxzY3JpcHQ+DQogICAgICAgIChmdW5jdGlvbiAoaSwgcywgbywgZywgciwgYSwgbSkgew0KICAgICAgICAgICAgaVsnR29vZ2xlQW5hbHl0aWNzT2JqZWN0J10gPSByOyBpW3JdID0gaVtyXSB8fCBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgKGlbcl0ucSA9IGlbcl0ucSB8fCBbXSkucHVzaChhcmd1bWVudHMpDQogICAgICAgICAgICB9LCBpW3JdLmwgPSAxICogbmV3IERhdGUoKTsgYSA9IHMuY3JlYXRlRWxlbWVudChvKSwNCiAgICAgICAgICAgICAgICBtID0gcy5nZXRFbGVtZW50c0J5VGFnTmFtZShvKVswXTsgYS5hc3luYyA9IDE7IGEuc3JjID0gZzsgbS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLCBtKQ0KICAgICAgICB9KSh3aW5kb3csIGRvY3VtZW50LCAnc2NyaXB0JywgJy8vd3d3Lmdvb2dsZS1hbmFseXRpY3MuY29tL2FuYWx5dGljcy5qcycsICdnYScpOw0KDQogICAgICAgIGdhKCdjcmVhdGUnLCAnVUEtNzI5MTg1Mi00JywgJ2F1dG8nKTsNCiAgICAgICAgZ2EoJ3NlbmQnLCAncGFnZXZpZXcnKTsNCg0KICAgIDwvc2NyaXB0Pg0KDQoNCiAgICA8dGl0bGU+UG9ydCBNYWNxdWFyaWUtSGFzdGluZ3MgQ291bmNpbCAtIEFwcGxpY2F0aW9uIFRyYWNrZXI8L3RpdGxlPg0KDQogICAgPCEtLSBDdXN0b20gRm9udHMNCiAgICAgICAgPGxpbmsgaHJlZj0iL2ZvbnQtYXdlc29tZS9jc3MvZm9udC1hd2Vzb21lLm1pbi5jc3MiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPg0KICAgIC0tPg0KICAgIDwhLS0gSFRNTDUgU2hpbSBhbmQgUmVzcG9uZC5qcyBJRTggc3VwcG9ydCBvZiBIVE1MNSBlbGVtZW50cyBhbmQgbWVkaWEgcXVlcmllcyAtLT4NCiAgICA8IS0tIFdBUk5JTkc6IFJlc3BvbmQuanMgZG9lc24ndCB3b3JrIGlmIHlvdSB2aWV3IHRoZSBwYWdlIHZpYSBmaWxlOi8vIC0tPg0KICAgIDwhLS1baWYgbHQgSUUgOV0+DQogICAgICAgIDxzY3JpcHQgc3JjPSJodHRwczovL29zcy5tYXhjZG4uY29tL2xpYnMvaHRtbDVzaGl2LzMuNy4wL2h0bWw1c2hpdi5qcyI+PC9zY3JpcHQ+DQogICAgICAgIDxzY3JpcHQgc3JjPSJodHRwczovL29zcy5tYXhjZG4uY29tL2xpYnMvcmVzcG9uZC5qcy8xLjQuMi9yZXNwb25kLm1pbi5qcyI+PC9zY3JpcHQ+DQogICAgPCFbZW5kaWZdLS0+DQoNCiAgICA8bGluayBocmVmPSIvL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9Q2Fycm9pcytHb3RoaWMiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPg0KPC9oZWFkPg0KPGJvZHkgY2xhc3M9InN0YW5kYXJkIj4NCiAgICA8aGVhZGVyIGNsYXNzPSJjbGVhcmZpeCI+DQogICAgICAgIDxkaXYgc3R5bGU9IndpZHRoOiAxMDAlOyBiYWNrZ3JvdW5kLWNvbG9yOiAjNUQ5NzRDO2hlaWdodDoyMHB4ICI+PC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9nbyI+DQogICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvIj4NCiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9Db3VuY2lsX1RoZW1lL1BvcnRfTWFjcXVhcmllL2xvZ28ucG5nIiBhbHQ9IlBvcnQgTWFjcXVhcmllIEhhc3RpbmdzIExvZ28iIGlkPSJkaXNwbGF5LWxvZ28iIC8+DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InB1bGwtcmlnaHQiPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvaGVhZGVyPg0KICAgIDxkaXYgaWQ9ImNvbnRlbnQiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPg0KICAgICAgICAgICAgPGRpdiBpZD0ibmF2LWNvbnRhaW5lciIgc3R5bGU9ImRpc3BsYXk6bm9uZSI+DQogICAgICAgICAgICAgICAgPG5hdj48L25hdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJuYXZpZ2F0aW9uIiBjbGFzcz0iY29udGFpbmVyMSI+DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJob21lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cucG1oYy5uc3cuZ292LmF1L0hvbWUiPkhvbWU8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtMW5hdi1oYXMtY2hpbGRyZW4gbmF2LXNlY3Rpb24tdGhpcmRzLTEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvUmVzaWRlbnQtU2VydmljZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlc2lkZW50IFNlcnZpY2VzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtMiBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0xIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQWJvdXQtVXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFib3V0IFVzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtMyBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0xIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQnVzaW5lc3MiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJ1c2luZXNzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNCBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0yIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQnVpbGRpbmctUGxhbm5pbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJ1aWxkaW5nICZhbXA7IFBsYW5uaW5nDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNSBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0yIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQ29tbXVuaXR5LUZhY2lsaXRpZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvbW11bml0eSBGYWNpbGl0aWVzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNiBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0yIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQ3VsdHVyZS1TcG9ydC1MZWlzdXJlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdWx0dXJlLCBTcG9ydCAmYW1wOyBMZWlzdXJlDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNyBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0zIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvRm9ybXMtUGVybWl0cyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRm9ybXMgJmFtcDsgUGVybWl0cw0KICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxuYXYgY2xhc3M9Im5hdmJhciBuYXZiYXItZGVmYXVsdCBuYXZiYXItc3RhdGljLXRvcCIgcm9sZT0ibmF2aWdhdGlvbiIgc3R5bGU9Im1hcmdpbi1ib3R0b206IDAiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9Im5hdmJhci10b2dnbGUiIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgZGF0YS10YXJnZXQ9Ii5uYXZiYXItY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPlRvZ2dsZSBuYXZpZ2F0aW9uPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tYmFyIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1iYXIiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLWhlYWRlciAtLT4NCiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXZiYXItdG9wLWxpbmtzIG5hdmJhci1yaWdodCBoaWRkZW4teHMgaGlkZGVuLXNtIGhpZGRlbi1tZCI+DQogICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxzcGFuIGlkPSJwcmludEljb24iIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXByaW50IiBvbmNsaWNrPSJ3aW5kb3cucHJpbnQoKTsiPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItZGVmYXVsdCBzaWRlYmFyIiByb2xlPSJuYXZpZ2F0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2lkZWJhci1uYXYgbmF2YmFyLWNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IiBpZD0ic2lkZS1tZW51Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48aSBjbGFzcz0iZmEgZmEtbGlzdC11bCBmYS1mdyI+PC9pPkFwcGxpY2F0aW9uIFRyYWNrZXI8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9BYm91dCB0YXJnZXQ9X3NlbGY+V2hhdCBpcyBBcHBsaWNhdGlvbiBUcmFja2VyPzwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9EaXNjbGFpbWVyIHRhcmdldD1fc2VsZj5EaXNjbGFpbWVyPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gLy5uYXYtc2Vjb25kLWxldmVsIC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48aSBjbGFzcz0iZmEgZmEtbGlzdC11bCBmYS1mdyI+PC9pPkFwcGxpY2F0aW9uczxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXYtc2Vjb25kLWxldmVsIGNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL0luZGV4IHRhcmdldD0+QXBwbGljYXRpb24gVHJhY2tlciBIb21lPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL1NlYXJjaCBpZD1zZWFyY2ggdGFyZ2V0PV9zZWxmPlNlYXJjaDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/UmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1UcnVlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSBpZD1vdXRzdGFuZGluZy1hcHBzIHRhcmdldD1fc2VsZj5VbmRldGVybWluZWQgQXBwbGljYXRpb25zPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9SZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9VHJ1ZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIGlkPWV4aGliaXRlZC1hcHBzIHRhcmdldD1fc2VsZj5BcHBsaWNhdGlvbnMgT24gRXhoaWJpdGlvbjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjdGl2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbnMgU3VibWl0dGVkPHNwYW4gY2xhc3M9ImZhIGFycm93Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdi1zZWNvbmQtbGV2ZWwgY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTIxJTJmMDQlMmYyMDI1JkRhdGVUbz0yMiUyZjA0JTJmMjAyNSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPlRoaXMgV2VlazwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MTMlMmYwNCUyZjIwMjUmRGF0ZVRvPTE5JTJmMDQlMmYyMDI1JkRhdGVUeXBlPTEmUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBXZWVrPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDQlMmYyMDI1JkRhdGVUbz0yMiUyZjA0JTJmMjAyNSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPlRoaXMgTW9udGg8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTElMmYwMyUyZjIwMjUmRGF0ZVRvPTMxJTJmMDMlMmYyMDI1JkRhdGVUeXBlPTEmUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjdGl2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbnMgRGV0ZXJtaW5lZDxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXYtc2Vjb25kLWxldmVsIGNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0yMSUyZjA0JTJmMjAyNSZEYXRlVG89MjIlMmYwNCUyZjIwMjUmRGF0ZVR5cGU9MiZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9VHJ1ZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPlRoaXMgV2VlazwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MTMlMmYwNCUyZjIwMjUmRGF0ZVRvPTE5JTJmMDQlMmYyMDI1JkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5MYXN0IFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTElMmYwNCUyZjIwMjUmRGF0ZVRvPTIyJTJmMDQlMmYyMDI1JkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIE1vbnRoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDMlMmYyMDI1JkRhdGVUbz0zMSUyZjAzJTJmMjAyNSZEYXRlVHlwZT0yJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1UcnVlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8IS0tIC8uc2lkZWJhci1jb2xsYXBzZSAtLT4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLXN0YXRpYy1zaWRlIC0tPg0KICAgICAgICAgICAgPC9uYXY+DQogICAgICAgICAgICA8ZGl2IGlkPSJwYWdlLXdyYXBwZXIiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+DQogICAgICAgICAgICAgICAgICAgIA0KDQoNCiAgICA8ZGl2IGNsYXNzPSJwYWdlLWhlYWRlciI+DQogICAgICAgIDxoMj5BcHBsaWNhdGlvbjogUzk2ICgxMC4yMDE0LjQzMC4zKTwvaDI+DQogICAgPC9kaXY+DQogICAgPGg0PkRldGFpbGVkIGluZm9ybWF0aW9uIHJlbGF0ZWQgdG8gdGhlIGFwcGxpY2F0aW9uOjwvaDQ+DQogICAgPGJyIC8+DQogICAgPGRpdj4NCiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDpzaG93QWxsKCk7Ij5TaG93IEFsbDwvYT4gLw0KICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OmhpZGVBbGwoKTsiPkhpZGUgQWxsPC9hPg0KICAgIDwvZGl2Pg0KICAgIDxkaXYgaWQ9ImFwcGxpY2F0aW9uIj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJkZXRhaWxzIj48YSBocmVmPSIjIj5EZXRhaWxzPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5EZXNjcmlwdGlvbjogPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9ImRlc2NyaXB0aW9uIj5Nb2RpZnkgU2l0ZSBMYXlvdXQgYW5kIENvbnNlbnQgQ29uZGl0aW9ucyBSZWxhdGluZyB0byBQcmV2aW91cyBBcHByb3ZlZCBBbHRlcmF0aW9ucyB0byBDYXJhdmFuIFBhcms8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+U3VibWl0dGVkIERhdGU6IDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMDIvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+QXBwbGljYXRpb24gVHlwZTogPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+Uzk2PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9InByb3BlcnRpZXMiPjxhIGhyZWY9IiMiPlByb3BlcnRpZXM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJwcm9wZXJ0eS1saXN0Ij4zNDAgQmxhY2ttYW5zIFBvaW50IFJkLCBCbGFja21hbnMgUG9pbnQgTlNXIDI0NDQgIChMT1Q6IDQgRFA6IDIzOTMyNyk8YnIvPjM0MEEgQmxhY2ttYW5zIFBvaW50IFJkLCBCbGFja21hbnMgUG9pbnQgTlNXIDI0NDQgIChMT1Q6IDQgRFA6IDIzOTMyNyk8YnIvPjM0MEIgQmxhY2ttYW5zIFBvaW50IFJkLCBCbGFja21hbnMgUG9pbnQgTlNXIDI0NDQgIChMT1Q6IDQgRFA6IDIzOTMyNyk8YnIvPjM0MEMgQmxhY2ttYW5zIFBvaW50IFJkLCBCbGFja21hbnMgUG9pbnQgTlNXIDI0NDQgIChMT1Q6IDQgRFA6IDIzOTMyNyk8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0icGVvcGxlIj48YSBocmVmPSIjIj5QZW9wbGU8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcHBsaWNhbnQ6IFRBSEMgUHR5IEx0ZCANCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPd25lciBhdCBMb2RnZW1lbnQ6IFRBSEMgUHR5IEx0ZCANCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQQ0EgUHJpbmNpcGFsIENlcnRpZnlpbmcgQXV0aG9yaXR5OiBQb3J0IE1hY3F1YXJpZS1IYXN0aW5ncyBDb3VuY2lsIA0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0ib2ZmaWNlciI+PGEgaHJlZj0iIyI+T2ZmaWNlcjwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9Im9mZmljZXJOYW1lIj5GaW9uYSBUaWVybmV5PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9ImRlY2lzaW9uIj48YSBocmVmPSIjIj5EZWNpc2lvbjwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+QXBwbGljYXRpb24gU3RhdHVzOiBEZXRlcm1pbmVkPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZXRlcm1pbmF0aW9uIERhdGU6DQowNC8xMi8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRldGVybWluYXRpb24gVHlwZTogQXBwcm92ZWQgLSBDb3VuY2lsIFN0YWZmPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9ImVzdGltYXRlZENvc3QiPjxhIGhyZWY9IiMiPkVzdGltYXRlZCBDb3N0PC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4kMC4wMDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJ0cmFja2luZyI+PGEgaHJlZj0iIyI+VHJhY2tpbmc8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24td3JhcCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5zd2lwZSB0YWJsZSB0byB0aGUgbGVmdCB0byByZXZlYWwgbW9yZSBkYXRhPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tYXJyb3ctcmlnaHQiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtYm9yZGVyZWQgbm8tZm9vdGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5EZXNjcmlwdGlvbjwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Db21tZW5jZWQgRGF0ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Db21wbGV0ZWQgRGF0ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5BbGxvY2F0ZWQgdG8gQXNzZXNzaW5nIE9mZmljZXI8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMTAvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjEwLzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+U2VjdGlvbiA5NiBNb2QgQXNzZXNzbWVudDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoxMC8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMDQvMTIvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5CdWlsZGluZyBTdXJ2ZXlvciBSZWZlcnJhbDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoxMC8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMDQvMTIvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Ob3RpZmljYXRpb24tTmVpZ2hib3VyaW5nPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjE1LzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyOC8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkV4aGliaXRpb24gY29weSB0byBQTVE8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMTUvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI4LzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+QWRkaXRpb25hbCBJbmZvcm1hdGlvbiBSZXF1ZXN0PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjAxLzA4LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQowNC8xMi8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRldGVybWluYXRpb24gSXNzdWVkICh0byBBZG1uKTwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQowNC8xMi8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMDUvMTIvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Qb3N0aW5nLURldGVybWluYXRpb24gSXNzdWVkPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjA1LzEyLzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQowNS8xMi8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KDQoNCg0KDQogICAgICAgICAgICA8aDMgaWQ9InJlbGF0ZWRBcHBsaWNhdGlvbnMiPjxhIGhyZWY9IiMiPlJlbGF0ZWQgQXBwbGljYXRpb25zPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpY29uLXdyYXAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+c3dpcGUgdGFibGUgdG8gdGhlIGxlZnQgdG8gcmV2ZWFsIG1vcmUgZGF0YTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWFycm93LXJpZ2h0IiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSB0YWJsZS1zdHJpcGVkIHRhYmxlLWJvcmRlcmVkIG5vLWZvb3RlciI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+QXBwbGljYXRpb24gVHlwZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5BcHBsaWNhdGlvbiBOdW1iZXI8L3RoPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZXZlbG9wbWVudCBBcHBsaWNhdGlvbg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2RhdHJhY2tlci5wbWhjLm5zdy5nb3YuYXUvQXBwbGljYXRpb24vQXBwbGljYXRpb25EZXRhaWxzLzAxMC4yMDE0LjAwMDAwNDMwLjAwMS8iPjEwLjIwMTQuNDMwLjE8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTOTYNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9kYXRyYWNrZXIucG1oYy5uc3cuZ292LmF1L0FwcGxpY2F0aW9uL0FwcGxpY2F0aW9uRGV0YWlscy8wMTAuMjAxNC4wMDAwMDQzMC4wMDIvIj4xMC4yMDE0LjQzMC4yPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUzk2DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZGF0cmFja2VyLnBtaGMubnN3Lmdvdi5hdS9BcHBsaWNhdGlvbi9BcHBsaWNhdGlvbkRldGFpbHMvMDEwLjIwMTQuMDAwMDA0MzAuMDA0LyI+MTAuMjAxNC40MzAuNDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQoNCiAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQoNCg0KDQoNCg0KDQo8aDMgaWQ9ImRvY3VtZW50cyI+PGEgaHJlZj0iIyI+RG9jdW1lbnRzPC9hPjwvaDM+DQo8ZGl2Pg0KDQogICAgICAgIDxkaXYgY2xhc3M9Imljb24td3JhcCI+DQogICAgICAgICAgICA8c3Bhbj5zd2lwZSB0YWJsZSB0byB0aGUgbGVmdCB0byByZXZlYWwgbW9yZSBkYXRhPC9zcGFuPg0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tYXJyb3ctcmlnaHQiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L3NwYW4+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8ZGl2IGlkPSJkb2MtY291bnQiPlRvdGFsIG51bWJlciBvZiBkb2N1bWVudHM6IDM8L2Rpdj4NCiAgICAgICAgPHRhYmxlIGlkPSJkb2MtdGFibGUiIGNsYXNzPSJ0YWJsZSB0YWJsZS1zdHJpcGVkIHRhYmxlLWJvcmRlcmVkIG5vLWZvb3RlciI+DQogICAgICAgICAgICA8dGhlYWQ+DQogICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICA8dGg+UmVjb3JkIE51bWJlcjwvdGg+DQogICAgICAgICAgICAgICAgICAgIDx0aD5EZXNjcmlwdGlvbjwvdGg+DQogICAgICAgICAgICAgICAgICAgIDx0aD5Eb2N1bWVudCBUeXBlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgPHRoPlNpemU8L3RoPg0KICAgICAgICAgICAgICAgICAgICA8dGg+VmlldyBMaW5rPC90aD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgPC90aGVhZD4NCiAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCkQyMDE5LzQxNjg0MSAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPkRBMjAxOSAtIDQzMCBTVEFNUEVEIFNPRUU8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICBQREYNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIuNTUgTUINCg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+PGEgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgcm9sZT0iYnV0dG9uIiBocmVmPSJodHRwczovL2RhdHJhY2tlci5wbWhjLm5zdy5nb3YuYXUvRG9jdW1lbnQvRG93bmxvYWQ/a2V5PWowWVhSd2JwaHNZPSZhbXA7ZmlsZU5hbWU9REEyMDE5Ky0rNDMwK1NUQU1QRUQrU09FRS5QREYiIHRhcmdldD0iX2JsYW5rIj5WaWV3PC9hPjwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCkQyMDE5LzQxNjg0MiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPkRBMjAxNCAtIDQzMC4zIFNUQU1QRUQgU0lURSBQTEFOPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgUERGDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLjc4IE1CDQoNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHJvbGU9ImJ1dHRvbiIgaHJlZj0iaHR0cHM6Ly9kYXRyYWNrZXIucG1oYy5uc3cuZ292LmF1L0RvY3VtZW50L0Rvd25sb2FkP2tleT1Za3hWTEtTR29WZz0mYW1wO2ZpbGVOYW1lPURBMjAxNCstKzQzMC4zK1NUQU1QRUQrU0lURStQTEFOLlBERiIgdGFyZ2V0PSJfYmxhbmsiPlZpZXc8L2E+PC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KRDIwMTkvNDE3NjIyICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+REEgMjAxNCAtIDQzMC4zIE1vZGlmaWNhdGlvbiBvZiBDb25zZW50IC0gMzQwIEJsYWNrbWFucyBQb2ludCBSb2FkIEJMQUNLTUFOUyBQT0lOVCAtIFRBSEMgUHR5IEx0ZCAxNjcxMDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIFBERg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgMC4xNyBNQg0KDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD48YSBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiByb2xlPSJidXR0b24iIGhyZWY9Imh0dHBzOi8vZGF0cmFja2VyLnBtaGMubnN3Lmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9SUFFLzg5eEtVMTA9JmFtcDtmaWxlTmFtZT1EQSsyMDE0Ky0rNDMwLjMrTW9kaWZpY2F0aW9uK29mK0NvbnNlbnQrLSszNDArQmxhY2ttYW5zK1BvaW50K1JvYWQrQkxBQ0tNQU5TK1BPSU5UKy0rVEFIQytQdHkrTHRkKzE2NzEwLlBERiIgdGFyZ2V0PSJfYmxhbmsiPlZpZXc8L2E+PC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KDQogICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICA8L3RhYmxlPg0KPC9kaXY+DQoNCg0KICAgICAgICAgICAgPGgzIGlkPSJjb250YWN0VXMiPjxhIGhyZWY9IiMiPkNvbnRhY3QgVXM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KPHA+VG8gbWFrZSBlbnF1aXJpZXMgcmVnYXJkaW5nIGFwcGxpY2F0aW9ucyBkaXNwbGF5ZWQgaGVyZSwgY29udGFjdCB1cyBieSBvbmUgb2YgdGhlIGZvbGxvd2luZyBtZXRob2RzOjwvcD4NCg0KPHVsPg0KCTxsaT5ieSBlbWFpbCA8YSBzdHlsZT0iY29sb3I6IGJsdWUiIGhyZWY9Im1haWx0bzpjb3VuY2lsQHBtaGMubnN3Lmdvdi5hdT9zdWJqZWN0PUVucXVpcnkgZm9yIGFwcGxpY2F0aW9uIDEwLjIwMTQuNDMwLjMiPmNvdW5jaWxAcG1oYy5uc3cuZ292LmF1PC9hPiwgPC9saT4NCgk8bGk+aW4gd3JpdGluZyB0byBQTyBCb3ggODQgUG9ydCBNYWNxdWFyaWUgTlNXIDI0NDQuIEFsbCBjb3JyZXNwb25kZW5jZSBzaG91bGQgYmUgYWRkcmVzc2VkIHRvIHRoZSBDaGllZiBFeGVjdXRpdmUgT2ZmaWNlciAoQ0VPKSBhbmQgcXVvdGUgdGhlIHJlbGV2YW50IGFwcGxpY2F0aW9uIHJlZmVyZW5jZSBudW1iZXIuPC9saT4NCgk8bGk+YnkgY29udGFjdGluZyB0aGUgYXNzZXNzaW5nIG9mZmljZXIgKG5vdGVkIGluIHRoZSBvZmZpY2VyIHNlY3Rpb24gYWJvdmUpIGJ5IHBob25pbmcgQ3VzdG9tZXIgU2VydmljZSBDZW50cmUgb24gKDAyKSA2NTgxIDgxMTEgZHVyaW5nIG5vcm1hbCBvZmZpY2UgaG91cnMgKE1vbmRheSB0byBGcmlkYXksIDguMzBhbSB0byA0LjMwcG0pLjwvbGk+DQo8L3VsPg0KPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9Im5vdGlmaWVkQWRkcmVzc2VzIj48YSBocmVmPSIjIj5Ob3RpZmllZCBBZGRyZXNzZXM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgIDxvbD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5CbGFja21hbnMgUG9pbnQgUmQsIEJsYWNrbWFucyBQb2ludCBOU1cgMjQ0NCA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjMzNCBCbGFja21hbnMgUG9pbnQgUmQsIEJsYWNrbWFucyBQb2ludCBOU1cgMjQ0NCA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjMzNSBCbGFja21hbnMgUG9pbnQgUmQsIEJsYWNrbWFucyBQb2ludCBOU1cgMjQ0NCA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjM1MyBCbGFja21hbnMgUG9pbnQgUmQsIEJsYWNrbWFucyBQb2ludCBOU1cgMjQ0NCA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjM1NiBCbGFja21hbnMgUG9pbnQgUmQsIEJsYWNrbWFucyBQb2ludCBOU1cgMjQ0NCA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1jbWlsbGFuIERyLCBCbGFja21hbnMgUG9pbnQgTlNXIDI0NDQgPC9saT4NCg0KICAgICAgICAgICAgICAgICAgICA8L29sPg0KICAgICAgICAgICAgPC9kaXY+DQoNCjxoMyBpZD0iZ29vZ2xlbWFwcyI+PGEgaHJlZj0iIyI+R29vZ2xlIE1hcHM8L2E+PC9oMz4NCjxkaXYgaWQ9Im1hcF9jb250YWluZXIiPg0KICAgIDxkaXYgaWQ9Im1hcF9jYW52YXMiIGNsYXNzPSJpZnJhbWUtcndkIj4NCiAgICA8L2Rpdj4NCjwvZGl2Pg0KDQo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+DQoNCiAgICB3aW5kb3cub25sb2FkID0gbG9hZEdvb2dsZU1hcHNTY3JpcHQ7DQoNCiAgICB2YXIgZ2VvY29kZXI7DQogICAgdmFyIG1hcDsNCiAgICB2YXIgdGltZW91dCA9IDMwMDsNCiAgICB2YXIgcHJvcGVydGllcyA9IFsiMzQwIEJsYWNrbWFucyBQb2ludCBSZCwgQmxhY2ttYW5zIFBvaW50IE5TVyAyNDQ0ICIsIjM0MEEgQmxhY2ttYW5zIFBvaW50IFJkLCBCbGFja21hbnMgUG9pbnQgTlNXIDI0NDQgIiwiMzQwQiBCbGFja21hbnMgUG9pbnQgUmQsIEJsYWNrbWFucyBQb2ludCBOU1cgMjQ0NCAiLCIzNDBDIEJsYWNrbWFucyBQb2ludCBSZCwgQmxhY2ttYW5zIFBvaW50IE5TVyAyNDQ0ICJdOw0KICAgIHZhciBsYXRMbmdBcnIgPSBbXTsNCg0KICAgIGZ1bmN0aW9uIGxvYWRHb29nbGVNYXBzU2NyaXB0KCkgew0KICAgICAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7DQogICAgICAgIHNjcmlwdC50eXBlID0gInRleHQvamF2YXNjcmlwdCI7DQogICAgICAgIHNjcmlwdC5zcmMgPSAiLy9tYXBzLmdvb2dsZWFwaXMuY29tL21hcHMvYXBpL2pzP2tleT1BSXphU3lCVnRhRzRZalh3ZmdOanRDbHpxTmNTeUdQT19jS01FUk0mY2FsbGJhY2s9bG9hZEdvb2dsZU1hcHMiOw0KICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gcmVuZGVyR29vZ2xlTWFwcygpDQogICAgew0KICAgICAgICB2YXIgbWFwT3B0aW9ucyA9IHsNCiAgICAgICAgICAgIGNlbnRlcjogbGF0TG5nQXJyWzBdLA0KICAgICAgICAgICAgem9vbTogMTYsDQogICAgICAgICAgICBtYXBUeXBlSWQ6IGdvb2dsZS5tYXBzLk1hcFR5cGVJZC5ST0FETUFQLA0KICAgICAgICAgICAgbWFwVHlwZUNvbnRyb2w6IGZhbHNlDQogICAgICAgIH0NCg0KICAgICAgICBtYXAgPSBuZXcgZ29vZ2xlLm1hcHMuTWFwKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtYXBfY2FudmFzIiksIG1hcE9wdGlvbnMpOw0KDQogICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZERvbUxpc3RlbmVyKHdpbmRvdywgJ3Jlc2l6ZScsIGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgdmFyIGNlbnRlciA9IG1hcC5nZXRDZW50ZXIoKTsNCiAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LnRyaWdnZXIobWFwLCAncmVzaXplJyk7DQogICAgICAgICAgICBtYXAuc2V0Q2VudGVyKGNlbnRlcik7DQogICAgICAgIH0pOw0KDQogICAgfQ0KDQogICAgZnVuY3Rpb24gbG9hZEdvb2dsZU1hcHMoKSB7DQogICAgICAgIGdlb2NvZGVyID0gbmV3IGdvb2dsZS5tYXBzLkdlb2NvZGVyKCk7DQogICAgICAgIHZhciBub09mRmFpbGVkTG9jYXRpb25TZWFyY2ggPSAwOw0KDQogICAgICAgICQocHJvcGVydGllcykuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHsNCiAgICAgICAgICAgIHZhciBwcm9wZXJ0eUFkZHJlc3MgPSBlbGVtZW50Ow0KDQogICAgICAgICAgICAvL0dldCBnZW9jb2RlDQogICAgICAgICAgICBnZW9jb2Rlci5nZW9jb2RlKHsgJ2FkZHJlc3MnOiBwcm9wZXJ0eUFkZHJlc3MgfSwgZnVuY3Rpb24gKHJlc3VsdHMsIHN0YXR1cykgew0KICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgPT0gZ29vZ2xlLm1hcHMuR2VvY29kZXJTdGF0dXMuT0spIHsNCg0KICAgICAgICAgICAgICAgICAgICB2YXIgbG9jYXRpb24gPSByZXN1bHRzWzBdLmdlb21ldHJ5LmxvY2F0aW9uOw0KICAgICAgICAgICAgICAgICAgICB2YXIgbGF0TG5nID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhsb2NhdGlvbi5sYXQoKSwgbG9jYXRpb24ubG5nKCkpOw0KDQogICAgICAgICAgICAgICAgICAgIGxhdExuZ0Fyci5wdXNoKGxhdExuZyk7DQoNCiAgICAgICAgICAgICAgICAgICAgaWYobGF0TG5nQXJyLmxlbmd0aCA9PSAxKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJHb29nbGVNYXBzKCk7DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAvL0NyZWF0ZSBtYXJrZXIgZm9yIG1hcCBhbmQgcGxhY2UgaXQgb24gdGhlIG1hcA0KICAgICAgICAgICAgICAgICAgICB2YXIgbWFya2VyID0gbmV3IGdvb2dsZS5tYXBzLk1hcmtlcih7DQogICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogbGF0TG5nLA0KICAgICAgICAgICAgICAgICAgICAgICAgbWFwOiBtYXANCiAgICAgICAgICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRlbnRTdHJpbmcgPSAnPGRpdj48c3Bhbj4nICsgcHJvcGVydHlBZGRyZXNzICsgJzwvc3Bhbj48L2Rpdj4nOw0KICAgICAgICAgICAgICAgICAgICB2YXIgaW5mb3dpbmRvdyA9IG5ldyBnb29nbGUubWFwcy5JbmZvV2luZG93KHsgICAvL0NyZWF0ZSBpbmZvIHdpbmRvdw0KICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogY29udGVudFN0cmluZw0KICAgICAgICAgICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcihtYXJrZXIsICdjbGljaycsIGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgaW5mb3dpbmRvdy5vcGVuKG1hcCwgbWFya2VyKTsNCiAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIC8vaWYgbm8gbG9jYXRpb24gZm91bmQgYnkgZ29vZ2xlIGZvciBhIHByb3BlcnR5DQogICAgICAgICAgICAgICAgZWxzZSBpZiAoc3RhdHVzID09ICJaRVJPX1JFU1VMVFMiKSB7DQogICAgICAgICAgICAgICAgICAgIG5vT2ZGYWlsZWRMb2NhdGlvblNlYXJjaCsrOw0KDQogICAgICAgICAgICAgICAgICAgIGlmKG5vT2ZGYWlsZWRMb2NhdGlvblNlYXJjaCA9PSAkKHByb3BlcnRpZXMpLmxlbmd0aCkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZUdvb2dsZU1hcHNDb250ZW50KCk7DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdHVzID09IGdvb2dsZS5tYXBzLkdlb2NvZGVyU3RhdHVzLk9WRVJfUVVFUllfTElNSVQpIHsNCiAgICAgICAgICAgICAgICAgICAgLy9zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgZ2V0R2VvQ29kZUZvckFkZHJlc3MoaWQsIGFkZHJlc3MpOyB9LCAodGltZW91dCkpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICAvL1JlcGxhY2VzIGdvb2dsZSBtYXBzIGNvbnRlbnQgd2l0aCBhIG5ldyBkaXYgYmxvY2sgdGhhdCBoYXMgaW5mbyBtZXNzYWdlDQogICAgZnVuY3Rpb24gcmVwbGFjZUdvb2dsZU1hcHNDb250ZW50KCkgew0KICAgICAgICB2YXIgbmV3Q29udGVudCA9ICc8ZGl2IGNsYXNzPSJ1aS1hY2NvcmRpb24tY29udGVudCB1aS1oZWxwZXItcmVzZXQgdWktd2lkZ2V0LWNvbnRlbnQgdWktY29ybmVyLWJvdHRvbSI+JyArDQogICAgICAgICAgICAnPHA+Q291bGRuXCd0IGZpbmQgdGhlIHByb3BlcnR5IGFkZHJlc3MoZXMpIG9uIEdvb2dsZSBNYXBzLiA8cD4nICsNCiAgICAgICAgICAgICc8L2Rpdj4nOw0KDQogICAgICAgICQoJyNtYXBfY29udGFpbmVyJykucmVwbGFjZVdpdGgobmV3Q29udGVudCk7DQogICAgfQ0KDQo8L3NjcmlwdD4NCg0KICAgIDwvZGl2Pg0KICAgIDxkaXYgY2xhc3M9Im1vZGFsIGZhZGUiIGlkPSJzdWJtaXNzaW9uLW1vZGFsIj4NCiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InNwaW5uZXIiPjwvZGl2PiA8IS0tIFRoaXMgZGl2IGhvc3RzIHRoZSBzcGlubmVyIC0tPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgZGF0YS1kaXNtaXNzPSJtb2RhbCIgYXJpYS1sYWJlbD0iQ2xvc2UiPjxzcGFuIGFyaWEtaGlkZGVuPSJ0cnVlIj4mdGltZXM7PC9zcGFuPjwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9Im1vZGFsLXRpdGxlIj5TdWJtaXNzaW9uIGZvciAxMC4yMDE0LjQzMC4zPC9oMj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+DQoNCiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7DQoNCiAgICAgICAgJCgnI2FwcGxpY2F0aW9uJykudG9nZ2xlcGFuZWxzKCk7DQoNCiAgICAgICAgICAgICQoJyNwcm9wZXJ0aWVzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNkZXRhaWxzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyN0cmFja2luZycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjZG9jdW1lbnRzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNyZWxhdGVkQXBwbGljYXRpb25zJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNnb29nbGVtYXBzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNjb250YWN0VXMnKS5jbGljaygpOw0KDQogICAgICAgIA0KDQoNCiAgICAgICAgJCgnI3N1Ym1pc3Npb24tYnRuJykuY2xpY2soZnVuY3Rpb24gKCkgeyAgICAgICAgDQoNCg0KICAgICAgICAgICAgdmFyIHVybCA9ICJodHRwczovL2RhdHJhY2tlci5wbWhjLm5zdy5nb3YuYXUvL0FwcGxpY2F0aW9uL1N1Ym1pc3Npb24vIiArIGVuY29kZVVSSSgiMTAuMjAxNC40MzAuMyIpOw0KDQogICAgICAgICAgICAkKCcjc3VibWlzc2lvbi1tb2RhbCcpLm1vZGFsKCdzaG93JykuZmluZCgnLm1vZGFsLWJvZHknKS5sb2FkKHVybCk7DQogICAgICAgIH0pOw0KICAgIH0pOw0KDQoNCiAgICAvKiBTaG93cyBhbGwgdGhlIHBhbmVscyAqLw0KICAgIGZ1bmN0aW9uIHNob3dBbGwoKSB7DQogICAgICAgICQoJyNhcHBsaWNhdGlvbicpLmNoaWxkcmVuKCJoMyIpLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoInVpLXN0YXRlLWRlZmF1bHQiKSkgew0KICAgICAgICAgICAgICAgICQodGhpcykuY2xpY2soKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSk7DQogICAgfQ0KDQoNCiAgICAvKiBIaWRlIGFsbCB0aGUgcGFuZWxzICovDQogICAgZnVuY3Rpb24gaGlkZUFsbCgpIHsNCiAgICAgICAgJCgnI2FwcGxpY2F0aW9uJykuY2hpbGRyZW4oImgzIikuZWFjaChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcygidWktc3RhdGUtYWN0aXZlIikpIHsNCiAgICAgICAgICAgICAgICAkKHRoaXMpLmNsaWNrKCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0pOw0KICAgIH0NCg0KICAgIDwvc2NyaXB0Pg0KDQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPCEtLSAvLmNvbnRhaW5lci1mbHVpZCAtLT4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGZvb3RlciBjbGFzcz0iZm9vdGVyIGdyaWQiPg0KICAgICAgICAgICAgPGRpdiA+DQogICAgICAgICAgICAgICAgwqkgUG9ydCBNYWNxdWFyaWUgSGFzdGluZ3MgQ291bmNpbA0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZm9vdGVyPg0KICAgIDwvZGl2Pg0KPC9ib2R5Pg0KPC9odG1sPg0K
  recorded_at: Mon, 21 Apr 2025 18:25:01 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Application/ApplicationDetails/010.2014.00000943.002
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - datracker.pmhc.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 302
      message: Found
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Home/Disclaimer"
      Server:
      - Microsoft-IIS/8.5
      Set-Cookie:
      - ASP.NET_SessionId=01pvkrak5auibakic0lpwk0a; path=/; HttpOnly; SameSite=Lax
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:25:01 GMT
      Content-Length:
      - '133'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Home/Disclaimer\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:25:01 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Home/Disclaimer
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=01pvkrak5auibakic0lpwk0a
      Host:
      - datracker.pmhc.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:25:01 GMT
      Content-Length:
      - '19685'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:25:01 GMT
- request:
    method: post
    uri: https://datracker.pmhc.nsw.gov.au/home/disclaimerprocessing
    body:
      encoding: UTF-8
      string: agreed=true
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=01pvkrak5auibakic0lpwk0a
      Host:
      - datracker.pmhc.nsw.gov.au
      Referer:
      - https://datracker.pmhc.nsw.gov.au/Home/Disclaimer
      Content-Type:
      - application/x-www-form-urlencoded
      Content-Length:
      - '11'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Application/ApplicationDetails/010.2014.00000943.002"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      Set-Cookie:
      - User=accessAllowed-MasterView=True; path=/
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:25:01 GMT
      Content-Length:
      - '170'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Application/ApplicationDetails/010.2014.00000943.002\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:25:01 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Application/ApplicationDetails/010.2014.00000943.002
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=01pvkrak5auibakic0lpwk0a; User=accessAllowed-MasterView=True
      Host:
      - datracker.pmhc.nsw.gov.au
      Referer:
      - https://datracker.pmhc.nsw.gov.au/Home/Disclaimer
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:25:11 GMT
      Content-Length:
      - '35593'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:25:11 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Application/ApplicationDetails/010.2014.00000943.002
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=01pvkrak5auibakic0lpwk0a; User=accessAllowed-MasterView=True
      Host:
      - datracker.pmhc.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:25:21 GMT
      Content-Length:
      - '35593'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:25:21 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Application/ApplicationDetails/010.2015.00000134.002
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - datracker.pmhc.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 302
      message: Found
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Home/Disclaimer"
      Server:
      - Microsoft-IIS/8.5
      Set-Cookie:
      - ASP.NET_SessionId=sab33bjtuzyiuaoidbswsykv; path=/; HttpOnly; SameSite=Lax
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:25:21 GMT
      Content-Length:
      - '133'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Home/Disclaimer\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:25:22 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Home/Disclaimer
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=sab33bjtuzyiuaoidbswsykv
      Host:
      - datracker.pmhc.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:25:21 GMT
      Content-Length:
      - '19685'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:25:22 GMT
- request:
    method: post
    uri: https://datracker.pmhc.nsw.gov.au/home/disclaimerprocessing
    body:
      encoding: UTF-8
      string: agreed=true
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=sab33bjtuzyiuaoidbswsykv
      Host:
      - datracker.pmhc.nsw.gov.au
      Referer:
      - https://datracker.pmhc.nsw.gov.au/Home/Disclaimer
      Content-Type:
      - application/x-www-form-urlencoded
      Content-Length:
      - '11'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Application/ApplicationDetails/010.2015.00000134.002"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      Set-Cookie:
      - User=accessAllowed-MasterView=True; path=/
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:25:21 GMT
      Content-Length:
      - '170'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Application/ApplicationDetails/010.2015.00000134.002\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:25:22 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Application/ApplicationDetails/010.2015.00000134.002
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=sab33bjtuzyiuaoidbswsykv; User=accessAllowed-MasterView=True
      Host:
      - datracker.pmhc.nsw.gov.au
      Referer:
      - https://datracker.pmhc.nsw.gov.au/Home/Disclaimer
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:25:32 GMT
      Content-Length:
      - '30398'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:25:32 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Application/ApplicationDetails/010.2015.00000134.002
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=sab33bjtuzyiuaoidbswsykv; User=accessAllowed-MasterView=True
      Host:
      - datracker.pmhc.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:25:41 GMT
      Content-Length:
      - '30398'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQo8aHRtbCB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCIgeG1sOmxhbmc9ImVuIiBsYW5nPSJlbiI+DQoNCg0KDQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCIgLz4NCiAgICA8bWV0YSBodHRwLWVxdWl2PSJYLVVBLUNvbXBhdGlibGUiIGNvbnRlbnQ9IklFPWVkZ2UiIC8+DQogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xIiAvPg0KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIiAvPg0KICAgIDxtZXRhIG5hbWU9ImtleXdvcmRzIiBjb250ZW50PSJQb3J0IE1hY3F1YXJpZSBDb3VuY2lsLCBEQSBUcmFja2VyLEFwcGxpY2F0aW9uIFRyYWNrZXIsRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24sRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24gVHJhY2tpbmcsIERBIEVucXVpcnksIERldmVsb3BtZW50IEFwcGxpY2F0aW9uIEVucXVpcnksIEFwcGxpY2F0aW9uIFRyYWNrZXIiPg0KICAgIDxtZXRhIG5hbWU9ImRlc2NyaXB0aW9uIiBjb250ZW50PSJUaGUgb2ZmaWNpYWwgUG9ydCBNYWNxdWFyaWUgQ291bmNpbCBBcHBsaWNhdGlvbiBUcmFja2VyIj4NCg0KICAgIDwhLS1mYXZpY29uLS0+DQogICAgPGxpbmsgaHJlZj0iL0NvdW5jaWxfVGhlbWUvUG9ydF9NYWNxdWFyaWUvZmF2aWNvbi5pY28iICkiIHJlbD0ic2hvcnRjdXQgaWNvbiIgdHlwZT0iaW1hZ2UveC1pY29uIiAvPg0KDQogICAgPCEtLSBqUXVlcnkgLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS0xLjExLjEuanMiPjwvc2NyaXB0Pg0KDQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS11aS0xLjExLjIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvY29yZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvYWNjb3JkaW9uLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC90aGVtZXMvYmFzZS90aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQoNCiAgICA8IS0tIEJvb3RzdHJhcCAtLT4NCiAgICA8c2NyaXB0IHNyYz0iL1NjcmlwdHMvYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCg0KICAgIDxsaW5rIGhyZWY9Ii9Db250ZW50L2Jvb3RzdHJhcC10aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvYm9vdHN0cmFwLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9mb250LWF3ZXNvbWUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPCEtLSBEYXRhVGFibGVzIC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2pxdWVyeS5kYXRhVGFibGVzLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMuYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMucmVzcG9uc2l2ZS5qcyI+PC9zY3JpcHQ+DQoNCiAgICANCiAgICA8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLmJvb3RzdHJhcC5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvRGF0YVRhYmxlcy9jc3MvZGF0YVRhYmxlcy5yZXNwb25zaXZlLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLnJlc3BvbnNpdmUuc2NzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KDQogICAgPCEtLSBCb290c3RyYXAgU0ItQWRtaW4tMiBQbHVnaW4gYW5kIG90aGVyIGNzcyBhbmQganMgZmlsZXMtLT4NCiAgICA8c2NyaXB0IHNyYz0iL2pzL2Jvb3RzdHJhcC1jb21ib2JveC5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL2Jvb3RzdHJhcC1kYXRlcGlja2VyLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvYm9vdHN0cmFwLWRpYWxvZy5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL2pxdWVyeS5mb3JtLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvanF1ZXJ5LnRhYmxlc29ydGVyLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvbWFzdGVydmlldy5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL21ldGlzTWVudS5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL3NiLWFkbWluLTIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL2Nzcy9ib290c3RyYXAtY29tYm9ib3guY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvZGF0ZXBpY2tlcjMuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvbWFzdGVydmlldy1jdXN0b21pc2F0aW9ucy5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL2Nzcy9zYi1hZG1pbi0yLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDxsaW5rIGhyZWY9Ii9Db3VuY2lsX1RoZW1lL1BvcnRfTWFjcXVhcmllL1BvcnRfTWFjcXVhcmllLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ291bmNpbF9UaGVtZS9Qb3J0X01hY3F1YXJpZS9Qb3J0X01hY3F1YXJpZV9Nb2JpbGVWaWV3LmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICANCg0KICAgIDwhLS1pbmNsdWRlIGdvb2dsZSBhbmFseXRpY3MgY29kZS0tPg0KICAgIDxzY3JpcHQ+DQogICAgICAgIChmdW5jdGlvbiAoaSwgcywgbywgZywgciwgYSwgbSkgew0KICAgICAgICAgICAgaVsnR29vZ2xlQW5hbHl0aWNzT2JqZWN0J10gPSByOyBpW3JdID0gaVtyXSB8fCBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgKGlbcl0ucSA9IGlbcl0ucSB8fCBbXSkucHVzaChhcmd1bWVudHMpDQogICAgICAgICAgICB9LCBpW3JdLmwgPSAxICogbmV3IERhdGUoKTsgYSA9IHMuY3JlYXRlRWxlbWVudChvKSwNCiAgICAgICAgICAgICAgICBtID0gcy5nZXRFbGVtZW50c0J5VGFnTmFtZShvKVswXTsgYS5hc3luYyA9IDE7IGEuc3JjID0gZzsgbS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLCBtKQ0KICAgICAgICB9KSh3aW5kb3csIGRvY3VtZW50LCAnc2NyaXB0JywgJy8vd3d3Lmdvb2dsZS1hbmFseXRpY3MuY29tL2FuYWx5dGljcy5qcycsICdnYScpOw0KDQogICAgICAgIGdhKCdjcmVhdGUnLCAnVUEtNzI5MTg1Mi00JywgJ2F1dG8nKTsNCiAgICAgICAgZ2EoJ3NlbmQnLCAncGFnZXZpZXcnKTsNCg0KICAgIDwvc2NyaXB0Pg0KDQoNCiAgICA8dGl0bGU+UG9ydCBNYWNxdWFyaWUtSGFzdGluZ3MgQ291bmNpbCAtIEFwcGxpY2F0aW9uIFRyYWNrZXI8L3RpdGxlPg0KDQogICAgPCEtLSBDdXN0b20gRm9udHMNCiAgICAgICAgPGxpbmsgaHJlZj0iL2ZvbnQtYXdlc29tZS9jc3MvZm9udC1hd2Vzb21lLm1pbi5jc3MiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPg0KICAgIC0tPg0KICAgIDwhLS0gSFRNTDUgU2hpbSBhbmQgUmVzcG9uZC5qcyBJRTggc3VwcG9ydCBvZiBIVE1MNSBlbGVtZW50cyBhbmQgbWVkaWEgcXVlcmllcyAtLT4NCiAgICA8IS0tIFdBUk5JTkc6IFJlc3BvbmQuanMgZG9lc24ndCB3b3JrIGlmIHlvdSB2aWV3IHRoZSBwYWdlIHZpYSBmaWxlOi8vIC0tPg0KICAgIDwhLS1baWYgbHQgSUUgOV0+DQogICAgICAgIDxzY3JpcHQgc3JjPSJodHRwczovL29zcy5tYXhjZG4uY29tL2xpYnMvaHRtbDVzaGl2LzMuNy4wL2h0bWw1c2hpdi5qcyI+PC9zY3JpcHQ+DQogICAgICAgIDxzY3JpcHQgc3JjPSJodHRwczovL29zcy5tYXhjZG4uY29tL2xpYnMvcmVzcG9uZC5qcy8xLjQuMi9yZXNwb25kLm1pbi5qcyI+PC9zY3JpcHQ+DQogICAgPCFbZW5kaWZdLS0+DQoNCiAgICA8bGluayBocmVmPSIvL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9Q2Fycm9pcytHb3RoaWMiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPg0KPC9oZWFkPg0KPGJvZHkgY2xhc3M9InN0YW5kYXJkIj4NCiAgICA8aGVhZGVyIGNsYXNzPSJjbGVhcmZpeCI+DQogICAgICAgIDxkaXYgc3R5bGU9IndpZHRoOiAxMDAlOyBiYWNrZ3JvdW5kLWNvbG9yOiAjNUQ5NzRDO2hlaWdodDoyMHB4ICI+PC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9nbyI+DQogICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvIj4NCiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9Db3VuY2lsX1RoZW1lL1BvcnRfTWFjcXVhcmllL2xvZ28ucG5nIiBhbHQ9IlBvcnQgTWFjcXVhcmllIEhhc3RpbmdzIExvZ28iIGlkPSJkaXNwbGF5LWxvZ28iIC8+DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InB1bGwtcmlnaHQiPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvaGVhZGVyPg0KICAgIDxkaXYgaWQ9ImNvbnRlbnQiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPg0KICAgICAgICAgICAgPGRpdiBpZD0ibmF2LWNvbnRhaW5lciIgc3R5bGU9ImRpc3BsYXk6bm9uZSI+DQogICAgICAgICAgICAgICAgPG5hdj48L25hdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJuYXZpZ2F0aW9uIiBjbGFzcz0iY29udGFpbmVyMSI+DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJob21lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cucG1oYy5uc3cuZ292LmF1L0hvbWUiPkhvbWU8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtMW5hdi1oYXMtY2hpbGRyZW4gbmF2LXNlY3Rpb24tdGhpcmRzLTEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvUmVzaWRlbnQtU2VydmljZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlc2lkZW50IFNlcnZpY2VzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtMiBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0xIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQWJvdXQtVXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFib3V0IFVzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtMyBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0xIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQnVzaW5lc3MiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJ1c2luZXNzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNCBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0yIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQnVpbGRpbmctUGxhbm5pbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJ1aWxkaW5nICZhbXA7IFBsYW5uaW5nDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNSBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0yIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQ29tbXVuaXR5LUZhY2lsaXRpZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvbW11bml0eSBGYWNpbGl0aWVzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNiBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0yIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQ3VsdHVyZS1TcG9ydC1MZWlzdXJlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdWx0dXJlLCBTcG9ydCAmYW1wOyBMZWlzdXJlDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNyBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0zIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvRm9ybXMtUGVybWl0cyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRm9ybXMgJmFtcDsgUGVybWl0cw0KICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxuYXYgY2xhc3M9Im5hdmJhciBuYXZiYXItZGVmYXVsdCBuYXZiYXItc3RhdGljLXRvcCIgcm9sZT0ibmF2aWdhdGlvbiIgc3R5bGU9Im1hcmdpbi1ib3R0b206IDAiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9Im5hdmJhci10b2dnbGUiIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgZGF0YS10YXJnZXQ9Ii5uYXZiYXItY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPlRvZ2dsZSBuYXZpZ2F0aW9uPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tYmFyIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1iYXIiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLWhlYWRlciAtLT4NCiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXZiYXItdG9wLWxpbmtzIG5hdmJhci1yaWdodCBoaWRkZW4teHMgaGlkZGVuLXNtIGhpZGRlbi1tZCI+DQogICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxzcGFuIGlkPSJwcmludEljb24iIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXByaW50IiBvbmNsaWNrPSJ3aW5kb3cucHJpbnQoKTsiPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItZGVmYXVsdCBzaWRlYmFyIiByb2xlPSJuYXZpZ2F0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2lkZWJhci1uYXYgbmF2YmFyLWNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IiBpZD0ic2lkZS1tZW51Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48aSBjbGFzcz0iZmEgZmEtbGlzdC11bCBmYS1mdyI+PC9pPkFwcGxpY2F0aW9uIFRyYWNrZXI8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9BYm91dCB0YXJnZXQ9X3NlbGY+V2hhdCBpcyBBcHBsaWNhdGlvbiBUcmFja2VyPzwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9EaXNjbGFpbWVyIHRhcmdldD1fc2VsZj5EaXNjbGFpbWVyPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gLy5uYXYtc2Vjb25kLWxldmVsIC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48aSBjbGFzcz0iZmEgZmEtbGlzdC11bCBmYS1mdyI+PC9pPkFwcGxpY2F0aW9uczxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXYtc2Vjb25kLWxldmVsIGNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL0luZGV4IHRhcmdldD0+QXBwbGljYXRpb24gVHJhY2tlciBIb21lPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL1NlYXJjaCBpZD1zZWFyY2ggdGFyZ2V0PV9zZWxmPlNlYXJjaDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/UmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1UcnVlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSBpZD1vdXRzdGFuZGluZy1hcHBzIHRhcmdldD1fc2VsZj5VbmRldGVybWluZWQgQXBwbGljYXRpb25zPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9SZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9VHJ1ZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIGlkPWV4aGliaXRlZC1hcHBzIHRhcmdldD1fc2VsZj5BcHBsaWNhdGlvbnMgT24gRXhoaWJpdGlvbjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjdGl2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbnMgU3VibWl0dGVkPHNwYW4gY2xhc3M9ImZhIGFycm93Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdi1zZWNvbmQtbGV2ZWwgY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTIxJTJmMDQlMmYyMDI1JkRhdGVUbz0yMiUyZjA0JTJmMjAyNSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPlRoaXMgV2VlazwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MTMlMmYwNCUyZjIwMjUmRGF0ZVRvPTE5JTJmMDQlMmYyMDI1JkRhdGVUeXBlPTEmUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBXZWVrPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDQlMmYyMDI1JkRhdGVUbz0yMiUyZjA0JTJmMjAyNSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPlRoaXMgTW9udGg8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTElMmYwMyUyZjIwMjUmRGF0ZVRvPTMxJTJmMDMlMmYyMDI1JkRhdGVUeXBlPTEmUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjdGl2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbnMgRGV0ZXJtaW5lZDxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXYtc2Vjb25kLWxldmVsIGNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0yMSUyZjA0JTJmMjAyNSZEYXRlVG89MjIlMmYwNCUyZjIwMjUmRGF0ZVR5cGU9MiZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9VHJ1ZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPlRoaXMgV2VlazwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MTMlMmYwNCUyZjIwMjUmRGF0ZVRvPTE5JTJmMDQlMmYyMDI1JkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5MYXN0IFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTElMmYwNCUyZjIwMjUmRGF0ZVRvPTIyJTJmMDQlMmYyMDI1JkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIE1vbnRoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDMlMmYyMDI1JkRhdGVUbz0zMSUyZjAzJTJmMjAyNSZEYXRlVHlwZT0yJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1UcnVlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8IS0tIC8uc2lkZWJhci1jb2xsYXBzZSAtLT4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLXN0YXRpYy1zaWRlIC0tPg0KICAgICAgICAgICAgPC9uYXY+DQogICAgICAgICAgICA8ZGl2IGlkPSJwYWdlLXdyYXBwZXIiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+DQogICAgICAgICAgICAgICAgICAgIA0KDQoNCiAgICA8ZGl2IGNsYXNzPSJwYWdlLWhlYWRlciI+DQogICAgICAgIDxoMj5BcHBsaWNhdGlvbjogUzk2ICgxMC4yMDE1LjEzNC4yKTwvaDI+DQogICAgPC9kaXY+DQogICAgPGg0PkRldGFpbGVkIGluZm9ybWF0aW9uIHJlbGF0ZWQgdG8gdGhlIGFwcGxpY2F0aW9uOjwvaDQ+DQogICAgPGJyIC8+DQogICAgPGRpdj4NCiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDpzaG93QWxsKCk7Ij5TaG93IEFsbDwvYT4gLw0KICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OmhpZGVBbGwoKTsiPkhpZGUgQWxsPC9hPg0KICAgIDwvZGl2Pg0KICAgIDxkaXYgaWQ9ImFwcGxpY2F0aW9uIj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJkZXRhaWxzIj48YSBocmVmPSIjIj5EZXRhaWxzPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5EZXNjcmlwdGlvbjogPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9ImRlc2NyaXB0aW9uIj5DQU5DRUxMRUQgICAgICBTdWJkaXZpc2lvbiAtIE1vZGlmaWNhdGlvbjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5TdWJtaXR0ZWQgRGF0ZTogPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoxNy8wNC8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5BcHBsaWNhdGlvbiBUeXBlOiA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5TOTY8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0icHJvcGVydGllcyI+PGEgaHJlZj0iIyI+UHJvcGVydGllczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9InByb3BlcnR5LWxpc3QiPjE5IEdsZW5mZXJuIEF2LCBUaHJ1bXN0ZXIgTlNXIDI0NDQgIChMT1Q6IDIgRFA6IDEyMjQzMTQpPGJyLz5QIE1hY3F1YXJpZSwgVGhydW1zdGVyIE5TVyAyNDQ0ICAoTE9UOiA2IERQOiA4MDkxNjEpPGJyLz5UaHJ1bXN0ZXIgU3QsIFRocnVtc3RlciBOU1cgMjQ0NCAgKExPVDogMSBEUDogMTA4NzM2OCk8YnIvPlRocnVtc3RlciBTdCwgVGhydW1zdGVyIE5TVyAyNDQ0ICAoTE9UOiAxIERQOiAxMTcyMTU0KTxici8+VGhydW1zdGVyIFN0LCBUaHJ1bXN0ZXIgTlNXIDI0NDQgIChMT1Q6IDIgRFA6IDExNzIxNTQpPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9InBlb3BsZSI+PGEgaHJlZj0iIyI+UGVvcGxlPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXBwbGljYW50OiBIb3BraW5zIENvbnN1bHRhbnRzIFB0eSBMdGQgDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT3duZXIgYXQgTG9kZ2VtZW50OiBIb21ldG93biBBdXN0cmFsaWEgVGhydW1zdGVyIFB0eSBMdGQgDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUENBIFByaW5jaXBhbCBDZXJ0aWZ5aW5nIEF1dGhvcml0eTogUG9ydCBNYWNxdWFyaWUtSGFzdGluZ3MgQ291bmNpbCANCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9Im9mZmljZXIiPjxhIGhyZWY9IiMiPk9mZmljZXI8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJvZmZpY2VyTmFtZSI+QmVuamFtaW4gUm9iZXJ0czwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJkZWNpc2lvbiI+PGEgaHJlZj0iIyI+RGVjaXNpb248L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFwcGxpY2F0aW9uIFN0YXR1czogRGV0ZXJtaW5lZDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGV0ZXJtaW5hdGlvbiBEYXRlOg0KMDIvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5EZXRlcm1pbmF0aW9uIFR5cGU6IENhbmNlbGxlZC9TdXJyZW5kZXJlZDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJlc3RpbWF0ZWRDb3N0Ij48YSBocmVmPSIjIj5Fc3RpbWF0ZWQgQ29zdDwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+JDAuMDA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0idHJhY2tpbmciPjxhIGhyZWY9IiMiPlRyYWNraW5nPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpY29uLXdyYXAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+c3dpcGUgdGFibGUgdG8gdGhlIGxlZnQgdG8gcmV2ZWFsIG1vcmUgZGF0YTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWFycm93LXJpZ2h0IiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSB0YWJsZS1zdHJpcGVkIHRhYmxlLWJvcmRlcmVkIG5vLWZvb3RlciI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+RGVzY3JpcHRpb248L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+Q29tbWVuY2VkIERhdGU8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+Q29tcGxldGVkIERhdGU8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+U2VjdGlvbiA5NiBNb2QgQXNzZXNzbWVudDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoxNy8wNC8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMDIvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5BbGxvY2F0ZWQgdG8gQXNzZXNzaW5nIE9mZmljZXI8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjQvMDQvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI0LzA0LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+V2F0ZXIgJmFtcDsgU2V3ZXIgUmVmZXJyYWw8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjQvMDQvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjAyLzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+RGV0ZXJtaW5hdGlvbiBJc3N1ZWQgKHRvIEFkbW4pPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjAyLzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoxMy8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFwcGxpY2F0aW9uIFdpdGhkcmF3bjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoxMy8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMTMvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCg0KDQoNCg0KICAgICAgICAgICAgPGgzIGlkPSJyZWxhdGVkQXBwbGljYXRpb25zIj48YSBocmVmPSIjIj5SZWxhdGVkIEFwcGxpY2F0aW9uczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaWNvbi13cmFwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPnN3aXBlIHRhYmxlIHRvIHRoZSBsZWZ0IHRvIHJldmVhbCBtb3JlIGRhdGE8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1hcnJvdy1yaWdodCIgYXJpYS1oaWRkZW49InRydWUiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtc3RyaXBlZCB0YWJsZS1ib3JkZXJlZCBuby1mb290ZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkFwcGxpY2F0aW9uIFR5cGU8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+QXBwbGljYXRpb24gTnVtYmVyPC90aD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9kYXRyYWNrZXIucG1oYy5uc3cuZ292LmF1L0FwcGxpY2F0aW9uL0FwcGxpY2F0aW9uRGV0YWlscy8wMTAuMjAxNS4wMDAwMDEzNC4wMDEvIj4xMC4yMDE1LjEzNC4xPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCg0KICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCg0KDQoNCg0KDQoNCjxoMyBpZD0iZG9jdW1lbnRzIj48YSBocmVmPSIjIj5Eb2N1bWVudHM8L2E+PC9oMz4NCjxkaXY+DQoNCiAgICAgICAgPGI+Tm8gZGF0YS48L2I+DQo8L2Rpdj4NCg0KDQogICAgICAgICAgICA8aDMgaWQ9ImNvbnRhY3RVcyI+PGEgaHJlZj0iIyI+Q29udGFjdCBVczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQo8cD5UbyBtYWtlIGVucXVpcmllcyByZWdhcmRpbmcgYXBwbGljYXRpb25zIGRpc3BsYXllZCBoZXJlLCBjb250YWN0IHVzIGJ5IG9uZSBvZiB0aGUgZm9sbG93aW5nIG1ldGhvZHM6PC9wPg0KDQo8dWw+DQoJPGxpPmJ5IGVtYWlsIDxhIHN0eWxlPSJjb2xvcjogYmx1ZSIgaHJlZj0ibWFpbHRvOmNvdW5jaWxAcG1oYy5uc3cuZ292LmF1P3N1YmplY3Q9RW5xdWlyeSBmb3IgYXBwbGljYXRpb24gMTAuMjAxNS4xMzQuMiI+Y291bmNpbEBwbWhjLm5zdy5nb3YuYXU8L2E+LCA8L2xpPg0KCTxsaT5pbiB3cml0aW5nIHRvIFBPIEJveCA4NCBQb3J0IE1hY3F1YXJpZSBOU1cgMjQ0NC4gQWxsIGNvcnJlc3BvbmRlbmNlIHNob3VsZCBiZSBhZGRyZXNzZWQgdG8gdGhlIENoaWVmIEV4ZWN1dGl2ZSBPZmZpY2VyIChDRU8pIGFuZCBxdW90ZSB0aGUgcmVsZXZhbnQgYXBwbGljYXRpb24gcmVmZXJlbmNlIG51bWJlci48L2xpPg0KCTxsaT5ieSBjb250YWN0aW5nIHRoZSBhc3Nlc3Npbmcgb2ZmaWNlciAobm90ZWQgaW4gdGhlIG9mZmljZXIgc2VjdGlvbiBhYm92ZSkgYnkgcGhvbmluZyBDdXN0b21lciBTZXJ2aWNlIENlbnRyZSBvbiAoMDIpIDY1ODEgODExMSBkdXJpbmcgbm9ybWFsIG9mZmljZSBob3VycyAoTW9uZGF5IHRvIEZyaWRheSwgOC4zMGFtIHRvIDQuMzBwbSkuPC9saT4NCjwvdWw+DQo8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0ibm90aWZpZWRBZGRyZXNzZXMiPjxhIGhyZWY9IiMiPk5vdGlmaWVkIEFkZHJlc3NlczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgPGI+Tm8gZGF0YS48L2I+DQogICAgICAgICAgICA8L2Rpdj4NCg0KPGgzIGlkPSJnb29nbGVtYXBzIj48YSBocmVmPSIjIj5Hb29nbGUgTWFwczwvYT48L2gzPg0KPGRpdiBpZD0ibWFwX2NvbnRhaW5lciI+DQogICAgPGRpdiBpZD0ibWFwX2NhbnZhcyIgY2xhc3M9ImlmcmFtZS1yd2QiPg0KICAgIDwvZGl2Pg0KPC9kaXY+DQoNCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCg0KICAgIHdpbmRvdy5vbmxvYWQgPSBsb2FkR29vZ2xlTWFwc1NjcmlwdDsNCg0KICAgIHZhciBnZW9jb2RlcjsNCiAgICB2YXIgbWFwOw0KICAgIHZhciB0aW1lb3V0ID0gMzAwOw0KICAgIHZhciBwcm9wZXJ0aWVzID0gWyIxOSBHbGVuZmVybiBBdiwgVGhydW1zdGVyIE5TVyAyNDQ0ICIsIlAgTWFjcXVhcmllLCBUaHJ1bXN0ZXIgTlNXIDI0NDQgIiwiVGhydW1zdGVyIFN0LCBUaHJ1bXN0ZXIgTlNXIDI0NDQgIl07DQogICAgdmFyIGxhdExuZ0FyciA9IFtdOw0KDQogICAgZnVuY3Rpb24gbG9hZEdvb2dsZU1hcHNTY3JpcHQoKSB7DQogICAgICAgIHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzY3JpcHQiKTsNCiAgICAgICAgc2NyaXB0LnR5cGUgPSAidGV4dC9qYXZhc2NyaXB0IjsNCiAgICAgICAgc2NyaXB0LnNyYyA9ICIvL21hcHMuZ29vZ2xlYXBpcy5jb20vbWFwcy9hcGkvanM/a2V5PUFJemFTeUJWdGFHNFlqWHdmZ05qdENsenFOY1N5R1BPX2NLTUVSTSZjYWxsYmFjaz1sb2FkR29vZ2xlTWFwcyI7DQogICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2NyaXB0KTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiByZW5kZXJHb29nbGVNYXBzKCkNCiAgICB7DQogICAgICAgIHZhciBtYXBPcHRpb25zID0gew0KICAgICAgICAgICAgY2VudGVyOiBsYXRMbmdBcnJbMF0sDQogICAgICAgICAgICB6b29tOiAxNiwNCiAgICAgICAgICAgIG1hcFR5cGVJZDogZ29vZ2xlLm1hcHMuTWFwVHlwZUlkLlJPQURNQVAsDQogICAgICAgICAgICBtYXBUeXBlQ29udHJvbDogZmFsc2UNCiAgICAgICAgfQ0KDQogICAgICAgIG1hcCA9IG5ldyBnb29nbGUubWFwcy5NYXAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm1hcF9jYW52YXMiKSwgbWFwT3B0aW9ucyk7DQoNCiAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkRG9tTGlzdGVuZXIod2luZG93LCAncmVzaXplJywgZnVuY3Rpb24oKSB7DQogICAgICAgICAgICB2YXIgY2VudGVyID0gbWFwLmdldENlbnRlcigpOw0KICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQudHJpZ2dlcihtYXAsICdyZXNpemUnKTsNCiAgICAgICAgICAgIG1hcC5zZXRDZW50ZXIoY2VudGVyKTsNCiAgICAgICAgfSk7DQoNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBsb2FkR29vZ2xlTWFwcygpIHsNCiAgICAgICAgZ2VvY29kZXIgPSBuZXcgZ29vZ2xlLm1hcHMuR2VvY29kZXIoKTsNCiAgICAgICAgdmFyIG5vT2ZGYWlsZWRMb2NhdGlvblNlYXJjaCA9IDA7DQoNCiAgICAgICAgJChwcm9wZXJ0aWVzKS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkgew0KICAgICAgICAgICAgdmFyIHByb3BlcnR5QWRkcmVzcyA9IGVsZW1lbnQ7DQoNCiAgICAgICAgICAgIC8vR2V0IGdlb2NvZGUNCiAgICAgICAgICAgIGdlb2NvZGVyLmdlb2NvZGUoeyAnYWRkcmVzcyc6IHByb3BlcnR5QWRkcmVzcyB9LCBmdW5jdGlvbiAocmVzdWx0cywgc3RhdHVzKSB7DQogICAgICAgICAgICAgICAgaWYgKHN0YXR1cyA9PSBnb29nbGUubWFwcy5HZW9jb2RlclN0YXR1cy5PSykgew0KDQogICAgICAgICAgICAgICAgICAgIHZhciBsb2NhdGlvbiA9IHJlc3VsdHNbMF0uZ2VvbWV0cnkubG9jYXRpb247DQogICAgICAgICAgICAgICAgICAgIHZhciBsYXRMbmcgPSBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKGxvY2F0aW9uLmxhdCgpLCBsb2NhdGlvbi5sbmcoKSk7DQoNCiAgICAgICAgICAgICAgICAgICAgbGF0TG5nQXJyLnB1c2gobGF0TG5nKTsNCg0KICAgICAgICAgICAgICAgICAgICBpZihsYXRMbmdBcnIubGVuZ3RoID09IDEpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckdvb2dsZU1hcHMoKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgIC8vQ3JlYXRlIG1hcmtlciBmb3IgbWFwIGFuZCBwbGFjZSBpdCBvbiB0aGUgbWFwDQogICAgICAgICAgICAgICAgICAgIHZhciBtYXJrZXIgPSBuZXcgZ29vZ2xlLm1hcHMuTWFya2VyKHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBsYXRMbmcsDQogICAgICAgICAgICAgICAgICAgICAgICBtYXA6IG1hcA0KICAgICAgICAgICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgICAgICAgICB2YXIgY29udGVudFN0cmluZyA9ICc8ZGl2PjxzcGFuPicgKyBwcm9wZXJ0eUFkZHJlc3MgKyAnPC9zcGFuPjwvZGl2Pic7DQogICAgICAgICAgICAgICAgICAgIHZhciBpbmZvd2luZG93ID0gbmV3IGdvb2dsZS5tYXBzLkluZm9XaW5kb3coeyAgIC8vQ3JlYXRlIGluZm8gd2luZG93DQogICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBjb250ZW50U3RyaW5nDQogICAgICAgICAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKG1hcmtlciwgJ2NsaWNrJywgZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpbmZvd2luZG93Lm9wZW4obWFwLCBtYXJrZXIpOw0KICAgICAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgLy9pZiBubyBsb2NhdGlvbiBmb3VuZCBieSBnb29nbGUgZm9yIGEgcHJvcGVydHkNCiAgICAgICAgICAgICAgICBlbHNlIGlmIChzdGF0dXMgPT0gIlpFUk9fUkVTVUxUUyIpIHsNCiAgICAgICAgICAgICAgICAgICAgbm9PZkZhaWxlZExvY2F0aW9uU2VhcmNoKys7DQoNCiAgICAgICAgICAgICAgICAgICAgaWYobm9PZkZhaWxlZExvY2F0aW9uU2VhcmNoID09ICQocHJvcGVydGllcykubGVuZ3RoKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlR29vZ2xlTWFwc0NvbnRlbnQoKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0dXMgPT0gZ29vZ2xlLm1hcHMuR2VvY29kZXJTdGF0dXMuT1ZFUl9RVUVSWV9MSU1JVCkgew0KICAgICAgICAgICAgICAgICAgICAvL3NldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyBnZXRHZW9Db2RlRm9yQWRkcmVzcyhpZCwgYWRkcmVzcyk7IH0sICh0aW1lb3V0KSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSk7DQogICAgICAgIH0pOw0KICAgIH0NCg0KICAgIC8vUmVwbGFjZXMgZ29vZ2xlIG1hcHMgY29udGVudCB3aXRoIGEgbmV3IGRpdiBibG9jayB0aGF0IGhhcyBpbmZvIG1lc3NhZ2UNCiAgICBmdW5jdGlvbiByZXBsYWNlR29vZ2xlTWFwc0NvbnRlbnQoKSB7DQogICAgICAgIHZhciBuZXdDb250ZW50ID0gJzxkaXYgY2xhc3M9InVpLWFjY29yZGlvbi1jb250ZW50IHVpLWhlbHBlci1yZXNldCB1aS13aWRnZXQtY29udGVudCB1aS1jb3JuZXItYm90dG9tIj4nICsNCiAgICAgICAgICAgICc8cD5Db3VsZG5cJ3QgZmluZCB0aGUgcHJvcGVydHkgYWRkcmVzcyhlcykgb24gR29vZ2xlIE1hcHMuIDxwPicgKw0KICAgICAgICAgICAgJzwvZGl2Pic7DQoNCiAgICAgICAgJCgnI21hcF9jb250YWluZXInKS5yZXBsYWNlV2l0aChuZXdDb250ZW50KTsNCiAgICB9DQoNCjwvc2NyaXB0Pg0KDQogICAgPC9kaXY+DQogICAgPGRpdiBjbGFzcz0ibW9kYWwgZmFkZSIgaWQ9InN1Ym1pc3Npb24tbW9kYWwiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2ciPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3Bpbm5lciI+PC9kaXY+IDwhLS0gVGhpcyBkaXYgaG9zdHMgdGhlIHNwaW5uZXIgLS0+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImNsb3NlIiBkYXRhLWRpc21pc3M9Im1vZGFsIiBhcmlhLWxhYmVsPSJDbG9zZSI+PHNwYW4gYXJpYS1oaWRkZW49InRydWUiPiZ0aW1lczs8L3NwYW4+PC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0ibW9kYWwtdGl0bGUiPlN1Ym1pc3Npb24gZm9yIDEwLjIwMTUuMTM0LjI8L2gyPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCg0KICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHsNCg0KICAgICAgICAkKCcjYXBwbGljYXRpb24nKS50b2dnbGVwYW5lbHMoKTsNCg0KICAgICAgICAgICAgJCgnI3Byb3BlcnRpZXMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI2RldGFpbHMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI3RyYWNraW5nJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNkb2N1bWVudHMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI3JlbGF0ZWRBcHBsaWNhdGlvbnMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI2dvb2dsZW1hcHMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI2NvbnRhY3RVcycpLmNsaWNrKCk7DQoNCiAgICAgICAgDQoNCg0KICAgICAgICAkKCcjc3VibWlzc2lvbi1idG4nKS5jbGljayhmdW5jdGlvbiAoKSB7ICAgICAgICANCg0KDQogICAgICAgICAgICB2YXIgdXJsID0gImh0dHBzOi8vZGF0cmFja2VyLnBtaGMubnN3Lmdvdi5hdS8vQXBwbGljYXRpb24vU3VibWlzc2lvbi8iICsgZW5jb2RlVVJJKCIxMC4yMDE1LjEzNC4yIik7DQoNCiAgICAgICAgICAgICQoJyNzdWJtaXNzaW9uLW1vZGFsJykubW9kYWwoJ3Nob3cnKS5maW5kKCcubW9kYWwtYm9keScpLmxvYWQodXJsKTsNCiAgICAgICAgfSk7DQogICAgfSk7DQoNCg0KICAgIC8qIFNob3dzIGFsbCB0aGUgcGFuZWxzICovDQogICAgZnVuY3Rpb24gc2hvd0FsbCgpIHsNCiAgICAgICAgJCgnI2FwcGxpY2F0aW9uJykuY2hpbGRyZW4oImgzIikuZWFjaChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcygidWktc3RhdGUtZGVmYXVsdCIpKSB7DQogICAgICAgICAgICAgICAgJCh0aGlzKS5jbGljaygpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9KTsNCiAgICB9DQoNCg0KICAgIC8qIEhpZGUgYWxsIHRoZSBwYW5lbHMgKi8NCiAgICBmdW5jdGlvbiBoaWRlQWxsKCkgew0KICAgICAgICAkKCcjYXBwbGljYXRpb24nKS5jaGlsZHJlbigiaDMiKS5lYWNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKCJ1aS1zdGF0ZS1hY3RpdmUiKSkgew0KICAgICAgICAgICAgICAgICQodGhpcykuY2xpY2soKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSk7DQogICAgfQ0KDQogICAgPC9zY3JpcHQ+DQoNCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8uY29udGFpbmVyLWZsdWlkIC0tPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8Zm9vdGVyIGNsYXNzPSJmb290ZXIgZ3JpZCI+DQogICAgICAgICAgICA8ZGl2ID4NCiAgICAgICAgICAgICAgICDCqSBQb3J0IE1hY3F1YXJpZSBIYXN0aW5ncyBDb3VuY2lsDQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9mb290ZXI+DQogICAgPC9kaXY+DQo8L2JvZHk+DQo8L2h0bWw+DQo=
  recorded_at: Mon, 21 Apr 2025 18:25:41 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Application/ApplicationDetails/010.2016.00000126.003
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - datracker.pmhc.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 302
      message: Found
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Home/Disclaimer"
      Server:
      - Microsoft-IIS/8.5
      Set-Cookie:
      - ASP.NET_SessionId=mcttynhuxh2jfxqpyofnsr54; path=/; HttpOnly; SameSite=Lax
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:25:41 GMT
      Content-Length:
      - '133'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Home/Disclaimer\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:25:42 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Home/Disclaimer
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=mcttynhuxh2jfxqpyofnsr54
      Host:
      - datracker.pmhc.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:25:41 GMT
      Content-Length:
      - '19685'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:25:42 GMT
- request:
    method: post
    uri: https://datracker.pmhc.nsw.gov.au/home/disclaimerprocessing
    body:
      encoding: UTF-8
      string: agreed=true
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=mcttynhuxh2jfxqpyofnsr54
      Host:
      - datracker.pmhc.nsw.gov.au
      Referer:
      - https://datracker.pmhc.nsw.gov.au/Home/Disclaimer
      Content-Type:
      - application/x-www-form-urlencoded
      Content-Length:
      - '11'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Application/ApplicationDetails/010.2016.00000126.003"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      Set-Cookie:
      - User=accessAllowed-MasterView=True; path=/
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:25:41 GMT
      Content-Length:
      - '170'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Application/ApplicationDetails/010.2016.00000126.003\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:25:42 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Application/ApplicationDetails/010.2016.00000126.003
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=mcttynhuxh2jfxqpyofnsr54; User=accessAllowed-MasterView=True
      Host:
      - datracker.pmhc.nsw.gov.au
      Referer:
      - https://datracker.pmhc.nsw.gov.au/Home/Disclaimer
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:25:52 GMT
      Content-Length:
      - '35303'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:25:52 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Application/ApplicationDetails/010.2016.00000126.003
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=mcttynhuxh2jfxqpyofnsr54; User=accessAllowed-MasterView=True
      Host:
      - datracker.pmhc.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:26:02 GMT
      Content-Length:
      - '35303'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:26:02 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Application/ApplicationDetails/010.2017.00000866.002
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - datracker.pmhc.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 302
      message: Found
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Home/Disclaimer"
      Server:
      - Microsoft-IIS/8.5
      Set-Cookie:
      - ASP.NET_SessionId=40ukzmmh1ylky520tpnptseg; path=/; HttpOnly; SameSite=Lax
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:26:02 GMT
      Content-Length:
      - '133'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Home/Disclaimer\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:26:02 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Home/Disclaimer
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=40ukzmmh1ylky520tpnptseg
      Host:
      - datracker.pmhc.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:26:02 GMT
      Content-Length:
      - '19685'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQo8aHRtbCB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCIgeG1sOmxhbmc9ImVuIiBsYW5nPSJlbiI+DQoNCg0KDQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCIgLz4NCiAgICA8bWV0YSBodHRwLWVxdWl2PSJYLVVBLUNvbXBhdGlibGUiIGNvbnRlbnQ9IklFPWVkZ2UiIC8+DQogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xIiAvPg0KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIiAvPg0KICAgIDxtZXRhIG5hbWU9ImtleXdvcmRzIiBjb250ZW50PSJQb3J0IE1hY3F1YXJpZSBDb3VuY2lsLCBEQSBUcmFja2VyLEFwcGxpY2F0aW9uIFRyYWNrZXIsRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24sRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24gVHJhY2tpbmcsIERBIEVucXVpcnksIERldmVsb3BtZW50IEFwcGxpY2F0aW9uIEVucXVpcnksIEFwcGxpY2F0aW9uIFRyYWNrZXIiPg0KICAgIDxtZXRhIG5hbWU9ImRlc2NyaXB0aW9uIiBjb250ZW50PSJUaGUgb2ZmaWNpYWwgUG9ydCBNYWNxdWFyaWUgQ291bmNpbCBBcHBsaWNhdGlvbiBUcmFja2VyIj4NCg0KICAgIDwhLS1mYXZpY29uLS0+DQogICAgPGxpbmsgaHJlZj0iL0NvdW5jaWxfVGhlbWUvUG9ydF9NYWNxdWFyaWUvZmF2aWNvbi5pY28iICkiIHJlbD0ic2hvcnRjdXQgaWNvbiIgdHlwZT0iaW1hZ2UveC1pY29uIiAvPg0KDQogICAgPCEtLSBqUXVlcnkgLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS0xLjExLjEuanMiPjwvc2NyaXB0Pg0KDQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS11aS0xLjExLjIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvY29yZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvYWNjb3JkaW9uLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC90aGVtZXMvYmFzZS90aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQoNCiAgICA8IS0tIEJvb3RzdHJhcCAtLT4NCiAgICA8c2NyaXB0IHNyYz0iL1NjcmlwdHMvYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCg0KICAgIDxsaW5rIGhyZWY9Ii9Db250ZW50L2Jvb3RzdHJhcC10aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvYm9vdHN0cmFwLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9mb250LWF3ZXNvbWUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPCEtLSBEYXRhVGFibGVzIC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2pxdWVyeS5kYXRhVGFibGVzLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMuYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMucmVzcG9uc2l2ZS5qcyI+PC9zY3JpcHQ+DQoNCiAgICANCiAgICA8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLmJvb3RzdHJhcC5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvRGF0YVRhYmxlcy9jc3MvZGF0YVRhYmxlcy5yZXNwb25zaXZlLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLnJlc3BvbnNpdmUuc2NzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KDQogICAgPCEtLSBCb290c3RyYXAgU0ItQWRtaW4tMiBQbHVnaW4gYW5kIG90aGVyIGNzcyBhbmQganMgZmlsZXMtLT4NCiAgICA8c2NyaXB0IHNyYz0iL2pzL2Jvb3RzdHJhcC1jb21ib2JveC5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL2Jvb3RzdHJhcC1kYXRlcGlja2VyLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvYm9vdHN0cmFwLWRpYWxvZy5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL2pxdWVyeS5mb3JtLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvanF1ZXJ5LnRhYmxlc29ydGVyLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvbWFzdGVydmlldy5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL21ldGlzTWVudS5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL3NiLWFkbWluLTIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL2Nzcy9ib290c3RyYXAtY29tYm9ib3guY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvZGF0ZXBpY2tlcjMuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvbWFzdGVydmlldy1jdXN0b21pc2F0aW9ucy5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL2Nzcy9zYi1hZG1pbi0yLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDxsaW5rIGhyZWY9Ii9Db3VuY2lsX1RoZW1lL1BvcnRfTWFjcXVhcmllL1BvcnRfTWFjcXVhcmllLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ291bmNpbF9UaGVtZS9Qb3J0X01hY3F1YXJpZS9Qb3J0X01hY3F1YXJpZV9Nb2JpbGVWaWV3LmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICANCg0KICAgIDwhLS1pbmNsdWRlIGdvb2dsZSBhbmFseXRpY3MgY29kZS0tPg0KICAgIDxzY3JpcHQ+DQogICAgICAgIChmdW5jdGlvbiAoaSwgcywgbywgZywgciwgYSwgbSkgew0KICAgICAgICAgICAgaVsnR29vZ2xlQW5hbHl0aWNzT2JqZWN0J10gPSByOyBpW3JdID0gaVtyXSB8fCBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgKGlbcl0ucSA9IGlbcl0ucSB8fCBbXSkucHVzaChhcmd1bWVudHMpDQogICAgICAgICAgICB9LCBpW3JdLmwgPSAxICogbmV3IERhdGUoKTsgYSA9IHMuY3JlYXRlRWxlbWVudChvKSwNCiAgICAgICAgICAgICAgICBtID0gcy5nZXRFbGVtZW50c0J5VGFnTmFtZShvKVswXTsgYS5hc3luYyA9IDE7IGEuc3JjID0gZzsgbS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLCBtKQ0KICAgICAgICB9KSh3aW5kb3csIGRvY3VtZW50LCAnc2NyaXB0JywgJy8vd3d3Lmdvb2dsZS1hbmFseXRpY3MuY29tL2FuYWx5dGljcy5qcycsICdnYScpOw0KDQogICAgICAgIGdhKCdjcmVhdGUnLCAnVUEtNzI5MTg1Mi00JywgJ2F1dG8nKTsNCiAgICAgICAgZ2EoJ3NlbmQnLCAncGFnZXZpZXcnKTsNCg0KICAgIDwvc2NyaXB0Pg0KDQoNCiAgICA8dGl0bGU+UG9ydCBNYWNxdWFyaWUtSGFzdGluZ3MgQ291bmNpbCAtIEFwcGxpY2F0aW9uIFRyYWNrZXI8L3RpdGxlPg0KDQogICAgPCEtLSBDdXN0b20gRm9udHMNCiAgICAgICAgPGxpbmsgaHJlZj0iL2ZvbnQtYXdlc29tZS9jc3MvZm9udC1hd2Vzb21lLm1pbi5jc3MiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPg0KICAgIC0tPg0KICAgIDwhLS0gSFRNTDUgU2hpbSBhbmQgUmVzcG9uZC5qcyBJRTggc3VwcG9ydCBvZiBIVE1MNSBlbGVtZW50cyBhbmQgbWVkaWEgcXVlcmllcyAtLT4NCiAgICA8IS0tIFdBUk5JTkc6IFJlc3BvbmQuanMgZG9lc24ndCB3b3JrIGlmIHlvdSB2aWV3IHRoZSBwYWdlIHZpYSBmaWxlOi8vIC0tPg0KICAgIDwhLS1baWYgbHQgSUUgOV0+DQogICAgICAgIDxzY3JpcHQgc3JjPSJodHRwczovL29zcy5tYXhjZG4uY29tL2xpYnMvaHRtbDVzaGl2LzMuNy4wL2h0bWw1c2hpdi5qcyI+PC9zY3JpcHQ+DQogICAgICAgIDxzY3JpcHQgc3JjPSJodHRwczovL29zcy5tYXhjZG4uY29tL2xpYnMvcmVzcG9uZC5qcy8xLjQuMi9yZXNwb25kLm1pbi5qcyI+PC9zY3JpcHQ+DQogICAgPCFbZW5kaWZdLS0+DQoNCiAgICA8bGluayBocmVmPSIvL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9Q2Fycm9pcytHb3RoaWMiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPg0KPC9oZWFkPg0KPGJvZHkgY2xhc3M9InN0YW5kYXJkIj4NCiAgICA8aGVhZGVyIGNsYXNzPSJjbGVhcmZpeCI+DQogICAgICAgIDxkaXYgc3R5bGU9IndpZHRoOiAxMDAlOyBiYWNrZ3JvdW5kLWNvbG9yOiAjNUQ5NzRDO2hlaWdodDoyMHB4ICI+PC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9nbyI+DQogICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvIj4NCiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9Db3VuY2lsX1RoZW1lL1BvcnRfTWFjcXVhcmllL2xvZ28ucG5nIiBhbHQ9IlBvcnQgTWFjcXVhcmllIEhhc3RpbmdzIExvZ28iIGlkPSJkaXNwbGF5LWxvZ28iIC8+DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InB1bGwtcmlnaHQiPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvaGVhZGVyPg0KICAgIDxkaXYgaWQ9ImNvbnRlbnQiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPg0KICAgICAgICAgICAgPGRpdiBpZD0ibmF2LWNvbnRhaW5lciIgc3R5bGU9ImRpc3BsYXk6bm9uZSI+DQogICAgICAgICAgICAgICAgPG5hdj48L25hdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJuYXZpZ2F0aW9uIiBjbGFzcz0iY29udGFpbmVyMSI+DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJob21lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cucG1oYy5uc3cuZ292LmF1L0hvbWUiPkhvbWU8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtMW5hdi1oYXMtY2hpbGRyZW4gbmF2LXNlY3Rpb24tdGhpcmRzLTEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvUmVzaWRlbnQtU2VydmljZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlc2lkZW50IFNlcnZpY2VzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtMiBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0xIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQWJvdXQtVXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFib3V0IFVzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtMyBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0xIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQnVzaW5lc3MiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJ1c2luZXNzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNCBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0yIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQnVpbGRpbmctUGxhbm5pbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJ1aWxkaW5nICZhbXA7IFBsYW5uaW5nDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNSBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0yIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQ29tbXVuaXR5LUZhY2lsaXRpZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvbW11bml0eSBGYWNpbGl0aWVzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNiBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0yIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQ3VsdHVyZS1TcG9ydC1MZWlzdXJlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdWx0dXJlLCBTcG9ydCAmYW1wOyBMZWlzdXJlDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNyBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0zIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvRm9ybXMtUGVybWl0cyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRm9ybXMgJmFtcDsgUGVybWl0cw0KICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxuYXYgY2xhc3M9Im5hdmJhciBuYXZiYXItZGVmYXVsdCBuYXZiYXItc3RhdGljLXRvcCIgcm9sZT0ibmF2aWdhdGlvbiIgc3R5bGU9Im1hcmdpbi1ib3R0b206IDAiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9Im5hdmJhci10b2dnbGUiIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgZGF0YS10YXJnZXQ9Ii5uYXZiYXItY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPlRvZ2dsZSBuYXZpZ2F0aW9uPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tYmFyIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1iYXIiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLWhlYWRlciAtLT4NCiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXZiYXItdG9wLWxpbmtzIG5hdmJhci1yaWdodCBoaWRkZW4teHMgaGlkZGVuLXNtIGhpZGRlbi1tZCI+DQogICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxzcGFuIGlkPSJwcmludEljb24iIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXByaW50IiBvbmNsaWNrPSJ3aW5kb3cucHJpbnQoKTsiPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItZGVmYXVsdCBzaWRlYmFyIiByb2xlPSJuYXZpZ2F0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2lkZWJhci1uYXYgbmF2YmFyLWNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IiBpZD0ic2lkZS1tZW51Ij4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwhLS0gLy5zaWRlYmFyLWNvbGxhcHNlIC0tPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwhLS0gLy5uYXZiYXItc3RhdGljLXNpZGUgLS0+DQogICAgICAgICAgICA8L25hdj4NCiAgICAgICAgICAgIDxkaXYgaWQ9InBhZ2Utd3JhcHBlciI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyLWZsdWlkIj4NCiAgICAgICAgICAgICAgICAgICAgDQoNCg0KDQo8ZGl2IGNsYXNzPSJwYWdlLWhlYWRlciI+DQogICAgPGgyPkRpc2NsYWltZXI8L2gyPg0KPC9kaXY+DQoNCjxkaXYgaWQ9InNjcm9sbGFibGVDb250ZW50Ij4NCjxwIGNsYXNzPSJzZWN0aW9uIj4NClRoZSBBcHBsaWNhdGlvbiBUcmFja2VyIHRvb2wgc2hvd3Mga2V5IG1pbGVzdG9uZXMgaW4gdGhlIGFwcGxpY2F0aW9uIHByb2Nlc3MgZm9yIGRldmVsb3BtZW50IGFuZCBvdGhlciBhc3NvY2lhdGVkIGFwcHJvdmFscy4gSXQgaXMgbm90IGludGVuZGVkIHRvIHByb3ZpZGUgYSBkZXRhaWxlZCBoaXN0b3J5LCBidXQgYSBzdW1tYXJ5IG9mIHRoZSBzdGFnZXMgdGhhdCB0aGUgYXBwbGljYXRpb24gaGFzIGdvbmUgdGhyb3VnaC4gIA0KQW55IGluZm9ybWF0aW9uIGFib3V0IHRoZSBwcm9jZXNzaW5nIG9mIGFuIGFwcGxpY2F0aW9uIG9idGFpbmVkIHRocm91Z2ggQ291bmNpbOKAmXMgQXBwbGljYXRpb24gVHJhY2tlciB0b29sIGlzIGludGVuZGVkIGFzIGEgZ3VpZGUgb25seS4gQ291bmNpbCBkb2VzIG5vdCBhY2NlcHQgYW55IHJlc3BvbnNpYmlsaXR5IGZvciBsb3NzIG9yIGhhcm0gYXMgYSByZXN1bHQgb2YgaW5mb3JtYXRpb24gb2J0YWluZWQgYW5kIHJlbGllZCBvbiBmcm9tIHRoaXMgZmFjaWxpdHkuDQo8L3A+DQo8cCBjbGFzcz0ic2VjdGlvbiI+DQpUaGlzIHNlcnZpY2UgYXBwbGllcyB0byBhbGwgZGV2ZWxvcG1lbnQgYXBwbGljYXRpb25zIGFuZCBhc3NvY2lhdGVkIGFwcGxpY2F0aW9ucyAgZnJvbSAxIEphbnVhcnkgMjAwMiBvbndhcmRzLiBJZiB5b3UgZG9u4oCZdCBmaW5kIHRoZSBkb2N1bWVudCB5b3UgYXJlIGFmdGVyIHBsZWFzZSBjb250YWN0IENvdW5jaWwgZm9yIGEgY29weSB2aWEgPGEgaHJlZj0ibWFpbHRvOmNvdW5jaWxAcG1oYy5uc3cuZ292LmF1Ij5jb3VuY2lsQHBtaGMubnN3Lmdvdi5hdTwvYT4uDQo8L3A+DQoNCjxwIGNsYXNzPSJzZWN0aW9uIj48aDM+VGVybXMgYW5kIENvbmRpdGlvbnM8L2gzPjwvcD4NCjxwIGNsYXNzPSJzZWN0aW9uIj4NCjx1bD4NCgk8bGk+VXNlIG9mIHRoZSBBcHBsaWNhdGlvbiBUcmFja2VyIGlzIHN1YmplY3QgdG8geW91ciBhZ3JlZW1lbnQgdG8gdGhlIHRlcm1zIGFuZCBjb25kaXRpb25zLCBwcml2YWN5IGFuZCBjb3B5cmlnaHQgbGF3cy48L2xpPg0KCTxsaT5JIGFjY2VwdCB0aGF0IHVzZSBvZiB0aGUgZGF0YSBieSBtZSBzaGFsbCBiZSBsaW1pdGVkIHRvIG15IG93biBwZXJzb25hbCB1c2Ugb3IgZm9yIHRoZSB1c2UgaW4gdGhlIG9yZGluYXJ5IGNvdXJzZSBvZiBteSBidXNpbmVzcy4gSSBzaGFsbCBub3Qgb24tc2VsbCBvciBkaXN0cmlidXRlIHRoZSBkYXRhIGZvciByZXdhcmQgdG8gYW55IG90aGVyIHRoaXJkIHBhcnR5LCBub3Igc2hhbGwgSSBwcm9kdWNlIGFueSBoYXJkY29weSBwcm9kdWN0cywgaW5jb3Jwb3JhdGluZyB0aGUgZGF0YSBmb3IgY29tbWVyY2lhbCB1c2UuIDwvbGk+DQoJPGxpPkkgYWNjZXB0IHRoYXQgZGF0YSBtdXN0IG5vdCBiZSB1c2VkIGZvciBkaXJlY3QgbWFya2V0aW5nIG9yIGJlIHVzZWQgaW4gYnJlYWNoIG9mIHRoZSBQcml2YWN5IExhd3MuPC9saT4NCgk8bGk+VG8gdGhlIG1heGltdW0gZXh0ZW50IHBlcm1pdHRlZCBieSBsYXcsIENvdW5jaWwgZXhjbHVkZXMgYWxsIGxpYWJpbGl0eSB0byB5b3UgZm9yIGxvc3Mgb3IgZGFtYWdlIG9mIGFueSBraW5kIChob3dldmVyIGNhdXNlZCwgaW5jbHVkaW5nIGJ5IG5lZ2xpZ2VuY2UpIGFyaXNpbmcgZnJvbSBvciByZWxhdGluZyBpbiBhbnkgd2F5IHRvIHRoZSBjb250ZW50cyBvZiB0aGlzIHdlYnNpdGUgYW5kL29yIHlvdXIgdXNlIG9mIGl0LjwvbGk+DQoJPGxpPkFsbCBtYXR0ZXJzIHJlbGF0aW5nIHRvIHRoaXMgd2Vic2l0ZSBhcmUgZ292ZXJuZWQgYnkgdGhlIGxhd3Mgb2YgdGhlIFN0YXRlIG9mIE5ldyBTb3V0aCBXYWxlcywgQXVzdHJhbGlhLjwvbGk+DQoJPGxpPkJ5IGFjY2Vzc2luZyB0aGlzIGluZm9ybWF0aW9uIHlvdSByZXF1ZXN0IHRvIGRvIHNvIHVuZGVyIHRoZSA8aT5FbnZpcm9ubWVudGFsIFBsYW5uaW5nIGFuZCBBc3Nlc3NtZW50IEFjdCAxOTc5PC9pPiAoTlNXKSwgPGk+R292ZXJubWVudCBJbmZvcm1hdGlvbiAoUHVibGljIEFjY2VzcykgQWN0IDIwMDk8L2k+IChOU1cpIFtHSVBBXSBhbmQgeW91IHVuZGVyc3RhbmQgdGhhdCBDb3VuY2lsIGlzIG1ha2luZyB0aGUgaW5mb3JtYXRpb24gYXZhaWxhYmxlIHVuZGVyIHRoZSBwcm92aXNpb25zIG9mIEdvdmVybm1lbnQgSW5mb3JtYXRpb24gKFB1YmxpYyBBY2Nlc3MpIEFjdCwgMjAwOS48L2xpPg0KCTxsaT5Zb3UgbXVzdCBub3QgbW9kaWZ5LCBjb3B5LCByZXByb2R1Y2UsIHJlcHVibGlzaCwgdXBsb2FkIHRvIGEgdGhpcmQgcGFydHksIHRyYW5zbWl0IG9yIGRpc3RyaWJ1dGUgaW4gYW55IHdheSB0aGUgY29udGVudCBvZiB0aGlzIHdlYnNpdGUgZXhjZXB0IGFzIGV4cHJlc3NseSBwcm92aWRlZCBpbiB0aGVzZSBUZXJtcyBhbmQgQ29uZGl0aW9ucyBvciBhcyBwZXJtaXR0ZWQgYnkgdGhlIENvcHlyaWdodCBBY3QsIDE5NjggKENUSCkuPC9saT4NCgk8bGk+VGhlIFdvcmxkIFdpZGUgV2ViIGV4aXN0cyBhY3Jvc3Mgb3BlbiBwdWJsaWMgbmV0d29ya3MgdGhhdCBhcmUgbmVpdGhlciBzZWN1cmUgbm9yIHByaXZhdGUuIEFjY29yZGluZ2x5LCB0aGUgdXNlciBhY2tub3dsZWRnZXMgYW5kIGFjY2VwdHMgdGhlIHJpc2sgdGhhdCBhbnkgY29tbXVuaWNhdGlvbiB0byBvciBmcm9tIHRoaXMgd2Vic2l0ZSBtYXkgYmUgaW50ZXJjZXB0ZWQsIHVzZWQgb3IgbW9kaWZpZWQgYnkgdGhpcmQgcGFydGllcy48L2xpPg0KCTxsaT5Db3VuY2lsIGhhcyBtYWRlIGV2ZXJ5IGVmZm9ydCB0byBwcm92aWRlIGluZm9ybWF0aW9uIHRoYXQgaXMgYWNjdXJhdGUgYW5kIGVhc3kgdG8gdW5kZXJzdGFuZCwgYWx0aG91Z2gsIHRoZSBhY2N1cmFjeSBvZiB0aGUgaW5mb3JtYXRpb24gY2Fubm90IGJlIGd1YXJhbnRlZWQgYW5kIHNob3VsZCBub3QgYmUgcmVsaWVkIG9uIG90aGVyIHRoYW4gYXMgYSBnZW5lcmFsIGd1aWRlLiBJZiB5b3UgcmVxdWlyZSBtb3JlIHNwZWNpZmljIGluZm9ybWF0aW9uIHBsZWFzZSBjb250YWN0IENvdW5jaWwgYnkgb25lIG9mIHRoZSBmb2xsb3dpbmcgbWV0aG9kczogPC9saT4NCjwvdWw+PC9wPg0KDQoJPHAgY2xhc3M9InNlY3Rpb24iPg0KPHRhYmxlPg0KPHRyPg0KCQk8dGQ+UGhvbmU6IAkJPC90ZD4NCgkJPHRkPigwMikgNjU4MSA4MTExPC90ZD4NCgk8L3RyPg0KCTx0cj4NCgkJPHRkPkVtYWlsOiAJPC90ZD4NCgkJPHRkPjxhIGhyZWY9Im1haWx0bzpjb3VuY2lsQHBtaGMubnN3Lmdvdi5hdSI+Y291bmNpbEBwbWhjLm5zdy5nb3YuYXU8L2E+PC90ZD4NCgk8L3RyPg0KCTx0cj4NCgkJPHRkPlBvc3Q6IDwvdGQ+DQoJCTx0ZD5Qb3J0IE1hY3F1YXJpZS1IYXN0aW5ncyBDb3VuY2lsIDxicj4NCgkJUE8gQm94IDg0IDxicj4NCgkJCVBPUlQgTUFDUVVBUklFICBOU1cgIDI0NDQgPGJyPg0KPC90ZD4NCgk8L3RyPg0KPC90YWJsZT4NCjwvcD4NCg0KPHAgY2xhc3M9InNlY3Rpb24iPjxoMz5Qcml2YWN5ICYgUGVyc29uYWwgSW5mb3JtYXRpb248L2gzPjwvcD4NCjxwIGNsYXNzPSJzZWN0aW9uIj5Qb3J0IE1hY3F1YXJpZS1IYXN0aW5ncyBDb3VuY2lsIGhhcyBjZXJ0YWluIG9ibGlnYXRpb25zIGluIHJlbGF0aW9uIHRvIHRoZSBwZXJzb25hbCBpbmZvcm1hdGlvbiB0aGF0IGl0IG9idGFpbnMgZnJvbSBwZW9wbGUgd2hvIHVzZSBvdXIgd2Vic2l0ZS4gUGxlYXNlIHJlYWQgdGhpcyBzdGF0ZW1lbnQgdG8gZmluZCBvdXQgd2hhdCBpbmZvcm1hdGlvbiBDb3VuY2lsIGNvbGxlY3RzIGFib3V0IHlvdSwgd2h5IGl0IGlzIGNvbGxlY3RlZCBhbmQgd2hhdCBpcyBkb25lIHdpdGggaXQuPC9wPg0KDQoNCjxwIGNsYXNzPSJzZWN0aW9uIj48Yj5QZXJzb25hbCBJbmZvcm1hdGlvbjwvYj48L3A+DQo8cCBjbGFzcz0ic2VjdGlvbiI+SW4gY29tcGxldGluZyBhbnkgb2YgdGhlIGZvcm1zIGF2YWlsYWJsZSBvbiB0aGlzIHNpdGUgeW91IHdpbGwgcHJvdmlkZSBDb3VuY2lsIHdpdGggInBlcnNvbmFsIGluZm9ybWF0aW9uIi4gVGhpcyBpcyBkZWZpbmVkIGluIHRoZSBQcml2YWN5IGFuZCBQZXJzb25hbCBJbmZvcm1hdGlvbiBQcm90ZWN0aW9uIEFjdCAxOTk4ICgiUFBJUEEiKSB0byBiZSAiaW5mb3JtYXRpb24gb3IgYW4gb3BpbmlvbiBhYm91dCBhbiBpbmRpdmlkdWFsIHdob3NlIGlkZW50aXR5IGlzIGFwcGFyZW50IG9yIGNhbiByZWFzb25hYmx5IGJlIGFzY2VydGFpbmVkIGZyb20gdGhlIGluZm9ybWF0aW9uIG9yIG9waW5pb24iLiAgPC9wPg0KPHAgY2xhc3M9InNlY3Rpb24iPlBlcnNvbmFsIGluZm9ybWF0aW9uIGNvbGxlY3RlZCBieSBDb3VuY2lsIHdpbGwgaW5jbHVkZSB5b3VyIG5hbWUgYW5kIGFueSBvdGhlciBpbmZvcm1hdGlvbiBpbmNsdWRlZCBpbiB0aGUgZm9ybXMuIEZ1cnRoZXIsIHdoZW4geW91IHZpc2l0IENvdW5jaWwncyB3ZWJzaXRlIHRoZSBmb2xsb3dpbmcgaW5mb3JtYXRpb24gaXMgcmVjb3JkZWQgZm9yIHN0YXRpc3RpY2FsIHB1cnBvc2VzOjwvcD4NCg0KPHAgY2xhc3M9InNlY3Rpb24iPg0KCTx1bD4NCgkJPGxpPlRoZSBhZGRyZXNzIG9mIHlvdXIgc2VydmVyPC9saT4NCgkJPGxpPlRoZSB0b3AtbGV2ZWwgZG9tYWluIGZyb20gd2hpY2ggeW91IGFjY2Vzc2VkIHRoZSBJbnRlcm5ldCAoc3VjaCBhcyAuY29tLC5vcmcsLiBnb3YsIC5lZHUsIC5hdSwgLm56LCBldGMuKTwvbGk+DQoJCTxsaT5UaGUgdHlwZSBvZiBicm93c2VyIHVzZWQ8L2xpPg0KCQk8bGk+VGhlIGRhdGUgYW5kIHRpbWUgb2YgeW91ciB2aXNpdCB0byB0aGUgc2l0ZTwvbGk+DQoJCTxsaT5UaGUgcGFnZXMgeW91IHZpc2l0ZWQgYW5kIHRoZSBkb2N1bWVudHMgeW91IGRvd25sb2FkZWQ8L2xpPg0KCQk8bGk+VGhlIGxpbmtzIHlvdSBmb2xsb3dlZCB0byBjb21lIHRvIGFuZCBsZWF2ZSB0aGUgc2l0ZTwvbGk+DQoJCTxsaT5Bbnkgb3RoZXIgaW5mb3JtYXRpb24gdGhhdCBpcyByZWNvcmRlZC48L2xpPg0KCTwvdWw+DQo8L3A+DQoNCjxwIGNsYXNzPSJzZWN0aW9uIj5UaGlzIGluZm9ybWF0aW9uIGlzIHVzZWQgdG8gY3JlYXRlIHJlcG9ydHMgdG8gdGVsbCBDb3VuY2lsIHRoZSBudW1iZXIgb2YgdmlzaXRvcnMgdG8gdGhlIHNpdGUsIGFyZWFzIHZpc2l0ZWQgYW5kIHRlY2huaWNhbCBpbmZvcm1hdGlvbiBzdWNoIGFzIGJyb2tlbiBsaW5rcy4gPC9wPg0KPHAgY2xhc3M9InNlY3Rpb24iPlBlcnNvbmFsIGluZm9ybWF0aW9uIGNvbGxlY3RlZCBmcm9tIHlvdSBpcyBoZWxkIGFuZCB1c2VkIGJ5IENvdW5jaWwgYXMgcGVybWl0dGVkIGJ5IFByaXZhY3kgYW5kIFBlcnNvbmFsIEluZm9ybWF0aW9uIFByb3RlY3Rpb24gQWN0IDE5OTggKCJQUElQQSIpLiBVbmRlciBQUElQQSB5b3UgYXJlIGVudGl0bGVkIHRvIGJlIGluZm9ybWVkIG9mOjwvcD4NCg0KPHAgY2xhc3M9InNlY3Rpb24iPg0KCTx1bD4NCgkJPGxpPnRoZSBmYWN0IHRoYXQgcGVyc29uYWwgaW5mb3JtYXRpb24gaXMgYmVpbmcgY29sbGVjdGVkPC9saT4NCgkJPGxpPnRoZSBuYW1lIGFuZCBhZGRyZXNzIG9mIHRoZSBhZ2VuY3kgY29sbGVjdGluZyBhbmQgaG9sZGluZyB0aGUgaW5mb3JtYXRpb248L2xpPg0KCQk8bGk+dGhlIHB1cnBvc2VzIGZvciB3aGljaCB0aGUgaW5mb3JtYXRpb24gaXMgYmVpbmcgY29sbGVjdGVkPC9saT4NCgkJPGxpPnRoZSBwZXJzb25zIGFuZCBib2RpZXMgdG8gd2hvbSB0aGUgaW5mb3JtYXRpb24gd2lsbCBiZSBkaXNjbG9zZWQ8L2xpPg0KCQk8bGk+d2hldGhlciB0aGUgcHJvdmlzaW9uIG9mIHRoZSBpbmZvcm1hdGlvbiBpcyBtYW5kYXRvcnkgb3Igdm9sdW50YXJ5PC9saT4NCgkJPGxpPnRoZSBjb25zZXF1ZW5jZXMgKGlmIGFueSkgb2Ygbm90IHByb3ZpZGluZyB0aGUgaW5mb3JtYXRpb248L2xpPg0KCQk8bGk+eW91ciByaWdodCB1bmRlciBQUElQQSB0byBhcHBseSB0byBoYXZlIGFjY2VzcyB0byB5b3VyIGluZm9ybWF0aW9uIG9yIHRvIGhhdmUgaXQgY29ycmVjdGVkLjwvbGk+DQoJPC91bD4NCjwvcD4NCg0KPHAgY2xhc3M9InNlY3Rpb24iPkNvdW5jaWwgaGFzIHZhcmlvdXMgZnVuY3Rpb25zIHVuZGVyIHRoZSBFbnZpcm9ubWVudGFsIFBsYW5uaW5nIGFuZCBBc3Nlc3NtZW50IEFjdCwgMTk3OSwgdGhlIExvY2FsIEdvdmVybm1lbnQgQWN0IDE5OTMgYW5kIG90aGVyIGxlZ2lzbGF0aW9uLiBQZXJzb25hbCBpbmZvcm1hdGlvbiBpcyBjb2xsZWN0ZWQgdG8gZW5hYmxlIENvdW5jaWwgdG8gcGVyZm9ybSB0aGUgZnVuY3Rpb25zIHVuZGVyIHRoZXNlIEFjdHMuIDwvcD4NCjxwIGNsYXNzPSJzZWN0aW9uIj5VbmRlciBQUElQQSwgb3RoZXIgYWdlbmNpZXMgKHBhcnRpY3VsYXJseSBsYXcgZW5mb3JjZW1lbnQgYWdlbmNpZXMpIG1heSBoYXZlIHRoZSByaWdodCB0byBnYWluIGFjY2VzcyB0byBwZXJzb25hbCBpbmZvcm1hdGlvbiBhYm91dCB5b3UgdGhhdCBDb3VuY2lsIGhvbGRzLiBJbmRlZWQsIHNvbWUgYWdlbmNpZXMgKHBhcnRpY3VsYXJseSBsYXcgZW5mb3JjZW1lbnQgYWdlbmNpZXMpIGhhdmUgbGVnYWwgYXV0aG9yaXR5IHRvIGluc3BlY3Qgb3VyIEludGVybmV0IFNlcnZpY2UgUHJvdmlkZXJzJyBsb2dzIGFuZCBvYnRhaW4geW91ciBhZGRyZXNzIGlmIHJlcXVpcmVkIGZvciBhbiBvZmZpY2lhbCBpbnZlc3RpZ2F0aW9uLiA8L3A+DQo8cCBjbGFzcz0ic2VjdGlvbiI+Q291bmNpbCByZWNvcmRzIG1heSBiZSBhdmFpbGFibGUgZm9yIHB1YmxpYyBpbnNwZWN0aW9uIGFuZCBjb3B5aW5nLCBpbmNsdWRpbmcgdW5kZXIgdGhlIEdvdmVybm1lbnQgSW5mb3JtYXRpb24gKFB1YmxpYyBBY2Nlc3MpIEFjdCAyMDA5LjwvcD4NCjxwIGNsYXNzPSJzZWN0aW9uIj48L3A+DQoNCjxwIGNsYXNzPSJzZWN0aW9uIj48aDM+Q29weXJpZ2h0PC9oMz48L3A+DQo8cCBjbGFzcz0ic2VjdGlvbiI+VGhlIGNvbnRlbnRzIG9mIHRoaXMgd2Vic2l0ZSAod2hpY2ggaW5jbHVkZXMgZG93bmxvYWRhYmxlIG1hdGVyaWFsKSBhcmUgc3ViamVjdCB0byBjb3B5cmlnaHQgYW5kIGFyZSBwcm90ZWN0ZWQgYnkgbGF3cyBvZiBBdXN0cmFsaWEgYW5kIG90aGVyIGNvdW50cmllcyB0aHJvdWdoIGludGVybmF0aW9uYWwgdHJlYXRpZXMuPC9wPg0KPHAgY2xhc3M9InNlY3Rpb24iPlBvcnQgTWFjcXVhcmllLUhhc3RpbmdzIENvdW5jaWwgZ3JhbnRzIHlvdSBhIG5vbi1leGNsdXNpdmUgbGljZW5jZSB0byByZXByb2R1Y2UgdGhlIGNvbnRlbnRzIG9mIHRoaXMgd2Vic2l0ZSBpbiB5b3VyIHdlYiBicm93c2VyIChhbmQgaW4gYW55IGNhY2hlIGZpbGUgcHJvZHVjZWQgYnkgeW91ciB3ZWIgYnJvd3NlcikgZm9yIHRoZSBzb2xlIHB1cnBvc2Ugb2Ygdmlld2luZyB0aGUgY29udGVudC4gQ291bmNpbCByZXNlcnZlcyBhbGwgb3RoZXIgcmlnaHRzLjwvcD4NCjxwIGNsYXNzPSJzZWN0aW9uIj5CeSBhZ3JlZWluZyB0byB1c2UgdGhpcyBzeXN0ZW0geW91IGFncmVlIHRvIGluZGVtbmlmeSBDb3VuY2lsIGFnYWluc3QgYW55IGluZnJpbmdlbWVudCBieSB5b3Ugb2YgYW55IHRoaXJkIHBhcnR5IEludGVsbGVjdHVhbCBQcm9wZXJ0eSByaWdodHMsIGluY2x1ZGluZyBDb3B5cmlnaHQuPC9wPg0KDQo8L2Rpdj4NCg0KPHAgY2xhc3M9InNlY3Rpb24iPg0KPC9icj4NCjxiPkkgaGF2ZSByZWFkIGFuZCB1bmRlcnN0b29kIHRoZSBwcm92aXNpb25zIHNldCBvdXQgYWJvdmUuPC9iPg0KPC9wPg0KPC9icj4NCg0KDQoNCg0KPGZvcm0gYWN0aW9uPSIvaG9tZS9kaXNjbGFpbWVycHJvY2Vzc2luZyIgaWQ9ImRpc2NsYWltZXItZm9ybSIgbWV0aG9kPSJwb3N0Ij48aW5wdXQgaWQ9ImFncmVlZCIgbmFtZT0iYWdyZWVkIiB0eXBlPSJoaWRkZW4iIHZhbHVlPSJGYWxzZSIgLz4gICAgPGRpdiBpZD0iYnRucyI+DQogICAgICAgIDxidXR0b24gaWQ9ImFncmVlIiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIGZvcm09ImRpc2NsYWltZXItZm9ybSI+QWdyZWU8L2J1dHRvbj4NCiAgICAgICAgPGJ1dHRvbiBpZD0iZGlzYWdyZWUiIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4td2FybmluZyIgZm9ybT0iZGlzY2xhaW1lci1mb3JtIj5EaXNhZ3JlZTwvYnV0dG9uPg0KICAgIDwvZGl2Pg0KPC9mb3JtPg0KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KDQogICAgdmFyIGxhc3RTY3JvbGxUb3A7DQogICAgdmFyIG1heFNjcm9sbGFibGVDb250ZW50SGVpZ2h0Ow0KDQogICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkgew0KDQogICAgICAgIHVwZGF0ZUxlZnRNYXJnaW4oKTsNCiAgICAgICAgYXR0YWNoQ2xpY2tIYW5kbGVycygpOw0KDQogICAgICAgIGlmIChpc1RleHRCbG9ja092ZXJmbG93aW5nKCkpIHsNCiAgICAgICAgICAgIGxhc3RTY3JvbGxUb3AgPSAwOzsNCiAgICAgICAgICAgIHZhciB3aW5kb3dIZWlnaHQgPSAkKHdpbmRvdykuaGVpZ2h0KCk7DQoNCiAgICAgICAgICAgIHZhciBoZWFkZXJIZWlnaHQgPSAkKCcjc2Nyb2xsYWJsZUNvbnRlbnQnKS5vZmZzZXQoKS50b3A7DQogICAgICAgICAgICB2YXIgbmV3SGVpZ2h0ID0gZ2V0TmV3SGVpZ2h0KCk7DQoNCiAgICAgICAgICAgIGFkanVzdERpc2NsYWltZXJDb250ZW50Rm9yRG93blNjcm9sbChuZXdIZWlnaHQpOw0KDQogICAgICAgICAgICAkKHdpbmRvdykuc2Nyb2xsKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICB2YXIgbkhlaWdodCA9ICQod2luZG93KS5oZWlnaHQoKSAtIChoZWFkZXJIZWlnaHQgLSAkKHdpbmRvdykuc2Nyb2xsVG9wKCkgKyAkKCdmb3JtJykuaGVpZ2h0KCkgKyAxMDApOw0KDQogICAgICAgICAgICAgICAgdmFyIGJJc0Rvd25TY3JvbGwgPSBpc1Njcm9sbERvd24oKTsNCg0KICAgICAgICAgICAgICAgIGlmIChiSXNEb3duU2Nyb2xsKQ0KICAgICAgICAgICAgICAgICAgICBhZGp1c3REaXNjbGFpbWVyQ29udGVudEZvckRvd25TY3JvbGwobkhlaWdodCk7DQogICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgICAgICBhZGp1c3REaXNjbGFpbWVyQ29udGVudEZvclVwU2Nyb2xsKG5IZWlnaHQpOw0KICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIGdldE5ld0hlaWdodCgpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gJCh3aW5kb3cpLmhlaWdodCgpIC0gKGhlYWRlckhlaWdodCArICQod2luZG93KS5zY3JvbGxUb3AoKSArICQoJ2Zvcm0nKS5oZWlnaHQoKSArIDEwMCk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIGlzU2Nyb2xsRG93bigpIHsNCiAgICAgICAgICAgICAgICB2YXIgc3QgPSAkKHdpbmRvdykuc2Nyb2xsVG9wKCk7DQogICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHN0ID49IGxhc3RTY3JvbGxUb3A7CQkgIC8vIGRvd25zY3JvbGwNCg0KICAgICAgICAgICAgICAgIGxhc3RTY3JvbGxUb3AgPSBzdDsNCiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0Ow0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBmdW5jdGlvbiBoYXNTY3JvbGxCYXIoaXRlbSkgew0KICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLmdldCgwKS5zY3JvbGxIZWlnaHQgPiBpdGVtLmdldCgwKS5jbGllbnRIZWlnaHQ7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIGFkanVzdERpc2NsYWltZXJDb250ZW50Rm9yRG93blNjcm9sbChuSGVpZ2h0KSB7DQogICAgICAgICAgICAgICAgdmFyIGlzU2Nyb2xsYWJsZSA9IGhhc1Njcm9sbEJhcigkKCcjc2Nyb2xsYWJsZUNvbnRlbnQnKSk7DQogICAgICAgICAgICAgICAgaWYgKGlzU2Nyb2xsYWJsZSkgew0KICAgICAgICAgICAgICAgICAgICAkKCcjc2Nyb2xsYWJsZUNvbnRlbnQnKS5oZWlnaHQobkhlaWdodCk7DQogICAgICAgICAgICAgICAgICAgIG1heFNjcm9sbGFibGVDb250ZW50SGVpZ2h0ID0gbkhlaWdodDsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIGFkanVzdERpc2NsYWltZXJDb250ZW50Rm9yVXBTY3JvbGwobkhlaWdodCkgew0KICAgICAgICAgICAgICAgIHZhciBpc1Njcm9sbGFibGUgPSBoYXNTY3JvbGxCYXIoJCgnI3Njcm9sbGFibGVDb250ZW50JykpOw0KDQogICAgICAgICAgICAgICAgaWYgKG1heFNjcm9sbGFibGVDb250ZW50SGVpZ2h0ID4gbkhlaWdodCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICQoJyNzY3JvbGxhYmxlQ29udGVudCcpLmhlaWdodChuSGVpZ2h0KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9KTsNCg0KDQogICAgZnVuY3Rpb24gdXBkYXRlTGVmdE1hcmdpbigpIHsNCiAgICAgICAgaWYgKCQoJyNzaWRlLW1lbnUnKS5odG1sKCkpIHsNCiAgICAgICAgICAgICQoJyNwYWdlLXdyYXBwZXInKS5jc3MoeyAnbWFyZ2luLWxlZnQnOiAnMCcgfSk7DQogICAgICAgICAgICAkKCcuc2lkZWJhcicpLmhpZGUoKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KDQogICAgZnVuY3Rpb24gYXR0YWNoQ2xpY2tIYW5kbGVycygpIHsNCiAgICAgICAgJCgnI2FncmVlJykuY2xpY2soZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgJCgnI2FncmVlZCcpLnZhbCgidHJ1ZSIpOw0KICAgICAgICAgICAgJCgnI2Rpc2NsYWltZXItZm9ybScpLnN1Ym1pdCgpOw0KICAgICAgICB9KTsNCg0KICAgICAgICAkKCcjZGlzYWdyZWUnKS5jbGljayhmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAkKCcjYWdyZWVkJykudmFsKCJmYWxzZSIpOw0KICAgICAgICAgICAgJCgnI2Rpc2NsYWltZXItZm9ybScpLnN1Ym1pdCgpOw0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBpc1RleHRCbG9ja092ZXJmbG93aW5nKCkgew0KICAgICAgICByZXR1cm4gJCgiI3Njcm9sbGFibGVDb250ZW50IikucHJvcCgnc2Nyb2xsSGVpZ2h0JykgPiAkKCIjc2Nyb2xsYWJsZUNvbnRlbnQiKS5oZWlnaHQoKTsNCiAgICB9DQo8L3NjcmlwdD4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8uY29udGFpbmVyLWZsdWlkIC0tPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8Zm9vdGVyIGNsYXNzPSJmb290ZXIgZ3JpZCI+DQogICAgICAgICAgICA8ZGl2ID4NCiAgICAgICAgICAgICAgICDCqSBQb3J0IE1hY3F1YXJpZSBIYXN0aW5ncyBDb3VuY2lsDQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9mb290ZXI+DQogICAgPC9kaXY+DQo8L2JvZHk+DQo8L2h0bWw+DQo=
  recorded_at: Mon, 21 Apr 2025 18:26:03 GMT
- request:
    method: post
    uri: https://datracker.pmhc.nsw.gov.au/home/disclaimerprocessing
    body:
      encoding: UTF-8
      string: agreed=true
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=40ukzmmh1ylky520tpnptseg
      Host:
      - datracker.pmhc.nsw.gov.au
      Referer:
      - https://datracker.pmhc.nsw.gov.au/Home/Disclaimer
      Content-Type:
      - application/x-www-form-urlencoded
      Content-Length:
      - '11'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Application/ApplicationDetails/010.2017.00000866.002"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      Set-Cookie:
      - User=accessAllowed-MasterView=True; path=/
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:26:02 GMT
      Content-Length:
      - '170'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Application/ApplicationDetails/010.2017.00000866.002\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:26:03 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Application/ApplicationDetails/010.2017.00000866.002
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=40ukzmmh1ylky520tpnptseg; User=accessAllowed-MasterView=True
      Host:
      - datracker.pmhc.nsw.gov.au
      Referer:
      - https://datracker.pmhc.nsw.gov.au/Home/Disclaimer
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:26:13 GMT
      Content-Length:
      - '32455'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:26:13 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Application/ApplicationDetails/010.2017.00000866.002
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=40ukzmmh1ylky520tpnptseg; User=accessAllowed-MasterView=True
      Host:
      - datracker.pmhc.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:26:23 GMT
      Content-Length:
      - '32455'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:26:23 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Application/ApplicationDetails/010.2018.00000617.002
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - datracker.pmhc.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 302
      message: Found
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Home/Disclaimer"
      Server:
      - Microsoft-IIS/8.5
      Set-Cookie:
      - ASP.NET_SessionId=wrtreleweq5ercktuwqcaesn; path=/; HttpOnly; SameSite=Lax
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:26:23 GMT
      Content-Length:
      - '133'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Home/Disclaimer\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:26:23 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Home/Disclaimer
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=wrtreleweq5ercktuwqcaesn
      Host:
      - datracker.pmhc.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:26:23 GMT
      Content-Length:
      - '19685'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:26:23 GMT
- request:
    method: post
    uri: https://datracker.pmhc.nsw.gov.au/home/disclaimerprocessing
    body:
      encoding: UTF-8
      string: agreed=true
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=wrtreleweq5ercktuwqcaesn
      Host:
      - datracker.pmhc.nsw.gov.au
      Referer:
      - https://datracker.pmhc.nsw.gov.au/Home/Disclaimer
      Content-Type:
      - application/x-www-form-urlencoded
      Content-Length:
      - '11'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Application/ApplicationDetails/010.2018.00000617.002"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      Set-Cookie:
      - User=accessAllowed-MasterView=True; path=/
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:26:23 GMT
      Content-Length:
      - '170'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Application/ApplicationDetails/010.2018.00000617.002\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:26:23 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Application/ApplicationDetails/010.2018.00000617.002
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=wrtreleweq5ercktuwqcaesn; User=accessAllowed-MasterView=True
      Host:
      - datracker.pmhc.nsw.gov.au
      Referer:
      - https://datracker.pmhc.nsw.gov.au/Home/Disclaimer
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:26:33 GMT
      Content-Length:
      - '35412'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:26:34 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Application/ApplicationDetails/010.2018.00000617.002
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=wrtreleweq5ercktuwqcaesn; User=accessAllowed-MasterView=True
      Host:
      - datracker.pmhc.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:26:43 GMT
      Content-Length:
      - '35412'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:26:44 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Application/ApplicationDetails/010.2019.00000257.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - datracker.pmhc.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 302
      message: Found
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Home/Disclaimer"
      Server:
      - Microsoft-IIS/8.5
      Set-Cookie:
      - ASP.NET_SessionId=uhxxbjqfigdu0cfgiik5rcvu; path=/; HttpOnly; SameSite=Lax
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:26:43 GMT
      Content-Length:
      - '133'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Home/Disclaimer\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:26:44 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Home/Disclaimer
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=uhxxbjqfigdu0cfgiik5rcvu
      Host:
      - datracker.pmhc.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:26:43 GMT
      Content-Length:
      - '19685'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQo8aHRtbCB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCIgeG1sOmxhbmc9ImVuIiBsYW5nPSJlbiI+DQoNCg0KDQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCIgLz4NCiAgICA8bWV0YSBodHRwLWVxdWl2PSJYLVVBLUNvbXBhdGlibGUiIGNvbnRlbnQ9IklFPWVkZ2UiIC8+DQogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xIiAvPg0KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIiAvPg0KICAgIDxtZXRhIG5hbWU9ImtleXdvcmRzIiBjb250ZW50PSJQb3J0IE1hY3F1YXJpZSBDb3VuY2lsLCBEQSBUcmFja2VyLEFwcGxpY2F0aW9uIFRyYWNrZXIsRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24sRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24gVHJhY2tpbmcsIERBIEVucXVpcnksIERldmVsb3BtZW50IEFwcGxpY2F0aW9uIEVucXVpcnksIEFwcGxpY2F0aW9uIFRyYWNrZXIiPg0KICAgIDxtZXRhIG5hbWU9ImRlc2NyaXB0aW9uIiBjb250ZW50PSJUaGUgb2ZmaWNpYWwgUG9ydCBNYWNxdWFyaWUgQ291bmNpbCBBcHBsaWNhdGlvbiBUcmFja2VyIj4NCg0KICAgIDwhLS1mYXZpY29uLS0+DQogICAgPGxpbmsgaHJlZj0iL0NvdW5jaWxfVGhlbWUvUG9ydF9NYWNxdWFyaWUvZmF2aWNvbi5pY28iICkiIHJlbD0ic2hvcnRjdXQgaWNvbiIgdHlwZT0iaW1hZ2UveC1pY29uIiAvPg0KDQogICAgPCEtLSBqUXVlcnkgLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS0xLjExLjEuanMiPjwvc2NyaXB0Pg0KDQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS11aS0xLjExLjIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvY29yZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvYWNjb3JkaW9uLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC90aGVtZXMvYmFzZS90aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQoNCiAgICA8IS0tIEJvb3RzdHJhcCAtLT4NCiAgICA8c2NyaXB0IHNyYz0iL1NjcmlwdHMvYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCg0KICAgIDxsaW5rIGhyZWY9Ii9Db250ZW50L2Jvb3RzdHJhcC10aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvYm9vdHN0cmFwLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9mb250LWF3ZXNvbWUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPCEtLSBEYXRhVGFibGVzIC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2pxdWVyeS5kYXRhVGFibGVzLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMuYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMucmVzcG9uc2l2ZS5qcyI+PC9zY3JpcHQ+DQoNCiAgICANCiAgICA8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLmJvb3RzdHJhcC5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvRGF0YVRhYmxlcy9jc3MvZGF0YVRhYmxlcy5yZXNwb25zaXZlLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLnJlc3BvbnNpdmUuc2NzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KDQogICAgPCEtLSBCb290c3RyYXAgU0ItQWRtaW4tMiBQbHVnaW4gYW5kIG90aGVyIGNzcyBhbmQganMgZmlsZXMtLT4NCiAgICA8c2NyaXB0IHNyYz0iL2pzL2Jvb3RzdHJhcC1jb21ib2JveC5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL2Jvb3RzdHJhcC1kYXRlcGlja2VyLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvYm9vdHN0cmFwLWRpYWxvZy5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL2pxdWVyeS5mb3JtLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvanF1ZXJ5LnRhYmxlc29ydGVyLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvbWFzdGVydmlldy5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL21ldGlzTWVudS5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL3NiLWFkbWluLTIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL2Nzcy9ib290c3RyYXAtY29tYm9ib3guY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvZGF0ZXBpY2tlcjMuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvbWFzdGVydmlldy1jdXN0b21pc2F0aW9ucy5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL2Nzcy9zYi1hZG1pbi0yLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDxsaW5rIGhyZWY9Ii9Db3VuY2lsX1RoZW1lL1BvcnRfTWFjcXVhcmllL1BvcnRfTWFjcXVhcmllLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ291bmNpbF9UaGVtZS9Qb3J0X01hY3F1YXJpZS9Qb3J0X01hY3F1YXJpZV9Nb2JpbGVWaWV3LmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICANCg0KICAgIDwhLS1pbmNsdWRlIGdvb2dsZSBhbmFseXRpY3MgY29kZS0tPg0KICAgIDxzY3JpcHQ+DQogICAgICAgIChmdW5jdGlvbiAoaSwgcywgbywgZywgciwgYSwgbSkgew0KICAgICAgICAgICAgaVsnR29vZ2xlQW5hbHl0aWNzT2JqZWN0J10gPSByOyBpW3JdID0gaVtyXSB8fCBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgKGlbcl0ucSA9IGlbcl0ucSB8fCBbXSkucHVzaChhcmd1bWVudHMpDQogICAgICAgICAgICB9LCBpW3JdLmwgPSAxICogbmV3IERhdGUoKTsgYSA9IHMuY3JlYXRlRWxlbWVudChvKSwNCiAgICAgICAgICAgICAgICBtID0gcy5nZXRFbGVtZW50c0J5VGFnTmFtZShvKVswXTsgYS5hc3luYyA9IDE7IGEuc3JjID0gZzsgbS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLCBtKQ0KICAgICAgICB9KSh3aW5kb3csIGRvY3VtZW50LCAnc2NyaXB0JywgJy8vd3d3Lmdvb2dsZS1hbmFseXRpY3MuY29tL2FuYWx5dGljcy5qcycsICdnYScpOw0KDQogICAgICAgIGdhKCdjcmVhdGUnLCAnVUEtNzI5MTg1Mi00JywgJ2F1dG8nKTsNCiAgICAgICAgZ2EoJ3NlbmQnLCAncGFnZXZpZXcnKTsNCg0KICAgIDwvc2NyaXB0Pg0KDQoNCiAgICA8dGl0bGU+UG9ydCBNYWNxdWFyaWUtSGFzdGluZ3MgQ291bmNpbCAtIEFwcGxpY2F0aW9uIFRyYWNrZXI8L3RpdGxlPg0KDQogICAgPCEtLSBDdXN0b20gRm9udHMNCiAgICAgICAgPGxpbmsgaHJlZj0iL2ZvbnQtYXdlc29tZS9jc3MvZm9udC1hd2Vzb21lLm1pbi5jc3MiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPg0KICAgIC0tPg0KICAgIDwhLS0gSFRNTDUgU2hpbSBhbmQgUmVzcG9uZC5qcyBJRTggc3VwcG9ydCBvZiBIVE1MNSBlbGVtZW50cyBhbmQgbWVkaWEgcXVlcmllcyAtLT4NCiAgICA8IS0tIFdBUk5JTkc6IFJlc3BvbmQuanMgZG9lc24ndCB3b3JrIGlmIHlvdSB2aWV3IHRoZSBwYWdlIHZpYSBmaWxlOi8vIC0tPg0KICAgIDwhLS1baWYgbHQgSUUgOV0+DQogICAgICAgIDxzY3JpcHQgc3JjPSJodHRwczovL29zcy5tYXhjZG4uY29tL2xpYnMvaHRtbDVzaGl2LzMuNy4wL2h0bWw1c2hpdi5qcyI+PC9zY3JpcHQ+DQogICAgICAgIDxzY3JpcHQgc3JjPSJodHRwczovL29zcy5tYXhjZG4uY29tL2xpYnMvcmVzcG9uZC5qcy8xLjQuMi9yZXNwb25kLm1pbi5qcyI+PC9zY3JpcHQ+DQogICAgPCFbZW5kaWZdLS0+DQoNCiAgICA8bGluayBocmVmPSIvL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9Q2Fycm9pcytHb3RoaWMiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPg0KPC9oZWFkPg0KPGJvZHkgY2xhc3M9InN0YW5kYXJkIj4NCiAgICA8aGVhZGVyIGNsYXNzPSJjbGVhcmZpeCI+DQogICAgICAgIDxkaXYgc3R5bGU9IndpZHRoOiAxMDAlOyBiYWNrZ3JvdW5kLWNvbG9yOiAjNUQ5NzRDO2hlaWdodDoyMHB4ICI+PC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9nbyI+DQogICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvIj4NCiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9Db3VuY2lsX1RoZW1lL1BvcnRfTWFjcXVhcmllL2xvZ28ucG5nIiBhbHQ9IlBvcnQgTWFjcXVhcmllIEhhc3RpbmdzIExvZ28iIGlkPSJkaXNwbGF5LWxvZ28iIC8+DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InB1bGwtcmlnaHQiPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvaGVhZGVyPg0KICAgIDxkaXYgaWQ9ImNvbnRlbnQiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPg0KICAgICAgICAgICAgPGRpdiBpZD0ibmF2LWNvbnRhaW5lciIgc3R5bGU9ImRpc3BsYXk6bm9uZSI+DQogICAgICAgICAgICAgICAgPG5hdj48L25hdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJuYXZpZ2F0aW9uIiBjbGFzcz0iY29udGFpbmVyMSI+DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJob21lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cucG1oYy5uc3cuZ292LmF1L0hvbWUiPkhvbWU8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtMW5hdi1oYXMtY2hpbGRyZW4gbmF2LXNlY3Rpb24tdGhpcmRzLTEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvUmVzaWRlbnQtU2VydmljZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlc2lkZW50IFNlcnZpY2VzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtMiBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0xIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQWJvdXQtVXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFib3V0IFVzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtMyBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0xIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQnVzaW5lc3MiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJ1c2luZXNzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNCBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0yIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQnVpbGRpbmctUGxhbm5pbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJ1aWxkaW5nICZhbXA7IFBsYW5uaW5nDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNSBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0yIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQ29tbXVuaXR5LUZhY2lsaXRpZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvbW11bml0eSBGYWNpbGl0aWVzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNiBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0yIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQ3VsdHVyZS1TcG9ydC1MZWlzdXJlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdWx0dXJlLCBTcG9ydCAmYW1wOyBMZWlzdXJlDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNyBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0zIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvRm9ybXMtUGVybWl0cyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRm9ybXMgJmFtcDsgUGVybWl0cw0KICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxuYXYgY2xhc3M9Im5hdmJhciBuYXZiYXItZGVmYXVsdCBuYXZiYXItc3RhdGljLXRvcCIgcm9sZT0ibmF2aWdhdGlvbiIgc3R5bGU9Im1hcmdpbi1ib3R0b206IDAiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9Im5hdmJhci10b2dnbGUiIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgZGF0YS10YXJnZXQ9Ii5uYXZiYXItY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPlRvZ2dsZSBuYXZpZ2F0aW9uPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tYmFyIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1iYXIiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLWhlYWRlciAtLT4NCiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXZiYXItdG9wLWxpbmtzIG5hdmJhci1yaWdodCBoaWRkZW4teHMgaGlkZGVuLXNtIGhpZGRlbi1tZCI+DQogICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxzcGFuIGlkPSJwcmludEljb24iIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXByaW50IiBvbmNsaWNrPSJ3aW5kb3cucHJpbnQoKTsiPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItZGVmYXVsdCBzaWRlYmFyIiByb2xlPSJuYXZpZ2F0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2lkZWJhci1uYXYgbmF2YmFyLWNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IiBpZD0ic2lkZS1tZW51Ij4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwhLS0gLy5zaWRlYmFyLWNvbGxhcHNlIC0tPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwhLS0gLy5uYXZiYXItc3RhdGljLXNpZGUgLS0+DQogICAgICAgICAgICA8L25hdj4NCiAgICAgICAgICAgIDxkaXYgaWQ9InBhZ2Utd3JhcHBlciI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyLWZsdWlkIj4NCiAgICAgICAgICAgICAgICAgICAgDQoNCg0KDQo8ZGl2IGNsYXNzPSJwYWdlLWhlYWRlciI+DQogICAgPGgyPkRpc2NsYWltZXI8L2gyPg0KPC9kaXY+DQoNCjxkaXYgaWQ9InNjcm9sbGFibGVDb250ZW50Ij4NCjxwIGNsYXNzPSJzZWN0aW9uIj4NClRoZSBBcHBsaWNhdGlvbiBUcmFja2VyIHRvb2wgc2hvd3Mga2V5IG1pbGVzdG9uZXMgaW4gdGhlIGFwcGxpY2F0aW9uIHByb2Nlc3MgZm9yIGRldmVsb3BtZW50IGFuZCBvdGhlciBhc3NvY2lhdGVkIGFwcHJvdmFscy4gSXQgaXMgbm90IGludGVuZGVkIHRvIHByb3ZpZGUgYSBkZXRhaWxlZCBoaXN0b3J5LCBidXQgYSBzdW1tYXJ5IG9mIHRoZSBzdGFnZXMgdGhhdCB0aGUgYXBwbGljYXRpb24gaGFzIGdvbmUgdGhyb3VnaC4gIA0KQW55IGluZm9ybWF0aW9uIGFib3V0IHRoZSBwcm9jZXNzaW5nIG9mIGFuIGFwcGxpY2F0aW9uIG9idGFpbmVkIHRocm91Z2ggQ291bmNpbOKAmXMgQXBwbGljYXRpb24gVHJhY2tlciB0b29sIGlzIGludGVuZGVkIGFzIGEgZ3VpZGUgb25seS4gQ291bmNpbCBkb2VzIG5vdCBhY2NlcHQgYW55IHJlc3BvbnNpYmlsaXR5IGZvciBsb3NzIG9yIGhhcm0gYXMgYSByZXN1bHQgb2YgaW5mb3JtYXRpb24gb2J0YWluZWQgYW5kIHJlbGllZCBvbiBmcm9tIHRoaXMgZmFjaWxpdHkuDQo8L3A+DQo8cCBjbGFzcz0ic2VjdGlvbiI+DQpUaGlzIHNlcnZpY2UgYXBwbGllcyB0byBhbGwgZGV2ZWxvcG1lbnQgYXBwbGljYXRpb25zIGFuZCBhc3NvY2lhdGVkIGFwcGxpY2F0aW9ucyAgZnJvbSAxIEphbnVhcnkgMjAwMiBvbndhcmRzLiBJZiB5b3UgZG9u4oCZdCBmaW5kIHRoZSBkb2N1bWVudCB5b3UgYXJlIGFmdGVyIHBsZWFzZSBjb250YWN0IENvdW5jaWwgZm9yIGEgY29weSB2aWEgPGEgaHJlZj0ibWFpbHRvOmNvdW5jaWxAcG1oYy5uc3cuZ292LmF1Ij5jb3VuY2lsQHBtaGMubnN3Lmdvdi5hdTwvYT4uDQo8L3A+DQoNCjxwIGNsYXNzPSJzZWN0aW9uIj48aDM+VGVybXMgYW5kIENvbmRpdGlvbnM8L2gzPjwvcD4NCjxwIGNsYXNzPSJzZWN0aW9uIj4NCjx1bD4NCgk8bGk+VXNlIG9mIHRoZSBBcHBsaWNhdGlvbiBUcmFja2VyIGlzIHN1YmplY3QgdG8geW91ciBhZ3JlZW1lbnQgdG8gdGhlIHRlcm1zIGFuZCBjb25kaXRpb25zLCBwcml2YWN5IGFuZCBjb3B5cmlnaHQgbGF3cy48L2xpPg0KCTxsaT5JIGFjY2VwdCB0aGF0IHVzZSBvZiB0aGUgZGF0YSBieSBtZSBzaGFsbCBiZSBsaW1pdGVkIHRvIG15IG93biBwZXJzb25hbCB1c2Ugb3IgZm9yIHRoZSB1c2UgaW4gdGhlIG9yZGluYXJ5IGNvdXJzZSBvZiBteSBidXNpbmVzcy4gSSBzaGFsbCBub3Qgb24tc2VsbCBvciBkaXN0cmlidXRlIHRoZSBkYXRhIGZvciByZXdhcmQgdG8gYW55IG90aGVyIHRoaXJkIHBhcnR5LCBub3Igc2hhbGwgSSBwcm9kdWNlIGFueSBoYXJkY29weSBwcm9kdWN0cywgaW5jb3Jwb3JhdGluZyB0aGUgZGF0YSBmb3IgY29tbWVyY2lhbCB1c2UuIDwvbGk+DQoJPGxpPkkgYWNjZXB0IHRoYXQgZGF0YSBtdXN0IG5vdCBiZSB1c2VkIGZvciBkaXJlY3QgbWFya2V0aW5nIG9yIGJlIHVzZWQgaW4gYnJlYWNoIG9mIHRoZSBQcml2YWN5IExhd3MuPC9saT4NCgk8bGk+VG8gdGhlIG1heGltdW0gZXh0ZW50IHBlcm1pdHRlZCBieSBsYXcsIENvdW5jaWwgZXhjbHVkZXMgYWxsIGxpYWJpbGl0eSB0byB5b3UgZm9yIGxvc3Mgb3IgZGFtYWdlIG9mIGFueSBraW5kIChob3dldmVyIGNhdXNlZCwgaW5jbHVkaW5nIGJ5IG5lZ2xpZ2VuY2UpIGFyaXNpbmcgZnJvbSBvciByZWxhdGluZyBpbiBhbnkgd2F5IHRvIHRoZSBjb250ZW50cyBvZiB0aGlzIHdlYnNpdGUgYW5kL29yIHlvdXIgdXNlIG9mIGl0LjwvbGk+DQoJPGxpPkFsbCBtYXR0ZXJzIHJlbGF0aW5nIHRvIHRoaXMgd2Vic2l0ZSBhcmUgZ292ZXJuZWQgYnkgdGhlIGxhd3Mgb2YgdGhlIFN0YXRlIG9mIE5ldyBTb3V0aCBXYWxlcywgQXVzdHJhbGlhLjwvbGk+DQoJPGxpPkJ5IGFjY2Vzc2luZyB0aGlzIGluZm9ybWF0aW9uIHlvdSByZXF1ZXN0IHRvIGRvIHNvIHVuZGVyIHRoZSA8aT5FbnZpcm9ubWVudGFsIFBsYW5uaW5nIGFuZCBBc3Nlc3NtZW50IEFjdCAxOTc5PC9pPiAoTlNXKSwgPGk+R292ZXJubWVudCBJbmZvcm1hdGlvbiAoUHVibGljIEFjY2VzcykgQWN0IDIwMDk8L2k+IChOU1cpIFtHSVBBXSBhbmQgeW91IHVuZGVyc3RhbmQgdGhhdCBDb3VuY2lsIGlzIG1ha2luZyB0aGUgaW5mb3JtYXRpb24gYXZhaWxhYmxlIHVuZGVyIHRoZSBwcm92aXNpb25zIG9mIEdvdmVybm1lbnQgSW5mb3JtYXRpb24gKFB1YmxpYyBBY2Nlc3MpIEFjdCwgMjAwOS48L2xpPg0KCTxsaT5Zb3UgbXVzdCBub3QgbW9kaWZ5LCBjb3B5LCByZXByb2R1Y2UsIHJlcHVibGlzaCwgdXBsb2FkIHRvIGEgdGhpcmQgcGFydHksIHRyYW5zbWl0IG9yIGRpc3RyaWJ1dGUgaW4gYW55IHdheSB0aGUgY29udGVudCBvZiB0aGlzIHdlYnNpdGUgZXhjZXB0IGFzIGV4cHJlc3NseSBwcm92aWRlZCBpbiB0aGVzZSBUZXJtcyBhbmQgQ29uZGl0aW9ucyBvciBhcyBwZXJtaXR0ZWQgYnkgdGhlIENvcHlyaWdodCBBY3QsIDE5NjggKENUSCkuPC9saT4NCgk8bGk+VGhlIFdvcmxkIFdpZGUgV2ViIGV4aXN0cyBhY3Jvc3Mgb3BlbiBwdWJsaWMgbmV0d29ya3MgdGhhdCBhcmUgbmVpdGhlciBzZWN1cmUgbm9yIHByaXZhdGUuIEFjY29yZGluZ2x5LCB0aGUgdXNlciBhY2tub3dsZWRnZXMgYW5kIGFjY2VwdHMgdGhlIHJpc2sgdGhhdCBhbnkgY29tbXVuaWNhdGlvbiB0byBvciBmcm9tIHRoaXMgd2Vic2l0ZSBtYXkgYmUgaW50ZXJjZXB0ZWQsIHVzZWQgb3IgbW9kaWZpZWQgYnkgdGhpcmQgcGFydGllcy48L2xpPg0KCTxsaT5Db3VuY2lsIGhhcyBtYWRlIGV2ZXJ5IGVmZm9ydCB0byBwcm92aWRlIGluZm9ybWF0aW9uIHRoYXQgaXMgYWNjdXJhdGUgYW5kIGVhc3kgdG8gdW5kZXJzdGFuZCwgYWx0aG91Z2gsIHRoZSBhY2N1cmFjeSBvZiB0aGUgaW5mb3JtYXRpb24gY2Fubm90IGJlIGd1YXJhbnRlZWQgYW5kIHNob3VsZCBub3QgYmUgcmVsaWVkIG9uIG90aGVyIHRoYW4gYXMgYSBnZW5lcmFsIGd1aWRlLiBJZiB5b3UgcmVxdWlyZSBtb3JlIHNwZWNpZmljIGluZm9ybWF0aW9uIHBsZWFzZSBjb250YWN0IENvdW5jaWwgYnkgb25lIG9mIHRoZSBmb2xsb3dpbmcgbWV0aG9kczogPC9saT4NCjwvdWw+PC9wPg0KDQoJPHAgY2xhc3M9InNlY3Rpb24iPg0KPHRhYmxlPg0KPHRyPg0KCQk8dGQ+UGhvbmU6IAkJPC90ZD4NCgkJPHRkPigwMikgNjU4MSA4MTExPC90ZD4NCgk8L3RyPg0KCTx0cj4NCgkJPHRkPkVtYWlsOiAJPC90ZD4NCgkJPHRkPjxhIGhyZWY9Im1haWx0bzpjb3VuY2lsQHBtaGMubnN3Lmdvdi5hdSI+Y291bmNpbEBwbWhjLm5zdy5nb3YuYXU8L2E+PC90ZD4NCgk8L3RyPg0KCTx0cj4NCgkJPHRkPlBvc3Q6IDwvdGQ+DQoJCTx0ZD5Qb3J0IE1hY3F1YXJpZS1IYXN0aW5ncyBDb3VuY2lsIDxicj4NCgkJUE8gQm94IDg0IDxicj4NCgkJCVBPUlQgTUFDUVVBUklFICBOU1cgIDI0NDQgPGJyPg0KPC90ZD4NCgk8L3RyPg0KPC90YWJsZT4NCjwvcD4NCg0KPHAgY2xhc3M9InNlY3Rpb24iPjxoMz5Qcml2YWN5ICYgUGVyc29uYWwgSW5mb3JtYXRpb248L2gzPjwvcD4NCjxwIGNsYXNzPSJzZWN0aW9uIj5Qb3J0IE1hY3F1YXJpZS1IYXN0aW5ncyBDb3VuY2lsIGhhcyBjZXJ0YWluIG9ibGlnYXRpb25zIGluIHJlbGF0aW9uIHRvIHRoZSBwZXJzb25hbCBpbmZvcm1hdGlvbiB0aGF0IGl0IG9idGFpbnMgZnJvbSBwZW9wbGUgd2hvIHVzZSBvdXIgd2Vic2l0ZS4gUGxlYXNlIHJlYWQgdGhpcyBzdGF0ZW1lbnQgdG8gZmluZCBvdXQgd2hhdCBpbmZvcm1hdGlvbiBDb3VuY2lsIGNvbGxlY3RzIGFib3V0IHlvdSwgd2h5IGl0IGlzIGNvbGxlY3RlZCBhbmQgd2hhdCBpcyBkb25lIHdpdGggaXQuPC9wPg0KDQoNCjxwIGNsYXNzPSJzZWN0aW9uIj48Yj5QZXJzb25hbCBJbmZvcm1hdGlvbjwvYj48L3A+DQo8cCBjbGFzcz0ic2VjdGlvbiI+SW4gY29tcGxldGluZyBhbnkgb2YgdGhlIGZvcm1zIGF2YWlsYWJsZSBvbiB0aGlzIHNpdGUgeW91IHdpbGwgcHJvdmlkZSBDb3VuY2lsIHdpdGggInBlcnNvbmFsIGluZm9ybWF0aW9uIi4gVGhpcyBpcyBkZWZpbmVkIGluIHRoZSBQcml2YWN5IGFuZCBQZXJzb25hbCBJbmZvcm1hdGlvbiBQcm90ZWN0aW9uIEFjdCAxOTk4ICgiUFBJUEEiKSB0byBiZSAiaW5mb3JtYXRpb24gb3IgYW4gb3BpbmlvbiBhYm91dCBhbiBpbmRpdmlkdWFsIHdob3NlIGlkZW50aXR5IGlzIGFwcGFyZW50IG9yIGNhbiByZWFzb25hYmx5IGJlIGFzY2VydGFpbmVkIGZyb20gdGhlIGluZm9ybWF0aW9uIG9yIG9waW5pb24iLiAgPC9wPg0KPHAgY2xhc3M9InNlY3Rpb24iPlBlcnNvbmFsIGluZm9ybWF0aW9uIGNvbGxlY3RlZCBieSBDb3VuY2lsIHdpbGwgaW5jbHVkZSB5b3VyIG5hbWUgYW5kIGFueSBvdGhlciBpbmZvcm1hdGlvbiBpbmNsdWRlZCBpbiB0aGUgZm9ybXMuIEZ1cnRoZXIsIHdoZW4geW91IHZpc2l0IENvdW5jaWwncyB3ZWJzaXRlIHRoZSBmb2xsb3dpbmcgaW5mb3JtYXRpb24gaXMgcmVjb3JkZWQgZm9yIHN0YXRpc3RpY2FsIHB1cnBvc2VzOjwvcD4NCg0KPHAgY2xhc3M9InNlY3Rpb24iPg0KCTx1bD4NCgkJPGxpPlRoZSBhZGRyZXNzIG9mIHlvdXIgc2VydmVyPC9saT4NCgkJPGxpPlRoZSB0b3AtbGV2ZWwgZG9tYWluIGZyb20gd2hpY2ggeW91IGFjY2Vzc2VkIHRoZSBJbnRlcm5ldCAoc3VjaCBhcyAuY29tLC5vcmcsLiBnb3YsIC5lZHUsIC5hdSwgLm56LCBldGMuKTwvbGk+DQoJCTxsaT5UaGUgdHlwZSBvZiBicm93c2VyIHVzZWQ8L2xpPg0KCQk8bGk+VGhlIGRhdGUgYW5kIHRpbWUgb2YgeW91ciB2aXNpdCB0byB0aGUgc2l0ZTwvbGk+DQoJCTxsaT5UaGUgcGFnZXMgeW91IHZpc2l0ZWQgYW5kIHRoZSBkb2N1bWVudHMgeW91IGRvd25sb2FkZWQ8L2xpPg0KCQk8bGk+VGhlIGxpbmtzIHlvdSBmb2xsb3dlZCB0byBjb21lIHRvIGFuZCBsZWF2ZSB0aGUgc2l0ZTwvbGk+DQoJCTxsaT5Bbnkgb3RoZXIgaW5mb3JtYXRpb24gdGhhdCBpcyByZWNvcmRlZC48L2xpPg0KCTwvdWw+DQo8L3A+DQoNCjxwIGNsYXNzPSJzZWN0aW9uIj5UaGlzIGluZm9ybWF0aW9uIGlzIHVzZWQgdG8gY3JlYXRlIHJlcG9ydHMgdG8gdGVsbCBDb3VuY2lsIHRoZSBudW1iZXIgb2YgdmlzaXRvcnMgdG8gdGhlIHNpdGUsIGFyZWFzIHZpc2l0ZWQgYW5kIHRlY2huaWNhbCBpbmZvcm1hdGlvbiBzdWNoIGFzIGJyb2tlbiBsaW5rcy4gPC9wPg0KPHAgY2xhc3M9InNlY3Rpb24iPlBlcnNvbmFsIGluZm9ybWF0aW9uIGNvbGxlY3RlZCBmcm9tIHlvdSBpcyBoZWxkIGFuZCB1c2VkIGJ5IENvdW5jaWwgYXMgcGVybWl0dGVkIGJ5IFByaXZhY3kgYW5kIFBlcnNvbmFsIEluZm9ybWF0aW9uIFByb3RlY3Rpb24gQWN0IDE5OTggKCJQUElQQSIpLiBVbmRlciBQUElQQSB5b3UgYXJlIGVudGl0bGVkIHRvIGJlIGluZm9ybWVkIG9mOjwvcD4NCg0KPHAgY2xhc3M9InNlY3Rpb24iPg0KCTx1bD4NCgkJPGxpPnRoZSBmYWN0IHRoYXQgcGVyc29uYWwgaW5mb3JtYXRpb24gaXMgYmVpbmcgY29sbGVjdGVkPC9saT4NCgkJPGxpPnRoZSBuYW1lIGFuZCBhZGRyZXNzIG9mIHRoZSBhZ2VuY3kgY29sbGVjdGluZyBhbmQgaG9sZGluZyB0aGUgaW5mb3JtYXRpb248L2xpPg0KCQk8bGk+dGhlIHB1cnBvc2VzIGZvciB3aGljaCB0aGUgaW5mb3JtYXRpb24gaXMgYmVpbmcgY29sbGVjdGVkPC9saT4NCgkJPGxpPnRoZSBwZXJzb25zIGFuZCBib2RpZXMgdG8gd2hvbSB0aGUgaW5mb3JtYXRpb24gd2lsbCBiZSBkaXNjbG9zZWQ8L2xpPg0KCQk8bGk+d2hldGhlciB0aGUgcHJvdmlzaW9uIG9mIHRoZSBpbmZvcm1hdGlvbiBpcyBtYW5kYXRvcnkgb3Igdm9sdW50YXJ5PC9saT4NCgkJPGxpPnRoZSBjb25zZXF1ZW5jZXMgKGlmIGFueSkgb2Ygbm90IHByb3ZpZGluZyB0aGUgaW5mb3JtYXRpb248L2xpPg0KCQk8bGk+eW91ciByaWdodCB1bmRlciBQUElQQSB0byBhcHBseSB0byBoYXZlIGFjY2VzcyB0byB5b3VyIGluZm9ybWF0aW9uIG9yIHRvIGhhdmUgaXQgY29ycmVjdGVkLjwvbGk+DQoJPC91bD4NCjwvcD4NCg0KPHAgY2xhc3M9InNlY3Rpb24iPkNvdW5jaWwgaGFzIHZhcmlvdXMgZnVuY3Rpb25zIHVuZGVyIHRoZSBFbnZpcm9ubWVudGFsIFBsYW5uaW5nIGFuZCBBc3Nlc3NtZW50IEFjdCwgMTk3OSwgdGhlIExvY2FsIEdvdmVybm1lbnQgQWN0IDE5OTMgYW5kIG90aGVyIGxlZ2lzbGF0aW9uLiBQZXJzb25hbCBpbmZvcm1hdGlvbiBpcyBjb2xsZWN0ZWQgdG8gZW5hYmxlIENvdW5jaWwgdG8gcGVyZm9ybSB0aGUgZnVuY3Rpb25zIHVuZGVyIHRoZXNlIEFjdHMuIDwvcD4NCjxwIGNsYXNzPSJzZWN0aW9uIj5VbmRlciBQUElQQSwgb3RoZXIgYWdlbmNpZXMgKHBhcnRpY3VsYXJseSBsYXcgZW5mb3JjZW1lbnQgYWdlbmNpZXMpIG1heSBoYXZlIHRoZSByaWdodCB0byBnYWluIGFjY2VzcyB0byBwZXJzb25hbCBpbmZvcm1hdGlvbiBhYm91dCB5b3UgdGhhdCBDb3VuY2lsIGhvbGRzLiBJbmRlZWQsIHNvbWUgYWdlbmNpZXMgKHBhcnRpY3VsYXJseSBsYXcgZW5mb3JjZW1lbnQgYWdlbmNpZXMpIGhhdmUgbGVnYWwgYXV0aG9yaXR5IHRvIGluc3BlY3Qgb3VyIEludGVybmV0IFNlcnZpY2UgUHJvdmlkZXJzJyBsb2dzIGFuZCBvYnRhaW4geW91ciBhZGRyZXNzIGlmIHJlcXVpcmVkIGZvciBhbiBvZmZpY2lhbCBpbnZlc3RpZ2F0aW9uLiA8L3A+DQo8cCBjbGFzcz0ic2VjdGlvbiI+Q291bmNpbCByZWNvcmRzIG1heSBiZSBhdmFpbGFibGUgZm9yIHB1YmxpYyBpbnNwZWN0aW9uIGFuZCBjb3B5aW5nLCBpbmNsdWRpbmcgdW5kZXIgdGhlIEdvdmVybm1lbnQgSW5mb3JtYXRpb24gKFB1YmxpYyBBY2Nlc3MpIEFjdCAyMDA5LjwvcD4NCjxwIGNsYXNzPSJzZWN0aW9uIj48L3A+DQoNCjxwIGNsYXNzPSJzZWN0aW9uIj48aDM+Q29weXJpZ2h0PC9oMz48L3A+DQo8cCBjbGFzcz0ic2VjdGlvbiI+VGhlIGNvbnRlbnRzIG9mIHRoaXMgd2Vic2l0ZSAod2hpY2ggaW5jbHVkZXMgZG93bmxvYWRhYmxlIG1hdGVyaWFsKSBhcmUgc3ViamVjdCB0byBjb3B5cmlnaHQgYW5kIGFyZSBwcm90ZWN0ZWQgYnkgbGF3cyBvZiBBdXN0cmFsaWEgYW5kIG90aGVyIGNvdW50cmllcyB0aHJvdWdoIGludGVybmF0aW9uYWwgdHJlYXRpZXMuPC9wPg0KPHAgY2xhc3M9InNlY3Rpb24iPlBvcnQgTWFjcXVhcmllLUhhc3RpbmdzIENvdW5jaWwgZ3JhbnRzIHlvdSBhIG5vbi1leGNsdXNpdmUgbGljZW5jZSB0byByZXByb2R1Y2UgdGhlIGNvbnRlbnRzIG9mIHRoaXMgd2Vic2l0ZSBpbiB5b3VyIHdlYiBicm93c2VyIChhbmQgaW4gYW55IGNhY2hlIGZpbGUgcHJvZHVjZWQgYnkgeW91ciB3ZWIgYnJvd3NlcikgZm9yIHRoZSBzb2xlIHB1cnBvc2Ugb2Ygdmlld2luZyB0aGUgY29udGVudC4gQ291bmNpbCByZXNlcnZlcyBhbGwgb3RoZXIgcmlnaHRzLjwvcD4NCjxwIGNsYXNzPSJzZWN0aW9uIj5CeSBhZ3JlZWluZyB0byB1c2UgdGhpcyBzeXN0ZW0geW91IGFncmVlIHRvIGluZGVtbmlmeSBDb3VuY2lsIGFnYWluc3QgYW55IGluZnJpbmdlbWVudCBieSB5b3Ugb2YgYW55IHRoaXJkIHBhcnR5IEludGVsbGVjdHVhbCBQcm9wZXJ0eSByaWdodHMsIGluY2x1ZGluZyBDb3B5cmlnaHQuPC9wPg0KDQo8L2Rpdj4NCg0KPHAgY2xhc3M9InNlY3Rpb24iPg0KPC9icj4NCjxiPkkgaGF2ZSByZWFkIGFuZCB1bmRlcnN0b29kIHRoZSBwcm92aXNpb25zIHNldCBvdXQgYWJvdmUuPC9iPg0KPC9wPg0KPC9icj4NCg0KDQoNCg0KPGZvcm0gYWN0aW9uPSIvaG9tZS9kaXNjbGFpbWVycHJvY2Vzc2luZyIgaWQ9ImRpc2NsYWltZXItZm9ybSIgbWV0aG9kPSJwb3N0Ij48aW5wdXQgaWQ9ImFncmVlZCIgbmFtZT0iYWdyZWVkIiB0eXBlPSJoaWRkZW4iIHZhbHVlPSJGYWxzZSIgLz4gICAgPGRpdiBpZD0iYnRucyI+DQogICAgICAgIDxidXR0b24gaWQ9ImFncmVlIiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIGZvcm09ImRpc2NsYWltZXItZm9ybSI+QWdyZWU8L2J1dHRvbj4NCiAgICAgICAgPGJ1dHRvbiBpZD0iZGlzYWdyZWUiIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4td2FybmluZyIgZm9ybT0iZGlzY2xhaW1lci1mb3JtIj5EaXNhZ3JlZTwvYnV0dG9uPg0KICAgIDwvZGl2Pg0KPC9mb3JtPg0KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KDQogICAgdmFyIGxhc3RTY3JvbGxUb3A7DQogICAgdmFyIG1heFNjcm9sbGFibGVDb250ZW50SGVpZ2h0Ow0KDQogICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkgew0KDQogICAgICAgIHVwZGF0ZUxlZnRNYXJnaW4oKTsNCiAgICAgICAgYXR0YWNoQ2xpY2tIYW5kbGVycygpOw0KDQogICAgICAgIGlmIChpc1RleHRCbG9ja092ZXJmbG93aW5nKCkpIHsNCiAgICAgICAgICAgIGxhc3RTY3JvbGxUb3AgPSAwOzsNCiAgICAgICAgICAgIHZhciB3aW5kb3dIZWlnaHQgPSAkKHdpbmRvdykuaGVpZ2h0KCk7DQoNCiAgICAgICAgICAgIHZhciBoZWFkZXJIZWlnaHQgPSAkKCcjc2Nyb2xsYWJsZUNvbnRlbnQnKS5vZmZzZXQoKS50b3A7DQogICAgICAgICAgICB2YXIgbmV3SGVpZ2h0ID0gZ2V0TmV3SGVpZ2h0KCk7DQoNCiAgICAgICAgICAgIGFkanVzdERpc2NsYWltZXJDb250ZW50Rm9yRG93blNjcm9sbChuZXdIZWlnaHQpOw0KDQogICAgICAgICAgICAkKHdpbmRvdykuc2Nyb2xsKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICB2YXIgbkhlaWdodCA9ICQod2luZG93KS5oZWlnaHQoKSAtIChoZWFkZXJIZWlnaHQgLSAkKHdpbmRvdykuc2Nyb2xsVG9wKCkgKyAkKCdmb3JtJykuaGVpZ2h0KCkgKyAxMDApOw0KDQogICAgICAgICAgICAgICAgdmFyIGJJc0Rvd25TY3JvbGwgPSBpc1Njcm9sbERvd24oKTsNCg0KICAgICAgICAgICAgICAgIGlmIChiSXNEb3duU2Nyb2xsKQ0KICAgICAgICAgICAgICAgICAgICBhZGp1c3REaXNjbGFpbWVyQ29udGVudEZvckRvd25TY3JvbGwobkhlaWdodCk7DQogICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgICAgICBhZGp1c3REaXNjbGFpbWVyQ29udGVudEZvclVwU2Nyb2xsKG5IZWlnaHQpOw0KICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIGdldE5ld0hlaWdodCgpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gJCh3aW5kb3cpLmhlaWdodCgpIC0gKGhlYWRlckhlaWdodCArICQod2luZG93KS5zY3JvbGxUb3AoKSArICQoJ2Zvcm0nKS5oZWlnaHQoKSArIDEwMCk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIGlzU2Nyb2xsRG93bigpIHsNCiAgICAgICAgICAgICAgICB2YXIgc3QgPSAkKHdpbmRvdykuc2Nyb2xsVG9wKCk7DQogICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHN0ID49IGxhc3RTY3JvbGxUb3A7CQkgIC8vIGRvd25zY3JvbGwNCg0KICAgICAgICAgICAgICAgIGxhc3RTY3JvbGxUb3AgPSBzdDsNCiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0Ow0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBmdW5jdGlvbiBoYXNTY3JvbGxCYXIoaXRlbSkgew0KICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLmdldCgwKS5zY3JvbGxIZWlnaHQgPiBpdGVtLmdldCgwKS5jbGllbnRIZWlnaHQ7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIGFkanVzdERpc2NsYWltZXJDb250ZW50Rm9yRG93blNjcm9sbChuSGVpZ2h0KSB7DQogICAgICAgICAgICAgICAgdmFyIGlzU2Nyb2xsYWJsZSA9IGhhc1Njcm9sbEJhcigkKCcjc2Nyb2xsYWJsZUNvbnRlbnQnKSk7DQogICAgICAgICAgICAgICAgaWYgKGlzU2Nyb2xsYWJsZSkgew0KICAgICAgICAgICAgICAgICAgICAkKCcjc2Nyb2xsYWJsZUNvbnRlbnQnKS5oZWlnaHQobkhlaWdodCk7DQogICAgICAgICAgICAgICAgICAgIG1heFNjcm9sbGFibGVDb250ZW50SGVpZ2h0ID0gbkhlaWdodDsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIGFkanVzdERpc2NsYWltZXJDb250ZW50Rm9yVXBTY3JvbGwobkhlaWdodCkgew0KICAgICAgICAgICAgICAgIHZhciBpc1Njcm9sbGFibGUgPSBoYXNTY3JvbGxCYXIoJCgnI3Njcm9sbGFibGVDb250ZW50JykpOw0KDQogICAgICAgICAgICAgICAgaWYgKG1heFNjcm9sbGFibGVDb250ZW50SGVpZ2h0ID4gbkhlaWdodCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICQoJyNzY3JvbGxhYmxlQ29udGVudCcpLmhlaWdodChuSGVpZ2h0KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9KTsNCg0KDQogICAgZnVuY3Rpb24gdXBkYXRlTGVmdE1hcmdpbigpIHsNCiAgICAgICAgaWYgKCQoJyNzaWRlLW1lbnUnKS5odG1sKCkpIHsNCiAgICAgICAgICAgICQoJyNwYWdlLXdyYXBwZXInKS5jc3MoeyAnbWFyZ2luLWxlZnQnOiAnMCcgfSk7DQogICAgICAgICAgICAkKCcuc2lkZWJhcicpLmhpZGUoKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KDQogICAgZnVuY3Rpb24gYXR0YWNoQ2xpY2tIYW5kbGVycygpIHsNCiAgICAgICAgJCgnI2FncmVlJykuY2xpY2soZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgJCgnI2FncmVlZCcpLnZhbCgidHJ1ZSIpOw0KICAgICAgICAgICAgJCgnI2Rpc2NsYWltZXItZm9ybScpLnN1Ym1pdCgpOw0KICAgICAgICB9KTsNCg0KICAgICAgICAkKCcjZGlzYWdyZWUnKS5jbGljayhmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAkKCcjYWdyZWVkJykudmFsKCJmYWxzZSIpOw0KICAgICAgICAgICAgJCgnI2Rpc2NsYWltZXItZm9ybScpLnN1Ym1pdCgpOw0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBpc1RleHRCbG9ja092ZXJmbG93aW5nKCkgew0KICAgICAgICByZXR1cm4gJCgiI3Njcm9sbGFibGVDb250ZW50IikucHJvcCgnc2Nyb2xsSGVpZ2h0JykgPiAkKCIjc2Nyb2xsYWJsZUNvbnRlbnQiKS5oZWlnaHQoKTsNCiAgICB9DQo8L3NjcmlwdD4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8uY29udGFpbmVyLWZsdWlkIC0tPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8Zm9vdGVyIGNsYXNzPSJmb290ZXIgZ3JpZCI+DQogICAgICAgICAgICA8ZGl2ID4NCiAgICAgICAgICAgICAgICDCqSBQb3J0IE1hY3F1YXJpZSBIYXN0aW5ncyBDb3VuY2lsDQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9mb290ZXI+DQogICAgPC9kaXY+DQo8L2JvZHk+DQo8L2h0bWw+DQo=
  recorded_at: Mon, 21 Apr 2025 18:26:44 GMT
- request:
    method: post
    uri: https://datracker.pmhc.nsw.gov.au/home/disclaimerprocessing
    body:
      encoding: UTF-8
      string: agreed=true
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=uhxxbjqfigdu0cfgiik5rcvu
      Host:
      - datracker.pmhc.nsw.gov.au
      Referer:
      - https://datracker.pmhc.nsw.gov.au/Home/Disclaimer
      Content-Type:
      - application/x-www-form-urlencoded
      Content-Length:
      - '11'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Application/ApplicationDetails/010.2019.00000257.001"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      Set-Cookie:
      - User=accessAllowed-MasterView=True; path=/
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:26:43 GMT
      Content-Length:
      - '170'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Application/ApplicationDetails/010.2019.00000257.001\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:26:44 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Application/ApplicationDetails/010.2019.00000257.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=uhxxbjqfigdu0cfgiik5rcvu; User=accessAllowed-MasterView=True
      Host:
      - datracker.pmhc.nsw.gov.au
      Referer:
      - https://datracker.pmhc.nsw.gov.au/Home/Disclaimer
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:26:54 GMT
      Content-Length:
      - '32192'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:26:54 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Application/ApplicationDetails/010.2019.00000257.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=uhxxbjqfigdu0cfgiik5rcvu; User=accessAllowed-MasterView=True
      Host:
      - datracker.pmhc.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:27:04 GMT
      Content-Length:
      - '32192'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:27:04 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Application/ApplicationDetails/010.2019.00000279.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - datracker.pmhc.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 302
      message: Found
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Home/Disclaimer"
      Server:
      - Microsoft-IIS/8.5
      Set-Cookie:
      - ASP.NET_SessionId=xflajd1gz44nnrbxlx3d4ofw; path=/; HttpOnly; SameSite=Lax
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:27:04 GMT
      Content-Length:
      - '133'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Home/Disclaimer\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:27:04 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Home/Disclaimer
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=xflajd1gz44nnrbxlx3d4ofw
      Host:
      - datracker.pmhc.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:27:04 GMT
      Content-Length:
      - '19685'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:27:04 GMT
- request:
    method: post
    uri: https://datracker.pmhc.nsw.gov.au/home/disclaimerprocessing
    body:
      encoding: UTF-8
      string: agreed=true
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=xflajd1gz44nnrbxlx3d4ofw
      Host:
      - datracker.pmhc.nsw.gov.au
      Referer:
      - https://datracker.pmhc.nsw.gov.au/Home/Disclaimer
      Content-Type:
      - application/x-www-form-urlencoded
      Content-Length:
      - '11'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Application/ApplicationDetails/010.2019.00000279.001"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      Set-Cookie:
      - User=accessAllowed-MasterView=True; path=/
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:27:04 GMT
      Content-Length:
      - '170'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Application/ApplicationDetails/010.2019.00000279.001\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:27:05 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Application/ApplicationDetails/010.2019.00000279.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=xflajd1gz44nnrbxlx3d4ofw; User=accessAllowed-MasterView=True
      Host:
      - datracker.pmhc.nsw.gov.au
      Referer:
      - https://datracker.pmhc.nsw.gov.au/Home/Disclaimer
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:27:14 GMT
      Content-Length:
      - '37061'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:27:15 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Application/ApplicationDetails/010.2019.00000279.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=xflajd1gz44nnrbxlx3d4ofw; User=accessAllowed-MasterView=True
      Host:
      - datracker.pmhc.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:27:24 GMT
      Content-Length:
      - '37061'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:27:25 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Application/ApplicationDetails/010.2019.00000300.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - datracker.pmhc.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 302
      message: Found
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Home/Disclaimer"
      Server:
      - Microsoft-IIS/8.5
      Set-Cookie:
      - ASP.NET_SessionId=aor3f1wlnl2fs31pazmxn505; path=/; HttpOnly; SameSite=Lax
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:27:24 GMT
      Content-Length:
      - '133'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Home/Disclaimer\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:27:25 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Home/Disclaimer
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=aor3f1wlnl2fs31pazmxn505
      Host:
      - datracker.pmhc.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:27:24 GMT
      Content-Length:
      - '19685'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQo8aHRtbCB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCIgeG1sOmxhbmc9ImVuIiBsYW5nPSJlbiI+DQoNCg0KDQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCIgLz4NCiAgICA8bWV0YSBodHRwLWVxdWl2PSJYLVVBLUNvbXBhdGlibGUiIGNvbnRlbnQ9IklFPWVkZ2UiIC8+DQogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xIiAvPg0KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIiAvPg0KICAgIDxtZXRhIG5hbWU9ImtleXdvcmRzIiBjb250ZW50PSJQb3J0IE1hY3F1YXJpZSBDb3VuY2lsLCBEQSBUcmFja2VyLEFwcGxpY2F0aW9uIFRyYWNrZXIsRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24sRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24gVHJhY2tpbmcsIERBIEVucXVpcnksIERldmVsb3BtZW50IEFwcGxpY2F0aW9uIEVucXVpcnksIEFwcGxpY2F0aW9uIFRyYWNrZXIiPg0KICAgIDxtZXRhIG5hbWU9ImRlc2NyaXB0aW9uIiBjb250ZW50PSJUaGUgb2ZmaWNpYWwgUG9ydCBNYWNxdWFyaWUgQ291bmNpbCBBcHBsaWNhdGlvbiBUcmFja2VyIj4NCg0KICAgIDwhLS1mYXZpY29uLS0+DQogICAgPGxpbmsgaHJlZj0iL0NvdW5jaWxfVGhlbWUvUG9ydF9NYWNxdWFyaWUvZmF2aWNvbi5pY28iICkiIHJlbD0ic2hvcnRjdXQgaWNvbiIgdHlwZT0iaW1hZ2UveC1pY29uIiAvPg0KDQogICAgPCEtLSBqUXVlcnkgLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS0xLjExLjEuanMiPjwvc2NyaXB0Pg0KDQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS11aS0xLjExLjIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvY29yZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvYWNjb3JkaW9uLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC90aGVtZXMvYmFzZS90aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQoNCiAgICA8IS0tIEJvb3RzdHJhcCAtLT4NCiAgICA8c2NyaXB0IHNyYz0iL1NjcmlwdHMvYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCg0KICAgIDxsaW5rIGhyZWY9Ii9Db250ZW50L2Jvb3RzdHJhcC10aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvYm9vdHN0cmFwLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9mb250LWF3ZXNvbWUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPCEtLSBEYXRhVGFibGVzIC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2pxdWVyeS5kYXRhVGFibGVzLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMuYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMucmVzcG9uc2l2ZS5qcyI+PC9zY3JpcHQ+DQoNCiAgICANCiAgICA8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLmJvb3RzdHJhcC5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvRGF0YVRhYmxlcy9jc3MvZGF0YVRhYmxlcy5yZXNwb25zaXZlLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLnJlc3BvbnNpdmUuc2NzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KDQogICAgPCEtLSBCb290c3RyYXAgU0ItQWRtaW4tMiBQbHVnaW4gYW5kIG90aGVyIGNzcyBhbmQganMgZmlsZXMtLT4NCiAgICA8c2NyaXB0IHNyYz0iL2pzL2Jvb3RzdHJhcC1jb21ib2JveC5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL2Jvb3RzdHJhcC1kYXRlcGlja2VyLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvYm9vdHN0cmFwLWRpYWxvZy5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL2pxdWVyeS5mb3JtLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvanF1ZXJ5LnRhYmxlc29ydGVyLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvbWFzdGVydmlldy5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL21ldGlzTWVudS5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL3NiLWFkbWluLTIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL2Nzcy9ib290c3RyYXAtY29tYm9ib3guY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvZGF0ZXBpY2tlcjMuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvbWFzdGVydmlldy1jdXN0b21pc2F0aW9ucy5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL2Nzcy9zYi1hZG1pbi0yLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDxsaW5rIGhyZWY9Ii9Db3VuY2lsX1RoZW1lL1BvcnRfTWFjcXVhcmllL1BvcnRfTWFjcXVhcmllLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ291bmNpbF9UaGVtZS9Qb3J0X01hY3F1YXJpZS9Qb3J0X01hY3F1YXJpZV9Nb2JpbGVWaWV3LmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICANCg0KICAgIDwhLS1pbmNsdWRlIGdvb2dsZSBhbmFseXRpY3MgY29kZS0tPg0KICAgIDxzY3JpcHQ+DQogICAgICAgIChmdW5jdGlvbiAoaSwgcywgbywgZywgciwgYSwgbSkgew0KICAgICAgICAgICAgaVsnR29vZ2xlQW5hbHl0aWNzT2JqZWN0J10gPSByOyBpW3JdID0gaVtyXSB8fCBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgKGlbcl0ucSA9IGlbcl0ucSB8fCBbXSkucHVzaChhcmd1bWVudHMpDQogICAgICAgICAgICB9LCBpW3JdLmwgPSAxICogbmV3IERhdGUoKTsgYSA9IHMuY3JlYXRlRWxlbWVudChvKSwNCiAgICAgICAgICAgICAgICBtID0gcy5nZXRFbGVtZW50c0J5VGFnTmFtZShvKVswXTsgYS5hc3luYyA9IDE7IGEuc3JjID0gZzsgbS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLCBtKQ0KICAgICAgICB9KSh3aW5kb3csIGRvY3VtZW50LCAnc2NyaXB0JywgJy8vd3d3Lmdvb2dsZS1hbmFseXRpY3MuY29tL2FuYWx5dGljcy5qcycsICdnYScpOw0KDQogICAgICAgIGdhKCdjcmVhdGUnLCAnVUEtNzI5MTg1Mi00JywgJ2F1dG8nKTsNCiAgICAgICAgZ2EoJ3NlbmQnLCAncGFnZXZpZXcnKTsNCg0KICAgIDwvc2NyaXB0Pg0KDQoNCiAgICA8dGl0bGU+UG9ydCBNYWNxdWFyaWUtSGFzdGluZ3MgQ291bmNpbCAtIEFwcGxpY2F0aW9uIFRyYWNrZXI8L3RpdGxlPg0KDQogICAgPCEtLSBDdXN0b20gRm9udHMNCiAgICAgICAgPGxpbmsgaHJlZj0iL2ZvbnQtYXdlc29tZS9jc3MvZm9udC1hd2Vzb21lLm1pbi5jc3MiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPg0KICAgIC0tPg0KICAgIDwhLS0gSFRNTDUgU2hpbSBhbmQgUmVzcG9uZC5qcyBJRTggc3VwcG9ydCBvZiBIVE1MNSBlbGVtZW50cyBhbmQgbWVkaWEgcXVlcmllcyAtLT4NCiAgICA8IS0tIFdBUk5JTkc6IFJlc3BvbmQuanMgZG9lc24ndCB3b3JrIGlmIHlvdSB2aWV3IHRoZSBwYWdlIHZpYSBmaWxlOi8vIC0tPg0KICAgIDwhLS1baWYgbHQgSUUgOV0+DQogICAgICAgIDxzY3JpcHQgc3JjPSJodHRwczovL29zcy5tYXhjZG4uY29tL2xpYnMvaHRtbDVzaGl2LzMuNy4wL2h0bWw1c2hpdi5qcyI+PC9zY3JpcHQ+DQogICAgICAgIDxzY3JpcHQgc3JjPSJodHRwczovL29zcy5tYXhjZG4uY29tL2xpYnMvcmVzcG9uZC5qcy8xLjQuMi9yZXNwb25kLm1pbi5qcyI+PC9zY3JpcHQ+DQogICAgPCFbZW5kaWZdLS0+DQoNCiAgICA8bGluayBocmVmPSIvL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9Q2Fycm9pcytHb3RoaWMiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPg0KPC9oZWFkPg0KPGJvZHkgY2xhc3M9InN0YW5kYXJkIj4NCiAgICA8aGVhZGVyIGNsYXNzPSJjbGVhcmZpeCI+DQogICAgICAgIDxkaXYgc3R5bGU9IndpZHRoOiAxMDAlOyBiYWNrZ3JvdW5kLWNvbG9yOiAjNUQ5NzRDO2hlaWdodDoyMHB4ICI+PC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9nbyI+DQogICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvIj4NCiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9Db3VuY2lsX1RoZW1lL1BvcnRfTWFjcXVhcmllL2xvZ28ucG5nIiBhbHQ9IlBvcnQgTWFjcXVhcmllIEhhc3RpbmdzIExvZ28iIGlkPSJkaXNwbGF5LWxvZ28iIC8+DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InB1bGwtcmlnaHQiPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvaGVhZGVyPg0KICAgIDxkaXYgaWQ9ImNvbnRlbnQiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPg0KICAgICAgICAgICAgPGRpdiBpZD0ibmF2LWNvbnRhaW5lciIgc3R5bGU9ImRpc3BsYXk6bm9uZSI+DQogICAgICAgICAgICAgICAgPG5hdj48L25hdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJuYXZpZ2F0aW9uIiBjbGFzcz0iY29udGFpbmVyMSI+DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJob21lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cucG1oYy5uc3cuZ292LmF1L0hvbWUiPkhvbWU8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtMW5hdi1oYXMtY2hpbGRyZW4gbmF2LXNlY3Rpb24tdGhpcmRzLTEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvUmVzaWRlbnQtU2VydmljZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlc2lkZW50IFNlcnZpY2VzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtMiBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0xIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQWJvdXQtVXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFib3V0IFVzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtMyBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0xIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQnVzaW5lc3MiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJ1c2luZXNzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNCBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0yIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQnVpbGRpbmctUGxhbm5pbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJ1aWxkaW5nICZhbXA7IFBsYW5uaW5nDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNSBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0yIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQ29tbXVuaXR5LUZhY2lsaXRpZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvbW11bml0eSBGYWNpbGl0aWVzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNiBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0yIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQ3VsdHVyZS1TcG9ydC1MZWlzdXJlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdWx0dXJlLCBTcG9ydCAmYW1wOyBMZWlzdXJlDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNyBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0zIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvRm9ybXMtUGVybWl0cyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRm9ybXMgJmFtcDsgUGVybWl0cw0KICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxuYXYgY2xhc3M9Im5hdmJhciBuYXZiYXItZGVmYXVsdCBuYXZiYXItc3RhdGljLXRvcCIgcm9sZT0ibmF2aWdhdGlvbiIgc3R5bGU9Im1hcmdpbi1ib3R0b206IDAiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9Im5hdmJhci10b2dnbGUiIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgZGF0YS10YXJnZXQ9Ii5uYXZiYXItY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPlRvZ2dsZSBuYXZpZ2F0aW9uPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tYmFyIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1iYXIiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLWhlYWRlciAtLT4NCiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXZiYXItdG9wLWxpbmtzIG5hdmJhci1yaWdodCBoaWRkZW4teHMgaGlkZGVuLXNtIGhpZGRlbi1tZCI+DQogICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxzcGFuIGlkPSJwcmludEljb24iIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXByaW50IiBvbmNsaWNrPSJ3aW5kb3cucHJpbnQoKTsiPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItZGVmYXVsdCBzaWRlYmFyIiByb2xlPSJuYXZpZ2F0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2lkZWJhci1uYXYgbmF2YmFyLWNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IiBpZD0ic2lkZS1tZW51Ij4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwhLS0gLy5zaWRlYmFyLWNvbGxhcHNlIC0tPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwhLS0gLy5uYXZiYXItc3RhdGljLXNpZGUgLS0+DQogICAgICAgICAgICA8L25hdj4NCiAgICAgICAgICAgIDxkaXYgaWQ9InBhZ2Utd3JhcHBlciI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyLWZsdWlkIj4NCiAgICAgICAgICAgICAgICAgICAgDQoNCg0KDQo8ZGl2IGNsYXNzPSJwYWdlLWhlYWRlciI+DQogICAgPGgyPkRpc2NsYWltZXI8L2gyPg0KPC9kaXY+DQoNCjxkaXYgaWQ9InNjcm9sbGFibGVDb250ZW50Ij4NCjxwIGNsYXNzPSJzZWN0aW9uIj4NClRoZSBBcHBsaWNhdGlvbiBUcmFja2VyIHRvb2wgc2hvd3Mga2V5IG1pbGVzdG9uZXMgaW4gdGhlIGFwcGxpY2F0aW9uIHByb2Nlc3MgZm9yIGRldmVsb3BtZW50IGFuZCBvdGhlciBhc3NvY2lhdGVkIGFwcHJvdmFscy4gSXQgaXMgbm90IGludGVuZGVkIHRvIHByb3ZpZGUgYSBkZXRhaWxlZCBoaXN0b3J5LCBidXQgYSBzdW1tYXJ5IG9mIHRoZSBzdGFnZXMgdGhhdCB0aGUgYXBwbGljYXRpb24gaGFzIGdvbmUgdGhyb3VnaC4gIA0KQW55IGluZm9ybWF0aW9uIGFib3V0IHRoZSBwcm9jZXNzaW5nIG9mIGFuIGFwcGxpY2F0aW9uIG9idGFpbmVkIHRocm91Z2ggQ291bmNpbOKAmXMgQXBwbGljYXRpb24gVHJhY2tlciB0b29sIGlzIGludGVuZGVkIGFzIGEgZ3VpZGUgb25seS4gQ291bmNpbCBkb2VzIG5vdCBhY2NlcHQgYW55IHJlc3BvbnNpYmlsaXR5IGZvciBsb3NzIG9yIGhhcm0gYXMgYSByZXN1bHQgb2YgaW5mb3JtYXRpb24gb2J0YWluZWQgYW5kIHJlbGllZCBvbiBmcm9tIHRoaXMgZmFjaWxpdHkuDQo8L3A+DQo8cCBjbGFzcz0ic2VjdGlvbiI+DQpUaGlzIHNlcnZpY2UgYXBwbGllcyB0byBhbGwgZGV2ZWxvcG1lbnQgYXBwbGljYXRpb25zIGFuZCBhc3NvY2lhdGVkIGFwcGxpY2F0aW9ucyAgZnJvbSAxIEphbnVhcnkgMjAwMiBvbndhcmRzLiBJZiB5b3UgZG9u4oCZdCBmaW5kIHRoZSBkb2N1bWVudCB5b3UgYXJlIGFmdGVyIHBsZWFzZSBjb250YWN0IENvdW5jaWwgZm9yIGEgY29weSB2aWEgPGEgaHJlZj0ibWFpbHRvOmNvdW5jaWxAcG1oYy5uc3cuZ292LmF1Ij5jb3VuY2lsQHBtaGMubnN3Lmdvdi5hdTwvYT4uDQo8L3A+DQoNCjxwIGNsYXNzPSJzZWN0aW9uIj48aDM+VGVybXMgYW5kIENvbmRpdGlvbnM8L2gzPjwvcD4NCjxwIGNsYXNzPSJzZWN0aW9uIj4NCjx1bD4NCgk8bGk+VXNlIG9mIHRoZSBBcHBsaWNhdGlvbiBUcmFja2VyIGlzIHN1YmplY3QgdG8geW91ciBhZ3JlZW1lbnQgdG8gdGhlIHRlcm1zIGFuZCBjb25kaXRpb25zLCBwcml2YWN5IGFuZCBjb3B5cmlnaHQgbGF3cy48L2xpPg0KCTxsaT5JIGFjY2VwdCB0aGF0IHVzZSBvZiB0aGUgZGF0YSBieSBtZSBzaGFsbCBiZSBsaW1pdGVkIHRvIG15IG93biBwZXJzb25hbCB1c2Ugb3IgZm9yIHRoZSB1c2UgaW4gdGhlIG9yZGluYXJ5IGNvdXJzZSBvZiBteSBidXNpbmVzcy4gSSBzaGFsbCBub3Qgb24tc2VsbCBvciBkaXN0cmlidXRlIHRoZSBkYXRhIGZvciByZXdhcmQgdG8gYW55IG90aGVyIHRoaXJkIHBhcnR5LCBub3Igc2hhbGwgSSBwcm9kdWNlIGFueSBoYXJkY29weSBwcm9kdWN0cywgaW5jb3Jwb3JhdGluZyB0aGUgZGF0YSBmb3IgY29tbWVyY2lhbCB1c2UuIDwvbGk+DQoJPGxpPkkgYWNjZXB0IHRoYXQgZGF0YSBtdXN0IG5vdCBiZSB1c2VkIGZvciBkaXJlY3QgbWFya2V0aW5nIG9yIGJlIHVzZWQgaW4gYnJlYWNoIG9mIHRoZSBQcml2YWN5IExhd3MuPC9saT4NCgk8bGk+VG8gdGhlIG1heGltdW0gZXh0ZW50IHBlcm1pdHRlZCBieSBsYXcsIENvdW5jaWwgZXhjbHVkZXMgYWxsIGxpYWJpbGl0eSB0byB5b3UgZm9yIGxvc3Mgb3IgZGFtYWdlIG9mIGFueSBraW5kIChob3dldmVyIGNhdXNlZCwgaW5jbHVkaW5nIGJ5IG5lZ2xpZ2VuY2UpIGFyaXNpbmcgZnJvbSBvciByZWxhdGluZyBpbiBhbnkgd2F5IHRvIHRoZSBjb250ZW50cyBvZiB0aGlzIHdlYnNpdGUgYW5kL29yIHlvdXIgdXNlIG9mIGl0LjwvbGk+DQoJPGxpPkFsbCBtYXR0ZXJzIHJlbGF0aW5nIHRvIHRoaXMgd2Vic2l0ZSBhcmUgZ292ZXJuZWQgYnkgdGhlIGxhd3Mgb2YgdGhlIFN0YXRlIG9mIE5ldyBTb3V0aCBXYWxlcywgQXVzdHJhbGlhLjwvbGk+DQoJPGxpPkJ5IGFjY2Vzc2luZyB0aGlzIGluZm9ybWF0aW9uIHlvdSByZXF1ZXN0IHRvIGRvIHNvIHVuZGVyIHRoZSA8aT5FbnZpcm9ubWVudGFsIFBsYW5uaW5nIGFuZCBBc3Nlc3NtZW50IEFjdCAxOTc5PC9pPiAoTlNXKSwgPGk+R292ZXJubWVudCBJbmZvcm1hdGlvbiAoUHVibGljIEFjY2VzcykgQWN0IDIwMDk8L2k+IChOU1cpIFtHSVBBXSBhbmQgeW91IHVuZGVyc3RhbmQgdGhhdCBDb3VuY2lsIGlzIG1ha2luZyB0aGUgaW5mb3JtYXRpb24gYXZhaWxhYmxlIHVuZGVyIHRoZSBwcm92aXNpb25zIG9mIEdvdmVybm1lbnQgSW5mb3JtYXRpb24gKFB1YmxpYyBBY2Nlc3MpIEFjdCwgMjAwOS48L2xpPg0KCTxsaT5Zb3UgbXVzdCBub3QgbW9kaWZ5LCBjb3B5LCByZXByb2R1Y2UsIHJlcHVibGlzaCwgdXBsb2FkIHRvIGEgdGhpcmQgcGFydHksIHRyYW5zbWl0IG9yIGRpc3RyaWJ1dGUgaW4gYW55IHdheSB0aGUgY29udGVudCBvZiB0aGlzIHdlYnNpdGUgZXhjZXB0IGFzIGV4cHJlc3NseSBwcm92aWRlZCBpbiB0aGVzZSBUZXJtcyBhbmQgQ29uZGl0aW9ucyBvciBhcyBwZXJtaXR0ZWQgYnkgdGhlIENvcHlyaWdodCBBY3QsIDE5NjggKENUSCkuPC9saT4NCgk8bGk+VGhlIFdvcmxkIFdpZGUgV2ViIGV4aXN0cyBhY3Jvc3Mgb3BlbiBwdWJsaWMgbmV0d29ya3MgdGhhdCBhcmUgbmVpdGhlciBzZWN1cmUgbm9yIHByaXZhdGUuIEFjY29yZGluZ2x5LCB0aGUgdXNlciBhY2tub3dsZWRnZXMgYW5kIGFjY2VwdHMgdGhlIHJpc2sgdGhhdCBhbnkgY29tbXVuaWNhdGlvbiB0byBvciBmcm9tIHRoaXMgd2Vic2l0ZSBtYXkgYmUgaW50ZXJjZXB0ZWQsIHVzZWQgb3IgbW9kaWZpZWQgYnkgdGhpcmQgcGFydGllcy48L2xpPg0KCTxsaT5Db3VuY2lsIGhhcyBtYWRlIGV2ZXJ5IGVmZm9ydCB0byBwcm92aWRlIGluZm9ybWF0aW9uIHRoYXQgaXMgYWNjdXJhdGUgYW5kIGVhc3kgdG8gdW5kZXJzdGFuZCwgYWx0aG91Z2gsIHRoZSBhY2N1cmFjeSBvZiB0aGUgaW5mb3JtYXRpb24gY2Fubm90IGJlIGd1YXJhbnRlZWQgYW5kIHNob3VsZCBub3QgYmUgcmVsaWVkIG9uIG90aGVyIHRoYW4gYXMgYSBnZW5lcmFsIGd1aWRlLiBJZiB5b3UgcmVxdWlyZSBtb3JlIHNwZWNpZmljIGluZm9ybWF0aW9uIHBsZWFzZSBjb250YWN0IENvdW5jaWwgYnkgb25lIG9mIHRoZSBmb2xsb3dpbmcgbWV0aG9kczogPC9saT4NCjwvdWw+PC9wPg0KDQoJPHAgY2xhc3M9InNlY3Rpb24iPg0KPHRhYmxlPg0KPHRyPg0KCQk8dGQ+UGhvbmU6IAkJPC90ZD4NCgkJPHRkPigwMikgNjU4MSA4MTExPC90ZD4NCgk8L3RyPg0KCTx0cj4NCgkJPHRkPkVtYWlsOiAJPC90ZD4NCgkJPHRkPjxhIGhyZWY9Im1haWx0bzpjb3VuY2lsQHBtaGMubnN3Lmdvdi5hdSI+Y291bmNpbEBwbWhjLm5zdy5nb3YuYXU8L2E+PC90ZD4NCgk8L3RyPg0KCTx0cj4NCgkJPHRkPlBvc3Q6IDwvdGQ+DQoJCTx0ZD5Qb3J0IE1hY3F1YXJpZS1IYXN0aW5ncyBDb3VuY2lsIDxicj4NCgkJUE8gQm94IDg0IDxicj4NCgkJCVBPUlQgTUFDUVVBUklFICBOU1cgIDI0NDQgPGJyPg0KPC90ZD4NCgk8L3RyPg0KPC90YWJsZT4NCjwvcD4NCg0KPHAgY2xhc3M9InNlY3Rpb24iPjxoMz5Qcml2YWN5ICYgUGVyc29uYWwgSW5mb3JtYXRpb248L2gzPjwvcD4NCjxwIGNsYXNzPSJzZWN0aW9uIj5Qb3J0IE1hY3F1YXJpZS1IYXN0aW5ncyBDb3VuY2lsIGhhcyBjZXJ0YWluIG9ibGlnYXRpb25zIGluIHJlbGF0aW9uIHRvIHRoZSBwZXJzb25hbCBpbmZvcm1hdGlvbiB0aGF0IGl0IG9idGFpbnMgZnJvbSBwZW9wbGUgd2hvIHVzZSBvdXIgd2Vic2l0ZS4gUGxlYXNlIHJlYWQgdGhpcyBzdGF0ZW1lbnQgdG8gZmluZCBvdXQgd2hhdCBpbmZvcm1hdGlvbiBDb3VuY2lsIGNvbGxlY3RzIGFib3V0IHlvdSwgd2h5IGl0IGlzIGNvbGxlY3RlZCBhbmQgd2hhdCBpcyBkb25lIHdpdGggaXQuPC9wPg0KDQoNCjxwIGNsYXNzPSJzZWN0aW9uIj48Yj5QZXJzb25hbCBJbmZvcm1hdGlvbjwvYj48L3A+DQo8cCBjbGFzcz0ic2VjdGlvbiI+SW4gY29tcGxldGluZyBhbnkgb2YgdGhlIGZvcm1zIGF2YWlsYWJsZSBvbiB0aGlzIHNpdGUgeW91IHdpbGwgcHJvdmlkZSBDb3VuY2lsIHdpdGggInBlcnNvbmFsIGluZm9ybWF0aW9uIi4gVGhpcyBpcyBkZWZpbmVkIGluIHRoZSBQcml2YWN5IGFuZCBQZXJzb25hbCBJbmZvcm1hdGlvbiBQcm90ZWN0aW9uIEFjdCAxOTk4ICgiUFBJUEEiKSB0byBiZSAiaW5mb3JtYXRpb24gb3IgYW4gb3BpbmlvbiBhYm91dCBhbiBpbmRpdmlkdWFsIHdob3NlIGlkZW50aXR5IGlzIGFwcGFyZW50IG9yIGNhbiByZWFzb25hYmx5IGJlIGFzY2VydGFpbmVkIGZyb20gdGhlIGluZm9ybWF0aW9uIG9yIG9waW5pb24iLiAgPC9wPg0KPHAgY2xhc3M9InNlY3Rpb24iPlBlcnNvbmFsIGluZm9ybWF0aW9uIGNvbGxlY3RlZCBieSBDb3VuY2lsIHdpbGwgaW5jbHVkZSB5b3VyIG5hbWUgYW5kIGFueSBvdGhlciBpbmZvcm1hdGlvbiBpbmNsdWRlZCBpbiB0aGUgZm9ybXMuIEZ1cnRoZXIsIHdoZW4geW91IHZpc2l0IENvdW5jaWwncyB3ZWJzaXRlIHRoZSBmb2xsb3dpbmcgaW5mb3JtYXRpb24gaXMgcmVjb3JkZWQgZm9yIHN0YXRpc3RpY2FsIHB1cnBvc2VzOjwvcD4NCg0KPHAgY2xhc3M9InNlY3Rpb24iPg0KCTx1bD4NCgkJPGxpPlRoZSBhZGRyZXNzIG9mIHlvdXIgc2VydmVyPC9saT4NCgkJPGxpPlRoZSB0b3AtbGV2ZWwgZG9tYWluIGZyb20gd2hpY2ggeW91IGFjY2Vzc2VkIHRoZSBJbnRlcm5ldCAoc3VjaCBhcyAuY29tLC5vcmcsLiBnb3YsIC5lZHUsIC5hdSwgLm56LCBldGMuKTwvbGk+DQoJCTxsaT5UaGUgdHlwZSBvZiBicm93c2VyIHVzZWQ8L2xpPg0KCQk8bGk+VGhlIGRhdGUgYW5kIHRpbWUgb2YgeW91ciB2aXNpdCB0byB0aGUgc2l0ZTwvbGk+DQoJCTxsaT5UaGUgcGFnZXMgeW91IHZpc2l0ZWQgYW5kIHRoZSBkb2N1bWVudHMgeW91IGRvd25sb2FkZWQ8L2xpPg0KCQk8bGk+VGhlIGxpbmtzIHlvdSBmb2xsb3dlZCB0byBjb21lIHRvIGFuZCBsZWF2ZSB0aGUgc2l0ZTwvbGk+DQoJCTxsaT5Bbnkgb3RoZXIgaW5mb3JtYXRpb24gdGhhdCBpcyByZWNvcmRlZC48L2xpPg0KCTwvdWw+DQo8L3A+DQoNCjxwIGNsYXNzPSJzZWN0aW9uIj5UaGlzIGluZm9ybWF0aW9uIGlzIHVzZWQgdG8gY3JlYXRlIHJlcG9ydHMgdG8gdGVsbCBDb3VuY2lsIHRoZSBudW1iZXIgb2YgdmlzaXRvcnMgdG8gdGhlIHNpdGUsIGFyZWFzIHZpc2l0ZWQgYW5kIHRlY2huaWNhbCBpbmZvcm1hdGlvbiBzdWNoIGFzIGJyb2tlbiBsaW5rcy4gPC9wPg0KPHAgY2xhc3M9InNlY3Rpb24iPlBlcnNvbmFsIGluZm9ybWF0aW9uIGNvbGxlY3RlZCBmcm9tIHlvdSBpcyBoZWxkIGFuZCB1c2VkIGJ5IENvdW5jaWwgYXMgcGVybWl0dGVkIGJ5IFByaXZhY3kgYW5kIFBlcnNvbmFsIEluZm9ybWF0aW9uIFByb3RlY3Rpb24gQWN0IDE5OTggKCJQUElQQSIpLiBVbmRlciBQUElQQSB5b3UgYXJlIGVudGl0bGVkIHRvIGJlIGluZm9ybWVkIG9mOjwvcD4NCg0KPHAgY2xhc3M9InNlY3Rpb24iPg0KCTx1bD4NCgkJPGxpPnRoZSBmYWN0IHRoYXQgcGVyc29uYWwgaW5mb3JtYXRpb24gaXMgYmVpbmcgY29sbGVjdGVkPC9saT4NCgkJPGxpPnRoZSBuYW1lIGFuZCBhZGRyZXNzIG9mIHRoZSBhZ2VuY3kgY29sbGVjdGluZyBhbmQgaG9sZGluZyB0aGUgaW5mb3JtYXRpb248L2xpPg0KCQk8bGk+dGhlIHB1cnBvc2VzIGZvciB3aGljaCB0aGUgaW5mb3JtYXRpb24gaXMgYmVpbmcgY29sbGVjdGVkPC9saT4NCgkJPGxpPnRoZSBwZXJzb25zIGFuZCBib2RpZXMgdG8gd2hvbSB0aGUgaW5mb3JtYXRpb24gd2lsbCBiZSBkaXNjbG9zZWQ8L2xpPg0KCQk8bGk+d2hldGhlciB0aGUgcHJvdmlzaW9uIG9mIHRoZSBpbmZvcm1hdGlvbiBpcyBtYW5kYXRvcnkgb3Igdm9sdW50YXJ5PC9saT4NCgkJPGxpPnRoZSBjb25zZXF1ZW5jZXMgKGlmIGFueSkgb2Ygbm90IHByb3ZpZGluZyB0aGUgaW5mb3JtYXRpb248L2xpPg0KCQk8bGk+eW91ciByaWdodCB1bmRlciBQUElQQSB0byBhcHBseSB0byBoYXZlIGFjY2VzcyB0byB5b3VyIGluZm9ybWF0aW9uIG9yIHRvIGhhdmUgaXQgY29ycmVjdGVkLjwvbGk+DQoJPC91bD4NCjwvcD4NCg0KPHAgY2xhc3M9InNlY3Rpb24iPkNvdW5jaWwgaGFzIHZhcmlvdXMgZnVuY3Rpb25zIHVuZGVyIHRoZSBFbnZpcm9ubWVudGFsIFBsYW5uaW5nIGFuZCBBc3Nlc3NtZW50IEFjdCwgMTk3OSwgdGhlIExvY2FsIEdvdmVybm1lbnQgQWN0IDE5OTMgYW5kIG90aGVyIGxlZ2lzbGF0aW9uLiBQZXJzb25hbCBpbmZvcm1hdGlvbiBpcyBjb2xsZWN0ZWQgdG8gZW5hYmxlIENvdW5jaWwgdG8gcGVyZm9ybSB0aGUgZnVuY3Rpb25zIHVuZGVyIHRoZXNlIEFjdHMuIDwvcD4NCjxwIGNsYXNzPSJzZWN0aW9uIj5VbmRlciBQUElQQSwgb3RoZXIgYWdlbmNpZXMgKHBhcnRpY3VsYXJseSBsYXcgZW5mb3JjZW1lbnQgYWdlbmNpZXMpIG1heSBoYXZlIHRoZSByaWdodCB0byBnYWluIGFjY2VzcyB0byBwZXJzb25hbCBpbmZvcm1hdGlvbiBhYm91dCB5b3UgdGhhdCBDb3VuY2lsIGhvbGRzLiBJbmRlZWQsIHNvbWUgYWdlbmNpZXMgKHBhcnRpY3VsYXJseSBsYXcgZW5mb3JjZW1lbnQgYWdlbmNpZXMpIGhhdmUgbGVnYWwgYXV0aG9yaXR5IHRvIGluc3BlY3Qgb3VyIEludGVybmV0IFNlcnZpY2UgUHJvdmlkZXJzJyBsb2dzIGFuZCBvYnRhaW4geW91ciBhZGRyZXNzIGlmIHJlcXVpcmVkIGZvciBhbiBvZmZpY2lhbCBpbnZlc3RpZ2F0aW9uLiA8L3A+DQo8cCBjbGFzcz0ic2VjdGlvbiI+Q291bmNpbCByZWNvcmRzIG1heSBiZSBhdmFpbGFibGUgZm9yIHB1YmxpYyBpbnNwZWN0aW9uIGFuZCBjb3B5aW5nLCBpbmNsdWRpbmcgdW5kZXIgdGhlIEdvdmVybm1lbnQgSW5mb3JtYXRpb24gKFB1YmxpYyBBY2Nlc3MpIEFjdCAyMDA5LjwvcD4NCjxwIGNsYXNzPSJzZWN0aW9uIj48L3A+DQoNCjxwIGNsYXNzPSJzZWN0aW9uIj48aDM+Q29weXJpZ2h0PC9oMz48L3A+DQo8cCBjbGFzcz0ic2VjdGlvbiI+VGhlIGNvbnRlbnRzIG9mIHRoaXMgd2Vic2l0ZSAod2hpY2ggaW5jbHVkZXMgZG93bmxvYWRhYmxlIG1hdGVyaWFsKSBhcmUgc3ViamVjdCB0byBjb3B5cmlnaHQgYW5kIGFyZSBwcm90ZWN0ZWQgYnkgbGF3cyBvZiBBdXN0cmFsaWEgYW5kIG90aGVyIGNvdW50cmllcyB0aHJvdWdoIGludGVybmF0aW9uYWwgdHJlYXRpZXMuPC9wPg0KPHAgY2xhc3M9InNlY3Rpb24iPlBvcnQgTWFjcXVhcmllLUhhc3RpbmdzIENvdW5jaWwgZ3JhbnRzIHlvdSBhIG5vbi1leGNsdXNpdmUgbGljZW5jZSB0byByZXByb2R1Y2UgdGhlIGNvbnRlbnRzIG9mIHRoaXMgd2Vic2l0ZSBpbiB5b3VyIHdlYiBicm93c2VyIChhbmQgaW4gYW55IGNhY2hlIGZpbGUgcHJvZHVjZWQgYnkgeW91ciB3ZWIgYnJvd3NlcikgZm9yIHRoZSBzb2xlIHB1cnBvc2Ugb2Ygdmlld2luZyB0aGUgY29udGVudC4gQ291bmNpbCByZXNlcnZlcyBhbGwgb3RoZXIgcmlnaHRzLjwvcD4NCjxwIGNsYXNzPSJzZWN0aW9uIj5CeSBhZ3JlZWluZyB0byB1c2UgdGhpcyBzeXN0ZW0geW91IGFncmVlIHRvIGluZGVtbmlmeSBDb3VuY2lsIGFnYWluc3QgYW55IGluZnJpbmdlbWVudCBieSB5b3Ugb2YgYW55IHRoaXJkIHBhcnR5IEludGVsbGVjdHVhbCBQcm9wZXJ0eSByaWdodHMsIGluY2x1ZGluZyBDb3B5cmlnaHQuPC9wPg0KDQo8L2Rpdj4NCg0KPHAgY2xhc3M9InNlY3Rpb24iPg0KPC9icj4NCjxiPkkgaGF2ZSByZWFkIGFuZCB1bmRlcnN0b29kIHRoZSBwcm92aXNpb25zIHNldCBvdXQgYWJvdmUuPC9iPg0KPC9wPg0KPC9icj4NCg0KDQoNCg0KPGZvcm0gYWN0aW9uPSIvaG9tZS9kaXNjbGFpbWVycHJvY2Vzc2luZyIgaWQ9ImRpc2NsYWltZXItZm9ybSIgbWV0aG9kPSJwb3N0Ij48aW5wdXQgaWQ9ImFncmVlZCIgbmFtZT0iYWdyZWVkIiB0eXBlPSJoaWRkZW4iIHZhbHVlPSJGYWxzZSIgLz4gICAgPGRpdiBpZD0iYnRucyI+DQogICAgICAgIDxidXR0b24gaWQ9ImFncmVlIiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIGZvcm09ImRpc2NsYWltZXItZm9ybSI+QWdyZWU8L2J1dHRvbj4NCiAgICAgICAgPGJ1dHRvbiBpZD0iZGlzYWdyZWUiIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4td2FybmluZyIgZm9ybT0iZGlzY2xhaW1lci1mb3JtIj5EaXNhZ3JlZTwvYnV0dG9uPg0KICAgIDwvZGl2Pg0KPC9mb3JtPg0KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KDQogICAgdmFyIGxhc3RTY3JvbGxUb3A7DQogICAgdmFyIG1heFNjcm9sbGFibGVDb250ZW50SGVpZ2h0Ow0KDQogICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkgew0KDQogICAgICAgIHVwZGF0ZUxlZnRNYXJnaW4oKTsNCiAgICAgICAgYXR0YWNoQ2xpY2tIYW5kbGVycygpOw0KDQogICAgICAgIGlmIChpc1RleHRCbG9ja092ZXJmbG93aW5nKCkpIHsNCiAgICAgICAgICAgIGxhc3RTY3JvbGxUb3AgPSAwOzsNCiAgICAgICAgICAgIHZhciB3aW5kb3dIZWlnaHQgPSAkKHdpbmRvdykuaGVpZ2h0KCk7DQoNCiAgICAgICAgICAgIHZhciBoZWFkZXJIZWlnaHQgPSAkKCcjc2Nyb2xsYWJsZUNvbnRlbnQnKS5vZmZzZXQoKS50b3A7DQogICAgICAgICAgICB2YXIgbmV3SGVpZ2h0ID0gZ2V0TmV3SGVpZ2h0KCk7DQoNCiAgICAgICAgICAgIGFkanVzdERpc2NsYWltZXJDb250ZW50Rm9yRG93blNjcm9sbChuZXdIZWlnaHQpOw0KDQogICAgICAgICAgICAkKHdpbmRvdykuc2Nyb2xsKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICB2YXIgbkhlaWdodCA9ICQod2luZG93KS5oZWlnaHQoKSAtIChoZWFkZXJIZWlnaHQgLSAkKHdpbmRvdykuc2Nyb2xsVG9wKCkgKyAkKCdmb3JtJykuaGVpZ2h0KCkgKyAxMDApOw0KDQogICAgICAgICAgICAgICAgdmFyIGJJc0Rvd25TY3JvbGwgPSBpc1Njcm9sbERvd24oKTsNCg0KICAgICAgICAgICAgICAgIGlmIChiSXNEb3duU2Nyb2xsKQ0KICAgICAgICAgICAgICAgICAgICBhZGp1c3REaXNjbGFpbWVyQ29udGVudEZvckRvd25TY3JvbGwobkhlaWdodCk7DQogICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgICAgICBhZGp1c3REaXNjbGFpbWVyQ29udGVudEZvclVwU2Nyb2xsKG5IZWlnaHQpOw0KICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIGdldE5ld0hlaWdodCgpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gJCh3aW5kb3cpLmhlaWdodCgpIC0gKGhlYWRlckhlaWdodCArICQod2luZG93KS5zY3JvbGxUb3AoKSArICQoJ2Zvcm0nKS5oZWlnaHQoKSArIDEwMCk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIGlzU2Nyb2xsRG93bigpIHsNCiAgICAgICAgICAgICAgICB2YXIgc3QgPSAkKHdpbmRvdykuc2Nyb2xsVG9wKCk7DQogICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHN0ID49IGxhc3RTY3JvbGxUb3A7CQkgIC8vIGRvd25zY3JvbGwNCg0KICAgICAgICAgICAgICAgIGxhc3RTY3JvbGxUb3AgPSBzdDsNCiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0Ow0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBmdW5jdGlvbiBoYXNTY3JvbGxCYXIoaXRlbSkgew0KICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLmdldCgwKS5zY3JvbGxIZWlnaHQgPiBpdGVtLmdldCgwKS5jbGllbnRIZWlnaHQ7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIGFkanVzdERpc2NsYWltZXJDb250ZW50Rm9yRG93blNjcm9sbChuSGVpZ2h0KSB7DQogICAgICAgICAgICAgICAgdmFyIGlzU2Nyb2xsYWJsZSA9IGhhc1Njcm9sbEJhcigkKCcjc2Nyb2xsYWJsZUNvbnRlbnQnKSk7DQogICAgICAgICAgICAgICAgaWYgKGlzU2Nyb2xsYWJsZSkgew0KICAgICAgICAgICAgICAgICAgICAkKCcjc2Nyb2xsYWJsZUNvbnRlbnQnKS5oZWlnaHQobkhlaWdodCk7DQogICAgICAgICAgICAgICAgICAgIG1heFNjcm9sbGFibGVDb250ZW50SGVpZ2h0ID0gbkhlaWdodDsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIGFkanVzdERpc2NsYWltZXJDb250ZW50Rm9yVXBTY3JvbGwobkhlaWdodCkgew0KICAgICAgICAgICAgICAgIHZhciBpc1Njcm9sbGFibGUgPSBoYXNTY3JvbGxCYXIoJCgnI3Njcm9sbGFibGVDb250ZW50JykpOw0KDQogICAgICAgICAgICAgICAgaWYgKG1heFNjcm9sbGFibGVDb250ZW50SGVpZ2h0ID4gbkhlaWdodCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICQoJyNzY3JvbGxhYmxlQ29udGVudCcpLmhlaWdodChuSGVpZ2h0KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9KTsNCg0KDQogICAgZnVuY3Rpb24gdXBkYXRlTGVmdE1hcmdpbigpIHsNCiAgICAgICAgaWYgKCQoJyNzaWRlLW1lbnUnKS5odG1sKCkpIHsNCiAgICAgICAgICAgICQoJyNwYWdlLXdyYXBwZXInKS5jc3MoeyAnbWFyZ2luLWxlZnQnOiAnMCcgfSk7DQogICAgICAgICAgICAkKCcuc2lkZWJhcicpLmhpZGUoKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KDQogICAgZnVuY3Rpb24gYXR0YWNoQ2xpY2tIYW5kbGVycygpIHsNCiAgICAgICAgJCgnI2FncmVlJykuY2xpY2soZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgJCgnI2FncmVlZCcpLnZhbCgidHJ1ZSIpOw0KICAgICAgICAgICAgJCgnI2Rpc2NsYWltZXItZm9ybScpLnN1Ym1pdCgpOw0KICAgICAgICB9KTsNCg0KICAgICAgICAkKCcjZGlzYWdyZWUnKS5jbGljayhmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAkKCcjYWdyZWVkJykudmFsKCJmYWxzZSIpOw0KICAgICAgICAgICAgJCgnI2Rpc2NsYWltZXItZm9ybScpLnN1Ym1pdCgpOw0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBpc1RleHRCbG9ja092ZXJmbG93aW5nKCkgew0KICAgICAgICByZXR1cm4gJCgiI3Njcm9sbGFibGVDb250ZW50IikucHJvcCgnc2Nyb2xsSGVpZ2h0JykgPiAkKCIjc2Nyb2xsYWJsZUNvbnRlbnQiKS5oZWlnaHQoKTsNCiAgICB9DQo8L3NjcmlwdD4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8uY29udGFpbmVyLWZsdWlkIC0tPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8Zm9vdGVyIGNsYXNzPSJmb290ZXIgZ3JpZCI+DQogICAgICAgICAgICA8ZGl2ID4NCiAgICAgICAgICAgICAgICDCqSBQb3J0IE1hY3F1YXJpZSBIYXN0aW5ncyBDb3VuY2lsDQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9mb290ZXI+DQogICAgPC9kaXY+DQo8L2JvZHk+DQo8L2h0bWw+DQo=
  recorded_at: Mon, 21 Apr 2025 18:27:25 GMT
- request:
    method: post
    uri: https://datracker.pmhc.nsw.gov.au/home/disclaimerprocessing
    body:
      encoding: UTF-8
      string: agreed=true
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=aor3f1wlnl2fs31pazmxn505
      Host:
      - datracker.pmhc.nsw.gov.au
      Referer:
      - https://datracker.pmhc.nsw.gov.au/Home/Disclaimer
      Content-Type:
      - application/x-www-form-urlencoded
      Content-Length:
      - '11'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Application/ApplicationDetails/010.2019.00000300.001"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      Set-Cookie:
      - User=accessAllowed-MasterView=True; path=/
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:27:24 GMT
      Content-Length:
      - '170'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Application/ApplicationDetails/010.2019.00000300.001\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:27:25 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Application/ApplicationDetails/010.2019.00000300.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=aor3f1wlnl2fs31pazmxn505; User=accessAllowed-MasterView=True
      Host:
      - datracker.pmhc.nsw.gov.au
      Referer:
      - https://datracker.pmhc.nsw.gov.au/Home/Disclaimer
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:27:35 GMT
      Content-Length:
      - '35681'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQo8aHRtbCB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCIgeG1sOmxhbmc9ImVuIiBsYW5nPSJlbiI+DQoNCg0KDQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCIgLz4NCiAgICA8bWV0YSBodHRwLWVxdWl2PSJYLVVBLUNvbXBhdGlibGUiIGNvbnRlbnQ9IklFPWVkZ2UiIC8+DQogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xIiAvPg0KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIiAvPg0KICAgIDxtZXRhIG5hbWU9ImtleXdvcmRzIiBjb250ZW50PSJQb3J0IE1hY3F1YXJpZSBDb3VuY2lsLCBEQSBUcmFja2VyLEFwcGxpY2F0aW9uIFRyYWNrZXIsRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24sRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24gVHJhY2tpbmcsIERBIEVucXVpcnksIERldmVsb3BtZW50IEFwcGxpY2F0aW9uIEVucXVpcnksIEFwcGxpY2F0aW9uIFRyYWNrZXIiPg0KICAgIDxtZXRhIG5hbWU9ImRlc2NyaXB0aW9uIiBjb250ZW50PSJUaGUgb2ZmaWNpYWwgUG9ydCBNYWNxdWFyaWUgQ291bmNpbCBBcHBsaWNhdGlvbiBUcmFja2VyIj4NCg0KICAgIDwhLS1mYXZpY29uLS0+DQogICAgPGxpbmsgaHJlZj0iL0NvdW5jaWxfVGhlbWUvUG9ydF9NYWNxdWFyaWUvZmF2aWNvbi5pY28iICkiIHJlbD0ic2hvcnRjdXQgaWNvbiIgdHlwZT0iaW1hZ2UveC1pY29uIiAvPg0KDQogICAgPCEtLSBqUXVlcnkgLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS0xLjExLjEuanMiPjwvc2NyaXB0Pg0KDQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS11aS0xLjExLjIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvY29yZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvYWNjb3JkaW9uLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC90aGVtZXMvYmFzZS90aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQoNCiAgICA8IS0tIEJvb3RzdHJhcCAtLT4NCiAgICA8c2NyaXB0IHNyYz0iL1NjcmlwdHMvYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCg0KICAgIDxsaW5rIGhyZWY9Ii9Db250ZW50L2Jvb3RzdHJhcC10aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvYm9vdHN0cmFwLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9mb250LWF3ZXNvbWUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPCEtLSBEYXRhVGFibGVzIC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2pxdWVyeS5kYXRhVGFibGVzLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMuYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMucmVzcG9uc2l2ZS5qcyI+PC9zY3JpcHQ+DQoNCiAgICANCiAgICA8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLmJvb3RzdHJhcC5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvRGF0YVRhYmxlcy9jc3MvZGF0YVRhYmxlcy5yZXNwb25zaXZlLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLnJlc3BvbnNpdmUuc2NzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KDQogICAgPCEtLSBCb290c3RyYXAgU0ItQWRtaW4tMiBQbHVnaW4gYW5kIG90aGVyIGNzcyBhbmQganMgZmlsZXMtLT4NCiAgICA8c2NyaXB0IHNyYz0iL2pzL2Jvb3RzdHJhcC1jb21ib2JveC5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL2Jvb3RzdHJhcC1kYXRlcGlja2VyLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvYm9vdHN0cmFwLWRpYWxvZy5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL2pxdWVyeS5mb3JtLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvanF1ZXJ5LnRhYmxlc29ydGVyLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvbWFzdGVydmlldy5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL21ldGlzTWVudS5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL3NiLWFkbWluLTIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL2Nzcy9ib290c3RyYXAtY29tYm9ib3guY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvZGF0ZXBpY2tlcjMuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvbWFzdGVydmlldy1jdXN0b21pc2F0aW9ucy5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL2Nzcy9zYi1hZG1pbi0yLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDxsaW5rIGhyZWY9Ii9Db3VuY2lsX1RoZW1lL1BvcnRfTWFjcXVhcmllL1BvcnRfTWFjcXVhcmllLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ291bmNpbF9UaGVtZS9Qb3J0X01hY3F1YXJpZS9Qb3J0X01hY3F1YXJpZV9Nb2JpbGVWaWV3LmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICANCg0KICAgIDwhLS1pbmNsdWRlIGdvb2dsZSBhbmFseXRpY3MgY29kZS0tPg0KICAgIDxzY3JpcHQ+DQogICAgICAgIChmdW5jdGlvbiAoaSwgcywgbywgZywgciwgYSwgbSkgew0KICAgICAgICAgICAgaVsnR29vZ2xlQW5hbHl0aWNzT2JqZWN0J10gPSByOyBpW3JdID0gaVtyXSB8fCBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgKGlbcl0ucSA9IGlbcl0ucSB8fCBbXSkucHVzaChhcmd1bWVudHMpDQogICAgICAgICAgICB9LCBpW3JdLmwgPSAxICogbmV3IERhdGUoKTsgYSA9IHMuY3JlYXRlRWxlbWVudChvKSwNCiAgICAgICAgICAgICAgICBtID0gcy5nZXRFbGVtZW50c0J5VGFnTmFtZShvKVswXTsgYS5hc3luYyA9IDE7IGEuc3JjID0gZzsgbS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLCBtKQ0KICAgICAgICB9KSh3aW5kb3csIGRvY3VtZW50LCAnc2NyaXB0JywgJy8vd3d3Lmdvb2dsZS1hbmFseXRpY3MuY29tL2FuYWx5dGljcy5qcycsICdnYScpOw0KDQogICAgICAgIGdhKCdjcmVhdGUnLCAnVUEtNzI5MTg1Mi00JywgJ2F1dG8nKTsNCiAgICAgICAgZ2EoJ3NlbmQnLCAncGFnZXZpZXcnKTsNCg0KICAgIDwvc2NyaXB0Pg0KDQoNCiAgICA8dGl0bGU+UG9ydCBNYWNxdWFyaWUtSGFzdGluZ3MgQ291bmNpbCAtIEFwcGxpY2F0aW9uIFRyYWNrZXI8L3RpdGxlPg0KDQogICAgPCEtLSBDdXN0b20gRm9udHMNCiAgICAgICAgPGxpbmsgaHJlZj0iL2ZvbnQtYXdlc29tZS9jc3MvZm9udC1hd2Vzb21lLm1pbi5jc3MiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPg0KICAgIC0tPg0KICAgIDwhLS0gSFRNTDUgU2hpbSBhbmQgUmVzcG9uZC5qcyBJRTggc3VwcG9ydCBvZiBIVE1MNSBlbGVtZW50cyBhbmQgbWVkaWEgcXVlcmllcyAtLT4NCiAgICA8IS0tIFdBUk5JTkc6IFJlc3BvbmQuanMgZG9lc24ndCB3b3JrIGlmIHlvdSB2aWV3IHRoZSBwYWdlIHZpYSBmaWxlOi8vIC0tPg0KICAgIDwhLS1baWYgbHQgSUUgOV0+DQogICAgICAgIDxzY3JpcHQgc3JjPSJodHRwczovL29zcy5tYXhjZG4uY29tL2xpYnMvaHRtbDVzaGl2LzMuNy4wL2h0bWw1c2hpdi5qcyI+PC9zY3JpcHQ+DQogICAgICAgIDxzY3JpcHQgc3JjPSJodHRwczovL29zcy5tYXhjZG4uY29tL2xpYnMvcmVzcG9uZC5qcy8xLjQuMi9yZXNwb25kLm1pbi5qcyI+PC9zY3JpcHQ+DQogICAgPCFbZW5kaWZdLS0+DQoNCiAgICA8bGluayBocmVmPSIvL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9Q2Fycm9pcytHb3RoaWMiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPg0KPC9oZWFkPg0KPGJvZHkgY2xhc3M9InN0YW5kYXJkIj4NCiAgICA8aGVhZGVyIGNsYXNzPSJjbGVhcmZpeCI+DQogICAgICAgIDxkaXYgc3R5bGU9IndpZHRoOiAxMDAlOyBiYWNrZ3JvdW5kLWNvbG9yOiAjNUQ5NzRDO2hlaWdodDoyMHB4ICI+PC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9nbyI+DQogICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvIj4NCiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9Db3VuY2lsX1RoZW1lL1BvcnRfTWFjcXVhcmllL2xvZ28ucG5nIiBhbHQ9IlBvcnQgTWFjcXVhcmllIEhhc3RpbmdzIExvZ28iIGlkPSJkaXNwbGF5LWxvZ28iIC8+DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InB1bGwtcmlnaHQiPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvaGVhZGVyPg0KICAgIDxkaXYgaWQ9ImNvbnRlbnQiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPg0KICAgICAgICAgICAgPGRpdiBpZD0ibmF2LWNvbnRhaW5lciIgc3R5bGU9ImRpc3BsYXk6bm9uZSI+DQogICAgICAgICAgICAgICAgPG5hdj48L25hdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJuYXZpZ2F0aW9uIiBjbGFzcz0iY29udGFpbmVyMSI+DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJob21lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cucG1oYy5uc3cuZ292LmF1L0hvbWUiPkhvbWU8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtMW5hdi1oYXMtY2hpbGRyZW4gbmF2LXNlY3Rpb24tdGhpcmRzLTEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvUmVzaWRlbnQtU2VydmljZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlc2lkZW50IFNlcnZpY2VzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtMiBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0xIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQWJvdXQtVXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFib3V0IFVzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtMyBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0xIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQnVzaW5lc3MiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJ1c2luZXNzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNCBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0yIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQnVpbGRpbmctUGxhbm5pbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJ1aWxkaW5nICZhbXA7IFBsYW5uaW5nDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNSBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0yIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQ29tbXVuaXR5LUZhY2lsaXRpZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvbW11bml0eSBGYWNpbGl0aWVzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNiBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0yIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQ3VsdHVyZS1TcG9ydC1MZWlzdXJlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdWx0dXJlLCBTcG9ydCAmYW1wOyBMZWlzdXJlDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNyBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0zIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvRm9ybXMtUGVybWl0cyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRm9ybXMgJmFtcDsgUGVybWl0cw0KICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxuYXYgY2xhc3M9Im5hdmJhciBuYXZiYXItZGVmYXVsdCBuYXZiYXItc3RhdGljLXRvcCIgcm9sZT0ibmF2aWdhdGlvbiIgc3R5bGU9Im1hcmdpbi1ib3R0b206IDAiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9Im5hdmJhci10b2dnbGUiIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgZGF0YS10YXJnZXQ9Ii5uYXZiYXItY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPlRvZ2dsZSBuYXZpZ2F0aW9uPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tYmFyIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1iYXIiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLWhlYWRlciAtLT4NCiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXZiYXItdG9wLWxpbmtzIG5hdmJhci1yaWdodCBoaWRkZW4teHMgaGlkZGVuLXNtIGhpZGRlbi1tZCI+DQogICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxzcGFuIGlkPSJwcmludEljb24iIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXByaW50IiBvbmNsaWNrPSJ3aW5kb3cucHJpbnQoKTsiPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItZGVmYXVsdCBzaWRlYmFyIiByb2xlPSJuYXZpZ2F0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2lkZWJhci1uYXYgbmF2YmFyLWNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IiBpZD0ic2lkZS1tZW51Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48aSBjbGFzcz0iZmEgZmEtbGlzdC11bCBmYS1mdyI+PC9pPkFwcGxpY2F0aW9uIFRyYWNrZXI8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9BYm91dCB0YXJnZXQ9X3NlbGY+V2hhdCBpcyBBcHBsaWNhdGlvbiBUcmFja2VyPzwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9EaXNjbGFpbWVyIHRhcmdldD1fc2VsZj5EaXNjbGFpbWVyPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gLy5uYXYtc2Vjb25kLWxldmVsIC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48aSBjbGFzcz0iZmEgZmEtbGlzdC11bCBmYS1mdyI+PC9pPkFwcGxpY2F0aW9uczxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXYtc2Vjb25kLWxldmVsIGNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL0luZGV4IHRhcmdldD0+QXBwbGljYXRpb24gVHJhY2tlciBIb21lPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL1NlYXJjaCBpZD1zZWFyY2ggdGFyZ2V0PV9zZWxmPlNlYXJjaDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/UmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1UcnVlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSBpZD1vdXRzdGFuZGluZy1hcHBzIHRhcmdldD1fc2VsZj5VbmRldGVybWluZWQgQXBwbGljYXRpb25zPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9SZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9VHJ1ZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIGlkPWV4aGliaXRlZC1hcHBzIHRhcmdldD1fc2VsZj5BcHBsaWNhdGlvbnMgT24gRXhoaWJpdGlvbjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjdGl2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbnMgU3VibWl0dGVkPHNwYW4gY2xhc3M9ImZhIGFycm93Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdi1zZWNvbmQtbGV2ZWwgY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTIxJTJmMDQlMmYyMDI1JkRhdGVUbz0yMiUyZjA0JTJmMjAyNSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPlRoaXMgV2VlazwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MTMlMmYwNCUyZjIwMjUmRGF0ZVRvPTE5JTJmMDQlMmYyMDI1JkRhdGVUeXBlPTEmUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBXZWVrPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDQlMmYyMDI1JkRhdGVUbz0yMiUyZjA0JTJmMjAyNSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPlRoaXMgTW9udGg8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTElMmYwMyUyZjIwMjUmRGF0ZVRvPTMxJTJmMDMlMmYyMDI1JkRhdGVUeXBlPTEmUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjdGl2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbnMgRGV0ZXJtaW5lZDxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXYtc2Vjb25kLWxldmVsIGNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0yMSUyZjA0JTJmMjAyNSZEYXRlVG89MjIlMmYwNCUyZjIwMjUmRGF0ZVR5cGU9MiZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9VHJ1ZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPlRoaXMgV2VlazwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MTMlMmYwNCUyZjIwMjUmRGF0ZVRvPTE5JTJmMDQlMmYyMDI1JkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5MYXN0IFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTElMmYwNCUyZjIwMjUmRGF0ZVRvPTIyJTJmMDQlMmYyMDI1JkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIE1vbnRoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDMlMmYyMDI1JkRhdGVUbz0zMSUyZjAzJTJmMjAyNSZEYXRlVHlwZT0yJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1UcnVlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8IS0tIC8uc2lkZWJhci1jb2xsYXBzZSAtLT4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLXN0YXRpYy1zaWRlIC0tPg0KICAgICAgICAgICAgPC9uYXY+DQogICAgICAgICAgICA8ZGl2IGlkPSJwYWdlLXdyYXBwZXIiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+DQogICAgICAgICAgICAgICAgICAgIA0KDQoNCiAgICA8ZGl2IGNsYXNzPSJwYWdlLWhlYWRlciI+DQogICAgICAgIDxoMj5BcHBsaWNhdGlvbjogRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24gKDEwLjIwMTkuMzAwLjEpPC9oMj4NCiAgICA8L2Rpdj4NCiAgICA8aDQ+RGV0YWlsZWQgaW5mb3JtYXRpb24gcmVsYXRlZCB0byB0aGUgYXBwbGljYXRpb246PC9oND4NCiAgICA8YnIgLz4NCiAgICA8ZGl2Pg0KICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnNob3dBbGwoKTsiPlNob3cgQWxsPC9hPiAvDQogICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6aGlkZUFsbCgpOyI+SGlkZSBBbGw8L2E+DQogICAgPC9kaXY+DQogICAgPGRpdiBpZD0iYXBwbGljYXRpb24iPg0KDQogICAgICAgICAgICA8aDMgaWQ9ImRldGFpbHMiPjxhIGhyZWY9IiMiPkRldGFpbHM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRlc2NyaXB0aW9uOiA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBpZD0iZGVzY3JpcHRpb24iPkFsdGVyYXRpb25zIGFuZCBBZGRpdGlvbnMgdG8gRHdlbGxpbmcgYXMgUGFydCBvZiBSZXNpZGVudGlhbCBGbGF0IEJ1aWxkaW5nPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlN1Ym1pdHRlZCBEYXRlOiA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI5LzA0LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFwcGxpY2F0aW9uIFR5cGU6IDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRldmVsb3BtZW50IEFwcGxpY2F0aW9uPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9InByb3BlcnRpZXMiPjxhIGhyZWY9IiMiPlByb3BlcnRpZXM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJwcm9wZXJ0eS1saXN0Ij4zLzExIExvcmQgU3QsIFBvcnQgTWFjcXVhcmllIE5TVyAyNDQ0ICAoTE9UOiAzIFNQOiAxNjEzNSk8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0icGVvcGxlIj48YSBocmVmPSIjIj5QZW9wbGU8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcHBsaWNhbnQ6IEthcmVuIEJ1cmtlIFJlZ2lzdGVyZWQgQXJjaGl0ZWN0IA0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE93bmVyIGF0IExvZGdlbWVudDogVG9uaSBVcHRpbg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBDQSBQcmluY2lwYWwgQ2VydGlmeWluZyBBdXRob3JpdHk6IFBvcnQgTWFjcXVhcmllLUhhc3RpbmdzIENvdW5jaWwgDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJvZmZpY2VyIj48YSBocmVmPSIjIj5PZmZpY2VyPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBpZD0ib2ZmaWNlck5hbWUiPkFuZHJldyBSb2NrPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9ImRlY2lzaW9uIj48YSBocmVmPSIjIj5EZWNpc2lvbjwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+QXBwbGljYXRpb24gU3RhdHVzOiBEZXRlcm1pbmVkPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZXRlcm1pbmF0aW9uIERhdGU6DQoyNC8wNy8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRldGVybWluYXRpb24gVHlwZTogQXBwcm92ZWQgLSBDb3VuY2lsIFN0YWZmPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9ImVzdGltYXRlZENvc3QiPjxhIGhyZWY9IiMiPkVzdGltYXRlZCBDb3N0PC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4kMzUsMDAwLjAwPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9InRyYWNraW5nIj48YSBocmVmPSIjIj5UcmFja2luZzwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaWNvbi13cmFwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPnN3aXBlIHRhYmxlIHRvIHRoZSBsZWZ0IHRvIHJldmVhbCBtb3JlIGRhdGE8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1hcnJvdy1yaWdodCIgYXJpYS1oaWRkZW49InRydWUiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtc3RyaXBlZCB0YWJsZS1ib3JkZXJlZCBuby1mb290ZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkRlc2NyaXB0aW9uPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkNvbW1lbmNlZCBEYXRlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkNvbXBsZXRlZCBEYXRlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlVuZGVyIEFzc2Vzc21lbnQgYnkgT2ZmaWNlcjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyOS8wNC8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjQvMDcvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5BbGxvY2F0ZWQgdG8gQXNzZXNzaW5nIE9mZmljZXI8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMDMvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjAzLzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+QWRkaXRpb25hbCBJbmZvcm1hdGlvbiBSZXF1ZXN0PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjAzLzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyNC8wNy8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFyZWEgUGxhbm5lciBSZWZlcnJhbDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQowMy8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjQvMDcvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Ob3RpZmljYXRpb24tTmVpZ2hib3VyaW5nPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjA4LzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyMS8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkV4aGliaXRpb24gY29weSB0byBQTVE8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMDgvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjIxLzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+RGV0ZXJtaW5hdGlvbiBJc3N1ZWQgKHRvIEFkbW4pPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI0LzA3LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyNS8wNy8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlBvc3RpbmctRGV0ZXJtaW5hdGlvbiBJc3N1ZWQ8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjUvMDcvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI1LzA3LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQoNCg0KDQoNCiAgICAgICAgICAgIDxoMyBpZD0icmVsYXRlZEFwcGxpY2F0aW9ucyI+PGEgaHJlZj0iIyI+UmVsYXRlZCBBcHBsaWNhdGlvbnM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24td3JhcCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5zd2lwZSB0YWJsZSB0byB0aGUgbGVmdCB0byByZXZlYWwgbW9yZSBkYXRhPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tYXJyb3ctcmlnaHQiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtYm9yZGVyZWQgbm8tZm9vdGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5BcHBsaWNhdGlvbiBUeXBlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkFwcGxpY2F0aW9uIE51bWJlcjwvdGg+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvbnN0cnVjdGlvbiBDZXJ0aWZpY2F0ZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2RhdHJhY2tlci5wbWhjLm5zdy5nb3YuYXUvQXBwbGljYXRpb24vQXBwbGljYXRpb25EZXRhaWxzLzAxMS4yMDE5LjAwMDAwMzAwLjAwMS8iPjExLjIwMTkuMzAwLjE8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPY2N1cGF0aW9uIENlcnRpZmljYXRlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZGF0cmFja2VyLnBtaGMubnN3Lmdvdi5hdS9BcHBsaWNhdGlvbi9BcHBsaWNhdGlvbkRldGFpbHMvMDEyLjIwMTkuMDAwMDAzMDAuMDAxLyI+MTIuMjAxOS4zMDAuMTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQoNCiAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQoNCg0KDQoNCg0KDQo8aDMgaWQ9ImRvY3VtZW50cyI+PGEgaHJlZj0iIyI+RG9jdW1lbnRzPC9hPjwvaDM+DQo8ZGl2Pg0KDQogICAgICAgIDxkaXYgY2xhc3M9Imljb24td3JhcCI+DQogICAgICAgICAgICA8c3Bhbj5zd2lwZSB0YWJsZSB0byB0aGUgbGVmdCB0byByZXZlYWwgbW9yZSBkYXRhPC9zcGFuPg0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tYXJyb3ctcmlnaHQiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L3NwYW4+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8ZGl2IGlkPSJkb2MtY291bnQiPlRvdGFsIG51bWJlciBvZiBkb2N1bWVudHM6IDU8L2Rpdj4NCiAgICAgICAgPHRhYmxlIGlkPSJkb2MtdGFibGUiIGNsYXNzPSJ0YWJsZSB0YWJsZS1zdHJpcGVkIHRhYmxlLWJvcmRlcmVkIG5vLWZvb3RlciI+DQogICAgICAgICAgICA8dGhlYWQ+DQogICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICA8dGg+UmVjb3JkIE51bWJlcjwvdGg+DQogICAgICAgICAgICAgICAgICAgIDx0aD5EZXNjcmlwdGlvbjwvdGg+DQogICAgICAgICAgICAgICAgICAgIDx0aD5Eb2N1bWVudCBUeXBlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgPHRoPlNpemU8L3RoPg0KICAgICAgICAgICAgICAgICAgICA8dGg+VmlldyBMaW5rPC90aD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgPC90aGVhZD4NCiAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCkQyMDE5LzI0MzY3NyAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjIwMTkgLSAzMDAuMSBQdWJsaWMgUGxhbnMgYW5kIERvY3VtZW50czwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIFBERg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgMC4zOSBNQg0KDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD48YSBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiByb2xlPSJidXR0b24iIGhyZWY9Imh0dHBzOi8vZGF0cmFja2VyLnBtaGMubnN3Lmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9OVY5OHlJVTJ4ZjA9JmFtcDtmaWxlTmFtZT0yMDE5Ky0rMzAwLjErUHVibGljK1BsYW5zK2FuZCtEb2N1bWVudHMuUERGIiB0YXJnZXQ9Il9ibGFuayI+VmlldzwvYT48L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQpEMjAxOS8zMDk1MzkgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4yMDE5IC0gMzAwIC0gU3RhbXBlZCBhcHByb3ZlZCBzaXRlIGFuZCBlbGV2YXRpb24gcGxhbiAtIERBPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgUERGDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLjIyIE1CDQoNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHJvbGU9ImJ1dHRvbiIgaHJlZj0iaHR0cHM6Ly9kYXRyYWNrZXIucG1oYy5uc3cuZ292LmF1L0RvY3VtZW50L0Rvd25sb2FkP2tleT1XYVMwU05UenBuOD0mYW1wO2ZpbGVOYW1lPTIwMTkrLSszMDArLStTdGFtcGVkK2FwcHJvdmVkK3NpdGUrYW5kK2VsZXZhdGlvbitwbGFuKy0rREEuUERGIiB0YXJnZXQ9Il9ibGFuayI+VmlldzwvYT48L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQpEMjAxOS8zMDk1NTQgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4yMDE5IC0gMzAwIC0gU3RhbXBlZCBhcHByb3ZlZCBmbG9vciBwbGFucyAtIERBPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgUERGDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLjEwIE1CDQoNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHJvbGU9ImJ1dHRvbiIgaHJlZj0iaHR0cHM6Ly9kYXRyYWNrZXIucG1oYy5uc3cuZ292LmF1L0RvY3VtZW50L0Rvd25sb2FkP2tleT1DQkgwbjROTWVzaz0mYW1wO2ZpbGVOYW1lPTIwMTkrLSszMDArLStTdGFtcGVkK2FwcHJvdmVkK2Zsb29yK3BsYW5zKy0rREEuUERGIiB0YXJnZXQ9Il9ibGFuayI+VmlldzwvYT48L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQpEMjAxOS8zMDk1NTggICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4yMDE5IC0gMzAwIC0gU3RhbXBlZCBhcHByb3ZlZCBTT0VFIC0gREE8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICBQREYNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAuMzUgTUINCg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+PGEgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgcm9sZT0iYnV0dG9uIiBocmVmPSJodHRwczovL2RhdHJhY2tlci5wbWhjLm5zdy5nb3YuYXUvRG9jdW1lbnQvRG93bmxvYWQ/a2V5PWVBWDlkQUpuaW53PSZhbXA7ZmlsZU5hbWU9MjAxOSstKzMwMCstK1N0YW1wZWQrYXBwcm92ZWQrU09FRSstK0RBLlBERiIgdGFyZ2V0PSJfYmxhbmsiPlZpZXc8L2E+PC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KRDIwMTkvMzEwODU4ICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+REEgQ29uc2VudCBBcHByb3ZhbCBTaW5nbGUgRHdlbGxpbmcgT25seSAtIDMgMTEgTG9yZCBTdHJlZXQgUE9SVCBNQUNRVUFSSUU8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICBQREYNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAuMzQgTUINCg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+PGEgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgcm9sZT0iYnV0dG9uIiBocmVmPSJodHRwczovL2RhdHJhY2tlci5wbWhjLm5zdy5nb3YuYXUvRG9jdW1lbnQvRG93bmxvYWQ/a2V5PTRHQXd0Mzc3eVk0PSZhbXA7ZmlsZU5hbWU9REErQ29uc2VudCtBcHByb3ZhbCtTaW5nbGUrRHdlbGxpbmcrT25seSstKzMrMTErTG9yZCtTdHJlZXQrUE9SVCtNQUNRVUFSSUUuUERGIiB0YXJnZXQ9Il9ibGFuayI+VmlldzwvYT48L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQoNCiAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgIDwvdGFibGU+DQo8L2Rpdj4NCg0KDQogICAgICAgICAgICA8aDMgaWQ9ImNvbnRhY3RVcyI+PGEgaHJlZj0iIyI+Q29udGFjdCBVczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQo8cD5UbyBtYWtlIGVucXVpcmllcyByZWdhcmRpbmcgYXBwbGljYXRpb25zIGRpc3BsYXllZCBoZXJlLCBjb250YWN0IHVzIGJ5IG9uZSBvZiB0aGUgZm9sbG93aW5nIG1ldGhvZHM6PC9wPg0KDQo8dWw+DQoJPGxpPmJ5IGVtYWlsIDxhIHN0eWxlPSJjb2xvcjogYmx1ZSIgaHJlZj0ibWFpbHRvOmNvdW5jaWxAcG1oYy5uc3cuZ292LmF1P3N1YmplY3Q9RW5xdWlyeSBmb3IgYXBwbGljYXRpb24gMTAuMjAxOS4zMDAuMSI+Y291bmNpbEBwbWhjLm5zdy5nb3YuYXU8L2E+LCA8L2xpPg0KCTxsaT5pbiB3cml0aW5nIHRvIFBPIEJveCA4NCBQb3J0IE1hY3F1YXJpZSBOU1cgMjQ0NC4gQWxsIGNvcnJlc3BvbmRlbmNlIHNob3VsZCBiZSBhZGRyZXNzZWQgdG8gdGhlIENoaWVmIEV4ZWN1dGl2ZSBPZmZpY2VyIChDRU8pIGFuZCBxdW90ZSB0aGUgcmVsZXZhbnQgYXBwbGljYXRpb24gcmVmZXJlbmNlIG51bWJlci48L2xpPg0KCTxsaT5ieSBjb250YWN0aW5nIHRoZSBhc3Nlc3Npbmcgb2ZmaWNlciAobm90ZWQgaW4gdGhlIG9mZmljZXIgc2VjdGlvbiBhYm92ZSkgYnkgcGhvbmluZyBDdXN0b21lciBTZXJ2aWNlIENlbnRyZSBvbiAoMDIpIDY1ODEgODExMSBkdXJpbmcgbm9ybWFsIG9mZmljZSBob3VycyAoTW9uZGF5IHRvIEZyaWRheSwgOC4zMGFtIHRvIDQuMzBwbSkuPC9saT4NCjwvdWw+DQo8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0ibm90aWZpZWRBZGRyZXNzZXMiPjxhIGhyZWY9IiMiPk5vdGlmaWVkIEFkZHJlc3NlczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgPG9sPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjExIExvcmQgU3QsIFBvcnQgTWFjcXVhcmllIE5TVyAyNDQ0IDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+MS8xMSBMb3JkIFN0LCBQb3J0IE1hY3F1YXJpZSBOU1cgMjQ0NCA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjIvMTEgTG9yZCBTdCwgUG9ydCBNYWNxdWFyaWUgTlNXIDI0NDQgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT40LzExIExvcmQgU3QsIFBvcnQgTWFjcXVhcmllIE5TVyAyNDQ0IDwvbGk+DQoNCiAgICAgICAgICAgICAgICAgICAgPC9vbD4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQo8aDMgaWQ9Imdvb2dsZW1hcHMiPjxhIGhyZWY9IiMiPkdvb2dsZSBNYXBzPC9hPjwvaDM+DQo8ZGl2IGlkPSJtYXBfY29udGFpbmVyIj4NCiAgICA8ZGl2IGlkPSJtYXBfY2FudmFzIiBjbGFzcz0iaWZyYW1lLXJ3ZCI+DQogICAgPC9kaXY+DQo8L2Rpdj4NCg0KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KDQogICAgd2luZG93Lm9ubG9hZCA9IGxvYWRHb29nbGVNYXBzU2NyaXB0Ow0KDQogICAgdmFyIGdlb2NvZGVyOw0KICAgIHZhciBtYXA7DQogICAgdmFyIHRpbWVvdXQgPSAzMDA7DQogICAgdmFyIHByb3BlcnRpZXMgPSBbIjMvMTEgTG9yZCBTdCwgUG9ydCBNYWNxdWFyaWUgTlNXIDI0NDQgIl07DQogICAgdmFyIGxhdExuZ0FyciA9IFtdOw0KDQogICAgZnVuY3Rpb24gbG9hZEdvb2dsZU1hcHNTY3JpcHQoKSB7DQogICAgICAgIHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzY3JpcHQiKTsNCiAgICAgICAgc2NyaXB0LnR5cGUgPSAidGV4dC9qYXZhc2NyaXB0IjsNCiAgICAgICAgc2NyaXB0LnNyYyA9ICIvL21hcHMuZ29vZ2xlYXBpcy5jb20vbWFwcy9hcGkvanM/a2V5PUFJemFTeUJWdGFHNFlqWHdmZ05qdENsenFOY1N5R1BPX2NLTUVSTSZjYWxsYmFjaz1sb2FkR29vZ2xlTWFwcyI7DQogICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2NyaXB0KTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiByZW5kZXJHb29nbGVNYXBzKCkNCiAgICB7DQogICAgICAgIHZhciBtYXBPcHRpb25zID0gew0KICAgICAgICAgICAgY2VudGVyOiBsYXRMbmdBcnJbMF0sDQogICAgICAgICAgICB6b29tOiAxNiwNCiAgICAgICAgICAgIG1hcFR5cGVJZDogZ29vZ2xlLm1hcHMuTWFwVHlwZUlkLlJPQURNQVAsDQogICAgICAgICAgICBtYXBUeXBlQ29udHJvbDogZmFsc2UNCiAgICAgICAgfQ0KDQogICAgICAgIG1hcCA9IG5ldyBnb29nbGUubWFwcy5NYXAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm1hcF9jYW52YXMiKSwgbWFwT3B0aW9ucyk7DQoNCiAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkRG9tTGlzdGVuZXIod2luZG93LCAncmVzaXplJywgZnVuY3Rpb24oKSB7DQogICAgICAgICAgICB2YXIgY2VudGVyID0gbWFwLmdldENlbnRlcigpOw0KICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQudHJpZ2dlcihtYXAsICdyZXNpemUnKTsNCiAgICAgICAgICAgIG1hcC5zZXRDZW50ZXIoY2VudGVyKTsNCiAgICAgICAgfSk7DQoNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBsb2FkR29vZ2xlTWFwcygpIHsNCiAgICAgICAgZ2VvY29kZXIgPSBuZXcgZ29vZ2xlLm1hcHMuR2VvY29kZXIoKTsNCiAgICAgICAgdmFyIG5vT2ZGYWlsZWRMb2NhdGlvblNlYXJjaCA9IDA7DQoNCiAgICAgICAgJChwcm9wZXJ0aWVzKS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkgew0KICAgICAgICAgICAgdmFyIHByb3BlcnR5QWRkcmVzcyA9IGVsZW1lbnQ7DQoNCiAgICAgICAgICAgIC8vR2V0IGdlb2NvZGUNCiAgICAgICAgICAgIGdlb2NvZGVyLmdlb2NvZGUoeyAnYWRkcmVzcyc6IHByb3BlcnR5QWRkcmVzcyB9LCBmdW5jdGlvbiAocmVzdWx0cywgc3RhdHVzKSB7DQogICAgICAgICAgICAgICAgaWYgKHN0YXR1cyA9PSBnb29nbGUubWFwcy5HZW9jb2RlclN0YXR1cy5PSykgew0KDQogICAgICAgICAgICAgICAgICAgIHZhciBsb2NhdGlvbiA9IHJlc3VsdHNbMF0uZ2VvbWV0cnkubG9jYXRpb247DQogICAgICAgICAgICAgICAgICAgIHZhciBsYXRMbmcgPSBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKGxvY2F0aW9uLmxhdCgpLCBsb2NhdGlvbi5sbmcoKSk7DQoNCiAgICAgICAgICAgICAgICAgICAgbGF0TG5nQXJyLnB1c2gobGF0TG5nKTsNCg0KICAgICAgICAgICAgICAgICAgICBpZihsYXRMbmdBcnIubGVuZ3RoID09IDEpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckdvb2dsZU1hcHMoKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgIC8vQ3JlYXRlIG1hcmtlciBmb3IgbWFwIGFuZCBwbGFjZSBpdCBvbiB0aGUgbWFwDQogICAgICAgICAgICAgICAgICAgIHZhciBtYXJrZXIgPSBuZXcgZ29vZ2xlLm1hcHMuTWFya2VyKHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBsYXRMbmcsDQogICAgICAgICAgICAgICAgICAgICAgICBtYXA6IG1hcA0KICAgICAgICAgICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgICAgICAgICB2YXIgY29udGVudFN0cmluZyA9ICc8ZGl2PjxzcGFuPicgKyBwcm9wZXJ0eUFkZHJlc3MgKyAnPC9zcGFuPjwvZGl2Pic7DQogICAgICAgICAgICAgICAgICAgIHZhciBpbmZvd2luZG93ID0gbmV3IGdvb2dsZS5tYXBzLkluZm9XaW5kb3coeyAgIC8vQ3JlYXRlIGluZm8gd2luZG93DQogICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBjb250ZW50U3RyaW5nDQogICAgICAgICAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKG1hcmtlciwgJ2NsaWNrJywgZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpbmZvd2luZG93Lm9wZW4obWFwLCBtYXJrZXIpOw0KICAgICAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgLy9pZiBubyBsb2NhdGlvbiBmb3VuZCBieSBnb29nbGUgZm9yIGEgcHJvcGVydHkNCiAgICAgICAgICAgICAgICBlbHNlIGlmIChzdGF0dXMgPT0gIlpFUk9fUkVTVUxUUyIpIHsNCiAgICAgICAgICAgICAgICAgICAgbm9PZkZhaWxlZExvY2F0aW9uU2VhcmNoKys7DQoNCiAgICAgICAgICAgICAgICAgICAgaWYobm9PZkZhaWxlZExvY2F0aW9uU2VhcmNoID09ICQocHJvcGVydGllcykubGVuZ3RoKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlR29vZ2xlTWFwc0NvbnRlbnQoKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0dXMgPT0gZ29vZ2xlLm1hcHMuR2VvY29kZXJTdGF0dXMuT1ZFUl9RVUVSWV9MSU1JVCkgew0KICAgICAgICAgICAgICAgICAgICAvL3NldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyBnZXRHZW9Db2RlRm9yQWRkcmVzcyhpZCwgYWRkcmVzcyk7IH0sICh0aW1lb3V0KSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSk7DQogICAgICAgIH0pOw0KICAgIH0NCg0KICAgIC8vUmVwbGFjZXMgZ29vZ2xlIG1hcHMgY29udGVudCB3aXRoIGEgbmV3IGRpdiBibG9jayB0aGF0IGhhcyBpbmZvIG1lc3NhZ2UNCiAgICBmdW5jdGlvbiByZXBsYWNlR29vZ2xlTWFwc0NvbnRlbnQoKSB7DQogICAgICAgIHZhciBuZXdDb250ZW50ID0gJzxkaXYgY2xhc3M9InVpLWFjY29yZGlvbi1jb250ZW50IHVpLWhlbHBlci1yZXNldCB1aS13aWRnZXQtY29udGVudCB1aS1jb3JuZXItYm90dG9tIj4nICsNCiAgICAgICAgICAgICc8cD5Db3VsZG5cJ3QgZmluZCB0aGUgcHJvcGVydHkgYWRkcmVzcyhlcykgb24gR29vZ2xlIE1hcHMuIDxwPicgKw0KICAgICAgICAgICAgJzwvZGl2Pic7DQoNCiAgICAgICAgJCgnI21hcF9jb250YWluZXInKS5yZXBsYWNlV2l0aChuZXdDb250ZW50KTsNCiAgICB9DQoNCjwvc2NyaXB0Pg0KDQogICAgPC9kaXY+DQogICAgPGRpdiBjbGFzcz0ibW9kYWwgZmFkZSIgaWQ9InN1Ym1pc3Npb24tbW9kYWwiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2ciPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3Bpbm5lciI+PC9kaXY+IDwhLS0gVGhpcyBkaXYgaG9zdHMgdGhlIHNwaW5uZXIgLS0+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImNsb3NlIiBkYXRhLWRpc21pc3M9Im1vZGFsIiBhcmlhLWxhYmVsPSJDbG9zZSI+PHNwYW4gYXJpYS1oaWRkZW49InRydWUiPiZ0aW1lczs8L3NwYW4+PC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0ibW9kYWwtdGl0bGUiPlN1Ym1pc3Npb24gZm9yIDEwLjIwMTkuMzAwLjE8L2gyPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCg0KICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHsNCg0KICAgICAgICAkKCcjYXBwbGljYXRpb24nKS50b2dnbGVwYW5lbHMoKTsNCg0KICAgICAgICAgICAgJCgnI3Byb3BlcnRpZXMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI2RldGFpbHMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI3RyYWNraW5nJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNkb2N1bWVudHMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI3JlbGF0ZWRBcHBsaWNhdGlvbnMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI2dvb2dsZW1hcHMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI2NvbnRhY3RVcycpLmNsaWNrKCk7DQoNCiAgICAgICAgDQoNCg0KICAgICAgICAkKCcjc3VibWlzc2lvbi1idG4nKS5jbGljayhmdW5jdGlvbiAoKSB7ICAgICAgICANCg0KDQogICAgICAgICAgICB2YXIgdXJsID0gImh0dHBzOi8vZGF0cmFja2VyLnBtaGMubnN3Lmdvdi5hdS8vQXBwbGljYXRpb24vU3VibWlzc2lvbi8iICsgZW5jb2RlVVJJKCIxMC4yMDE5LjMwMC4xIik7DQoNCiAgICAgICAgICAgICQoJyNzdWJtaXNzaW9uLW1vZGFsJykubW9kYWwoJ3Nob3cnKS5maW5kKCcubW9kYWwtYm9keScpLmxvYWQodXJsKTsNCiAgICAgICAgfSk7DQogICAgfSk7DQoNCg0KICAgIC8qIFNob3dzIGFsbCB0aGUgcGFuZWxzICovDQogICAgZnVuY3Rpb24gc2hvd0FsbCgpIHsNCiAgICAgICAgJCgnI2FwcGxpY2F0aW9uJykuY2hpbGRyZW4oImgzIikuZWFjaChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcygidWktc3RhdGUtZGVmYXVsdCIpKSB7DQogICAgICAgICAgICAgICAgJCh0aGlzKS5jbGljaygpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9KTsNCiAgICB9DQoNCg0KICAgIC8qIEhpZGUgYWxsIHRoZSBwYW5lbHMgKi8NCiAgICBmdW5jdGlvbiBoaWRlQWxsKCkgew0KICAgICAgICAkKCcjYXBwbGljYXRpb24nKS5jaGlsZHJlbigiaDMiKS5lYWNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKCJ1aS1zdGF0ZS1hY3RpdmUiKSkgew0KICAgICAgICAgICAgICAgICQodGhpcykuY2xpY2soKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSk7DQogICAgfQ0KDQogICAgPC9zY3JpcHQ+DQoNCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8uY29udGFpbmVyLWZsdWlkIC0tPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8Zm9vdGVyIGNsYXNzPSJmb290ZXIgZ3JpZCI+DQogICAgICAgICAgICA8ZGl2ID4NCiAgICAgICAgICAgICAgICDCqSBQb3J0IE1hY3F1YXJpZSBIYXN0aW5ncyBDb3VuY2lsDQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9mb290ZXI+DQogICAgPC9kaXY+DQo8L2JvZHk+DQo8L2h0bWw+DQo=
  recorded_at: Mon, 21 Apr 2025 18:27:35 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Application/ApplicationDetails/010.2019.00000300.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=aor3f1wlnl2fs31pazmxn505; User=accessAllowed-MasterView=True
      Host:
      - datracker.pmhc.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:27:45 GMT
      Content-Length:
      - '35681'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:27:45 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Application/ApplicationDetails/010.2019.00000336.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - datracker.pmhc.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 302
      message: Found
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Home/Disclaimer"
      Server:
      - Microsoft-IIS/8.5
      Set-Cookie:
      - ASP.NET_SessionId=wvghctgflcydwjnmbt1t5f3m; path=/; HttpOnly; SameSite=Lax
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:27:45 GMT
      Content-Length:
      - '133'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Home/Disclaimer\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:27:46 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Home/Disclaimer
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=wvghctgflcydwjnmbt1t5f3m
      Host:
      - datracker.pmhc.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:27:45 GMT
      Content-Length:
      - '19685'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQo8aHRtbCB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCIgeG1sOmxhbmc9ImVuIiBsYW5nPSJlbiI+DQoNCg0KDQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCIgLz4NCiAgICA8bWV0YSBodHRwLWVxdWl2PSJYLVVBLUNvbXBhdGlibGUiIGNvbnRlbnQ9IklFPWVkZ2UiIC8+DQogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xIiAvPg0KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIiAvPg0KICAgIDxtZXRhIG5hbWU9ImtleXdvcmRzIiBjb250ZW50PSJQb3J0IE1hY3F1YXJpZSBDb3VuY2lsLCBEQSBUcmFja2VyLEFwcGxpY2F0aW9uIFRyYWNrZXIsRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24sRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24gVHJhY2tpbmcsIERBIEVucXVpcnksIERldmVsb3BtZW50IEFwcGxpY2F0aW9uIEVucXVpcnksIEFwcGxpY2F0aW9uIFRyYWNrZXIiPg0KICAgIDxtZXRhIG5hbWU9ImRlc2NyaXB0aW9uIiBjb250ZW50PSJUaGUgb2ZmaWNpYWwgUG9ydCBNYWNxdWFyaWUgQ291bmNpbCBBcHBsaWNhdGlvbiBUcmFja2VyIj4NCg0KICAgIDwhLS1mYXZpY29uLS0+DQogICAgPGxpbmsgaHJlZj0iL0NvdW5jaWxfVGhlbWUvUG9ydF9NYWNxdWFyaWUvZmF2aWNvbi5pY28iICkiIHJlbD0ic2hvcnRjdXQgaWNvbiIgdHlwZT0iaW1hZ2UveC1pY29uIiAvPg0KDQogICAgPCEtLSBqUXVlcnkgLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS0xLjExLjEuanMiPjwvc2NyaXB0Pg0KDQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS11aS0xLjExLjIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvY29yZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvYWNjb3JkaW9uLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC90aGVtZXMvYmFzZS90aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQoNCiAgICA8IS0tIEJvb3RzdHJhcCAtLT4NCiAgICA8c2NyaXB0IHNyYz0iL1NjcmlwdHMvYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCg0KICAgIDxsaW5rIGhyZWY9Ii9Db250ZW50L2Jvb3RzdHJhcC10aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvYm9vdHN0cmFwLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9mb250LWF3ZXNvbWUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPCEtLSBEYXRhVGFibGVzIC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2pxdWVyeS5kYXRhVGFibGVzLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMuYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMucmVzcG9uc2l2ZS5qcyI+PC9zY3JpcHQ+DQoNCiAgICANCiAgICA8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLmJvb3RzdHJhcC5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvRGF0YVRhYmxlcy9jc3MvZGF0YVRhYmxlcy5yZXNwb25zaXZlLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLnJlc3BvbnNpdmUuc2NzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KDQogICAgPCEtLSBCb290c3RyYXAgU0ItQWRtaW4tMiBQbHVnaW4gYW5kIG90aGVyIGNzcyBhbmQganMgZmlsZXMtLT4NCiAgICA8c2NyaXB0IHNyYz0iL2pzL2Jvb3RzdHJhcC1jb21ib2JveC5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL2Jvb3RzdHJhcC1kYXRlcGlja2VyLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvYm9vdHN0cmFwLWRpYWxvZy5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL2pxdWVyeS5mb3JtLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvanF1ZXJ5LnRhYmxlc29ydGVyLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvbWFzdGVydmlldy5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL21ldGlzTWVudS5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL3NiLWFkbWluLTIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL2Nzcy9ib290c3RyYXAtY29tYm9ib3guY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvZGF0ZXBpY2tlcjMuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvbWFzdGVydmlldy1jdXN0b21pc2F0aW9ucy5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL2Nzcy9zYi1hZG1pbi0yLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDxsaW5rIGhyZWY9Ii9Db3VuY2lsX1RoZW1lL1BvcnRfTWFjcXVhcmllL1BvcnRfTWFjcXVhcmllLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ291bmNpbF9UaGVtZS9Qb3J0X01hY3F1YXJpZS9Qb3J0X01hY3F1YXJpZV9Nb2JpbGVWaWV3LmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICANCg0KICAgIDwhLS1pbmNsdWRlIGdvb2dsZSBhbmFseXRpY3MgY29kZS0tPg0KICAgIDxzY3JpcHQ+DQogICAgICAgIChmdW5jdGlvbiAoaSwgcywgbywgZywgciwgYSwgbSkgew0KICAgICAgICAgICAgaVsnR29vZ2xlQW5hbHl0aWNzT2JqZWN0J10gPSByOyBpW3JdID0gaVtyXSB8fCBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgKGlbcl0ucSA9IGlbcl0ucSB8fCBbXSkucHVzaChhcmd1bWVudHMpDQogICAgICAgICAgICB9LCBpW3JdLmwgPSAxICogbmV3IERhdGUoKTsgYSA9IHMuY3JlYXRlRWxlbWVudChvKSwNCiAgICAgICAgICAgICAgICBtID0gcy5nZXRFbGVtZW50c0J5VGFnTmFtZShvKVswXTsgYS5hc3luYyA9IDE7IGEuc3JjID0gZzsgbS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLCBtKQ0KICAgICAgICB9KSh3aW5kb3csIGRvY3VtZW50LCAnc2NyaXB0JywgJy8vd3d3Lmdvb2dsZS1hbmFseXRpY3MuY29tL2FuYWx5dGljcy5qcycsICdnYScpOw0KDQogICAgICAgIGdhKCdjcmVhdGUnLCAnVUEtNzI5MTg1Mi00JywgJ2F1dG8nKTsNCiAgICAgICAgZ2EoJ3NlbmQnLCAncGFnZXZpZXcnKTsNCg0KICAgIDwvc2NyaXB0Pg0KDQoNCiAgICA8dGl0bGU+UG9ydCBNYWNxdWFyaWUtSGFzdGluZ3MgQ291bmNpbCAtIEFwcGxpY2F0aW9uIFRyYWNrZXI8L3RpdGxlPg0KDQogICAgPCEtLSBDdXN0b20gRm9udHMNCiAgICAgICAgPGxpbmsgaHJlZj0iL2ZvbnQtYXdlc29tZS9jc3MvZm9udC1hd2Vzb21lLm1pbi5jc3MiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPg0KICAgIC0tPg0KICAgIDwhLS0gSFRNTDUgU2hpbSBhbmQgUmVzcG9uZC5qcyBJRTggc3VwcG9ydCBvZiBIVE1MNSBlbGVtZW50cyBhbmQgbWVkaWEgcXVlcmllcyAtLT4NCiAgICA8IS0tIFdBUk5JTkc6IFJlc3BvbmQuanMgZG9lc24ndCB3b3JrIGlmIHlvdSB2aWV3IHRoZSBwYWdlIHZpYSBmaWxlOi8vIC0tPg0KICAgIDwhLS1baWYgbHQgSUUgOV0+DQogICAgICAgIDxzY3JpcHQgc3JjPSJodHRwczovL29zcy5tYXhjZG4uY29tL2xpYnMvaHRtbDVzaGl2LzMuNy4wL2h0bWw1c2hpdi5qcyI+PC9zY3JpcHQ+DQogICAgICAgIDxzY3JpcHQgc3JjPSJodHRwczovL29zcy5tYXhjZG4uY29tL2xpYnMvcmVzcG9uZC5qcy8xLjQuMi9yZXNwb25kLm1pbi5qcyI+PC9zY3JpcHQ+DQogICAgPCFbZW5kaWZdLS0+DQoNCiAgICA8bGluayBocmVmPSIvL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9Q2Fycm9pcytHb3RoaWMiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPg0KPC9oZWFkPg0KPGJvZHkgY2xhc3M9InN0YW5kYXJkIj4NCiAgICA8aGVhZGVyIGNsYXNzPSJjbGVhcmZpeCI+DQogICAgICAgIDxkaXYgc3R5bGU9IndpZHRoOiAxMDAlOyBiYWNrZ3JvdW5kLWNvbG9yOiAjNUQ5NzRDO2hlaWdodDoyMHB4ICI+PC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9nbyI+DQogICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvIj4NCiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9Db3VuY2lsX1RoZW1lL1BvcnRfTWFjcXVhcmllL2xvZ28ucG5nIiBhbHQ9IlBvcnQgTWFjcXVhcmllIEhhc3RpbmdzIExvZ28iIGlkPSJkaXNwbGF5LWxvZ28iIC8+DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InB1bGwtcmlnaHQiPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvaGVhZGVyPg0KICAgIDxkaXYgaWQ9ImNvbnRlbnQiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPg0KICAgICAgICAgICAgPGRpdiBpZD0ibmF2LWNvbnRhaW5lciIgc3R5bGU9ImRpc3BsYXk6bm9uZSI+DQogICAgICAgICAgICAgICAgPG5hdj48L25hdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJuYXZpZ2F0aW9uIiBjbGFzcz0iY29udGFpbmVyMSI+DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJob21lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cucG1oYy5uc3cuZ292LmF1L0hvbWUiPkhvbWU8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtMW5hdi1oYXMtY2hpbGRyZW4gbmF2LXNlY3Rpb24tdGhpcmRzLTEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvUmVzaWRlbnQtU2VydmljZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlc2lkZW50IFNlcnZpY2VzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtMiBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0xIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQWJvdXQtVXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFib3V0IFVzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtMyBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0xIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQnVzaW5lc3MiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJ1c2luZXNzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNCBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0yIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQnVpbGRpbmctUGxhbm5pbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJ1aWxkaW5nICZhbXA7IFBsYW5uaW5nDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNSBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0yIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQ29tbXVuaXR5LUZhY2lsaXRpZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvbW11bml0eSBGYWNpbGl0aWVzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNiBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0yIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQ3VsdHVyZS1TcG9ydC1MZWlzdXJlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdWx0dXJlLCBTcG9ydCAmYW1wOyBMZWlzdXJlDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNyBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0zIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvRm9ybXMtUGVybWl0cyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRm9ybXMgJmFtcDsgUGVybWl0cw0KICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxuYXYgY2xhc3M9Im5hdmJhciBuYXZiYXItZGVmYXVsdCBuYXZiYXItc3RhdGljLXRvcCIgcm9sZT0ibmF2aWdhdGlvbiIgc3R5bGU9Im1hcmdpbi1ib3R0b206IDAiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9Im5hdmJhci10b2dnbGUiIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgZGF0YS10YXJnZXQ9Ii5uYXZiYXItY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPlRvZ2dsZSBuYXZpZ2F0aW9uPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tYmFyIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1iYXIiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLWhlYWRlciAtLT4NCiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXZiYXItdG9wLWxpbmtzIG5hdmJhci1yaWdodCBoaWRkZW4teHMgaGlkZGVuLXNtIGhpZGRlbi1tZCI+DQogICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxzcGFuIGlkPSJwcmludEljb24iIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXByaW50IiBvbmNsaWNrPSJ3aW5kb3cucHJpbnQoKTsiPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItZGVmYXVsdCBzaWRlYmFyIiByb2xlPSJuYXZpZ2F0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2lkZWJhci1uYXYgbmF2YmFyLWNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IiBpZD0ic2lkZS1tZW51Ij4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwhLS0gLy5zaWRlYmFyLWNvbGxhcHNlIC0tPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwhLS0gLy5uYXZiYXItc3RhdGljLXNpZGUgLS0+DQogICAgICAgICAgICA8L25hdj4NCiAgICAgICAgICAgIDxkaXYgaWQ9InBhZ2Utd3JhcHBlciI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyLWZsdWlkIj4NCiAgICAgICAgICAgICAgICAgICAgDQoNCg0KDQo8ZGl2IGNsYXNzPSJwYWdlLWhlYWRlciI+DQogICAgPGgyPkRpc2NsYWltZXI8L2gyPg0KPC9kaXY+DQoNCjxkaXYgaWQ9InNjcm9sbGFibGVDb250ZW50Ij4NCjxwIGNsYXNzPSJzZWN0aW9uIj4NClRoZSBBcHBsaWNhdGlvbiBUcmFja2VyIHRvb2wgc2hvd3Mga2V5IG1pbGVzdG9uZXMgaW4gdGhlIGFwcGxpY2F0aW9uIHByb2Nlc3MgZm9yIGRldmVsb3BtZW50IGFuZCBvdGhlciBhc3NvY2lhdGVkIGFwcHJvdmFscy4gSXQgaXMgbm90IGludGVuZGVkIHRvIHByb3ZpZGUgYSBkZXRhaWxlZCBoaXN0b3J5LCBidXQgYSBzdW1tYXJ5IG9mIHRoZSBzdGFnZXMgdGhhdCB0aGUgYXBwbGljYXRpb24gaGFzIGdvbmUgdGhyb3VnaC4gIA0KQW55IGluZm9ybWF0aW9uIGFib3V0IHRoZSBwcm9jZXNzaW5nIG9mIGFuIGFwcGxpY2F0aW9uIG9idGFpbmVkIHRocm91Z2ggQ291bmNpbOKAmXMgQXBwbGljYXRpb24gVHJhY2tlciB0b29sIGlzIGludGVuZGVkIGFzIGEgZ3VpZGUgb25seS4gQ291bmNpbCBkb2VzIG5vdCBhY2NlcHQgYW55IHJlc3BvbnNpYmlsaXR5IGZvciBsb3NzIG9yIGhhcm0gYXMgYSByZXN1bHQgb2YgaW5mb3JtYXRpb24gb2J0YWluZWQgYW5kIHJlbGllZCBvbiBmcm9tIHRoaXMgZmFjaWxpdHkuDQo8L3A+DQo8cCBjbGFzcz0ic2VjdGlvbiI+DQpUaGlzIHNlcnZpY2UgYXBwbGllcyB0byBhbGwgZGV2ZWxvcG1lbnQgYXBwbGljYXRpb25zIGFuZCBhc3NvY2lhdGVkIGFwcGxpY2F0aW9ucyAgZnJvbSAxIEphbnVhcnkgMjAwMiBvbndhcmRzLiBJZiB5b3UgZG9u4oCZdCBmaW5kIHRoZSBkb2N1bWVudCB5b3UgYXJlIGFmdGVyIHBsZWFzZSBjb250YWN0IENvdW5jaWwgZm9yIGEgY29weSB2aWEgPGEgaHJlZj0ibWFpbHRvOmNvdW5jaWxAcG1oYy5uc3cuZ292LmF1Ij5jb3VuY2lsQHBtaGMubnN3Lmdvdi5hdTwvYT4uDQo8L3A+DQoNCjxwIGNsYXNzPSJzZWN0aW9uIj48aDM+VGVybXMgYW5kIENvbmRpdGlvbnM8L2gzPjwvcD4NCjxwIGNsYXNzPSJzZWN0aW9uIj4NCjx1bD4NCgk8bGk+VXNlIG9mIHRoZSBBcHBsaWNhdGlvbiBUcmFja2VyIGlzIHN1YmplY3QgdG8geW91ciBhZ3JlZW1lbnQgdG8gdGhlIHRlcm1zIGFuZCBjb25kaXRpb25zLCBwcml2YWN5IGFuZCBjb3B5cmlnaHQgbGF3cy48L2xpPg0KCTxsaT5JIGFjY2VwdCB0aGF0IHVzZSBvZiB0aGUgZGF0YSBieSBtZSBzaGFsbCBiZSBsaW1pdGVkIHRvIG15IG93biBwZXJzb25hbCB1c2Ugb3IgZm9yIHRoZSB1c2UgaW4gdGhlIG9yZGluYXJ5IGNvdXJzZSBvZiBteSBidXNpbmVzcy4gSSBzaGFsbCBub3Qgb24tc2VsbCBvciBkaXN0cmlidXRlIHRoZSBkYXRhIGZvciByZXdhcmQgdG8gYW55IG90aGVyIHRoaXJkIHBhcnR5LCBub3Igc2hhbGwgSSBwcm9kdWNlIGFueSBoYXJkY29weSBwcm9kdWN0cywgaW5jb3Jwb3JhdGluZyB0aGUgZGF0YSBmb3IgY29tbWVyY2lhbCB1c2UuIDwvbGk+DQoJPGxpPkkgYWNjZXB0IHRoYXQgZGF0YSBtdXN0IG5vdCBiZSB1c2VkIGZvciBkaXJlY3QgbWFya2V0aW5nIG9yIGJlIHVzZWQgaW4gYnJlYWNoIG9mIHRoZSBQcml2YWN5IExhd3MuPC9saT4NCgk8bGk+VG8gdGhlIG1heGltdW0gZXh0ZW50IHBlcm1pdHRlZCBieSBsYXcsIENvdW5jaWwgZXhjbHVkZXMgYWxsIGxpYWJpbGl0eSB0byB5b3UgZm9yIGxvc3Mgb3IgZGFtYWdlIG9mIGFueSBraW5kIChob3dldmVyIGNhdXNlZCwgaW5jbHVkaW5nIGJ5IG5lZ2xpZ2VuY2UpIGFyaXNpbmcgZnJvbSBvciByZWxhdGluZyBpbiBhbnkgd2F5IHRvIHRoZSBjb250ZW50cyBvZiB0aGlzIHdlYnNpdGUgYW5kL29yIHlvdXIgdXNlIG9mIGl0LjwvbGk+DQoJPGxpPkFsbCBtYXR0ZXJzIHJlbGF0aW5nIHRvIHRoaXMgd2Vic2l0ZSBhcmUgZ292ZXJuZWQgYnkgdGhlIGxhd3Mgb2YgdGhlIFN0YXRlIG9mIE5ldyBTb3V0aCBXYWxlcywgQXVzdHJhbGlhLjwvbGk+DQoJPGxpPkJ5IGFjY2Vzc2luZyB0aGlzIGluZm9ybWF0aW9uIHlvdSByZXF1ZXN0IHRvIGRvIHNvIHVuZGVyIHRoZSA8aT5FbnZpcm9ubWVudGFsIFBsYW5uaW5nIGFuZCBBc3Nlc3NtZW50IEFjdCAxOTc5PC9pPiAoTlNXKSwgPGk+R292ZXJubWVudCBJbmZvcm1hdGlvbiAoUHVibGljIEFjY2VzcykgQWN0IDIwMDk8L2k+IChOU1cpIFtHSVBBXSBhbmQgeW91IHVuZGVyc3RhbmQgdGhhdCBDb3VuY2lsIGlzIG1ha2luZyB0aGUgaW5mb3JtYXRpb24gYXZhaWxhYmxlIHVuZGVyIHRoZSBwcm92aXNpb25zIG9mIEdvdmVybm1lbnQgSW5mb3JtYXRpb24gKFB1YmxpYyBBY2Nlc3MpIEFjdCwgMjAwOS48L2xpPg0KCTxsaT5Zb3UgbXVzdCBub3QgbW9kaWZ5LCBjb3B5LCByZXByb2R1Y2UsIHJlcHVibGlzaCwgdXBsb2FkIHRvIGEgdGhpcmQgcGFydHksIHRyYW5zbWl0IG9yIGRpc3RyaWJ1dGUgaW4gYW55IHdheSB0aGUgY29udGVudCBvZiB0aGlzIHdlYnNpdGUgZXhjZXB0IGFzIGV4cHJlc3NseSBwcm92aWRlZCBpbiB0aGVzZSBUZXJtcyBhbmQgQ29uZGl0aW9ucyBvciBhcyBwZXJtaXR0ZWQgYnkgdGhlIENvcHlyaWdodCBBY3QsIDE5NjggKENUSCkuPC9saT4NCgk8bGk+VGhlIFdvcmxkIFdpZGUgV2ViIGV4aXN0cyBhY3Jvc3Mgb3BlbiBwdWJsaWMgbmV0d29ya3MgdGhhdCBhcmUgbmVpdGhlciBzZWN1cmUgbm9yIHByaXZhdGUuIEFjY29yZGluZ2x5LCB0aGUgdXNlciBhY2tub3dsZWRnZXMgYW5kIGFjY2VwdHMgdGhlIHJpc2sgdGhhdCBhbnkgY29tbXVuaWNhdGlvbiB0byBvciBmcm9tIHRoaXMgd2Vic2l0ZSBtYXkgYmUgaW50ZXJjZXB0ZWQsIHVzZWQgb3IgbW9kaWZpZWQgYnkgdGhpcmQgcGFydGllcy48L2xpPg0KCTxsaT5Db3VuY2lsIGhhcyBtYWRlIGV2ZXJ5IGVmZm9ydCB0byBwcm92aWRlIGluZm9ybWF0aW9uIHRoYXQgaXMgYWNjdXJhdGUgYW5kIGVhc3kgdG8gdW5kZXJzdGFuZCwgYWx0aG91Z2gsIHRoZSBhY2N1cmFjeSBvZiB0aGUgaW5mb3JtYXRpb24gY2Fubm90IGJlIGd1YXJhbnRlZWQgYW5kIHNob3VsZCBub3QgYmUgcmVsaWVkIG9uIG90aGVyIHRoYW4gYXMgYSBnZW5lcmFsIGd1aWRlLiBJZiB5b3UgcmVxdWlyZSBtb3JlIHNwZWNpZmljIGluZm9ybWF0aW9uIHBsZWFzZSBjb250YWN0IENvdW5jaWwgYnkgb25lIG9mIHRoZSBmb2xsb3dpbmcgbWV0aG9kczogPC9saT4NCjwvdWw+PC9wPg0KDQoJPHAgY2xhc3M9InNlY3Rpb24iPg0KPHRhYmxlPg0KPHRyPg0KCQk8dGQ+UGhvbmU6IAkJPC90ZD4NCgkJPHRkPigwMikgNjU4MSA4MTExPC90ZD4NCgk8L3RyPg0KCTx0cj4NCgkJPHRkPkVtYWlsOiAJPC90ZD4NCgkJPHRkPjxhIGhyZWY9Im1haWx0bzpjb3VuY2lsQHBtaGMubnN3Lmdvdi5hdSI+Y291bmNpbEBwbWhjLm5zdy5nb3YuYXU8L2E+PC90ZD4NCgk8L3RyPg0KCTx0cj4NCgkJPHRkPlBvc3Q6IDwvdGQ+DQoJCTx0ZD5Qb3J0IE1hY3F1YXJpZS1IYXN0aW5ncyBDb3VuY2lsIDxicj4NCgkJUE8gQm94IDg0IDxicj4NCgkJCVBPUlQgTUFDUVVBUklFICBOU1cgIDI0NDQgPGJyPg0KPC90ZD4NCgk8L3RyPg0KPC90YWJsZT4NCjwvcD4NCg0KPHAgY2xhc3M9InNlY3Rpb24iPjxoMz5Qcml2YWN5ICYgUGVyc29uYWwgSW5mb3JtYXRpb248L2gzPjwvcD4NCjxwIGNsYXNzPSJzZWN0aW9uIj5Qb3J0IE1hY3F1YXJpZS1IYXN0aW5ncyBDb3VuY2lsIGhhcyBjZXJ0YWluIG9ibGlnYXRpb25zIGluIHJlbGF0aW9uIHRvIHRoZSBwZXJzb25hbCBpbmZvcm1hdGlvbiB0aGF0IGl0IG9idGFpbnMgZnJvbSBwZW9wbGUgd2hvIHVzZSBvdXIgd2Vic2l0ZS4gUGxlYXNlIHJlYWQgdGhpcyBzdGF0ZW1lbnQgdG8gZmluZCBvdXQgd2hhdCBpbmZvcm1hdGlvbiBDb3VuY2lsIGNvbGxlY3RzIGFib3V0IHlvdSwgd2h5IGl0IGlzIGNvbGxlY3RlZCBhbmQgd2hhdCBpcyBkb25lIHdpdGggaXQuPC9wPg0KDQoNCjxwIGNsYXNzPSJzZWN0aW9uIj48Yj5QZXJzb25hbCBJbmZvcm1hdGlvbjwvYj48L3A+DQo8cCBjbGFzcz0ic2VjdGlvbiI+SW4gY29tcGxldGluZyBhbnkgb2YgdGhlIGZvcm1zIGF2YWlsYWJsZSBvbiB0aGlzIHNpdGUgeW91IHdpbGwgcHJvdmlkZSBDb3VuY2lsIHdpdGggInBlcnNvbmFsIGluZm9ybWF0aW9uIi4gVGhpcyBpcyBkZWZpbmVkIGluIHRoZSBQcml2YWN5IGFuZCBQZXJzb25hbCBJbmZvcm1hdGlvbiBQcm90ZWN0aW9uIEFjdCAxOTk4ICgiUFBJUEEiKSB0byBiZSAiaW5mb3JtYXRpb24gb3IgYW4gb3BpbmlvbiBhYm91dCBhbiBpbmRpdmlkdWFsIHdob3NlIGlkZW50aXR5IGlzIGFwcGFyZW50IG9yIGNhbiByZWFzb25hYmx5IGJlIGFzY2VydGFpbmVkIGZyb20gdGhlIGluZm9ybWF0aW9uIG9yIG9waW5pb24iLiAgPC9wPg0KPHAgY2xhc3M9InNlY3Rpb24iPlBlcnNvbmFsIGluZm9ybWF0aW9uIGNvbGxlY3RlZCBieSBDb3VuY2lsIHdpbGwgaW5jbHVkZSB5b3VyIG5hbWUgYW5kIGFueSBvdGhlciBpbmZvcm1hdGlvbiBpbmNsdWRlZCBpbiB0aGUgZm9ybXMuIEZ1cnRoZXIsIHdoZW4geW91IHZpc2l0IENvdW5jaWwncyB3ZWJzaXRlIHRoZSBmb2xsb3dpbmcgaW5mb3JtYXRpb24gaXMgcmVjb3JkZWQgZm9yIHN0YXRpc3RpY2FsIHB1cnBvc2VzOjwvcD4NCg0KPHAgY2xhc3M9InNlY3Rpb24iPg0KCTx1bD4NCgkJPGxpPlRoZSBhZGRyZXNzIG9mIHlvdXIgc2VydmVyPC9saT4NCgkJPGxpPlRoZSB0b3AtbGV2ZWwgZG9tYWluIGZyb20gd2hpY2ggeW91IGFjY2Vzc2VkIHRoZSBJbnRlcm5ldCAoc3VjaCBhcyAuY29tLC5vcmcsLiBnb3YsIC5lZHUsIC5hdSwgLm56LCBldGMuKTwvbGk+DQoJCTxsaT5UaGUgdHlwZSBvZiBicm93c2VyIHVzZWQ8L2xpPg0KCQk8bGk+VGhlIGRhdGUgYW5kIHRpbWUgb2YgeW91ciB2aXNpdCB0byB0aGUgc2l0ZTwvbGk+DQoJCTxsaT5UaGUgcGFnZXMgeW91IHZpc2l0ZWQgYW5kIHRoZSBkb2N1bWVudHMgeW91IGRvd25sb2FkZWQ8L2xpPg0KCQk8bGk+VGhlIGxpbmtzIHlvdSBmb2xsb3dlZCB0byBjb21lIHRvIGFuZCBsZWF2ZSB0aGUgc2l0ZTwvbGk+DQoJCTxsaT5Bbnkgb3RoZXIgaW5mb3JtYXRpb24gdGhhdCBpcyByZWNvcmRlZC48L2xpPg0KCTwvdWw+DQo8L3A+DQoNCjxwIGNsYXNzPSJzZWN0aW9uIj5UaGlzIGluZm9ybWF0aW9uIGlzIHVzZWQgdG8gY3JlYXRlIHJlcG9ydHMgdG8gdGVsbCBDb3VuY2lsIHRoZSBudW1iZXIgb2YgdmlzaXRvcnMgdG8gdGhlIHNpdGUsIGFyZWFzIHZpc2l0ZWQgYW5kIHRlY2huaWNhbCBpbmZvcm1hdGlvbiBzdWNoIGFzIGJyb2tlbiBsaW5rcy4gPC9wPg0KPHAgY2xhc3M9InNlY3Rpb24iPlBlcnNvbmFsIGluZm9ybWF0aW9uIGNvbGxlY3RlZCBmcm9tIHlvdSBpcyBoZWxkIGFuZCB1c2VkIGJ5IENvdW5jaWwgYXMgcGVybWl0dGVkIGJ5IFByaXZhY3kgYW5kIFBlcnNvbmFsIEluZm9ybWF0aW9uIFByb3RlY3Rpb24gQWN0IDE5OTggKCJQUElQQSIpLiBVbmRlciBQUElQQSB5b3UgYXJlIGVudGl0bGVkIHRvIGJlIGluZm9ybWVkIG9mOjwvcD4NCg0KPHAgY2xhc3M9InNlY3Rpb24iPg0KCTx1bD4NCgkJPGxpPnRoZSBmYWN0IHRoYXQgcGVyc29uYWwgaW5mb3JtYXRpb24gaXMgYmVpbmcgY29sbGVjdGVkPC9saT4NCgkJPGxpPnRoZSBuYW1lIGFuZCBhZGRyZXNzIG9mIHRoZSBhZ2VuY3kgY29sbGVjdGluZyBhbmQgaG9sZGluZyB0aGUgaW5mb3JtYXRpb248L2xpPg0KCQk8bGk+dGhlIHB1cnBvc2VzIGZvciB3aGljaCB0aGUgaW5mb3JtYXRpb24gaXMgYmVpbmcgY29sbGVjdGVkPC9saT4NCgkJPGxpPnRoZSBwZXJzb25zIGFuZCBib2RpZXMgdG8gd2hvbSB0aGUgaW5mb3JtYXRpb24gd2lsbCBiZSBkaXNjbG9zZWQ8L2xpPg0KCQk8bGk+d2hldGhlciB0aGUgcHJvdmlzaW9uIG9mIHRoZSBpbmZvcm1hdGlvbiBpcyBtYW5kYXRvcnkgb3Igdm9sdW50YXJ5PC9saT4NCgkJPGxpPnRoZSBjb25zZXF1ZW5jZXMgKGlmIGFueSkgb2Ygbm90IHByb3ZpZGluZyB0aGUgaW5mb3JtYXRpb248L2xpPg0KCQk8bGk+eW91ciByaWdodCB1bmRlciBQUElQQSB0byBhcHBseSB0byBoYXZlIGFjY2VzcyB0byB5b3VyIGluZm9ybWF0aW9uIG9yIHRvIGhhdmUgaXQgY29ycmVjdGVkLjwvbGk+DQoJPC91bD4NCjwvcD4NCg0KPHAgY2xhc3M9InNlY3Rpb24iPkNvdW5jaWwgaGFzIHZhcmlvdXMgZnVuY3Rpb25zIHVuZGVyIHRoZSBFbnZpcm9ubWVudGFsIFBsYW5uaW5nIGFuZCBBc3Nlc3NtZW50IEFjdCwgMTk3OSwgdGhlIExvY2FsIEdvdmVybm1lbnQgQWN0IDE5OTMgYW5kIG90aGVyIGxlZ2lzbGF0aW9uLiBQZXJzb25hbCBpbmZvcm1hdGlvbiBpcyBjb2xsZWN0ZWQgdG8gZW5hYmxlIENvdW5jaWwgdG8gcGVyZm9ybSB0aGUgZnVuY3Rpb25zIHVuZGVyIHRoZXNlIEFjdHMuIDwvcD4NCjxwIGNsYXNzPSJzZWN0aW9uIj5VbmRlciBQUElQQSwgb3RoZXIgYWdlbmNpZXMgKHBhcnRpY3VsYXJseSBsYXcgZW5mb3JjZW1lbnQgYWdlbmNpZXMpIG1heSBoYXZlIHRoZSByaWdodCB0byBnYWluIGFjY2VzcyB0byBwZXJzb25hbCBpbmZvcm1hdGlvbiBhYm91dCB5b3UgdGhhdCBDb3VuY2lsIGhvbGRzLiBJbmRlZWQsIHNvbWUgYWdlbmNpZXMgKHBhcnRpY3VsYXJseSBsYXcgZW5mb3JjZW1lbnQgYWdlbmNpZXMpIGhhdmUgbGVnYWwgYXV0aG9yaXR5IHRvIGluc3BlY3Qgb3VyIEludGVybmV0IFNlcnZpY2UgUHJvdmlkZXJzJyBsb2dzIGFuZCBvYnRhaW4geW91ciBhZGRyZXNzIGlmIHJlcXVpcmVkIGZvciBhbiBvZmZpY2lhbCBpbnZlc3RpZ2F0aW9uLiA8L3A+DQo8cCBjbGFzcz0ic2VjdGlvbiI+Q291bmNpbCByZWNvcmRzIG1heSBiZSBhdmFpbGFibGUgZm9yIHB1YmxpYyBpbnNwZWN0aW9uIGFuZCBjb3B5aW5nLCBpbmNsdWRpbmcgdW5kZXIgdGhlIEdvdmVybm1lbnQgSW5mb3JtYXRpb24gKFB1YmxpYyBBY2Nlc3MpIEFjdCAyMDA5LjwvcD4NCjxwIGNsYXNzPSJzZWN0aW9uIj48L3A+DQoNCjxwIGNsYXNzPSJzZWN0aW9uIj48aDM+Q29weXJpZ2h0PC9oMz48L3A+DQo8cCBjbGFzcz0ic2VjdGlvbiI+VGhlIGNvbnRlbnRzIG9mIHRoaXMgd2Vic2l0ZSAod2hpY2ggaW5jbHVkZXMgZG93bmxvYWRhYmxlIG1hdGVyaWFsKSBhcmUgc3ViamVjdCB0byBjb3B5cmlnaHQgYW5kIGFyZSBwcm90ZWN0ZWQgYnkgbGF3cyBvZiBBdXN0cmFsaWEgYW5kIG90aGVyIGNvdW50cmllcyB0aHJvdWdoIGludGVybmF0aW9uYWwgdHJlYXRpZXMuPC9wPg0KPHAgY2xhc3M9InNlY3Rpb24iPlBvcnQgTWFjcXVhcmllLUhhc3RpbmdzIENvdW5jaWwgZ3JhbnRzIHlvdSBhIG5vbi1leGNsdXNpdmUgbGljZW5jZSB0byByZXByb2R1Y2UgdGhlIGNvbnRlbnRzIG9mIHRoaXMgd2Vic2l0ZSBpbiB5b3VyIHdlYiBicm93c2VyIChhbmQgaW4gYW55IGNhY2hlIGZpbGUgcHJvZHVjZWQgYnkgeW91ciB3ZWIgYnJvd3NlcikgZm9yIHRoZSBzb2xlIHB1cnBvc2Ugb2Ygdmlld2luZyB0aGUgY29udGVudC4gQ291bmNpbCByZXNlcnZlcyBhbGwgb3RoZXIgcmlnaHRzLjwvcD4NCjxwIGNsYXNzPSJzZWN0aW9uIj5CeSBhZ3JlZWluZyB0byB1c2UgdGhpcyBzeXN0ZW0geW91IGFncmVlIHRvIGluZGVtbmlmeSBDb3VuY2lsIGFnYWluc3QgYW55IGluZnJpbmdlbWVudCBieSB5b3Ugb2YgYW55IHRoaXJkIHBhcnR5IEludGVsbGVjdHVhbCBQcm9wZXJ0eSByaWdodHMsIGluY2x1ZGluZyBDb3B5cmlnaHQuPC9wPg0KDQo8L2Rpdj4NCg0KPHAgY2xhc3M9InNlY3Rpb24iPg0KPC9icj4NCjxiPkkgaGF2ZSByZWFkIGFuZCB1bmRlcnN0b29kIHRoZSBwcm92aXNpb25zIHNldCBvdXQgYWJvdmUuPC9iPg0KPC9wPg0KPC9icj4NCg0KDQoNCg0KPGZvcm0gYWN0aW9uPSIvaG9tZS9kaXNjbGFpbWVycHJvY2Vzc2luZyIgaWQ9ImRpc2NsYWltZXItZm9ybSIgbWV0aG9kPSJwb3N0Ij48aW5wdXQgaWQ9ImFncmVlZCIgbmFtZT0iYWdyZWVkIiB0eXBlPSJoaWRkZW4iIHZhbHVlPSJGYWxzZSIgLz4gICAgPGRpdiBpZD0iYnRucyI+DQogICAgICAgIDxidXR0b24gaWQ9ImFncmVlIiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIGZvcm09ImRpc2NsYWltZXItZm9ybSI+QWdyZWU8L2J1dHRvbj4NCiAgICAgICAgPGJ1dHRvbiBpZD0iZGlzYWdyZWUiIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4td2FybmluZyIgZm9ybT0iZGlzY2xhaW1lci1mb3JtIj5EaXNhZ3JlZTwvYnV0dG9uPg0KICAgIDwvZGl2Pg0KPC9mb3JtPg0KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KDQogICAgdmFyIGxhc3RTY3JvbGxUb3A7DQogICAgdmFyIG1heFNjcm9sbGFibGVDb250ZW50SGVpZ2h0Ow0KDQogICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkgew0KDQogICAgICAgIHVwZGF0ZUxlZnRNYXJnaW4oKTsNCiAgICAgICAgYXR0YWNoQ2xpY2tIYW5kbGVycygpOw0KDQogICAgICAgIGlmIChpc1RleHRCbG9ja092ZXJmbG93aW5nKCkpIHsNCiAgICAgICAgICAgIGxhc3RTY3JvbGxUb3AgPSAwOzsNCiAgICAgICAgICAgIHZhciB3aW5kb3dIZWlnaHQgPSAkKHdpbmRvdykuaGVpZ2h0KCk7DQoNCiAgICAgICAgICAgIHZhciBoZWFkZXJIZWlnaHQgPSAkKCcjc2Nyb2xsYWJsZUNvbnRlbnQnKS5vZmZzZXQoKS50b3A7DQogICAgICAgICAgICB2YXIgbmV3SGVpZ2h0ID0gZ2V0TmV3SGVpZ2h0KCk7DQoNCiAgICAgICAgICAgIGFkanVzdERpc2NsYWltZXJDb250ZW50Rm9yRG93blNjcm9sbChuZXdIZWlnaHQpOw0KDQogICAgICAgICAgICAkKHdpbmRvdykuc2Nyb2xsKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICB2YXIgbkhlaWdodCA9ICQod2luZG93KS5oZWlnaHQoKSAtIChoZWFkZXJIZWlnaHQgLSAkKHdpbmRvdykuc2Nyb2xsVG9wKCkgKyAkKCdmb3JtJykuaGVpZ2h0KCkgKyAxMDApOw0KDQogICAgICAgICAgICAgICAgdmFyIGJJc0Rvd25TY3JvbGwgPSBpc1Njcm9sbERvd24oKTsNCg0KICAgICAgICAgICAgICAgIGlmIChiSXNEb3duU2Nyb2xsKQ0KICAgICAgICAgICAgICAgICAgICBhZGp1c3REaXNjbGFpbWVyQ29udGVudEZvckRvd25TY3JvbGwobkhlaWdodCk7DQogICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgICAgICBhZGp1c3REaXNjbGFpbWVyQ29udGVudEZvclVwU2Nyb2xsKG5IZWlnaHQpOw0KICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIGdldE5ld0hlaWdodCgpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gJCh3aW5kb3cpLmhlaWdodCgpIC0gKGhlYWRlckhlaWdodCArICQod2luZG93KS5zY3JvbGxUb3AoKSArICQoJ2Zvcm0nKS5oZWlnaHQoKSArIDEwMCk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIGlzU2Nyb2xsRG93bigpIHsNCiAgICAgICAgICAgICAgICB2YXIgc3QgPSAkKHdpbmRvdykuc2Nyb2xsVG9wKCk7DQogICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHN0ID49IGxhc3RTY3JvbGxUb3A7CQkgIC8vIGRvd25zY3JvbGwNCg0KICAgICAgICAgICAgICAgIGxhc3RTY3JvbGxUb3AgPSBzdDsNCiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0Ow0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBmdW5jdGlvbiBoYXNTY3JvbGxCYXIoaXRlbSkgew0KICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLmdldCgwKS5zY3JvbGxIZWlnaHQgPiBpdGVtLmdldCgwKS5jbGllbnRIZWlnaHQ7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIGFkanVzdERpc2NsYWltZXJDb250ZW50Rm9yRG93blNjcm9sbChuSGVpZ2h0KSB7DQogICAgICAgICAgICAgICAgdmFyIGlzU2Nyb2xsYWJsZSA9IGhhc1Njcm9sbEJhcigkKCcjc2Nyb2xsYWJsZUNvbnRlbnQnKSk7DQogICAgICAgICAgICAgICAgaWYgKGlzU2Nyb2xsYWJsZSkgew0KICAgICAgICAgICAgICAgICAgICAkKCcjc2Nyb2xsYWJsZUNvbnRlbnQnKS5oZWlnaHQobkhlaWdodCk7DQogICAgICAgICAgICAgICAgICAgIG1heFNjcm9sbGFibGVDb250ZW50SGVpZ2h0ID0gbkhlaWdodDsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIGFkanVzdERpc2NsYWltZXJDb250ZW50Rm9yVXBTY3JvbGwobkhlaWdodCkgew0KICAgICAgICAgICAgICAgIHZhciBpc1Njcm9sbGFibGUgPSBoYXNTY3JvbGxCYXIoJCgnI3Njcm9sbGFibGVDb250ZW50JykpOw0KDQogICAgICAgICAgICAgICAgaWYgKG1heFNjcm9sbGFibGVDb250ZW50SGVpZ2h0ID4gbkhlaWdodCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICQoJyNzY3JvbGxhYmxlQ29udGVudCcpLmhlaWdodChuSGVpZ2h0KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9KTsNCg0KDQogICAgZnVuY3Rpb24gdXBkYXRlTGVmdE1hcmdpbigpIHsNCiAgICAgICAgaWYgKCQoJyNzaWRlLW1lbnUnKS5odG1sKCkpIHsNCiAgICAgICAgICAgICQoJyNwYWdlLXdyYXBwZXInKS5jc3MoeyAnbWFyZ2luLWxlZnQnOiAnMCcgfSk7DQogICAgICAgICAgICAkKCcuc2lkZWJhcicpLmhpZGUoKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KDQogICAgZnVuY3Rpb24gYXR0YWNoQ2xpY2tIYW5kbGVycygpIHsNCiAgICAgICAgJCgnI2FncmVlJykuY2xpY2soZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgJCgnI2FncmVlZCcpLnZhbCgidHJ1ZSIpOw0KICAgICAgICAgICAgJCgnI2Rpc2NsYWltZXItZm9ybScpLnN1Ym1pdCgpOw0KICAgICAgICB9KTsNCg0KICAgICAgICAkKCcjZGlzYWdyZWUnKS5jbGljayhmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAkKCcjYWdyZWVkJykudmFsKCJmYWxzZSIpOw0KICAgICAgICAgICAgJCgnI2Rpc2NsYWltZXItZm9ybScpLnN1Ym1pdCgpOw0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBpc1RleHRCbG9ja092ZXJmbG93aW5nKCkgew0KICAgICAgICByZXR1cm4gJCgiI3Njcm9sbGFibGVDb250ZW50IikucHJvcCgnc2Nyb2xsSGVpZ2h0JykgPiAkKCIjc2Nyb2xsYWJsZUNvbnRlbnQiKS5oZWlnaHQoKTsNCiAgICB9DQo8L3NjcmlwdD4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8uY29udGFpbmVyLWZsdWlkIC0tPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8Zm9vdGVyIGNsYXNzPSJmb290ZXIgZ3JpZCI+DQogICAgICAgICAgICA8ZGl2ID4NCiAgICAgICAgICAgICAgICDCqSBQb3J0IE1hY3F1YXJpZSBIYXN0aW5ncyBDb3VuY2lsDQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9mb290ZXI+DQogICAgPC9kaXY+DQo8L2JvZHk+DQo8L2h0bWw+DQo=
  recorded_at: Mon, 21 Apr 2025 18:27:46 GMT
- request:
    method: post
    uri: https://datracker.pmhc.nsw.gov.au/home/disclaimerprocessing
    body:
      encoding: UTF-8
      string: agreed=true
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=wvghctgflcydwjnmbt1t5f3m
      Host:
      - datracker.pmhc.nsw.gov.au
      Referer:
      - https://datracker.pmhc.nsw.gov.au/Home/Disclaimer
      Content-Type:
      - application/x-www-form-urlencoded
      Content-Length:
      - '11'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Application/ApplicationDetails/010.2019.00000336.001"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      Set-Cookie:
      - User=accessAllowed-MasterView=True; path=/
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:27:45 GMT
      Content-Length:
      - '170'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Application/ApplicationDetails/010.2019.00000336.001\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:27:46 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Application/ApplicationDetails/010.2019.00000336.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=wvghctgflcydwjnmbt1t5f3m; User=accessAllowed-MasterView=True
      Host:
      - datracker.pmhc.nsw.gov.au
      Referer:
      - https://datracker.pmhc.nsw.gov.au/Home/Disclaimer
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:27:56 GMT
      Content-Length:
      - '33310'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQo8aHRtbCB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCIgeG1sOmxhbmc9ImVuIiBsYW5nPSJlbiI+DQoNCg0KDQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCIgLz4NCiAgICA8bWV0YSBodHRwLWVxdWl2PSJYLVVBLUNvbXBhdGlibGUiIGNvbnRlbnQ9IklFPWVkZ2UiIC8+DQogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xIiAvPg0KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIiAvPg0KICAgIDxtZXRhIG5hbWU9ImtleXdvcmRzIiBjb250ZW50PSJQb3J0IE1hY3F1YXJpZSBDb3VuY2lsLCBEQSBUcmFja2VyLEFwcGxpY2F0aW9uIFRyYWNrZXIsRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24sRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24gVHJhY2tpbmcsIERBIEVucXVpcnksIERldmVsb3BtZW50IEFwcGxpY2F0aW9uIEVucXVpcnksIEFwcGxpY2F0aW9uIFRyYWNrZXIiPg0KICAgIDxtZXRhIG5hbWU9ImRlc2NyaXB0aW9uIiBjb250ZW50PSJUaGUgb2ZmaWNpYWwgUG9ydCBNYWNxdWFyaWUgQ291bmNpbCBBcHBsaWNhdGlvbiBUcmFja2VyIj4NCg0KICAgIDwhLS1mYXZpY29uLS0+DQogICAgPGxpbmsgaHJlZj0iL0NvdW5jaWxfVGhlbWUvUG9ydF9NYWNxdWFyaWUvZmF2aWNvbi5pY28iICkiIHJlbD0ic2hvcnRjdXQgaWNvbiIgdHlwZT0iaW1hZ2UveC1pY29uIiAvPg0KDQogICAgPCEtLSBqUXVlcnkgLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS0xLjExLjEuanMiPjwvc2NyaXB0Pg0KDQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS11aS0xLjExLjIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvY29yZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvYWNjb3JkaW9uLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC90aGVtZXMvYmFzZS90aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQoNCiAgICA8IS0tIEJvb3RzdHJhcCAtLT4NCiAgICA8c2NyaXB0IHNyYz0iL1NjcmlwdHMvYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCg0KICAgIDxsaW5rIGhyZWY9Ii9Db250ZW50L2Jvb3RzdHJhcC10aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvYm9vdHN0cmFwLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9mb250LWF3ZXNvbWUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPCEtLSBEYXRhVGFibGVzIC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2pxdWVyeS5kYXRhVGFibGVzLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMuYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMucmVzcG9uc2l2ZS5qcyI+PC9zY3JpcHQ+DQoNCiAgICANCiAgICA8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLmJvb3RzdHJhcC5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvRGF0YVRhYmxlcy9jc3MvZGF0YVRhYmxlcy5yZXNwb25zaXZlLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLnJlc3BvbnNpdmUuc2NzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KDQogICAgPCEtLSBCb290c3RyYXAgU0ItQWRtaW4tMiBQbHVnaW4gYW5kIG90aGVyIGNzcyBhbmQganMgZmlsZXMtLT4NCiAgICA8c2NyaXB0IHNyYz0iL2pzL2Jvb3RzdHJhcC1jb21ib2JveC5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL2Jvb3RzdHJhcC1kYXRlcGlja2VyLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvYm9vdHN0cmFwLWRpYWxvZy5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL2pxdWVyeS5mb3JtLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvanF1ZXJ5LnRhYmxlc29ydGVyLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvbWFzdGVydmlldy5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL21ldGlzTWVudS5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL3NiLWFkbWluLTIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL2Nzcy9ib290c3RyYXAtY29tYm9ib3guY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvZGF0ZXBpY2tlcjMuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvbWFzdGVydmlldy1jdXN0b21pc2F0aW9ucy5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL2Nzcy9zYi1hZG1pbi0yLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDxsaW5rIGhyZWY9Ii9Db3VuY2lsX1RoZW1lL1BvcnRfTWFjcXVhcmllL1BvcnRfTWFjcXVhcmllLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ291bmNpbF9UaGVtZS9Qb3J0X01hY3F1YXJpZS9Qb3J0X01hY3F1YXJpZV9Nb2JpbGVWaWV3LmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICANCg0KICAgIDwhLS1pbmNsdWRlIGdvb2dsZSBhbmFseXRpY3MgY29kZS0tPg0KICAgIDxzY3JpcHQ+DQogICAgICAgIChmdW5jdGlvbiAoaSwgcywgbywgZywgciwgYSwgbSkgew0KICAgICAgICAgICAgaVsnR29vZ2xlQW5hbHl0aWNzT2JqZWN0J10gPSByOyBpW3JdID0gaVtyXSB8fCBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgKGlbcl0ucSA9IGlbcl0ucSB8fCBbXSkucHVzaChhcmd1bWVudHMpDQogICAgICAgICAgICB9LCBpW3JdLmwgPSAxICogbmV3IERhdGUoKTsgYSA9IHMuY3JlYXRlRWxlbWVudChvKSwNCiAgICAgICAgICAgICAgICBtID0gcy5nZXRFbGVtZW50c0J5VGFnTmFtZShvKVswXTsgYS5hc3luYyA9IDE7IGEuc3JjID0gZzsgbS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLCBtKQ0KICAgICAgICB9KSh3aW5kb3csIGRvY3VtZW50LCAnc2NyaXB0JywgJy8vd3d3Lmdvb2dsZS1hbmFseXRpY3MuY29tL2FuYWx5dGljcy5qcycsICdnYScpOw0KDQogICAgICAgIGdhKCdjcmVhdGUnLCAnVUEtNzI5MTg1Mi00JywgJ2F1dG8nKTsNCiAgICAgICAgZ2EoJ3NlbmQnLCAncGFnZXZpZXcnKTsNCg0KICAgIDwvc2NyaXB0Pg0KDQoNCiAgICA8dGl0bGU+UG9ydCBNYWNxdWFyaWUtSGFzdGluZ3MgQ291bmNpbCAtIEFwcGxpY2F0aW9uIFRyYWNrZXI8L3RpdGxlPg0KDQogICAgPCEtLSBDdXN0b20gRm9udHMNCiAgICAgICAgPGxpbmsgaHJlZj0iL2ZvbnQtYXdlc29tZS9jc3MvZm9udC1hd2Vzb21lLm1pbi5jc3MiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPg0KICAgIC0tPg0KICAgIDwhLS0gSFRNTDUgU2hpbSBhbmQgUmVzcG9uZC5qcyBJRTggc3VwcG9ydCBvZiBIVE1MNSBlbGVtZW50cyBhbmQgbWVkaWEgcXVlcmllcyAtLT4NCiAgICA8IS0tIFdBUk5JTkc6IFJlc3BvbmQuanMgZG9lc24ndCB3b3JrIGlmIHlvdSB2aWV3IHRoZSBwYWdlIHZpYSBmaWxlOi8vIC0tPg0KICAgIDwhLS1baWYgbHQgSUUgOV0+DQogICAgICAgIDxzY3JpcHQgc3JjPSJodHRwczovL29zcy5tYXhjZG4uY29tL2xpYnMvaHRtbDVzaGl2LzMuNy4wL2h0bWw1c2hpdi5qcyI+PC9zY3JpcHQ+DQogICAgICAgIDxzY3JpcHQgc3JjPSJodHRwczovL29zcy5tYXhjZG4uY29tL2xpYnMvcmVzcG9uZC5qcy8xLjQuMi9yZXNwb25kLm1pbi5qcyI+PC9zY3JpcHQ+DQogICAgPCFbZW5kaWZdLS0+DQoNCiAgICA8bGluayBocmVmPSIvL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9Q2Fycm9pcytHb3RoaWMiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPg0KPC9oZWFkPg0KPGJvZHkgY2xhc3M9InN0YW5kYXJkIj4NCiAgICA8aGVhZGVyIGNsYXNzPSJjbGVhcmZpeCI+DQogICAgICAgIDxkaXYgc3R5bGU9IndpZHRoOiAxMDAlOyBiYWNrZ3JvdW5kLWNvbG9yOiAjNUQ5NzRDO2hlaWdodDoyMHB4ICI+PC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9nbyI+DQogICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvIj4NCiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9Db3VuY2lsX1RoZW1lL1BvcnRfTWFjcXVhcmllL2xvZ28ucG5nIiBhbHQ9IlBvcnQgTWFjcXVhcmllIEhhc3RpbmdzIExvZ28iIGlkPSJkaXNwbGF5LWxvZ28iIC8+DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InB1bGwtcmlnaHQiPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvaGVhZGVyPg0KICAgIDxkaXYgaWQ9ImNvbnRlbnQiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPg0KICAgICAgICAgICAgPGRpdiBpZD0ibmF2LWNvbnRhaW5lciIgc3R5bGU9ImRpc3BsYXk6bm9uZSI+DQogICAgICAgICAgICAgICAgPG5hdj48L25hdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJuYXZpZ2F0aW9uIiBjbGFzcz0iY29udGFpbmVyMSI+DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJob21lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cucG1oYy5uc3cuZ292LmF1L0hvbWUiPkhvbWU8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtMW5hdi1oYXMtY2hpbGRyZW4gbmF2LXNlY3Rpb24tdGhpcmRzLTEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvUmVzaWRlbnQtU2VydmljZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlc2lkZW50IFNlcnZpY2VzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtMiBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0xIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQWJvdXQtVXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFib3V0IFVzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtMyBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0xIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQnVzaW5lc3MiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJ1c2luZXNzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNCBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0yIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQnVpbGRpbmctUGxhbm5pbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJ1aWxkaW5nICZhbXA7IFBsYW5uaW5nDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNSBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0yIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQ29tbXVuaXR5LUZhY2lsaXRpZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvbW11bml0eSBGYWNpbGl0aWVzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNiBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0yIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQ3VsdHVyZS1TcG9ydC1MZWlzdXJlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdWx0dXJlLCBTcG9ydCAmYW1wOyBMZWlzdXJlDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNyBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0zIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvRm9ybXMtUGVybWl0cyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRm9ybXMgJmFtcDsgUGVybWl0cw0KICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxuYXYgY2xhc3M9Im5hdmJhciBuYXZiYXItZGVmYXVsdCBuYXZiYXItc3RhdGljLXRvcCIgcm9sZT0ibmF2aWdhdGlvbiIgc3R5bGU9Im1hcmdpbi1ib3R0b206IDAiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9Im5hdmJhci10b2dnbGUiIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgZGF0YS10YXJnZXQ9Ii5uYXZiYXItY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPlRvZ2dsZSBuYXZpZ2F0aW9uPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tYmFyIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1iYXIiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLWhlYWRlciAtLT4NCiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXZiYXItdG9wLWxpbmtzIG5hdmJhci1yaWdodCBoaWRkZW4teHMgaGlkZGVuLXNtIGhpZGRlbi1tZCI+DQogICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxzcGFuIGlkPSJwcmludEljb24iIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXByaW50IiBvbmNsaWNrPSJ3aW5kb3cucHJpbnQoKTsiPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItZGVmYXVsdCBzaWRlYmFyIiByb2xlPSJuYXZpZ2F0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2lkZWJhci1uYXYgbmF2YmFyLWNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IiBpZD0ic2lkZS1tZW51Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48aSBjbGFzcz0iZmEgZmEtbGlzdC11bCBmYS1mdyI+PC9pPkFwcGxpY2F0aW9uIFRyYWNrZXI8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9BYm91dCB0YXJnZXQ9X3NlbGY+V2hhdCBpcyBBcHBsaWNhdGlvbiBUcmFja2VyPzwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9EaXNjbGFpbWVyIHRhcmdldD1fc2VsZj5EaXNjbGFpbWVyPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gLy5uYXYtc2Vjb25kLWxldmVsIC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48aSBjbGFzcz0iZmEgZmEtbGlzdC11bCBmYS1mdyI+PC9pPkFwcGxpY2F0aW9uczxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXYtc2Vjb25kLWxldmVsIGNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL0luZGV4IHRhcmdldD0+QXBwbGljYXRpb24gVHJhY2tlciBIb21lPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL1NlYXJjaCBpZD1zZWFyY2ggdGFyZ2V0PV9zZWxmPlNlYXJjaDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/UmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1UcnVlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSBpZD1vdXRzdGFuZGluZy1hcHBzIHRhcmdldD1fc2VsZj5VbmRldGVybWluZWQgQXBwbGljYXRpb25zPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9SZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9VHJ1ZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIGlkPWV4aGliaXRlZC1hcHBzIHRhcmdldD1fc2VsZj5BcHBsaWNhdGlvbnMgT24gRXhoaWJpdGlvbjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjdGl2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbnMgU3VibWl0dGVkPHNwYW4gY2xhc3M9ImZhIGFycm93Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdi1zZWNvbmQtbGV2ZWwgY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTIxJTJmMDQlMmYyMDI1JkRhdGVUbz0yMiUyZjA0JTJmMjAyNSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPlRoaXMgV2VlazwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MTMlMmYwNCUyZjIwMjUmRGF0ZVRvPTE5JTJmMDQlMmYyMDI1JkRhdGVUeXBlPTEmUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBXZWVrPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDQlMmYyMDI1JkRhdGVUbz0yMiUyZjA0JTJmMjAyNSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPlRoaXMgTW9udGg8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTElMmYwMyUyZjIwMjUmRGF0ZVRvPTMxJTJmMDMlMmYyMDI1JkRhdGVUeXBlPTEmUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjdGl2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbnMgRGV0ZXJtaW5lZDxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXYtc2Vjb25kLWxldmVsIGNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0yMSUyZjA0JTJmMjAyNSZEYXRlVG89MjIlMmYwNCUyZjIwMjUmRGF0ZVR5cGU9MiZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9VHJ1ZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPlRoaXMgV2VlazwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MTMlMmYwNCUyZjIwMjUmRGF0ZVRvPTE5JTJmMDQlMmYyMDI1JkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5MYXN0IFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTElMmYwNCUyZjIwMjUmRGF0ZVRvPTIyJTJmMDQlMmYyMDI1JkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIE1vbnRoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDMlMmYyMDI1JkRhdGVUbz0zMSUyZjAzJTJmMjAyNSZEYXRlVHlwZT0yJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1UcnVlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8IS0tIC8uc2lkZWJhci1jb2xsYXBzZSAtLT4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLXN0YXRpYy1zaWRlIC0tPg0KICAgICAgICAgICAgPC9uYXY+DQogICAgICAgICAgICA8ZGl2IGlkPSJwYWdlLXdyYXBwZXIiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+DQogICAgICAgICAgICAgICAgICAgIA0KDQoNCiAgICA8ZGl2IGNsYXNzPSJwYWdlLWhlYWRlciI+DQogICAgICAgIDxoMj5BcHBsaWNhdGlvbjogRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24gKDEwLjIwMTkuMzM2LjEpPC9oMj4NCiAgICA8L2Rpdj4NCiAgICA8aDQ+RGV0YWlsZWQgaW5mb3JtYXRpb24gcmVsYXRlZCB0byB0aGUgYXBwbGljYXRpb246PC9oND4NCiAgICA8YnIgLz4NCiAgICA8ZGl2Pg0KICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnNob3dBbGwoKTsiPlNob3cgQWxsPC9hPiAvDQogICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6aGlkZUFsbCgpOyI+SGlkZSBBbGw8L2E+DQogICAgPC9kaXY+DQogICAgPGRpdiBpZD0iYXBwbGljYXRpb24iPg0KDQogICAgICAgICAgICA8aDMgaWQ9ImRldGFpbHMiPjxhIGhyZWY9IiMiPkRldGFpbHM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRlc2NyaXB0aW9uOiA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBpZD0iZGVzY3JpcHRpb24iPkFsdGVyYXRpb25zIGFuZCBBZGRpdGlvbnMgdG8gRHdlbGxpbmcgYW5kIENvbnN0cnVjdGlvbiBvZiBQb29sPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlN1Ym1pdHRlZCBEYXRlOiA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjEwLzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFwcGxpY2F0aW9uIFR5cGU6IDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRldmVsb3BtZW50IEFwcGxpY2F0aW9uPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9InByb3BlcnRpZXMiPjxhIGhyZWY9IiMiPlByb3BlcnRpZXM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJwcm9wZXJ0eS1saXN0Ij42IEdlb3JnZSBDciwgUG9ydCBNYWNxdWFyaWUgTlNXIDI0NDQgIChMT1Q6IDMgRFA6IDIzOTg3MSk8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0icGVvcGxlIj48YSBocmVmPSIjIj5QZW9wbGU8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcHBsaWNhbnQ6IEphbWVzIEdyZWVuDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXBwbGljYW50OiBNZWxpc2EgR3JlZW4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPd25lciBhdCBMb2RnZW1lbnQ6IEphbWVzIEdyZWVuDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT3duZXIgYXQgTG9kZ2VtZW50OiBNZWxpc2EgR3JlZW4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQQ0EgUHJpbmNpcGFsIENlcnRpZnlpbmcgQXV0aG9yaXR5OiBQb3J0IE1hY3F1YXJpZS1IYXN0aW5ncyBDb3VuY2lsIA0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0ib2ZmaWNlciI+PGEgaHJlZj0iIyI+T2ZmaWNlcjwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9Im9mZmljZXJOYW1lIj5LZWl0aCBTbWl0aDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJkZWNpc2lvbiI+PGEgaHJlZj0iIyI+RGVjaXNpb248L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFwcGxpY2F0aW9uIFN0YXR1czogRGV0ZXJtaW5lZDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGV0ZXJtaW5hdGlvbiBEYXRlOg0KMjQvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5EZXRlcm1pbmF0aW9uIFR5cGU6IEFwcHJvdmVkIC0gQ291bmNpbCBTdGFmZjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJlc3RpbWF0ZWRDb3N0Ij48YSBocmVmPSIjIj5Fc3RpbWF0ZWQgQ29zdDwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+JDQwLDAwMC4wMDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJ0cmFja2luZyI+PGEgaHJlZj0iIyI+VHJhY2tpbmc8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24td3JhcCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5zd2lwZSB0YWJsZSB0byB0aGUgbGVmdCB0byByZXZlYWwgbW9yZSBkYXRhPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tYXJyb3ctcmlnaHQiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtYm9yZGVyZWQgbm8tZm9vdGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5EZXNjcmlwdGlvbjwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Db21tZW5jZWQgRGF0ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Db21wbGV0ZWQgRGF0ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5VbmRlciBBc3Nlc3NtZW50IGJ5IE9mZmljZXI8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMTAvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI0LzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+QWxsb2NhdGVkIHRvIEFzc2Vzc2luZyBPZmZpY2VyPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjE1LzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoxNS8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRldGVybWluYXRpb24gSXNzdWVkICh0byBBZG1uKTwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyNy8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjcvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5SZWxlYXNlIFBlbmRpbmcgQ3VzdG9tciBBY3Rpb248L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjcvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjIyLzExLzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+UG9zdGluZy1EZXRlcm1pbmF0aW9uIElzc3VlZDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyMi8xMS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjIvMTEvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCg0KDQoNCg0KICAgICAgICAgICAgPGgzIGlkPSJyZWxhdGVkQXBwbGljYXRpb25zIj48YSBocmVmPSIjIj5SZWxhdGVkIEFwcGxpY2F0aW9uczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaWNvbi13cmFwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPnN3aXBlIHRhYmxlIHRvIHRoZSBsZWZ0IHRvIHJldmVhbCBtb3JlIGRhdGE8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1hcnJvdy1yaWdodCIgYXJpYS1oaWRkZW49InRydWUiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtc3RyaXBlZCB0YWJsZS1ib3JkZXJlZCBuby1mb290ZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkFwcGxpY2F0aW9uIFR5cGU8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+QXBwbGljYXRpb24gTnVtYmVyPC90aD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUzk2DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZGF0cmFja2VyLnBtaGMubnN3Lmdvdi5hdS9BcHBsaWNhdGlvbi9BcHBsaWNhdGlvbkRldGFpbHMvMDEwLjIwMTkuMDAwMDAzMzYuMDAyLyI+MTAuMjAxOS4zMzYuMjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvbnN0cnVjdGlvbiBDZXJ0aWZpY2F0ZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2RhdHJhY2tlci5wbWhjLm5zdy5nb3YuYXUvQXBwbGljYXRpb24vQXBwbGljYXRpb25EZXRhaWxzLzAxMS4yMDE5LjAwMDAwMzM2LjAwMS8iPjExLjIwMTkuMzM2LjE8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPY2N1cGF0aW9uIENlcnRpZmljYXRlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZGF0cmFja2VyLnBtaGMubnN3Lmdvdi5hdS9BcHBsaWNhdGlvbi9BcHBsaWNhdGlvbkRldGFpbHMvMDEyLjIwMTkuMDAwMDAzMzYuMDAxLyI+MTIuMjAxOS4zMzYuMTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNlY3Rpb24gNjggKDY4MCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9kYXRyYWNrZXIucG1oYy5uc3cuZ292LmF1L0FwcGxpY2F0aW9uL0FwcGxpY2F0aW9uRGV0YWlscy82ODAuMjAxOS4wMDAwMDMzNi4wMDEvIj42ODAuMjAxOS4zMzYuMTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQoNCiAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQoNCg0KDQoNCg0KDQo8aDMgaWQ9ImRvY3VtZW50cyI+PGEgaHJlZj0iIyI+RG9jdW1lbnRzPC9hPjwvaDM+DQo8ZGl2Pg0KDQogICAgICAgIDxkaXYgY2xhc3M9Imljb24td3JhcCI+DQogICAgICAgICAgICA8c3Bhbj5zd2lwZSB0YWJsZSB0byB0aGUgbGVmdCB0byByZXZlYWwgbW9yZSBkYXRhPC9zcGFuPg0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tYXJyb3ctcmlnaHQiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L3NwYW4+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8ZGl2IGlkPSJkb2MtY291bnQiPlRvdGFsIG51bWJlciBvZiBkb2N1bWVudHM6IDE8L2Rpdj4NCiAgICAgICAgPHRhYmxlIGlkPSJkb2MtdGFibGUiIGNsYXNzPSJ0YWJsZSB0YWJsZS1zdHJpcGVkIHRhYmxlLWJvcmRlcmVkIG5vLWZvb3RlciI+DQogICAgICAgICAgICA8dGhlYWQ+DQogICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICA8dGg+UmVjb3JkIE51bWJlcjwvdGg+DQogICAgICAgICAgICAgICAgICAgIDx0aD5EZXNjcmlwdGlvbjwvdGg+DQogICAgICAgICAgICAgICAgICAgIDx0aD5Eb2N1bWVudCBUeXBlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgPHRoPlNpemU8L3RoPg0KICAgICAgICAgICAgICAgICAgICA8dGg+VmlldyBMaW5rPC90aD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgPC90aGVhZD4NCiAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCkQyMDE5LzI2MTU3NSAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPkRBIENvbnNlbnQgQXBwcm92YWwgU2luZ2xlIER3ZWxsaW5nIGFuZCBTd2ltbWluZyBQb29sIC0gNiBHZW9yZ2UgQ3Jlc2NlbnQgUE9SVCBNQUNRVUFSSUU8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICBQREYNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAuMTcgTUINCg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+PGEgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgcm9sZT0iYnV0dG9uIiBocmVmPSJodHRwczovL2RhdHJhY2tlci5wbWhjLm5zdy5nb3YuYXUvRG9jdW1lbnQvRG93bmxvYWQ/a2V5PUxmbWx2aG5QbTZVPSZhbXA7ZmlsZU5hbWU9REErQ29uc2VudCtBcHByb3ZhbCtTaW5nbGUrRHdlbGxpbmcrYW5kK1N3aW1taW5nK1Bvb2wrLSs2K0dlb3JnZStDcmVzY2VudCtQT1JUK01BQ1FVQVJJRS5QREYiIHRhcmdldD0iX2JsYW5rIj5WaWV3PC9hPjwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCg0KICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgPC90YWJsZT4NCjwvZGl2Pg0KDQoNCiAgICAgICAgICAgIDxoMyBpZD0iY29udGFjdFVzIj48YSBocmVmPSIjIj5Db250YWN0IFVzPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjxwPlRvIG1ha2UgZW5xdWlyaWVzIHJlZ2FyZGluZyBhcHBsaWNhdGlvbnMgZGlzcGxheWVkIGhlcmUsIGNvbnRhY3QgdXMgYnkgb25lIG9mIHRoZSBmb2xsb3dpbmcgbWV0aG9kczo8L3A+DQoNCjx1bD4NCgk8bGk+YnkgZW1haWwgPGEgc3R5bGU9ImNvbG9yOiBibHVlIiBocmVmPSJtYWlsdG86Y291bmNpbEBwbWhjLm5zdy5nb3YuYXU/c3ViamVjdD1FbnF1aXJ5IGZvciBhcHBsaWNhdGlvbiAxMC4yMDE5LjMzNi4xIj5jb3VuY2lsQHBtaGMubnN3Lmdvdi5hdTwvYT4sIDwvbGk+DQoJPGxpPmluIHdyaXRpbmcgdG8gUE8gQm94IDg0IFBvcnQgTWFjcXVhcmllIE5TVyAyNDQ0LiBBbGwgY29ycmVzcG9uZGVuY2Ugc2hvdWxkIGJlIGFkZHJlc3NlZCB0byB0aGUgQ2hpZWYgRXhlY3V0aXZlIE9mZmljZXIgKENFTykgYW5kIHF1b3RlIHRoZSByZWxldmFudCBhcHBsaWNhdGlvbiByZWZlcmVuY2UgbnVtYmVyLjwvbGk+DQoJPGxpPmJ5IGNvbnRhY3RpbmcgdGhlIGFzc2Vzc2luZyBvZmZpY2VyIChub3RlZCBpbiB0aGUgb2ZmaWNlciBzZWN0aW9uIGFib3ZlKSBieSBwaG9uaW5nIEN1c3RvbWVyIFNlcnZpY2UgQ2VudHJlIG9uICgwMikgNjU4MSA4MTExIGR1cmluZyBub3JtYWwgb2ZmaWNlIGhvdXJzIChNb25kYXkgdG8gRnJpZGF5LCA4LjMwYW0gdG8gNC4zMHBtKS48L2xpPg0KPC91bD4NCjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJub3RpZmllZEFkZHJlc3NlcyI+PGEgaHJlZj0iIyI+Tm90aWZpZWQgQWRkcmVzc2VzPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8Yj5ObyBkYXRhLjwvYj4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQo8aDMgaWQ9Imdvb2dsZW1hcHMiPjxhIGhyZWY9IiMiPkdvb2dsZSBNYXBzPC9hPjwvaDM+DQo8ZGl2IGlkPSJtYXBfY29udGFpbmVyIj4NCiAgICA8ZGl2IGlkPSJtYXBfY2FudmFzIiBjbGFzcz0iaWZyYW1lLXJ3ZCI+DQogICAgPC9kaXY+DQo8L2Rpdj4NCg0KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KDQogICAgd2luZG93Lm9ubG9hZCA9IGxvYWRHb29nbGVNYXBzU2NyaXB0Ow0KDQogICAgdmFyIGdlb2NvZGVyOw0KICAgIHZhciBtYXA7DQogICAgdmFyIHRpbWVvdXQgPSAzMDA7DQogICAgdmFyIHByb3BlcnRpZXMgPSBbIjYgR2VvcmdlIENyLCBQb3J0IE1hY3F1YXJpZSBOU1cgMjQ0NCAiXTsNCiAgICB2YXIgbGF0TG5nQXJyID0gW107DQoNCiAgICBmdW5jdGlvbiBsb2FkR29vZ2xlTWFwc1NjcmlwdCgpIHsNCiAgICAgICAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNjcmlwdCIpOw0KICAgICAgICBzY3JpcHQudHlwZSA9ICJ0ZXh0L2phdmFzY3JpcHQiOw0KICAgICAgICBzY3JpcHQuc3JjID0gIi8vbWFwcy5nb29nbGVhcGlzLmNvbS9tYXBzL2FwaS9qcz9rZXk9QUl6YVN5QlZ0YUc0WWpYd2ZnTmp0Q2x6cU5jU3lHUE9fY0tNRVJNJmNhbGxiYWNrPWxvYWRHb29nbGVNYXBzIjsNCiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHJlbmRlckdvb2dsZU1hcHMoKQ0KICAgIHsNCiAgICAgICAgdmFyIG1hcE9wdGlvbnMgPSB7DQogICAgICAgICAgICBjZW50ZXI6IGxhdExuZ0FyclswXSwNCiAgICAgICAgICAgIHpvb206IDE2LA0KICAgICAgICAgICAgbWFwVHlwZUlkOiBnb29nbGUubWFwcy5NYXBUeXBlSWQuUk9BRE1BUCwNCiAgICAgICAgICAgIG1hcFR5cGVDb250cm9sOiBmYWxzZQ0KICAgICAgICB9DQoNCiAgICAgICAgbWFwID0gbmV3IGdvb2dsZS5tYXBzLk1hcChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibWFwX2NhbnZhcyIpLCBtYXBPcHRpb25zKTsNCg0KICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGREb21MaXN0ZW5lcih3aW5kb3csICdyZXNpemUnLCBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgIHZhciBjZW50ZXIgPSBtYXAuZ2V0Q2VudGVyKCk7DQogICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC50cmlnZ2VyKG1hcCwgJ3Jlc2l6ZScpOw0KICAgICAgICAgICAgbWFwLnNldENlbnRlcihjZW50ZXIpOw0KICAgICAgICB9KTsNCg0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGxvYWRHb29nbGVNYXBzKCkgew0KICAgICAgICBnZW9jb2RlciA9IG5ldyBnb29nbGUubWFwcy5HZW9jb2RlcigpOw0KICAgICAgICB2YXIgbm9PZkZhaWxlZExvY2F0aW9uU2VhcmNoID0gMDsNCg0KICAgICAgICAkKHByb3BlcnRpZXMpLmVhY2goZnVuY3Rpb24gKGluZGV4LCBlbGVtZW50KSB7DQogICAgICAgICAgICB2YXIgcHJvcGVydHlBZGRyZXNzID0gZWxlbWVudDsNCg0KICAgICAgICAgICAgLy9HZXQgZ2VvY29kZQ0KICAgICAgICAgICAgZ2VvY29kZXIuZ2VvY29kZSh7ICdhZGRyZXNzJzogcHJvcGVydHlBZGRyZXNzIH0sIGZ1bmN0aW9uIChyZXN1bHRzLCBzdGF0dXMpIHsNCiAgICAgICAgICAgICAgICBpZiAoc3RhdHVzID09IGdvb2dsZS5tYXBzLkdlb2NvZGVyU3RhdHVzLk9LKSB7DQoNCiAgICAgICAgICAgICAgICAgICAgdmFyIGxvY2F0aW9uID0gcmVzdWx0c1swXS5nZW9tZXRyeS5sb2NhdGlvbjsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGxhdExuZyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmcobG9jYXRpb24ubGF0KCksIGxvY2F0aW9uLmxuZygpKTsNCg0KICAgICAgICAgICAgICAgICAgICBsYXRMbmdBcnIucHVzaChsYXRMbmcpOw0KDQogICAgICAgICAgICAgICAgICAgIGlmKGxhdExuZ0Fyci5sZW5ndGggPT0gMSkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyR29vZ2xlTWFwcygpOw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgLy9DcmVhdGUgbWFya2VyIGZvciBtYXAgYW5kIHBsYWNlIGl0IG9uIHRoZSBtYXANCiAgICAgICAgICAgICAgICAgICAgdmFyIG1hcmtlciA9IG5ldyBnb29nbGUubWFwcy5NYXJrZXIoew0KICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGxhdExuZywNCiAgICAgICAgICAgICAgICAgICAgICAgIG1hcDogbWFwDQogICAgICAgICAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICAgICAgICAgIHZhciBjb250ZW50U3RyaW5nID0gJzxkaXY+PHNwYW4+JyArIHByb3BlcnR5QWRkcmVzcyArICc8L3NwYW4+PC9kaXY+JzsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGluZm93aW5kb3cgPSBuZXcgZ29vZ2xlLm1hcHMuSW5mb1dpbmRvdyh7ICAgLy9DcmVhdGUgaW5mbyB3aW5kb3cNCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnRTdHJpbmcNCiAgICAgICAgICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIobWFya2VyLCAnY2xpY2snLCBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGluZm93aW5kb3cub3BlbihtYXAsIG1hcmtlcik7DQogICAgICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAvL2lmIG5vIGxvY2F0aW9uIGZvdW5kIGJ5IGdvb2dsZSBmb3IgYSBwcm9wZXJ0eQ0KICAgICAgICAgICAgICAgIGVsc2UgaWYgKHN0YXR1cyA9PSAiWkVST19SRVNVTFRTIikgew0KICAgICAgICAgICAgICAgICAgICBub09mRmFpbGVkTG9jYXRpb25TZWFyY2grKzsNCg0KICAgICAgICAgICAgICAgICAgICBpZihub09mRmFpbGVkTG9jYXRpb25TZWFyY2ggPT0gJChwcm9wZXJ0aWVzKS5sZW5ndGgpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlcGxhY2VHb29nbGVNYXBzQ29udGVudCgpOw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PSBnb29nbGUubWFwcy5HZW9jb2RlclN0YXR1cy5PVkVSX1FVRVJZX0xJTUlUKSB7DQogICAgICAgICAgICAgICAgICAgIC8vc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IGdldEdlb0NvZGVGb3JBZGRyZXNzKGlkLCBhZGRyZXNzKTsgfSwgKHRpbWVvdXQpKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KTsNCiAgICAgICAgfSk7DQogICAgfQ0KDQogICAgLy9SZXBsYWNlcyBnb29nbGUgbWFwcyBjb250ZW50IHdpdGggYSBuZXcgZGl2IGJsb2NrIHRoYXQgaGFzIGluZm8gbWVzc2FnZQ0KICAgIGZ1bmN0aW9uIHJlcGxhY2VHb29nbGVNYXBzQ29udGVudCgpIHsNCiAgICAgICAgdmFyIG5ld0NvbnRlbnQgPSAnPGRpdiBjbGFzcz0idWktYWNjb3JkaW9uLWNvbnRlbnQgdWktaGVscGVyLXJlc2V0IHVpLXdpZGdldC1jb250ZW50IHVpLWNvcm5lci1ib3R0b20iPicgKw0KICAgICAgICAgICAgJzxwPkNvdWxkblwndCBmaW5kIHRoZSBwcm9wZXJ0eSBhZGRyZXNzKGVzKSBvbiBHb29nbGUgTWFwcy4gPHA+JyArDQogICAgICAgICAgICAnPC9kaXY+JzsNCg0KICAgICAgICAkKCcjbWFwX2NvbnRhaW5lcicpLnJlcGxhY2VXaXRoKG5ld0NvbnRlbnQpOw0KICAgIH0NCg0KPC9zY3JpcHQ+DQoNCiAgICA8L2Rpdj4NCiAgICA8ZGl2IGNsYXNzPSJtb2RhbCBmYWRlIiBpZD0ic3VibWlzc2lvbi1tb2RhbCI+DQogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJzcGlubmVyIj48L2Rpdj4gPCEtLSBUaGlzIGRpdiBob3N0cyB0aGUgc3Bpbm5lciAtLT4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iY2xvc2UiIGRhdGEtZGlzbWlzcz0ibW9kYWwiIGFyaWEtbGFiZWw9IkNsb3NlIj48c3BhbiBhcmlhLWhpZGRlbj0idHJ1ZSI+JnRpbWVzOzwvc3Bhbj48L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJtb2RhbC10aXRsZSI+U3VibWlzc2lvbiBmb3IgMTAuMjAxOS4zMzYuMTwvaDI+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KDQogICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkgew0KDQogICAgICAgICQoJyNhcHBsaWNhdGlvbicpLnRvZ2dsZXBhbmVscygpOw0KDQogICAgICAgICAgICAkKCcjcHJvcGVydGllcycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjZGV0YWlscycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjdHJhY2tpbmcnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI2RvY3VtZW50cycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjcmVsYXRlZEFwcGxpY2F0aW9ucycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjZ29vZ2xlbWFwcycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjY29udGFjdFVzJykuY2xpY2soKTsNCg0KICAgICAgICANCg0KDQogICAgICAgICQoJyNzdWJtaXNzaW9uLWJ0bicpLmNsaWNrKGZ1bmN0aW9uICgpIHsgICAgICAgIA0KDQoNCiAgICAgICAgICAgIHZhciB1cmwgPSAiaHR0cHM6Ly9kYXRyYWNrZXIucG1oYy5uc3cuZ292LmF1Ly9BcHBsaWNhdGlvbi9TdWJtaXNzaW9uLyIgKyBlbmNvZGVVUkkoIjEwLjIwMTkuMzM2LjEiKTsNCg0KICAgICAgICAgICAgJCgnI3N1Ym1pc3Npb24tbW9kYWwnKS5tb2RhbCgnc2hvdycpLmZpbmQoJy5tb2RhbC1ib2R5JykubG9hZCh1cmwpOw0KICAgICAgICB9KTsNCiAgICB9KTsNCg0KDQogICAgLyogU2hvd3MgYWxsIHRoZSBwYW5lbHMgKi8NCiAgICBmdW5jdGlvbiBzaG93QWxsKCkgew0KICAgICAgICAkKCcjYXBwbGljYXRpb24nKS5jaGlsZHJlbigiaDMiKS5lYWNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKCJ1aS1zdGF0ZS1kZWZhdWx0IikpIHsNCiAgICAgICAgICAgICAgICAkKHRoaXMpLmNsaWNrKCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0pOw0KICAgIH0NCg0KDQogICAgLyogSGlkZSBhbGwgdGhlIHBhbmVscyAqLw0KICAgIGZ1bmN0aW9uIGhpZGVBbGwoKSB7DQogICAgICAgICQoJyNhcHBsaWNhdGlvbicpLmNoaWxkcmVuKCJoMyIpLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoInVpLXN0YXRlLWFjdGl2ZSIpKSB7DQogICAgICAgICAgICAgICAgJCh0aGlzKS5jbGljaygpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICA8L3NjcmlwdD4NCg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwhLS0gLy5jb250YWluZXItZmx1aWQgLS0+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxmb290ZXIgY2xhc3M9ImZvb3RlciBncmlkIj4NCiAgICAgICAgICAgIDxkaXYgPg0KICAgICAgICAgICAgICAgIMKpIFBvcnQgTWFjcXVhcmllIEhhc3RpbmdzIENvdW5jaWwNCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Zvb3Rlcj4NCiAgICA8L2Rpdj4NCjwvYm9keT4NCjwvaHRtbD4NCg==
  recorded_at: Mon, 21 Apr 2025 18:27:56 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Application/ApplicationDetails/010.2019.00000336.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=wvghctgflcydwjnmbt1t5f3m; User=accessAllowed-MasterView=True
      Host:
      - datracker.pmhc.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:28:06 GMT
      Content-Length:
      - '33310'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:28:06 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Application/ApplicationDetails/011.2019.00000329.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - datracker.pmhc.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 302
      message: Found
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Home/Disclaimer"
      Server:
      - Microsoft-IIS/8.5
      Set-Cookie:
      - ASP.NET_SessionId=zwj1ukxia204epwovq4ieeto; path=/; HttpOnly; SameSite=Lax
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:28:06 GMT
      Content-Length:
      - '133'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Home/Disclaimer\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:28:06 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Home/Disclaimer
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=zwj1ukxia204epwovq4ieeto
      Host:
      - datracker.pmhc.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:28:06 GMT
      Content-Length:
      - '19685'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:28:06 GMT
- request:
    method: post
    uri: https://datracker.pmhc.nsw.gov.au/home/disclaimerprocessing
    body:
      encoding: UTF-8
      string: agreed=true
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=zwj1ukxia204epwovq4ieeto
      Host:
      - datracker.pmhc.nsw.gov.au
      Referer:
      - https://datracker.pmhc.nsw.gov.au/Home/Disclaimer
      Content-Type:
      - application/x-www-form-urlencoded
      Content-Length:
      - '11'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Application/ApplicationDetails/011.2019.00000329.001"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      Set-Cookie:
      - User=accessAllowed-MasterView=True; path=/
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:28:06 GMT
      Content-Length:
      - '170'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Application/ApplicationDetails/011.2019.00000329.001\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:28:06 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Application/ApplicationDetails/011.2019.00000329.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=zwj1ukxia204epwovq4ieeto; User=accessAllowed-MasterView=True
      Host:
      - datracker.pmhc.nsw.gov.au
      Referer:
      - https://datracker.pmhc.nsw.gov.au/Home/Disclaimer
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:28:16 GMT
      Content-Length:
      - '36669'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:28:17 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Application/ApplicationDetails/011.2019.00000329.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=zwj1ukxia204epwovq4ieeto; User=accessAllowed-MasterView=True
      Host:
      - datracker.pmhc.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:28:26 GMT
      Content-Length:
      - '36669'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:28:27 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Application/ApplicationDetails/012.2019.00000330.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - datracker.pmhc.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 302
      message: Found
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Home/Disclaimer"
      Server:
      - Microsoft-IIS/8.5
      Set-Cookie:
      - ASP.NET_SessionId=4guhs3omtcgi2w1baj0eipoj; path=/; HttpOnly; SameSite=Lax
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:28:26 GMT
      Content-Length:
      - '133'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Home/Disclaimer\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:28:27 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Home/Disclaimer
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=4guhs3omtcgi2w1baj0eipoj
      Host:
      - datracker.pmhc.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:28:26 GMT
      Content-Length:
      - '19685'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:28:27 GMT
- request:
    method: post
    uri: https://datracker.pmhc.nsw.gov.au/home/disclaimerprocessing
    body:
      encoding: UTF-8
      string: agreed=true
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=4guhs3omtcgi2w1baj0eipoj
      Host:
      - datracker.pmhc.nsw.gov.au
      Referer:
      - https://datracker.pmhc.nsw.gov.au/Home/Disclaimer
      Content-Type:
      - application/x-www-form-urlencoded
      Content-Length:
      - '11'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Application/ApplicationDetails/012.2019.00000330.001"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      Set-Cookie:
      - User=accessAllowed-MasterView=True; path=/
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:28:26 GMT
      Content-Length:
      - '170'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Application/ApplicationDetails/012.2019.00000330.001\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:28:27 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Application/ApplicationDetails/012.2019.00000330.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=4guhs3omtcgi2w1baj0eipoj; User=accessAllowed-MasterView=True
      Host:
      - datracker.pmhc.nsw.gov.au
      Referer:
      - https://datracker.pmhc.nsw.gov.au/Home/Disclaimer
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:28:37 GMT
      Content-Length:
      - '31767'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQo8aHRtbCB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCIgeG1sOmxhbmc9ImVuIiBsYW5nPSJlbiI+DQoNCg0KDQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCIgLz4NCiAgICA8bWV0YSBodHRwLWVxdWl2PSJYLVVBLUNvbXBhdGlibGUiIGNvbnRlbnQ9IklFPWVkZ2UiIC8+DQogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xIiAvPg0KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIiAvPg0KICAgIDxtZXRhIG5hbWU9ImtleXdvcmRzIiBjb250ZW50PSJQb3J0IE1hY3F1YXJpZSBDb3VuY2lsLCBEQSBUcmFja2VyLEFwcGxpY2F0aW9uIFRyYWNrZXIsRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24sRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24gVHJhY2tpbmcsIERBIEVucXVpcnksIERldmVsb3BtZW50IEFwcGxpY2F0aW9uIEVucXVpcnksIEFwcGxpY2F0aW9uIFRyYWNrZXIiPg0KICAgIDxtZXRhIG5hbWU9ImRlc2NyaXB0aW9uIiBjb250ZW50PSJUaGUgb2ZmaWNpYWwgUG9ydCBNYWNxdWFyaWUgQ291bmNpbCBBcHBsaWNhdGlvbiBUcmFja2VyIj4NCg0KICAgIDwhLS1mYXZpY29uLS0+DQogICAgPGxpbmsgaHJlZj0iL0NvdW5jaWxfVGhlbWUvUG9ydF9NYWNxdWFyaWUvZmF2aWNvbi5pY28iICkiIHJlbD0ic2hvcnRjdXQgaWNvbiIgdHlwZT0iaW1hZ2UveC1pY29uIiAvPg0KDQogICAgPCEtLSBqUXVlcnkgLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS0xLjExLjEuanMiPjwvc2NyaXB0Pg0KDQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2pxdWVyeS11aS0xLjExLjIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvY29yZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvYWNjb3JkaW9uLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC90aGVtZXMvYmFzZS90aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQoNCiAgICA8IS0tIEJvb3RzdHJhcCAtLT4NCiAgICA8c2NyaXB0IHNyYz0iL1NjcmlwdHMvYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCg0KICAgIDxsaW5rIGhyZWY9Ii9Db250ZW50L2Jvb3RzdHJhcC10aGVtZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvYm9vdHN0cmFwLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9mb250LWF3ZXNvbWUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPCEtLSBEYXRhVGFibGVzIC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2pxdWVyeS5kYXRhVGFibGVzLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMuYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvU2NyaXB0cy9EYXRhVGFibGVzL2RhdGFUYWJsZXMucmVzcG9uc2l2ZS5qcyI+PC9zY3JpcHQ+DQoNCiAgICANCiAgICA8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLmJvb3RzdHJhcC5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvRGF0YVRhYmxlcy9jc3MvZGF0YVRhYmxlcy5yZXNwb25zaXZlLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ29udGVudC9EYXRhVGFibGVzL2Nzcy9kYXRhVGFibGVzLnJlc3BvbnNpdmUuc2NzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KDQogICAgPCEtLSBCb290c3RyYXAgU0ItQWRtaW4tMiBQbHVnaW4gYW5kIG90aGVyIGNzcyBhbmQganMgZmlsZXMtLT4NCiAgICA8c2NyaXB0IHNyYz0iL2pzL2Jvb3RzdHJhcC1jb21ib2JveC5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL2Jvb3RzdHJhcC1kYXRlcGlja2VyLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvYm9vdHN0cmFwLWRpYWxvZy5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL2pxdWVyeS5mb3JtLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvanF1ZXJ5LnRhYmxlc29ydGVyLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvbWFzdGVydmlldy5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL21ldGlzTWVudS5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2pzL3NiLWFkbWluLTIuanMiPjwvc2NyaXB0Pg0KDQogICAgPGxpbmsgaHJlZj0iL2Nzcy9ib290c3RyYXAtY29tYm9ib3guY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvZGF0ZXBpY2tlcjMuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9jc3MvbWFzdGVydmlldy1jdXN0b21pc2F0aW9ucy5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL2Nzcy9zYi1hZG1pbi0yLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDxsaW5rIGhyZWY9Ii9Db3VuY2lsX1RoZW1lL1BvcnRfTWFjcXVhcmllL1BvcnRfTWFjcXVhcmllLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvQ291bmNpbF9UaGVtZS9Qb3J0X01hY3F1YXJpZS9Qb3J0X01hY3F1YXJpZV9Nb2JpbGVWaWV3LmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICANCg0KICAgIDwhLS1pbmNsdWRlIGdvb2dsZSBhbmFseXRpY3MgY29kZS0tPg0KICAgIDxzY3JpcHQ+DQogICAgICAgIChmdW5jdGlvbiAoaSwgcywgbywgZywgciwgYSwgbSkgew0KICAgICAgICAgICAgaVsnR29vZ2xlQW5hbHl0aWNzT2JqZWN0J10gPSByOyBpW3JdID0gaVtyXSB8fCBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgKGlbcl0ucSA9IGlbcl0ucSB8fCBbXSkucHVzaChhcmd1bWVudHMpDQogICAgICAgICAgICB9LCBpW3JdLmwgPSAxICogbmV3IERhdGUoKTsgYSA9IHMuY3JlYXRlRWxlbWVudChvKSwNCiAgICAgICAgICAgICAgICBtID0gcy5nZXRFbGVtZW50c0J5VGFnTmFtZShvKVswXTsgYS5hc3luYyA9IDE7IGEuc3JjID0gZzsgbS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLCBtKQ0KICAgICAgICB9KSh3aW5kb3csIGRvY3VtZW50LCAnc2NyaXB0JywgJy8vd3d3Lmdvb2dsZS1hbmFseXRpY3MuY29tL2FuYWx5dGljcy5qcycsICdnYScpOw0KDQogICAgICAgIGdhKCdjcmVhdGUnLCAnVUEtNzI5MTg1Mi00JywgJ2F1dG8nKTsNCiAgICAgICAgZ2EoJ3NlbmQnLCAncGFnZXZpZXcnKTsNCg0KICAgIDwvc2NyaXB0Pg0KDQoNCiAgICA8dGl0bGU+UG9ydCBNYWNxdWFyaWUtSGFzdGluZ3MgQ291bmNpbCAtIEFwcGxpY2F0aW9uIFRyYWNrZXI8L3RpdGxlPg0KDQogICAgPCEtLSBDdXN0b20gRm9udHMNCiAgICAgICAgPGxpbmsgaHJlZj0iL2ZvbnQtYXdlc29tZS9jc3MvZm9udC1hd2Vzb21lLm1pbi5jc3MiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPg0KICAgIC0tPg0KICAgIDwhLS0gSFRNTDUgU2hpbSBhbmQgUmVzcG9uZC5qcyBJRTggc3VwcG9ydCBvZiBIVE1MNSBlbGVtZW50cyBhbmQgbWVkaWEgcXVlcmllcyAtLT4NCiAgICA8IS0tIFdBUk5JTkc6IFJlc3BvbmQuanMgZG9lc24ndCB3b3JrIGlmIHlvdSB2aWV3IHRoZSBwYWdlIHZpYSBmaWxlOi8vIC0tPg0KICAgIDwhLS1baWYgbHQgSUUgOV0+DQogICAgICAgIDxzY3JpcHQgc3JjPSJodHRwczovL29zcy5tYXhjZG4uY29tL2xpYnMvaHRtbDVzaGl2LzMuNy4wL2h0bWw1c2hpdi5qcyI+PC9zY3JpcHQ+DQogICAgICAgIDxzY3JpcHQgc3JjPSJodHRwczovL29zcy5tYXhjZG4uY29tL2xpYnMvcmVzcG9uZC5qcy8xLjQuMi9yZXNwb25kLm1pbi5qcyI+PC9zY3JpcHQ+DQogICAgPCFbZW5kaWZdLS0+DQoNCiAgICA8bGluayBocmVmPSIvL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9Q2Fycm9pcytHb3RoaWMiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPg0KPC9oZWFkPg0KPGJvZHkgY2xhc3M9InN0YW5kYXJkIj4NCiAgICA8aGVhZGVyIGNsYXNzPSJjbGVhcmZpeCI+DQogICAgICAgIDxkaXYgc3R5bGU9IndpZHRoOiAxMDAlOyBiYWNrZ3JvdW5kLWNvbG9yOiAjNUQ5NzRDO2hlaWdodDoyMHB4ICI+PC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9nbyI+DQogICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvIj4NCiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9Db3VuY2lsX1RoZW1lL1BvcnRfTWFjcXVhcmllL2xvZ28ucG5nIiBhbHQ9IlBvcnQgTWFjcXVhcmllIEhhc3RpbmdzIExvZ28iIGlkPSJkaXNwbGF5LWxvZ28iIC8+DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InB1bGwtcmlnaHQiPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvaGVhZGVyPg0KICAgIDxkaXYgaWQ9ImNvbnRlbnQiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPg0KICAgICAgICAgICAgPGRpdiBpZD0ibmF2LWNvbnRhaW5lciIgc3R5bGU9ImRpc3BsYXk6bm9uZSI+DQogICAgICAgICAgICAgICAgPG5hdj48L25hdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJuYXZpZ2F0aW9uIiBjbGFzcz0iY29udGFpbmVyMSI+DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJob21lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cucG1oYy5uc3cuZ292LmF1L0hvbWUiPkhvbWU8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtMW5hdi1oYXMtY2hpbGRyZW4gbmF2LXNlY3Rpb24tdGhpcmRzLTEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvUmVzaWRlbnQtU2VydmljZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlc2lkZW50IFNlcnZpY2VzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtMiBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0xIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQWJvdXQtVXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFib3V0IFVzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtMyBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0xIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQnVzaW5lc3MiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJ1c2luZXNzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNCBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0yIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQnVpbGRpbmctUGxhbm5pbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJ1aWxkaW5nICZhbXA7IFBsYW5uaW5nDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNSBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0yIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQ29tbXVuaXR5LUZhY2lsaXRpZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvbW11bml0eSBGYWNpbGl0aWVzDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNiBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0yIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvQ3VsdHVyZS1TcG9ydC1MZWlzdXJlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdWx0dXJlLCBTcG9ydCAmYW1wOyBMZWlzdXJlDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtaXRlbS1zZXEtNyBuYXYtaGFzLWNoaWxkcmVuIG5hdi1zZWN0aW9uLXRoaXJkcy0zIG5hdi1zZWN0aW9uLXF1YXJ0ZXJzLTQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5wbWhjLm5zdy5nb3YuYXUvRm9ybXMtUGVybWl0cyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRm9ybXMgJmFtcDsgUGVybWl0cw0KICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxuYXYgY2xhc3M9Im5hdmJhciBuYXZiYXItZGVmYXVsdCBuYXZiYXItc3RhdGljLXRvcCIgcm9sZT0ibmF2aWdhdGlvbiIgc3R5bGU9Im1hcmdpbi1ib3R0b206IDAiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9Im5hdmJhci10b2dnbGUiIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgZGF0YS10YXJnZXQ9Ii5uYXZiYXItY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPlRvZ2dsZSBuYXZpZ2F0aW9uPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tYmFyIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1iYXIiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLWhlYWRlciAtLT4NCiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXZiYXItdG9wLWxpbmtzIG5hdmJhci1yaWdodCBoaWRkZW4teHMgaGlkZGVuLXNtIGhpZGRlbi1tZCI+DQogICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxzcGFuIGlkPSJwcmludEljb24iIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXByaW50IiBvbmNsaWNrPSJ3aW5kb3cucHJpbnQoKTsiPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItZGVmYXVsdCBzaWRlYmFyIiByb2xlPSJuYXZpZ2F0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2lkZWJhci1uYXYgbmF2YmFyLWNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IiBpZD0ic2lkZS1tZW51Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48aSBjbGFzcz0iZmEgZmEtbGlzdC11bCBmYS1mdyI+PC9pPkFwcGxpY2F0aW9uIFRyYWNrZXI8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9BYm91dCB0YXJnZXQ9X3NlbGY+V2hhdCBpcyBBcHBsaWNhdGlvbiBUcmFja2VyPzwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9EaXNjbGFpbWVyIHRhcmdldD1fc2VsZj5EaXNjbGFpbWVyPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gLy5uYXYtc2Vjb25kLWxldmVsIC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48aSBjbGFzcz0iZmEgZmEtbGlzdC11bCBmYS1mdyI+PC9pPkFwcGxpY2F0aW9uczxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXYtc2Vjb25kLWxldmVsIGNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL0luZGV4IHRhcmdldD0+QXBwbGljYXRpb24gVHJhY2tlciBIb21lPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9Ib21lL1NlYXJjaCBpZD1zZWFyY2ggdGFyZ2V0PV9zZWxmPlNlYXJjaDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/UmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1UcnVlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSBpZD1vdXRzdGFuZGluZy1hcHBzIHRhcmdldD1fc2VsZj5VbmRldGVybWluZWQgQXBwbGljYXRpb25zPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9SZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9VHJ1ZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIGlkPWV4aGliaXRlZC1hcHBzIHRhcmdldD1fc2VsZj5BcHBsaWNhdGlvbnMgT24gRXhoaWJpdGlvbjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjdGl2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbnMgU3VibWl0dGVkPHNwYW4gY2xhc3M9ImZhIGFycm93Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdi1zZWNvbmQtbGV2ZWwgY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTIxJTJmMDQlMmYyMDI1JkRhdGVUbz0yMiUyZjA0JTJmMjAyNSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPlRoaXMgV2VlazwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MTMlMmYwNCUyZjIwMjUmRGF0ZVRvPTE5JTJmMDQlMmYyMDI1JkRhdGVUeXBlPTEmUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBXZWVrPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDQlMmYyMDI1JkRhdGVUbz0yMiUyZjA0JTJmMjAyNSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPlRoaXMgTW9udGg8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTElMmYwMyUyZjIwMjUmRGF0ZVRvPTMxJTJmMDMlMmYyMDI1JkRhdGVUeXBlPTEmUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjdGl2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbnMgRGV0ZXJtaW5lZDxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXYtc2Vjb25kLWxldmVsIGNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0yMSUyZjA0JTJmMjAyNSZEYXRlVG89MjIlMmYwNCUyZjIwMjUmRGF0ZVR5cGU9MiZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9VHJ1ZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPlRoaXMgV2VlazwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MTMlMmYwNCUyZjIwMjUmRGF0ZVRvPTE5JTJmMDQlMmYyMDI1JkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5MYXN0IFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTElMmYwNCUyZjIwMjUmRGF0ZVRvPTIyJTJmMDQlMmYyMDI1JkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIE1vbnRoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDMlMmYyMDI1JkRhdGVUbz0zMSUyZjAzJTJmMjAyNSZEYXRlVHlwZT0yJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1UcnVlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8IS0tIC8uc2lkZWJhci1jb2xsYXBzZSAtLT4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8ubmF2YmFyLXN0YXRpYy1zaWRlIC0tPg0KICAgICAgICAgICAgPC9uYXY+DQogICAgICAgICAgICA8ZGl2IGlkPSJwYWdlLXdyYXBwZXIiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+DQogICAgICAgICAgICAgICAgICAgIA0KDQoNCiAgICA8ZGl2IGNsYXNzPSJwYWdlLWhlYWRlciI+DQogICAgICAgIDxoMj5BcHBsaWNhdGlvbjogT2NjdXBhdGlvbiBDZXJ0aWZpY2F0ZSAoMTIuMjAxOS4zMzAuMSk8L2gyPg0KICAgIDwvZGl2Pg0KICAgIDxoND5EZXRhaWxlZCBpbmZvcm1hdGlvbiByZWxhdGVkIHRvIHRoZSBhcHBsaWNhdGlvbjo8L2g0Pg0KICAgIDxiciAvPg0KICAgIDxkaXY+DQogICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6c2hvd0FsbCgpOyI+U2hvdyBBbGw8L2E+IC8NCiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDpoaWRlQWxsKCk7Ij5IaWRlIEFsbDwvYT4NCiAgICA8L2Rpdj4NCiAgICA8ZGl2IGlkPSJhcHBsaWNhdGlvbiI+DQoNCiAgICAgICAgICAgIDxoMyBpZD0iZGV0YWlscyI+PGEgaHJlZj0iIyI+RGV0YWlsczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+RGVzY3JpcHRpb246IDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJkZXNjcmlwdGlvbiI+RHdlbGxpbmc8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+U3VibWl0dGVkIERhdGU6IDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMDgvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+QXBwbGljYXRpb24gVHlwZTogPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+T2NjdXBhdGlvbiBDZXJ0aWZpY2F0ZTwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJwcm9wZXJ0aWVzIj48YSBocmVmPSIjIj5Qcm9wZXJ0aWVzPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBpZD0icHJvcGVydHktbGlzdCI+MTggSm9obiBQaGlsbGlwIERyLCBCb25ueSBIaWxscyBOU1cgMjQ0NSAgKExPVDogMjkgRFA6IDc5MTk5Nik8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0icGVvcGxlIj48YSBocmVmPSIjIj5QZW9wbGU8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcHBsaWNhbnQ6IE1vemVsZXkgJmFtcDsgRG9kZHMgQ29uc3RydWN0aW9ucyBQdHkgTHRkIA0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE93bmVyIGF0IExvZGdlbWVudDogS2VpdGggSG9nYW4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPd25lciBhdCBMb2RnZW1lbnQ6IFN1emFubmUgSG9nYW4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQQ0EgUHJpbmNpcGFsIENlcnRpZnlpbmcgQXV0aG9yaXR5OiBQb3J0IE1hY3F1YXJpZS1IYXN0aW5ncyBDb3VuY2lsIA0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0ib2ZmaWNlciI+PGEgaHJlZj0iIyI+T2ZmaWNlcjwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9Im9mZmljZXJOYW1lIj5Sb3NzIEZyYXppZXI8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0iZGVjaXNpb24iPjxhIGhyZWY9IiMiPkRlY2lzaW9uPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5BcHBsaWNhdGlvbiBTdGF0dXM6IERldGVybWluZWQ8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERldGVybWluYXRpb24gRGF0ZToNCjA5LzA3LzIwMjAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+RGV0ZXJtaW5hdGlvbiBUeXBlOiBBcHByb3ZlZCAtIENvdW5jaWwgU3RhZmY8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0iZXN0aW1hdGVkQ29zdCI+PGEgaHJlZj0iIyI+RXN0aW1hdGVkIENvc3Q8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPiQ0NTEsMDAwLjAwPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9InRyYWNraW5nIj48YSBocmVmPSIjIj5UcmFja2luZzwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaWNvbi13cmFwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPnN3aXBlIHRhYmxlIHRvIHRoZSBsZWZ0IHRvIHJldmVhbCBtb3JlIGRhdGE8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1hcnJvdy1yaWdodCIgYXJpYS1oaWRkZW49InRydWUiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtc3RyaXBlZCB0YWJsZS1ib3JkZXJlZCBuby1mb290ZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkRlc2NyaXB0aW9uPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkNvbW1lbmNlZCBEYXRlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkNvbXBsZXRlZCBEYXRlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlBvc3RpbmctRGV0ZXJtaW5hdGlvbiBJc3N1ZWQ8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMDkvMDcvMjAyMCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjA5LzA3LzIwMjAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQoNCg0KDQoNCiAgICAgICAgICAgIDxoMyBpZD0icmVsYXRlZEFwcGxpY2F0aW9ucyI+PGEgaHJlZj0iIyI+UmVsYXRlZCBBcHBsaWNhdGlvbnM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24td3JhcCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5zd2lwZSB0YWJsZSB0byB0aGUgbGVmdCB0byByZXZlYWwgbW9yZSBkYXRhPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tYXJyb3ctcmlnaHQiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtYm9yZGVyZWQgbm8tZm9vdGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5BcHBsaWNhdGlvbiBUeXBlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkFwcGxpY2F0aW9uIE51bWJlcjwvdGg+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERldmVsb3BtZW50IEFwcGxpY2F0aW9uDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZGF0cmFja2VyLnBtaGMubnN3Lmdvdi5hdS9BcHBsaWNhdGlvbi9BcHBsaWNhdGlvbkRldGFpbHMvMDEwLjIwMTkuMDAwMDAzMzAuMDAxLyI+MTAuMjAxOS4zMzAuMTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvbnN0cnVjdGlvbiBDZXJ0aWZpY2F0ZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2RhdHJhY2tlci5wbWhjLm5zdy5nb3YuYXUvQXBwbGljYXRpb24vQXBwbGljYXRpb25EZXRhaWxzLzAxMS4yMDE5LjAwMDAwMzMwLjAwMS8iPjExLjIwMTkuMzMwLjE8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTZWN0aW9uIDY4ICg2ODApDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZGF0cmFja2VyLnBtaGMubnN3Lmdvdi5hdS9BcHBsaWNhdGlvbi9BcHBsaWNhdGlvbkRldGFpbHMvNjgwLjIwMTkuMDAwMDAzMzAuMDAxLyI+NjgwLjIwMTkuMzMwLjE8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTZWN0aW9uIDEzOA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2RhdHJhY2tlci5wbWhjLm5zdy5nb3YuYXUvQXBwbGljYXRpb24vQXBwbGljYXRpb25EZXRhaWxzLzcxMC4yMDE5LjAwMDAwMzMwLjAwMS8iPjcxMC4yMDE5LjMzMC4xPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCg0KICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCg0KDQoNCg0KDQoNCjxoMyBpZD0iZG9jdW1lbnRzIj48YSBocmVmPSIjIj5Eb2N1bWVudHM8L2E+PC9oMz4NCjxkaXY+DQoNCiAgICAgICAgPGRpdiBjbGFzcz0iaWNvbi13cmFwIj4NCiAgICAgICAgICAgIDxzcGFuPnN3aXBlIHRhYmxlIHRvIHRoZSBsZWZ0IHRvIHJldmVhbCBtb3JlIGRhdGE8L3NwYW4+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1hcnJvdy1yaWdodCIgYXJpYS1oaWRkZW49InRydWUiPjwvc3Bhbj4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgaWQ9ImRvYy1jb3VudCI+VG90YWwgbnVtYmVyIG9mIGRvY3VtZW50czogMTwvZGl2Pg0KICAgICAgICA8dGFibGUgaWQ9ImRvYy10YWJsZSIgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtYm9yZGVyZWQgbm8tZm9vdGVyIj4NCiAgICAgICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0aD5SZWNvcmQgTnVtYmVyPC90aD4NCiAgICAgICAgICAgICAgICAgICAgPHRoPkRlc2NyaXB0aW9uPC90aD4NCiAgICAgICAgICAgICAgICAgICAgPHRoPkRvY3VtZW50IFR5cGU8L3RoPg0KICAgICAgICAgICAgICAgICAgICA8dGg+U2l6ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgIDx0aD5WaWV3IExpbms8L3RoPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICA8L3RoZWFkPg0KICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KRDIwMjAvMTc0OTA2ICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+RmluYWwgT2NjdXBhdGlvbiBDZXJ0aWZpY2F0ZSAtIDE4IEpvaG4gUGhpbGxpcCBEcml2ZSBCT05OWSBISUxMUyAtIE1vemVsZXkgJmFtcDsgRG9kZHMgQ29uc3RydWN0aW9ucyBQdHkgTHRkIDEwMzY5PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgUERGDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLjU0IE1CDQoNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHJvbGU9ImJ1dHRvbiIgaHJlZj0iaHR0cHM6Ly9kYXRyYWNrZXIucG1oYy5uc3cuZ292LmF1L0RvY3VtZW50L0Rvd25sb2FkP2tleT10TWxWQjFDcWFzaz0mYW1wO2ZpbGVOYW1lPUZpbmFsK09jY3VwYXRpb24rQ2VydGlmaWNhdGUrLSsxOCtKb2huK1BoaWxsaXArRHJpdmUrQk9OTlkrSElMTFMrLStNb3plbGV5KyUyNitEb2RkcytDb25zdHJ1Y3Rpb25zK1B0eStMdGQrMTAzNjkuUERGIiB0YXJnZXQ9Il9ibGFuayI+VmlldzwvYT48L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQoNCiAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgIDwvdGFibGU+DQo8L2Rpdj4NCg0KDQogICAgICAgICAgICA8aDMgaWQ9ImNvbnRhY3RVcyI+PGEgaHJlZj0iIyI+Q29udGFjdCBVczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQo8cD5UbyBtYWtlIGVucXVpcmllcyByZWdhcmRpbmcgYXBwbGljYXRpb25zIGRpc3BsYXllZCBoZXJlLCBjb250YWN0IHVzIGJ5IG9uZSBvZiB0aGUgZm9sbG93aW5nIG1ldGhvZHM6PC9wPg0KDQo8dWw+DQoJPGxpPmJ5IGVtYWlsIDxhIHN0eWxlPSJjb2xvcjogYmx1ZSIgaHJlZj0ibWFpbHRvOmNvdW5jaWxAcG1oYy5uc3cuZ292LmF1P3N1YmplY3Q9RW5xdWlyeSBmb3IgYXBwbGljYXRpb24gMTIuMjAxOS4zMzAuMSI+Y291bmNpbEBwbWhjLm5zdy5nb3YuYXU8L2E+LCA8L2xpPg0KCTxsaT5pbiB3cml0aW5nIHRvIFBPIEJveCA4NCBQb3J0IE1hY3F1YXJpZSBOU1cgMjQ0NC4gQWxsIGNvcnJlc3BvbmRlbmNlIHNob3VsZCBiZSBhZGRyZXNzZWQgdG8gdGhlIENoaWVmIEV4ZWN1dGl2ZSBPZmZpY2VyIChDRU8pIGFuZCBxdW90ZSB0aGUgcmVsZXZhbnQgYXBwbGljYXRpb24gcmVmZXJlbmNlIG51bWJlci48L2xpPg0KCTxsaT5ieSBjb250YWN0aW5nIHRoZSBhc3Nlc3Npbmcgb2ZmaWNlciAobm90ZWQgaW4gdGhlIG9mZmljZXIgc2VjdGlvbiBhYm92ZSkgYnkgcGhvbmluZyBDdXN0b21lciBTZXJ2aWNlIENlbnRyZSBvbiAoMDIpIDY1ODEgODExMSBkdXJpbmcgbm9ybWFsIG9mZmljZSBob3VycyAoTW9uZGF5IHRvIEZyaWRheSwgOC4zMGFtIHRvIDQuMzBwbSkuPC9saT4NCjwvdWw+DQo8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0ibm90aWZpZWRBZGRyZXNzZXMiPjxhIGhyZWY9IiMiPk5vdGlmaWVkIEFkZHJlc3NlczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgPGI+Tm8gZGF0YS48L2I+DQogICAgICAgICAgICA8L2Rpdj4NCg0KPGgzIGlkPSJnb29nbGVtYXBzIj48YSBocmVmPSIjIj5Hb29nbGUgTWFwczwvYT48L2gzPg0KPGRpdiBpZD0ibWFwX2NvbnRhaW5lciI+DQogICAgPGRpdiBpZD0ibWFwX2NhbnZhcyIgY2xhc3M9ImlmcmFtZS1yd2QiPg0KICAgIDwvZGl2Pg0KPC9kaXY+DQoNCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCg0KICAgIHdpbmRvdy5vbmxvYWQgPSBsb2FkR29vZ2xlTWFwc1NjcmlwdDsNCg0KICAgIHZhciBnZW9jb2RlcjsNCiAgICB2YXIgbWFwOw0KICAgIHZhciB0aW1lb3V0ID0gMzAwOw0KICAgIHZhciBwcm9wZXJ0aWVzID0gWyIxOCBKb2huIFBoaWxsaXAgRHIsIEJvbm55IEhpbGxzIE5TVyAyNDQ1ICJdOw0KICAgIHZhciBsYXRMbmdBcnIgPSBbXTsNCg0KICAgIGZ1bmN0aW9uIGxvYWRHb29nbGVNYXBzU2NyaXB0KCkgew0KICAgICAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7DQogICAgICAgIHNjcmlwdC50eXBlID0gInRleHQvamF2YXNjcmlwdCI7DQogICAgICAgIHNjcmlwdC5zcmMgPSAiLy9tYXBzLmdvb2dsZWFwaXMuY29tL21hcHMvYXBpL2pzP2tleT1BSXphU3lCVnRhRzRZalh3ZmdOanRDbHpxTmNTeUdQT19jS01FUk0mY2FsbGJhY2s9bG9hZEdvb2dsZU1hcHMiOw0KICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gcmVuZGVyR29vZ2xlTWFwcygpDQogICAgew0KICAgICAgICB2YXIgbWFwT3B0aW9ucyA9IHsNCiAgICAgICAgICAgIGNlbnRlcjogbGF0TG5nQXJyWzBdLA0KICAgICAgICAgICAgem9vbTogMTYsDQogICAgICAgICAgICBtYXBUeXBlSWQ6IGdvb2dsZS5tYXBzLk1hcFR5cGVJZC5ST0FETUFQLA0KICAgICAgICAgICAgbWFwVHlwZUNvbnRyb2w6IGZhbHNlDQogICAgICAgIH0NCg0KICAgICAgICBtYXAgPSBuZXcgZ29vZ2xlLm1hcHMuTWFwKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtYXBfY2FudmFzIiksIG1hcE9wdGlvbnMpOw0KDQogICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZERvbUxpc3RlbmVyKHdpbmRvdywgJ3Jlc2l6ZScsIGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgdmFyIGNlbnRlciA9IG1hcC5nZXRDZW50ZXIoKTsNCiAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LnRyaWdnZXIobWFwLCAncmVzaXplJyk7DQogICAgICAgICAgICBtYXAuc2V0Q2VudGVyKGNlbnRlcik7DQogICAgICAgIH0pOw0KDQogICAgfQ0KDQogICAgZnVuY3Rpb24gbG9hZEdvb2dsZU1hcHMoKSB7DQogICAgICAgIGdlb2NvZGVyID0gbmV3IGdvb2dsZS5tYXBzLkdlb2NvZGVyKCk7DQogICAgICAgIHZhciBub09mRmFpbGVkTG9jYXRpb25TZWFyY2ggPSAwOw0KDQogICAgICAgICQocHJvcGVydGllcykuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHsNCiAgICAgICAgICAgIHZhciBwcm9wZXJ0eUFkZHJlc3MgPSBlbGVtZW50Ow0KDQogICAgICAgICAgICAvL0dldCBnZW9jb2RlDQogICAgICAgICAgICBnZW9jb2Rlci5nZW9jb2RlKHsgJ2FkZHJlc3MnOiBwcm9wZXJ0eUFkZHJlc3MgfSwgZnVuY3Rpb24gKHJlc3VsdHMsIHN0YXR1cykgew0KICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgPT0gZ29vZ2xlLm1hcHMuR2VvY29kZXJTdGF0dXMuT0spIHsNCg0KICAgICAgICAgICAgICAgICAgICB2YXIgbG9jYXRpb24gPSByZXN1bHRzWzBdLmdlb21ldHJ5LmxvY2F0aW9uOw0KICAgICAgICAgICAgICAgICAgICB2YXIgbGF0TG5nID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhsb2NhdGlvbi5sYXQoKSwgbG9jYXRpb24ubG5nKCkpOw0KDQogICAgICAgICAgICAgICAgICAgIGxhdExuZ0Fyci5wdXNoKGxhdExuZyk7DQoNCiAgICAgICAgICAgICAgICAgICAgaWYobGF0TG5nQXJyLmxlbmd0aCA9PSAxKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJHb29nbGVNYXBzKCk7DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAvL0NyZWF0ZSBtYXJrZXIgZm9yIG1hcCBhbmQgcGxhY2UgaXQgb24gdGhlIG1hcA0KICAgICAgICAgICAgICAgICAgICB2YXIgbWFya2VyID0gbmV3IGdvb2dsZS5tYXBzLk1hcmtlcih7DQogICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogbGF0TG5nLA0KICAgICAgICAgICAgICAgICAgICAgICAgbWFwOiBtYXANCiAgICAgICAgICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRlbnRTdHJpbmcgPSAnPGRpdj48c3Bhbj4nICsgcHJvcGVydHlBZGRyZXNzICsgJzwvc3Bhbj48L2Rpdj4nOw0KICAgICAgICAgICAgICAgICAgICB2YXIgaW5mb3dpbmRvdyA9IG5ldyBnb29nbGUubWFwcy5JbmZvV2luZG93KHsgICAvL0NyZWF0ZSBpbmZvIHdpbmRvdw0KICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogY29udGVudFN0cmluZw0KICAgICAgICAgICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcihtYXJrZXIsICdjbGljaycsIGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgaW5mb3dpbmRvdy5vcGVuKG1hcCwgbWFya2VyKTsNCiAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIC8vaWYgbm8gbG9jYXRpb24gZm91bmQgYnkgZ29vZ2xlIGZvciBhIHByb3BlcnR5DQogICAgICAgICAgICAgICAgZWxzZSBpZiAoc3RhdHVzID09ICJaRVJPX1JFU1VMVFMiKSB7DQogICAgICAgICAgICAgICAgICAgIG5vT2ZGYWlsZWRMb2NhdGlvblNlYXJjaCsrOw0KDQogICAgICAgICAgICAgICAgICAgIGlmKG5vT2ZGYWlsZWRMb2NhdGlvblNlYXJjaCA9PSAkKHByb3BlcnRpZXMpLmxlbmd0aCkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZUdvb2dsZU1hcHNDb250ZW50KCk7DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdHVzID09IGdvb2dsZS5tYXBzLkdlb2NvZGVyU3RhdHVzLk9WRVJfUVVFUllfTElNSVQpIHsNCiAgICAgICAgICAgICAgICAgICAgLy9zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgZ2V0R2VvQ29kZUZvckFkZHJlc3MoaWQsIGFkZHJlc3MpOyB9LCAodGltZW91dCkpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICAvL1JlcGxhY2VzIGdvb2dsZSBtYXBzIGNvbnRlbnQgd2l0aCBhIG5ldyBkaXYgYmxvY2sgdGhhdCBoYXMgaW5mbyBtZXNzYWdlDQogICAgZnVuY3Rpb24gcmVwbGFjZUdvb2dsZU1hcHNDb250ZW50KCkgew0KICAgICAgICB2YXIgbmV3Q29udGVudCA9ICc8ZGl2IGNsYXNzPSJ1aS1hY2NvcmRpb24tY29udGVudCB1aS1oZWxwZXItcmVzZXQgdWktd2lkZ2V0LWNvbnRlbnQgdWktY29ybmVyLWJvdHRvbSI+JyArDQogICAgICAgICAgICAnPHA+Q291bGRuXCd0IGZpbmQgdGhlIHByb3BlcnR5IGFkZHJlc3MoZXMpIG9uIEdvb2dsZSBNYXBzLiA8cD4nICsNCiAgICAgICAgICAgICc8L2Rpdj4nOw0KDQogICAgICAgICQoJyNtYXBfY29udGFpbmVyJykucmVwbGFjZVdpdGgobmV3Q29udGVudCk7DQogICAgfQ0KDQo8L3NjcmlwdD4NCg0KICAgIDwvZGl2Pg0KICAgIDxkaXYgY2xhc3M9Im1vZGFsIGZhZGUiIGlkPSJzdWJtaXNzaW9uLW1vZGFsIj4NCiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InNwaW5uZXIiPjwvZGl2PiA8IS0tIFRoaXMgZGl2IGhvc3RzIHRoZSBzcGlubmVyIC0tPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgZGF0YS1kaXNtaXNzPSJtb2RhbCIgYXJpYS1sYWJlbD0iQ2xvc2UiPjxzcGFuIGFyaWEtaGlkZGVuPSJ0cnVlIj4mdGltZXM7PC9zcGFuPjwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9Im1vZGFsLXRpdGxlIj5TdWJtaXNzaW9uIGZvciAxMi4yMDE5LjMzMC4xPC9oMj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+DQoNCiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7DQoNCiAgICAgICAgJCgnI2FwcGxpY2F0aW9uJykudG9nZ2xlcGFuZWxzKCk7DQoNCiAgICAgICAgICAgICQoJyNwcm9wZXJ0aWVzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNkZXRhaWxzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyN0cmFja2luZycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjZG9jdW1lbnRzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNyZWxhdGVkQXBwbGljYXRpb25zJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNnb29nbGVtYXBzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNjb250YWN0VXMnKS5jbGljaygpOw0KDQogICAgICAgIA0KDQoNCiAgICAgICAgJCgnI3N1Ym1pc3Npb24tYnRuJykuY2xpY2soZnVuY3Rpb24gKCkgeyAgICAgICAgDQoNCg0KICAgICAgICAgICAgdmFyIHVybCA9ICJodHRwczovL2RhdHJhY2tlci5wbWhjLm5zdy5nb3YuYXUvL0FwcGxpY2F0aW9uL1N1Ym1pc3Npb24vIiArIGVuY29kZVVSSSgiMTIuMjAxOS4zMzAuMSIpOw0KDQogICAgICAgICAgICAkKCcjc3VibWlzc2lvbi1tb2RhbCcpLm1vZGFsKCdzaG93JykuZmluZCgnLm1vZGFsLWJvZHknKS5sb2FkKHVybCk7DQogICAgICAgIH0pOw0KICAgIH0pOw0KDQoNCiAgICAvKiBTaG93cyBhbGwgdGhlIHBhbmVscyAqLw0KICAgIGZ1bmN0aW9uIHNob3dBbGwoKSB7DQogICAgICAgICQoJyNhcHBsaWNhdGlvbicpLmNoaWxkcmVuKCJoMyIpLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoInVpLXN0YXRlLWRlZmF1bHQiKSkgew0KICAgICAgICAgICAgICAgICQodGhpcykuY2xpY2soKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSk7DQogICAgfQ0KDQoNCiAgICAvKiBIaWRlIGFsbCB0aGUgcGFuZWxzICovDQogICAgZnVuY3Rpb24gaGlkZUFsbCgpIHsNCiAgICAgICAgJCgnI2FwcGxpY2F0aW9uJykuY2hpbGRyZW4oImgzIikuZWFjaChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcygidWktc3RhdGUtYWN0aXZlIikpIHsNCiAgICAgICAgICAgICAgICAkKHRoaXMpLmNsaWNrKCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0pOw0KICAgIH0NCg0KICAgIDwvc2NyaXB0Pg0KDQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPCEtLSAvLmNvbnRhaW5lci1mbHVpZCAtLT4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGZvb3RlciBjbGFzcz0iZm9vdGVyIGdyaWQiPg0KICAgICAgICAgICAgPGRpdiA+DQogICAgICAgICAgICAgICAgwqkgUG9ydCBNYWNxdWFyaWUgSGFzdGluZ3MgQ291bmNpbA0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZm9vdGVyPg0KICAgIDwvZGl2Pg0KPC9ib2R5Pg0KPC9odG1sPg0K
  recorded_at: Mon, 21 Apr 2025 18:28:37 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Application/ApplicationDetails/012.2019.00000330.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=4guhs3omtcgi2w1baj0eipoj; User=accessAllowed-MasterView=True
      Host:
      - datracker.pmhc.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:28:47 GMT
      Content-Length:
      - '31767'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:28:47 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Application/ApplicationDetails/710.2019.00000286.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - datracker.pmhc.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 302
      message: Found
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Home/Disclaimer"
      Server:
      - Microsoft-IIS/8.5
      Set-Cookie:
      - ASP.NET_SessionId=x3oyqxlgbsuigu3gmbkh0iqq; path=/; HttpOnly; SameSite=Lax
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:28:47 GMT
      Content-Length:
      - '133'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Home/Disclaimer\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:28:47 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Home/Disclaimer
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=x3oyqxlgbsuigu3gmbkh0iqq
      Host:
      - datracker.pmhc.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:28:47 GMT
      Content-Length:
      - '19685'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:28:48 GMT
- request:
    method: post
    uri: https://datracker.pmhc.nsw.gov.au/home/disclaimerprocessing
    body:
      encoding: UTF-8
      string: agreed=true
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=x3oyqxlgbsuigu3gmbkh0iqq
      Host:
      - datracker.pmhc.nsw.gov.au
      Referer:
      - https://datracker.pmhc.nsw.gov.au/Home/Disclaimer
      Content-Type:
      - application/x-www-form-urlencoded
      Content-Length:
      - '11'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Application/ApplicationDetails/710.2019.00000286.001"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      Set-Cookie:
      - User=accessAllowed-MasterView=True; path=/
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:28:47 GMT
      Content-Length:
      - '170'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Application/ApplicationDetails/710.2019.00000286.001\">here</a>.</h2>\r\n</body></html>\r\n"
  recorded_at: Mon, 21 Apr 2025 18:28:48 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Application/ApplicationDetails/710.2019.00000286.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=x3oyqxlgbsuigu3gmbkh0iqq; User=accessAllowed-MasterView=True
      Host:
      - datracker.pmhc.nsw.gov.au
      Referer:
      - https://datracker.pmhc.nsw.gov.au/Home/Disclaimer
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:28:57 GMT
      Content-Length:
      - '30683'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:28:57 GMT
- request:
    method: get
    uri: https://datracker.pmhc.nsw.gov.au/Application/ApplicationDetails/710.2019.00000286.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.7 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=x3oyqxlgbsuigu3gmbkh0iqq; User=accessAllowed-MasterView=True
      Host:
      - datracker.pmhc.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Mon, 21 Apr 2025 18:29:07 GMT
      Content-Length:
      - '30683'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 21 Apr 2025 18:29:07 GMT
recorded_with: VCR 6.0.0
